
nios_with_vga_RTOS.elf:     file format elf32-littlenios2
nios_with_vga_RTOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00034fa4 memsz 0x00034fa4 flags r-x
    LOAD off    0x00035fc4 vaddr 0x00034fc4 paddr 0x00036b3c align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x000386b4 vaddr 0x000386b4 paddr 0x000386b4 align 2**12
         filesz 0x00000000 memsz 0x000043f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001742c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001d954  00017670  00017670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  00034fc4  00036b3c  00035fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000043f0  000386b4  000386b4  000386b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0003caa4  0003caa4  00037b3c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00037b3c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ff8  00000000  00000000  00037b60  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002caae  00000000  00000000  00038b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a92d  00000000  00000000  00065606  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d9ff  00000000  00000000  0006ff33  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003078  00000000  00000000  0007d934  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000048f6  00000000  00000000  000809ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017868  00000000  00000000  000852a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0009cb0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018c0  00000000  00000000  0009cb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000a2daa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000a2db0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a2dbc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a2dbd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a2dbe  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a2dc2  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a2dc6  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000a2dca  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000a2dd5  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000a2de0  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000017  00000000  00000000  000a2deb  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000046  00000000  00000000  000a2e02  2**0
                  CONTENTS, READONLY
 29 .jdi          00006944  00000000  00000000  000a2e48  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003d951  00000000  00000000  000a978c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00017670 l    d  .rodata	00000000 .rodata
00034fc4 l    d  .rwdata	00000000 .rwdata
000386b4 l    d  .bss	00000000 .bss
0003caa4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_with_vga_RTOS_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00034be6 l     O .rodata	00000010 zeroes.4404
00002b2c l     F .text	000000bc __sbprintf
00034bf6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002d3c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000486c l     F .text	00000008 __fp_unlock
00004880 l     F .text	0000019c __sinit.part.1
00004a1c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00034fc4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00035408 l     O .rwdata	00000020 lc_ctype_charset
000353e8 l     O .rwdata	00000020 lc_message_charset
00035428 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00034c28 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007e18 l     F .text	000000fc __sprint_r.part.0
00034d5c l     O .rodata	00000010 blanks.4348
00034d4c l     O .rodata	00000010 zeroes.4349
000093a4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ceac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cfb8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cfe4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d0d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d1b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d29c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d468 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00036ab0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d6b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00036ab4 l     O .rwdata	00000004 lockid
000386e8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00036ab8 l     O .rwdata	00000004 lockid
000386f0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f0e4 l     F .text	00000048 OS_InitMisc
0000f12c l     F .text	0000006c OS_InitRdyList
0000f298 l     F .text	000000e4 OS_InitTCBList
0000f004 l     F .text	000000e0 OS_InitEventList
0000f198 l     F .text	00000080 OS_InitTaskIdle
0000f218 l     F .text	00000080 OS_InitTaskStat
0000f508 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011218 l     F .text	000000f4 OS_FlagTaskRdy
00010fd8 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000152bc l     F .text	00000034 alt_dev_reg
00035a10 l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00015620 l     F .text	000002a4 altera_avalon_jtag_uart_irq
000158c4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016214 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016688 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000167c8 l     F .text	0000003c alt_get_errno
00016804 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00038754 g     O .bss	00000004 alt_instruction_exception_handler
0000745c g     F .text	00000074 _mprec_log10
00036b06 g     O .rwdata	00000002 OSTaskNameSize
00007548 g     F .text	0000008c __any_on
00009940 g     F .text	00000054 _isatty_r
00034c34 g     O .rodata	00000028 __mprec_tinytens
0000d3ac g     F .text	000000bc alt_main
000007ac g     F .text	000000c0 _puts_r
0003c9a4 g     O .bss	00000100 alt_irq
00009994 g     F .text	00000060 _lseek_r
00011a38 g     F .text	000000cc OS_MemInit
00036b3c g       *ABS*	00000000 __flash_rwdata_start
0001525c g     F .text	00000060 OSTimeSet
0000b9d8 g     F .text	00000088 .hidden __eqdf2
0000dd58 g     F .text	00000610 OSEventPendMulti
0003caa4 g       *ABS*	00000000 __alt_heap_start
00016e10 g     F .text	00000024 OSTaskCreateHook
00038780 g     O .bss	00000800 task1_stk
00000770 g     F .text	0000003c printf
00036ade g     O .rwdata	00000002 OSMboxEn
0000e3c0 g     F .text	0000004c OSIntEnter
00009bac g     F .text	0000009c _wcrtomb_r
00007cd8 g     F .text	0000005c __sseek
00004bbc g     F .text	00000010 __sinit
00009a54 g     F .text	00000140 __swbuf_r
00036aee g     O .rwdata	00000002 OSQEn
00005684 g     F .text	0000007c _setlocale_r
00004a24 g     F .text	00000068 __sfmoreglue
0000da2c g     F .text	000000cc __malloc_unlock
00016e78 g     F .text	00000020 OSTaskStatHook
000386f8 g     O .bss	00000001 OSLockNesting
00036b2c g     O .rwdata	00000002 OSDataSize
000386f9 g     O .bss	00000001 OSRunning
00006354 g     F .text	0000015c memmove
00016eb8 g     F .text	00000020 OSInitHookBegin
00036b24 g     O .rwdata	00000002 OSTmrSize
00004ba4 g     F .text	00000018 _cleanup
000065d8 g     F .text	000000a8 _Balloc
000386fc g     O .bss	00000004 OSIdleCtr
0000ba60 g     F .text	000000dc .hidden __gtdf2
00016bc0 g     F .text	00000024 altera_nios2_gen2_irq_init
00016c90 g       .text	00000000 OSStartTsk
0000f838 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00036b2a g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00036aca g     O .rwdata	00000002 OSEventSize
00038700 g     O .bss	00000001 OSPrioHighRdy
000098e4 g     F .text	0000005c _fstat_r
00016e34 g     F .text	00000024 OSTaskDelHook
000386d4 g     O .bss	00000004 errno
00007c54 g     F .text	00000008 __seofread
00016c70 g       .text	00000000 OSStartHighRdy
00013d04 g     F .text	000001e4 OSTaskCreateExt
00010b20 g     F .text	00000060 OSFlagPendGetFlagsRdy
00036b0a g     O .rwdata	00000002 OSTaskStatStkSize
0000fc9c g     F .text	00000308 OSFlagAccept
00012070 g     F .text	000000b8 OSQFlush
00011b04 g     F .text	00000140 OSQAccept
000386e0 g     O .bss	00000004 alt_argv
0003ea7c g       *ABS*	00000000 _gp
00013b58 g     F .text	000001ac OSTaskCreate
00013668 g     F .text	000004f0 OSTaskChangePrio
000386f4 g     O .bss	00000004 alt_heapsem
0000fb0c g     F .text	00000190 OSDebugInit
00013ee8 g     F .text	00000344 OSTaskDel
00035890 g     O .rwdata	00000180 alt_fd_list
00039780 g     O .bss	00000370 OSFlagTbl
0000ede4 g     F .text	000000b8 OS_EventTaskRemove
00016f3c g     F .text	00000090 alt_find_dev
0000620c g     F .text	00000148 memcpy
00036af4 g     O .rwdata	00000002 OSRdyTblSize
00004874 g     F .text	0000000c _cleanup_r
0000ccc4 g     F .text	000000dc .hidden __floatsidf
0001674c g     F .text	0000007c alt_io_redirect
0000bb3c g     F .text	000000f4 .hidden __ltdf2
00017670 g       *ABS*	00000000 __DTOR_END__
0000086c g     F .text	00000014 puts
00017240 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000daf8 g     F .text	00000120 OSEventNameGet
00036ad8 g     O .rwdata	00000002 OSFlagMax
00007b38 g     F .text	00000074 __fpclassifyd
000073b8 g     F .text	000000a4 __ratio
0000e40c g     F .text	000000f8 OSIntExit
00009388 g     F .text	0000001c __vfiprintf_internal
00036b12 g     O .rwdata	00000002 OSTCBSize
00038701 g     O .bss	00000001 OSPrioCur
00015b20 g     F .text	000002bc altera_avalon_jtag_uart_read
00000740 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000684 g     F .text	00000064 .hidden __udivsi3
0000d10c g     F .text	000000a4 isatty
00036af8 g     O .rwdata	00000002 OSStkWidth
00034c84 g     O .rodata	000000c8 __mprec_tens
00036aec g     O .rwdata	00000002 OSPtrSize
00005700 g     F .text	0000000c __locale_charset
00036acc g     O .rwdata	00000002 OSEventTblSize
00016be4 g       .text	00000000 OSCtxSw
000171b0 g     F .text	00000090 alt_icache_flush
000386d0 g     O .bss	00000004 __malloc_top_pad
00038704 g     O .bss	00000004 OSTCBList
000386d8 g     O .bss	00000004 alt_fd_list_lock
00036a88 g     O .rwdata	00000004 __mb_cur_max
00005730 g     F .text	0000000c _localeconv_r
000069e4 g     F .text	0000003c __i2b
00005040 g     F .text	000004bc __sfvwrite_r
00039af0 g     O .bss	00000c30 OSMemTbl
00038708 g     O .bss	00000001 OSTickStepState
00007bac g     F .text	00000054 _sbrk_r
00036af0 g     O .rwdata	00000002 OSQMax
0003a720 g     O .bss	00000800 OSTaskStatStk
00011674 g     F .text	000000f0 OSMemNameGet
00036ad0 g     O .rwdata	00000002 OSFlagEn
000099f4 g     F .text	00000060 _read_r
00036b16 g     O .rwdata	00000002 OSTimeTickHookEn
00012520 g     F .text	00000168 OSQPost
0001130c g     F .text	000000a4 OS_FlagUnlink
00036aa8 g     O .rwdata	00000004 alt_max_fd
0000f3d0 g     F .text	00000068 OS_MemCopy
0000f438 g     F .text	000000d0 OS_Sched
000095d8 g     F .text	000000f0 _fclose_r
00011584 g     F .text	000000f0 OSMemGet
00014514 g     F .text	000001b4 OSTaskNameSet
0000483c g     F .text	00000030 fflush
000386cc g     O .bss	00000004 __malloc_max_sbrked_mem
0003870c g     O .bss	00000004 OSCtxSwCtr
00016e98 g     F .text	00000020 OSTimeTickHook
00036ada g     O .rwdata	00000002 OSFlagNameSize
0000ee9c g     F .text	00000100 OS_EventTaskRemoveMulti
0000a844 g     F .text	000008ac .hidden __adddf3
0000ec94 g     F .text	00000150 OS_EventTaskWaitMulti
00007160 g     F .text	0000010c __b2d
00036af2 g     O .rwdata	00000002 OSQSize
0000a30c g     F .text	00000538 .hidden __umoddi3
0000d2d8 g     F .text	000000d4 lseek
00012fd0 g     F .text	0000020c OSSemPend
00036a80 g     O .rwdata	00000004 _global_impure_ptr
000075d4 g     F .text	00000564 _realloc_r
00036adc g     O .rwdata	00000002 OSLowestPrio
0003caa4 g       *ABS*	00000000 __bss_end
00016598 g     F .text	000000f0 alt_iic_isr_register
00016f18 g     F .text	00000024 OSTCBInitHook
00036b22 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00016ab8 g     F .text	00000108 alt_tick
00009d94 g     F .text	00000578 .hidden __udivdi3
00009840 g     F .text	00000024 _fputwc_r
00036ac4 g     O .rwdata	00000002 OSEventEn
00034c5c g     O .rodata	00000028 __mprec_bigtens
000067c8 g     F .text	00000104 __s2b
00036b1e g     O .rwdata	00000002 OSTmrCfgNameSize
0000cda0 g     F .text	000000a8 .hidden __floatunsidf
00006ea0 g     F .text	00000060 __mcmp
00004bdc g     F .text	00000018 __fp_lock_all
0001654c g     F .text	0000004c alt_ic_irq_enabled
00011138 g     F .text	000000e0 OS_FlagInit
00016a1c g     F .text	0000009c alt_alarm_stop
00036b00 g     O .rwdata	00000002 OSTaskIdleStkSize
00038748 g     O .bss	00000004 alt_irq_active
00012c08 g     F .text	000000b0 OSSemAccept
00011878 g     F .text	000000d8 OSMemPut
000113b0 g     F .text	000001d4 OSMemCreate
00038710 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
00035868 g     O .rwdata	00000028 alt_dev_null
00036b14 g     O .rwdata	00000002 OSTicksPerSec
00016be4 g       .text	00000000 OSIntCtxSw
000161cc g     F .text	00000048 alt_dcache_flush_all
000068cc g     F .text	00000068 __hi0bits
0000cc44 g     F .text	00000080 .hidden __fixdfsi
00038714 g     O .bss	00000004 OSTCBFreeList
00036b3c g       *ABS*	00000000 __ram_rwdata_end
000131dc g     F .text	0000016c OSSemPendAbort
00036aa0 g     O .rwdata	00000008 alt_dev_list
0000d6f0 g     F .text	000000f8 write
00036b18 g     O .rwdata	00000002 OSVersionNbr
00034fc4 g       *ABS*	00000000 __ram_rodata_end
0000d020 g     F .text	000000b0 fstat
0000bb3c g     F .text	000000f4 .hidden __ledf2
00036ac0 g     O .rwdata	00000004 OSEndiannessTest
00006c18 g     F .text	00000140 __pow5mult
00007f2c g     F .text	0000145c ___vfiprintf_internal_r
000386c4 g     O .bss	00000004 __nlocale_changed
000006e8 g     F .text	00000058 .hidden __umodsi3
000386b4 g     O .bss	00000004 button_flag
00036ad2 g     O .rwdata	00000002 OSFlagGrpSize
0003caa4 g       *ABS*	00000000 end
000154d8 g     F .text	00000148 altera_avalon_jtag_uart_init
0000f6a0 g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00017670 g       *ABS*	00000000 __CTOR_LIST__
0003d090 g       *ABS*	00000000 __alt_stack_pointer
0000ce48 g     F .text	00000064 .hidden __clzsi2
00015ddc g     F .text	000002c4 altera_avalon_jtag_uart_write
00004bcc g     F .text	00000004 __sfp_lock_acquire
00006128 g     F .text	000000e4 memchr
0000f37c g     F .text	00000054 OS_MemClr
00000918 g     F .text	000021f8 ___vfprintf_internal_r
00016cb4 g     F .text	0000015c OSTaskStkInit
00004d30 g     F .text	00000310 _free_r
0000570c g     F .text	00000010 __locale_mb_cur_max
0000e9ec g     F .text	00000198 OS_EventTaskRdy
000174bc g     F .text	00000180 __call_exitprocs
00038718 g     O .bss	00000001 OSCPUUsage
000386c0 g     O .bss	00000004 __mlocale_changed
00036a8c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
0003874c g     O .bss	00000004 _alt_tick_rate
00012128 g     F .text	0000028c OSQPend
00014dd4 g     F .text	00000104 OSTimeDly
00006d58 g     F .text	00000148 __lshift
00038750 g     O .bss	00000004 _alt_nticks
0000d4a4 g     F .text	000000fc read
00015328 g     F .text	0000004c alt_sys_init
000173a4 g     F .text	00000118 __register_exitproc
00038719 g     O .bss	00000001 OSTaskCtr
00014ed8 g     F .text	00000154 OSTimeDlyHMSM
00006a20 g     F .text	000001f8 __multiply
000159c8 g     F .text	00000068 altera_avalon_jtag_uart_close
00034fc4 g       *ABS*	00000000 __ram_rwdata_start
00017670 g       *ABS*	00000000 __ram_rodata_start
00038758 g     O .bss	00000028 __malloc_current_mallinfo
00036ac6 g     O .rwdata	00000002 OSEventMax
0000726c g     F .text	0000014c __d2b
00013348 g     F .text	00000110 OSSemPost
0000e590 g     F .text	000000dc OSSchedUnlock
00015374 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000170d4 g     F .text	000000dc alt_get_fd
0003871c g     O .bss	00000004 OSMemFreeList
0000e6dc g     F .text	000000b0 OSStatInit
00010f14 g     F .text	000000c4 OSFlagQuery
00036afc g     O .rwdata	00000002 OSTaskCreateExtEn
000094c0 g     F .text	00000054 _close_r
00000290 g     F .text	00000170 vga_task
00017328 g     F .text	0000007c memcmp
0000e9cc g     F .text	00000020 OS_Dummy
00015434 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0003caa4 g       *ABS*	00000000 __alt_stack_base
00015484 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002be8 g     F .text	00000154 __swsetup_r
0003af20 g     O .bss	000001e0 OSQTbl
0000b0f0 g     F .text	000008e8 .hidden __divdf3
00004a8c g     F .text	00000118 __sfp
000074d0 g     F .text	00000078 __copybits
00036a7c g     O .rwdata	00000004 zoom_amount
00035460 g     O .rwdata	00000408 __malloc_av_
00004bd8 g     F .text	00000004 __sinit_lock_release
00038720 g     O .bss	00000004 OSTCBHighRdy
0000bc30 g     F .text	00000718 .hidden __muldf3
00007c00 g     F .text	00000054 __sread
00038724 g     O .bss	00000004 OSQFreeList
00016fcc g     F .text	00000108 alt_find_file
00016250 g     F .text	000000a4 alt_dev_llist_insert
0000d90c g     F .text	00000120 __malloc_lock
0000d604 g     F .text	000000b0 sbrk
0000dc18 g     F .text	00000140 OSEventNameSet
000047e0 g     F .text	0000005c _fflush_r
00009514 g     F .text	000000c4 _calloc_r
00038728 g     O .bss	00000001 OSRdyGrp
000386b4 g       *ABS*	00000000 __bss_start
000064b0 g     F .text	00000128 memset
000004d4 g     F .text	000000b8 main
000386e4 g     O .bss	00000004 alt_envp
000386c8 g     O .bss	00000004 __malloc_max_total_mem
000153d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009b94 g     F .text	00000018 __swbuf
00034e8c g     O .rodata	00000100 OSUnMapTbl
00036af6 g     O .rwdata	00000002 OSSemEn
00010b80 g     F .text	00000394 OSFlagPost
00007d34 g     F .text	00000008 __sclose
0003d090 g       *ABS*	00000000 __alt_heap_limit
000096c8 g     F .text	00000014 fclose
0000eb84 g     F .text	00000110 OS_EventTaskWait
00038f80 g     O .bss	00000800 task2_stk
0000f76c g     F .text	000000cc OS_TaskStatStkChk
0001422c g     F .text	00000150 OSTaskDelReq
00002f3c g     F .text	00001688 _dtoa_r
0000591c g     F .text	0000080c _malloc_r
00009d08 g     F .text	00000030 __ascii_wctomb
00036aac g     O .rwdata	00000004 alt_errno
0000e66c g     F .text	00000070 OSStart
0000d8ac g     F .text	00000060 __env_unlock
000054fc g     F .text	000000c4 _fwalk
000146c8 g     F .text	000001d4 OSTaskResume
00011950 g     F .text	000000e8 OSMemQuery
00036b08 g     O .rwdata	00000002 OSTaskStatEn
00036ae2 g     O .rwdata	00000002 OSMemMax
00012688 g     F .text	00000170 OSQPostFront
0000058c g     F .text	00000084 .hidden __divsi3
00038729 g     O .bss	00000003 OSRdyTbl
00036abc g     O .rwdata	00000002 OSDebugEn
00004c0c g     F .text	00000124 _malloc_trim_r
00017670 g       *ABS*	00000000 __CTOR_END__
00036ad4 g     O .rwdata	00000002 OSFlagNodeSize
00036b1c g     O .rwdata	00000002 OSTmrCfgMax
00007d3c g     F .text	000000dc strcmp
00011c44 g     F .text	000001ac OSQCreate
0001437c g     F .text	00000198 OSTaskNameGet
00017670 g       *ABS*	00000000 __flash_rodata_start
000127f8 g     F .text	0000020c OSQPostOpt
0000e78c g     F .text	00000220 OSTimeTick
00036b04 g     O .rwdata	00000002 OSTaskMax
00017670 g       *ABS*	00000000 __DTOR_LIST__
00012cb8 g     F .text	000000d8 OSSemCreate
00036b28 g     O .rwdata	00000002 OSTmrWheelSize
0000b9d8 g     F .text	00000088 .hidden __nedf2
00036afe g     O .rwdata	00000002 OSTaskDelEn
00013458 g     F .text	00000110 OSSemQuery
00011df0 g     F .text	00000280 OSQDel
000123b4 g     F .text	0000016c OSQPendAbort
000152f0 g     F .text	00000038 alt_irq_init
0000d5a0 g     F .text	00000064 alt_release_fd
00034d6c g     O .rodata	00000100 .hidden __clz_tab
000386bc g     O .bss	00000004 _PathLocale
000172dc g     F .text	00000014 atexit
00009460 g     F .text	00000060 _write_r
0000e504 g     F .text	0000008c OSSchedLock
0000573c g     F .text	00000018 setlocale
0000ffa4 g     F .text	00000108 OSFlagCreate
00036a84 g     O .rwdata	00000004 _impure_ptr
000386dc g     O .bss	00000004 alt_argc
000045c4 g     F .text	0000021c __sflush_r
00016354 g     F .text	00000060 _do_dtors
00005728 g     F .text	00000008 __locale_cjk_lang
00036ace g     O .rwdata	00000002 OSEventMultiEn
00000400 g     F .text	000000d4 button_task
000100ac g     F .text	00000248 OSFlagDel
0003872c g     O .bss	00000004 OSEventFreeList
000386b8 g     O .bss	00000004 button_number
00000020 g       .exceptions	00000000 alt_irq_entry
000070fc g     F .text	00000064 __ulp
00010568 g     F .text	000005b8 OSFlagPend
00036b1a g     O .rwdata	00000002 OSTmrEn
00004bf4 g     F .text	00000018 __fp_unlock_all
00036a98 g     O .rwdata	00000008 alt_fs_list
0000f57c g     F .text	00000074 OS_StrCopy
00036ae4 g     O .rwdata	00000002 OSMemNameSize
00016ed8 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
00036b10 g     O .rwdata	00000002 OSTCBPrioTblMax
00005754 g     F .text	0000000c localeconv
00036b0c g     O .rwdata	00000002 OSTaskStatStkChkEn
000163e8 g     F .text	00000050 alt_ic_isr_register
00036ae0 g     O .rwdata	00000002 OSMemEn
00036aea g     O .rwdata	00000002 OSMutexEn
00036b3c g       *ABS*	00000000 _edata
0003caa4 g       *ABS*	00000000 _end
00038730 g     O .bss	00000001 OSIntNesting
000096dc g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00015a30 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001502c g     F .text	000001d4 OSTimeDlyResume
0001041c g     F .text	0000014c OSFlagNameSet
0001489c g     F .text	000001c0 OSTaskStkChk
000164c0 g     F .text	0000008c alt_ic_irq_disable
00036ae6 g     O .rwdata	00000002 OSMemSize
00007c5c g     F .text	0000007c __swrite
00036a90 g     O .rwdata	00000004 __malloc_trim_threshold
0000571c g     F .text	0000000c __locale_msgcharset
00038734 g     O .bss	00000004 OSTCBCur
000172f0 g     F .text	00000038 exit
00036ae8 g     O .rwdata	00000002 OSMemTblSize
000055c0 g     F .text	000000c4 _fwalk_reent
00006f00 g     F .text	000001fc __mdiff
00000610 g     F .text	00000074 .hidden __modsi3
0003d090 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004bd0 g     F .text	00000004 __sfp_lock_release
0000e368 g     F .text	00000058 OSInit
00014c40 g     F .text	00000124 OSTaskQuery
00012b60 g     F .text	000000a8 OS_QInit
0000f5f0 g     F .text	00000054 OS_StrLen
00011764 g     F .text	00000114 OSMemNameSet
00036b02 g     O .rwdata	00000002 OSTaskProfileEn
00038738 g     O .bss	00000004 OSTime
0003b100 g     O .bss	00000800 OSTaskIdleStk
0001763c g     F .text	00000034 _exit
000160a0 g     F .text	0000012c alt_alarm_start
000102f4 g     F .text	00000128 OSFlagNameGet
00015200 g     F .text	0000005c OSTimeGet
00005760 g     F .text	000001bc __smakebuf_r
00000880 g     F .text	00000098 strlen
00016e58 g     F .text	00000020 OSTaskSwHook
000168c8 g     F .text	00000154 open
0003b900 g     O .bss	00000b40 OSEventTbl
0000ba60 g     F .text	000000dc .hidden __gedf2
0003c440 g     O .bss	00000510 OSTCBTbl
00013568 g     F .text	00000100 OSSemSet
00036a94 g     O .rwdata	00000004 __wctomb
00007f14 g     F .text	00000018 __sprint_r
000163b4 g     F .text	00000034 alt_icache_flush_all
00036b30 g     O .rwdata	00000004 alt_priority_mask
00012d90 g     F .text	00000240 OSSemDel
0003873c g     O .bss	00000004 OSFlagFreeList
00016438 g     F .text	00000088 alt_ic_irq_enable
00036ac8 g     O .rwdata	00000002 OSEventNameSize
00002b10 g     F .text	0000001c __vfprintf_internal
00038740 g     O .bss	00000001 OSStatRdy
0003c950 g     O .bss	00000054 OSTCBPrioTbl
00009d38 g     F .text	0000005c _wctomb_r
0000d7e8 g     F .text	000000c4 __env_lock
00036b0e g     O .rwdata	00000002 OSTaskSwHookEn
0000c348 g     F .text	000008fc .hidden __subdf3
00006934 g     F .text	000000b0 __lo0bits
00036b34 g     O .rwdata	00000008 alt_alarm_list
00017670 g     O .rodata	0001d4c0 wallpapersden_com_forest_minimal_mountain_landscape_640x480
00036ad6 g     O .rwdata	00000002 OSFlagWidth
000162f4 g     F .text	00000060 _do_ctors
00009c48 g     F .text	000000c0 wcrtomb
0000cee8 g     F .text	000000d0 close
000386ec g     O .bss	00000004 alt_envsem
00038744 g     O .bss	00000004 OSIdleCtrRun
0000e9ac g     F .text	00000020 OSVersion
00036b20 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d218 g     F .text	00000084 alt_load
00014d64 g     F .text	00000070 OS_TaskStkClr
00036afa g     O .rwdata	00000002 OSTaskCreateEn
0000ef9c g     F .text	00000068 OS_EventWaitListInit
00009864 g     F .text	00000080 fputwc
00016ef8 g     F .text	00000020 OSTaskIdleHook
00004bd4 g     F .text	00000004 __sinit_lock_acquire
000066a8 g     F .text	00000120 __multadd
00014a5c g     F .text	000001e4 OSTaskSuspend
00006680 g     F .text	00000028 _Bfree
0000f644 g     F .text	0000005c OS_TaskIdle
00036b26 g     O .rwdata	00000002 OSTmrTblSize
00012a04 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000e3c00 	call	e3c0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800134 	movhi	r2,4
 140:	10b26904 	addi	r2,r2,-13916
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800134 	movhi	r2,4
 158:	10b26904 	addi	r2,r2,-13916
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	000e40c0 	call	e40c <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a73617 	ldw	r2,-25384(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a73617 	ldw	r2,-25384(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	def42414 	ori	sp,sp,53392
    movhi gp, %hi(_gp)
     25c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     260:	d6ba9f14 	ori	gp,gp,60028
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     268:	10a1ad14 	ori	r2,r2,34484

    movhi r3, %hi(__bss_end)
     26c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     270:	18f2a914 	ori	r3,r3,51876

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000d2180 	call	d218 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000d3ac0 	call	d3ac <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <alt_after_alt_main>

00000290 <vga_task>:
volatile int button_flag = 0;
int button_number = 0;
int zoom_amount = 1;

/* Prints "Hello World" and sleeps for three seconds */
void vga_task(void* pdata) {
     290:	defffa04 	addi	sp,sp,-24
     294:	dfc00515 	stw	ra,20(sp)
     298:	df000415 	stw	fp,16(sp)
     29c:	df000404 	addi	fp,sp,16
     2a0:	e13fff15 	stw	r4,-4(fp)
	printf("starting task vga\n");
     2a4:	010000f4 	movhi	r4,3
     2a8:	2112cc04 	addi	r4,r4,19248
     2ac:	000086c0 	call	86c <puts>
	while (1) {
		// get current pixel
//		printf("drawing\n");
		uint32_t pixel_reg = IORD(VGA_IMAGE_VIEWER_0_BASE, 0x01);
     2b0:	00800134 	movhi	r2,4
     2b4:	10840704 	addi	r2,r2,4124
     2b8:	10800037 	ldwio	r2,0(r2)
     2bc:	e0bffc15 	stw	r2,-16(fp)
		uint16_t pixel_y = pixel_reg & 0b00000000000000000000001111111111;
     2c0:	e0bffc17 	ldw	r2,-16(fp)
     2c4:	1080ffcc 	andi	r2,r2,1023
     2c8:	e0bffd0d 	sth	r2,-12(fp)
		uint16_t pixel_x = (pixel_reg & 0b00000000000011111111110000000000)
     2cc:	e0fffc17 	ldw	r3,-16(fp)
     2d0:	00800434 	movhi	r2,16
     2d4:	10bf0004 	addi	r2,r2,-1024
     2d8:	1884703a 	and	r2,r3,r2
				>> 10;
     2dc:	1004d2ba 	srli	r2,r2,10
	while (1) {
		// get current pixel
//		printf("drawing\n");
		uint32_t pixel_reg = IORD(VGA_IMAGE_VIEWER_0_BASE, 0x01);
		uint16_t pixel_y = pixel_reg & 0b00000000000000000000001111111111;
		uint16_t pixel_x = (pixel_reg & 0b00000000000011111111110000000000)
     2e0:	e0bffd8d 	sth	r2,-10(fp)
				>> 10;

		// resize
		pixel_y /= zoom_amount;
     2e4:	e0bffd0b 	ldhu	r2,-12(fp)
     2e8:	d0e00017 	ldw	r3,-32768(gp)
     2ec:	180b883a 	mov	r5,r3
     2f0:	1009883a 	mov	r4,r2
     2f4:	000058c0 	call	58c <__divsi3>
     2f8:	e0bffd0d 	sth	r2,-12(fp)
		pixel_x /= zoom_amount;
     2fc:	e0bffd8b 	ldhu	r2,-10(fp)
     300:	d0e00017 	ldw	r3,-32768(gp)
     304:	180b883a 	mov	r5,r3
     308:	1009883a 	mov	r4,r2
     30c:	000058c0 	call	58c <__divsi3>
     310:	e0bffd8d 	sth	r2,-10(fp)

		// print image from array.
		if (pixel_y < 200 && pixel_x < 200) {
     314:	e0bffd0b 	ldhu	r2,-12(fp)
     318:	10803228 	cmpgeui	r2,r2,200
     31c:	1000331e 	bne	r2,zero,3ec <vga_task+0x15c>
     320:	e0bffd8b 	ldhu	r2,-10(fp)
     324:	10803228 	cmpgeui	r2,r2,200
     328:	1000301e 	bne	r2,zero,3ec <vga_task+0x15c>
			uint32_t pixel =
					wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
							* 200 + pixel_x) * 3)]
     32c:	e0bffd0b 	ldhu	r2,-12(fp)
     330:	10c03224 	muli	r3,r2,200
     334:	e0bffd8b 	ldhu	r2,-10(fp)
     338:	1887883a 	add	r3,r3,r2
     33c:	1805883a 	mov	r2,r3
     340:	1085883a 	add	r2,r2,r2
     344:	10c7883a 	add	r3,r2,r3
		pixel_x /= zoom_amount;

		// print image from array.
		if (pixel_y < 200 && pixel_x < 200) {
			uint32_t pixel =
					wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
     348:	00800074 	movhi	r2,1
     34c:	109d9c04 	addi	r2,r2,30320
     350:	10c5883a 	add	r2,r2,r3
     354:	10800003 	ldbu	r2,0(r2)
							* 200 + pixel_x) * 3)]
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
     358:	11003fcc 	andi	r4,r2,255
									* 200 + pixel_x) * 3) + 1] << 8)
     35c:	e0bffd0b 	ldhu	r2,-12(fp)
     360:	10c03224 	muli	r3,r2,200
     364:	e0bffd8b 	ldhu	r2,-10(fp)
     368:	1887883a 	add	r3,r3,r2
     36c:	1805883a 	mov	r2,r3
     370:	1085883a 	add	r2,r2,r2
     374:	10c5883a 	add	r2,r2,r3
     378:	10c00044 	addi	r3,r2,1
		// print image from array.
		if (pixel_y < 200 && pixel_x < 200) {
			uint32_t pixel =
					wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
							* 200 + pixel_x) * 3)]
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
     37c:	00800074 	movhi	r2,1
     380:	109d9c04 	addi	r2,r2,30320
     384:	10c5883a 	add	r2,r2,r3
     388:	10800003 	ldbu	r2,0(r2)
									* 200 + pixel_x) * 3) + 1] << 8)
     38c:	10803fcc 	andi	r2,r2,255
     390:	1004923a 	slli	r2,r2,8
		// print image from array.
		if (pixel_y < 200 && pixel_x < 200) {
			uint32_t pixel =
					wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
							* 200 + pixel_x) * 3)]
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
     394:	2089883a 	add	r4,r4,r2
									* 200 + pixel_x) * 3) + 1] << 8)
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
									* 200 + pixel_x) * 3) + 2] << 16);
     398:	e0bffd0b 	ldhu	r2,-12(fp)
     39c:	10c03224 	muli	r3,r2,200
     3a0:	e0bffd8b 	ldhu	r2,-10(fp)
     3a4:	1887883a 	add	r3,r3,r2
     3a8:	1805883a 	mov	r2,r3
     3ac:	1085883a 	add	r2,r2,r2
     3b0:	10c5883a 	add	r2,r2,r3
     3b4:	10c00084 	addi	r3,r2,2
			uint32_t pixel =
					wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
							* 200 + pixel_x) * 3)]
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
									* 200 + pixel_x) * 3) + 1] << 8)
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
     3b8:	00800074 	movhi	r2,1
     3bc:	109d9c04 	addi	r2,r2,30320
     3c0:	10c5883a 	add	r2,r2,r3
     3c4:	10800003 	ldbu	r2,0(r2)
									* 200 + pixel_x) * 3) + 2] << 16);
     3c8:	10803fcc 	andi	r2,r2,255
     3cc:	1004943a 	slli	r2,r2,16
			uint32_t pixel =
					wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
							* 200 + pixel_x) * 3)]
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
									* 200 + pixel_x) * 3) + 1] << 8)
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
     3d0:	2085883a 	add	r2,r4,r2
		pixel_y /= zoom_amount;
		pixel_x /= zoom_amount;

		// print image from array.
		if (pixel_y < 200 && pixel_x < 200) {
			uint32_t pixel =
     3d4:	e0bffe15 	stw	r2,-8(fp)
							* 200 + pixel_x) * 3)]
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
									* 200 + pixel_x) * 3) + 1] << 8)
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
									* 200 + pixel_x) * 3) + 2] << 16);
			IOWR(VGA_IMAGE_VIEWER_0_BASE, 0, pixel);
     3d8:	e0fffe17 	ldw	r3,-8(fp)
     3dc:	00800134 	movhi	r2,4
     3e0:	10840604 	addi	r2,r2,4120
     3e4:	10c00035 	stwio	r3,0(r2)
		// resize
		pixel_y /= zoom_amount;
		pixel_x /= zoom_amount;

		// print image from array.
		if (pixel_y < 200 && pixel_x < 200) {
     3e8:	00000406 	br	3fc <vga_task+0x16c>
									* 200 + pixel_x) * 3) + 1] << 8)
							+ (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y
									* 200 + pixel_x) * 3) + 2] << 16);
			IOWR(VGA_IMAGE_VIEWER_0_BASE, 0, pixel);
		} else
			IOWR(VGA_IMAGE_VIEWER_0_BASE, 0, 0);
     3ec:	0007883a 	mov	r3,zero
     3f0:	00800134 	movhi	r2,4
     3f4:	10840604 	addi	r2,r2,4120
     3f8:	10c00035 	stwio	r3,0(r2)
	}
     3fc:	003fac06 	br	2b0 <vga_task+0x20>

00000400 <button_task>:
}
/* Prints "Hello World" and sleeps for three seconds */
void button_task(void* pdata) {
     400:	defffc04 	addi	sp,sp,-16
     404:	dfc00315 	stw	ra,12(sp)
     408:	df000215 	stw	fp,8(sp)
     40c:	df000204 	addi	fp,sp,8
     410:	e13fff15 	stw	r4,-4(fp)

	printf("starting task button\n");
     414:	010000f4 	movhi	r4,3
     418:	2112d104 	addi	r4,r4,19268
     41c:	000086c0 	call	86c <puts>
	while (1) {
		printf("checking for button\n");
     420:	010000f4 	movhi	r4,3
     424:	2112d704 	addi	r4,r4,19292
     428:	000086c0 	call	86c <puts>
		int button = IORD(PIO_0_BASE, 0x0);
     42c:	00800134 	movhi	r2,4
     430:	10840004 	addi	r2,r2,4096
     434:	10800037 	ldwio	r2,0(r2)
     438:	e0bffe15 	stw	r2,-8(fp)
		if (button == 13) {
     43c:	e0bffe17 	ldw	r2,-8(fp)
     440:	10800358 	cmpnei	r2,r2,13
     444:	1000101e 	bne	r2,zero,488 <button_task+0x88>
			zoom_amount += 1;
     448:	d0a00017 	ldw	r2,-32768(gp)
     44c:	10800044 	addi	r2,r2,1
     450:	d0a00015 	stw	r2,-32768(gp)
			if (zoom_amount >= 5) {
     454:	d0a00017 	ldw	r2,-32768(gp)
     458:	10800150 	cmplti	r2,r2,5
     45c:	1000021e 	bne	r2,zero,468 <button_task+0x68>
				zoom_amount = 5;
     460:	00800144 	movi	r2,5
     464:	d0a00015 	stw	r2,-32768(gp)
			}
			printf("zoom amount +, %d\n", zoom_amount);
     468:	d0a00017 	ldw	r2,-32768(gp)
     46c:	100b883a 	mov	r5,r2
     470:	010000f4 	movhi	r4,3
     474:	2112dc04 	addi	r4,r4,19312
     478:	00007700 	call	770 <printf>
			OSTimeDly(300);
     47c:	01004b04 	movi	r4,300
     480:	0014dd40 	call	14dd4 <OSTimeDly>
     484:	003fe606 	br	420 <button_task+0x20>
		} else if (button == 11) {
     488:	e0bffe17 	ldw	r2,-8(fp)
     48c:	108002d8 	cmpnei	r2,r2,11
     490:	103fe31e 	bne	r2,zero,420 <button_task+0x20>
			zoom_amount -= 1;
     494:	d0a00017 	ldw	r2,-32768(gp)
     498:	10bfffc4 	addi	r2,r2,-1
     49c:	d0a00015 	stw	r2,-32768(gp)
			if (zoom_amount <= 1) {
     4a0:	d0a00017 	ldw	r2,-32768(gp)
     4a4:	10800088 	cmpgei	r2,r2,2
     4a8:	1000021e 	bne	r2,zero,4b4 <button_task+0xb4>
				zoom_amount = 1;
     4ac:	00800044 	movi	r2,1
     4b0:	d0a00015 	stw	r2,-32768(gp)
			}
			printf("zoom amount -, %d\n", zoom_amount);
     4b4:	d0a00017 	ldw	r2,-32768(gp)
     4b8:	100b883a 	mov	r5,r2
     4bc:	010000f4 	movhi	r4,3
     4c0:	2112e104 	addi	r4,r4,19332
     4c4:	00007700 	call	770 <printf>
			OSTimeDly(300);
     4c8:	01004b04 	movi	r4,300
     4cc:	0014dd40 	call	14dd4 <OSTimeDly>
		}
	}
     4d0:	003fd306 	br	420 <button_task+0x20>

000004d4 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void) {
     4d4:	defff904 	addi	sp,sp,-28
     4d8:	dfc00615 	stw	ra,24(sp)
     4dc:	df000515 	stw	fp,20(sp)
     4e0:	df000504 	addi	fp,sp,20

	printf("hello!\n");
     4e4:	010000f4 	movhi	r4,3
     4e8:	2112e604 	addi	r4,r4,19352
     4ec:	000086c0 	call	86c <puts>

	OSTaskCreateExt(vga_task,
     4f0:	d8000415 	stw	zero,16(sp)
     4f4:	d8000315 	stw	zero,12(sp)
     4f8:	00808004 	movi	r2,512
     4fc:	d8800215 	stw	r2,8(sp)
     500:	00800134 	movhi	r2,4
     504:	10a1e004 	addi	r2,r2,-30848
     508:	d8800115 	stw	r2,4(sp)
     50c:	00800044 	movi	r2,1
     510:	d8800015 	stw	r2,0(sp)
     514:	01c00084 	movi	r7,2
     518:	01800134 	movhi	r6,4
     51c:	31a3df04 	addi	r6,r6,-28804
     520:	000b883a 	mov	r5,zero
     524:	01000034 	movhi	r4,0
     528:	2100a404 	addi	r4,r4,656
     52c:	0013d040 	call	13d04 <OSTaskCreateExt>
	VGA_TASK_PRIO, 1, task1_stk,
	TASK_STACKSIZE,
	NULL, 0);
//
//
	OSTaskCreateExt(button_task,
     530:	d8000415 	stw	zero,16(sp)
     534:	d8000315 	stw	zero,12(sp)
     538:	00808004 	movi	r2,512
     53c:	d8800215 	stw	r2,8(sp)
     540:	00800134 	movhi	r2,4
     544:	10a3e004 	addi	r2,r2,-28800
     548:	d8800115 	stw	r2,4(sp)
     54c:	00800044 	movi	r2,1
     550:	d8800015 	stw	r2,0(sp)
     554:	01c00044 	movi	r7,1
     558:	01800134 	movhi	r6,4
     55c:	31a5df04 	addi	r6,r6,-26756
     560:	000b883a 	mov	r5,zero
     564:	01000034 	movhi	r4,0
     568:	21010004 	addi	r4,r4,1024
     56c:	0013d040 	call	13d04 <OSTaskCreateExt>
	NULL, (void *) &task2_stk[TASK_STACKSIZE - 1],
	BUTTON_TASK_PRIO, 1, task2_stk,
	TASK_STACKSIZE,
	NULL, 0);

	OSStart();
     570:	000e66c0 	call	e66c <OSStart>
	return 0;
     574:	0005883a 	mov	r2,zero
}
     578:	e037883a 	mov	sp,fp
     57c:	dfc00117 	ldw	ra,4(sp)
     580:	df000017 	ldw	fp,0(sp)
     584:	dec00204 	addi	sp,sp,8
     588:	f800283a 	ret

0000058c <__divsi3>:
     58c:	20001b16 	blt	r4,zero,5fc <__divsi3+0x70>
     590:	000f883a 	mov	r7,zero
     594:	28001616 	blt	r5,zero,5f0 <__divsi3+0x64>
     598:	200d883a 	mov	r6,r4
     59c:	29001a2e 	bgeu	r5,r4,608 <__divsi3+0x7c>
     5a0:	00800804 	movi	r2,32
     5a4:	00c00044 	movi	r3,1
     5a8:	00000106 	br	5b0 <__divsi3+0x24>
     5ac:	10000d26 	beq	r2,zero,5e4 <__divsi3+0x58>
     5b0:	294b883a 	add	r5,r5,r5
     5b4:	10bfffc4 	addi	r2,r2,-1
     5b8:	18c7883a 	add	r3,r3,r3
     5bc:	293ffb36 	bltu	r5,r4,5ac <__divsi3+0x20>
     5c0:	0005883a 	mov	r2,zero
     5c4:	18000726 	beq	r3,zero,5e4 <__divsi3+0x58>
     5c8:	0005883a 	mov	r2,zero
     5cc:	31400236 	bltu	r6,r5,5d8 <__divsi3+0x4c>
     5d0:	314dc83a 	sub	r6,r6,r5
     5d4:	10c4b03a 	or	r2,r2,r3
     5d8:	1806d07a 	srli	r3,r3,1
     5dc:	280ad07a 	srli	r5,r5,1
     5e0:	183ffa1e 	bne	r3,zero,5cc <__divsi3+0x40>
     5e4:	38000126 	beq	r7,zero,5ec <__divsi3+0x60>
     5e8:	0085c83a 	sub	r2,zero,r2
     5ec:	f800283a 	ret
     5f0:	014bc83a 	sub	r5,zero,r5
     5f4:	39c0005c 	xori	r7,r7,1
     5f8:	003fe706 	br	598 <__divsi3+0xc>
     5fc:	0109c83a 	sub	r4,zero,r4
     600:	01c00044 	movi	r7,1
     604:	003fe306 	br	594 <__divsi3+0x8>
     608:	00c00044 	movi	r3,1
     60c:	003fee06 	br	5c8 <__divsi3+0x3c>

00000610 <__modsi3>:
     610:	20001716 	blt	r4,zero,670 <__modsi3+0x60>
     614:	000f883a 	mov	r7,zero
     618:	2005883a 	mov	r2,r4
     61c:	28001216 	blt	r5,zero,668 <__modsi3+0x58>
     620:	2900162e 	bgeu	r5,r4,67c <__modsi3+0x6c>
     624:	01800804 	movi	r6,32
     628:	00c00044 	movi	r3,1
     62c:	00000106 	br	634 <__modsi3+0x24>
     630:	30000a26 	beq	r6,zero,65c <__modsi3+0x4c>
     634:	294b883a 	add	r5,r5,r5
     638:	31bfffc4 	addi	r6,r6,-1
     63c:	18c7883a 	add	r3,r3,r3
     640:	293ffb36 	bltu	r5,r4,630 <__modsi3+0x20>
     644:	18000526 	beq	r3,zero,65c <__modsi3+0x4c>
     648:	1806d07a 	srli	r3,r3,1
     64c:	11400136 	bltu	r2,r5,654 <__modsi3+0x44>
     650:	1145c83a 	sub	r2,r2,r5
     654:	280ad07a 	srli	r5,r5,1
     658:	183ffb1e 	bne	r3,zero,648 <__modsi3+0x38>
     65c:	38000126 	beq	r7,zero,664 <__modsi3+0x54>
     660:	0085c83a 	sub	r2,zero,r2
     664:	f800283a 	ret
     668:	014bc83a 	sub	r5,zero,r5
     66c:	003fec06 	br	620 <__modsi3+0x10>
     670:	0109c83a 	sub	r4,zero,r4
     674:	01c00044 	movi	r7,1
     678:	003fe706 	br	618 <__modsi3+0x8>
     67c:	00c00044 	movi	r3,1
     680:	003ff106 	br	648 <__modsi3+0x38>

00000684 <__udivsi3>:
     684:	200d883a 	mov	r6,r4
     688:	2900152e 	bgeu	r5,r4,6e0 <__udivsi3+0x5c>
     68c:	28001416 	blt	r5,zero,6e0 <__udivsi3+0x5c>
     690:	00800804 	movi	r2,32
     694:	00c00044 	movi	r3,1
     698:	00000206 	br	6a4 <__udivsi3+0x20>
     69c:	10000e26 	beq	r2,zero,6d8 <__udivsi3+0x54>
     6a0:	28000516 	blt	r5,zero,6b8 <__udivsi3+0x34>
     6a4:	294b883a 	add	r5,r5,r5
     6a8:	10bfffc4 	addi	r2,r2,-1
     6ac:	18c7883a 	add	r3,r3,r3
     6b0:	293ffa36 	bltu	r5,r4,69c <__udivsi3+0x18>
     6b4:	18000826 	beq	r3,zero,6d8 <__udivsi3+0x54>
     6b8:	0005883a 	mov	r2,zero
     6bc:	31400236 	bltu	r6,r5,6c8 <__udivsi3+0x44>
     6c0:	314dc83a 	sub	r6,r6,r5
     6c4:	10c4b03a 	or	r2,r2,r3
     6c8:	1806d07a 	srli	r3,r3,1
     6cc:	280ad07a 	srli	r5,r5,1
     6d0:	183ffa1e 	bne	r3,zero,6bc <__udivsi3+0x38>
     6d4:	f800283a 	ret
     6d8:	0005883a 	mov	r2,zero
     6dc:	f800283a 	ret
     6e0:	00c00044 	movi	r3,1
     6e4:	003ff406 	br	6b8 <__udivsi3+0x34>

000006e8 <__umodsi3>:
     6e8:	2005883a 	mov	r2,r4
     6ec:	2900122e 	bgeu	r5,r4,738 <__umodsi3+0x50>
     6f0:	28001116 	blt	r5,zero,738 <__umodsi3+0x50>
     6f4:	01800804 	movi	r6,32
     6f8:	00c00044 	movi	r3,1
     6fc:	00000206 	br	708 <__umodsi3+0x20>
     700:	30000c26 	beq	r6,zero,734 <__umodsi3+0x4c>
     704:	28000516 	blt	r5,zero,71c <__umodsi3+0x34>
     708:	294b883a 	add	r5,r5,r5
     70c:	31bfffc4 	addi	r6,r6,-1
     710:	18c7883a 	add	r3,r3,r3
     714:	293ffa36 	bltu	r5,r4,700 <__umodsi3+0x18>
     718:	18000626 	beq	r3,zero,734 <__umodsi3+0x4c>
     71c:	1806d07a 	srli	r3,r3,1
     720:	11400136 	bltu	r2,r5,728 <__umodsi3+0x40>
     724:	1145c83a 	sub	r2,r2,r5
     728:	280ad07a 	srli	r5,r5,1
     72c:	183ffb1e 	bne	r3,zero,71c <__umodsi3+0x34>
     730:	f800283a 	ret
     734:	f800283a 	ret
     738:	00c00044 	movi	r3,1
     73c:	003ff706 	br	71c <__umodsi3+0x34>

00000740 <_printf_r>:
     740:	defffd04 	addi	sp,sp,-12
     744:	2805883a 	mov	r2,r5
     748:	dfc00015 	stw	ra,0(sp)
     74c:	d9800115 	stw	r6,4(sp)
     750:	d9c00215 	stw	r7,8(sp)
     754:	21400217 	ldw	r5,8(r4)
     758:	d9c00104 	addi	r7,sp,4
     75c:	100d883a 	mov	r6,r2
     760:	00009180 	call	918 <___vfprintf_internal_r>
     764:	dfc00017 	ldw	ra,0(sp)
     768:	dec00304 	addi	sp,sp,12
     76c:	f800283a 	ret

00000770 <printf>:
     770:	defffc04 	addi	sp,sp,-16
     774:	dfc00015 	stw	ra,0(sp)
     778:	d9400115 	stw	r5,4(sp)
     77c:	d9800215 	stw	r6,8(sp)
     780:	d9c00315 	stw	r7,12(sp)
     784:	008000f4 	movhi	r2,3
     788:	109aa104 	addi	r2,r2,27268
     78c:	10800017 	ldw	r2,0(r2)
     790:	200b883a 	mov	r5,r4
     794:	d9800104 	addi	r6,sp,4
     798:	11000217 	ldw	r4,8(r2)
     79c:	0002b100 	call	2b10 <__vfprintf_internal>
     7a0:	dfc00017 	ldw	ra,0(sp)
     7a4:	dec00404 	addi	sp,sp,16
     7a8:	f800283a 	ret

000007ac <_puts_r>:
     7ac:	defff604 	addi	sp,sp,-40
     7b0:	dc000715 	stw	r16,28(sp)
     7b4:	2021883a 	mov	r16,r4
     7b8:	2809883a 	mov	r4,r5
     7bc:	dc400815 	stw	r17,32(sp)
     7c0:	dfc00915 	stw	ra,36(sp)
     7c4:	2823883a 	mov	r17,r5
     7c8:	00008800 	call	880 <strlen>
     7cc:	10c00044 	addi	r3,r2,1
     7d0:	d8800115 	stw	r2,4(sp)
     7d4:	008000f4 	movhi	r2,3
     7d8:	1092e804 	addi	r2,r2,19360
     7dc:	d8800215 	stw	r2,8(sp)
     7e0:	00800044 	movi	r2,1
     7e4:	d8800315 	stw	r2,12(sp)
     7e8:	00800084 	movi	r2,2
     7ec:	dc400015 	stw	r17,0(sp)
     7f0:	d8c00615 	stw	r3,24(sp)
     7f4:	dec00415 	stw	sp,16(sp)
     7f8:	d8800515 	stw	r2,20(sp)
     7fc:	80000226 	beq	r16,zero,808 <_puts_r+0x5c>
     800:	80800e17 	ldw	r2,56(r16)
     804:	10001426 	beq	r2,zero,858 <_puts_r+0xac>
     808:	81400217 	ldw	r5,8(r16)
     80c:	2880030b 	ldhu	r2,12(r5)
     810:	10c8000c 	andi	r3,r2,8192
     814:	1800061e 	bne	r3,zero,830 <_puts_r+0x84>
     818:	29001917 	ldw	r4,100(r5)
     81c:	00f7ffc4 	movi	r3,-8193
     820:	10880014 	ori	r2,r2,8192
     824:	20c6703a 	and	r3,r4,r3
     828:	2880030d 	sth	r2,12(r5)
     82c:	28c01915 	stw	r3,100(r5)
     830:	d9800404 	addi	r6,sp,16
     834:	8009883a 	mov	r4,r16
     838:	00050400 	call	5040 <__sfvwrite_r>
     83c:	1000091e 	bne	r2,zero,864 <_puts_r+0xb8>
     840:	00800284 	movi	r2,10
     844:	dfc00917 	ldw	ra,36(sp)
     848:	dc400817 	ldw	r17,32(sp)
     84c:	dc000717 	ldw	r16,28(sp)
     850:	dec00a04 	addi	sp,sp,40
     854:	f800283a 	ret
     858:	8009883a 	mov	r4,r16
     85c:	0004bbc0 	call	4bbc <__sinit>
     860:	003fe906 	br	808 <_puts_r+0x5c>
     864:	00bfffc4 	movi	r2,-1
     868:	003ff606 	br	844 <_puts_r+0x98>

0000086c <puts>:
     86c:	008000f4 	movhi	r2,3
     870:	109aa104 	addi	r2,r2,27268
     874:	200b883a 	mov	r5,r4
     878:	11000017 	ldw	r4,0(r2)
     87c:	00007ac1 	jmpi	7ac <_puts_r>

00000880 <strlen>:
     880:	208000cc 	andi	r2,r4,3
     884:	10002026 	beq	r2,zero,908 <strlen+0x88>
     888:	20800007 	ldb	r2,0(r4)
     88c:	10002026 	beq	r2,zero,910 <strlen+0x90>
     890:	2005883a 	mov	r2,r4
     894:	00000206 	br	8a0 <strlen+0x20>
     898:	10c00007 	ldb	r3,0(r2)
     89c:	18001826 	beq	r3,zero,900 <strlen+0x80>
     8a0:	10800044 	addi	r2,r2,1
     8a4:	10c000cc 	andi	r3,r2,3
     8a8:	183ffb1e 	bne	r3,zero,898 <strlen+0x18>
     8ac:	10c00017 	ldw	r3,0(r2)
     8b0:	01ffbff4 	movhi	r7,65279
     8b4:	39ffbfc4 	addi	r7,r7,-257
     8b8:	00ca303a 	nor	r5,zero,r3
     8bc:	01a02074 	movhi	r6,32897
     8c0:	19c7883a 	add	r3,r3,r7
     8c4:	31a02004 	addi	r6,r6,-32640
     8c8:	1946703a 	and	r3,r3,r5
     8cc:	1986703a 	and	r3,r3,r6
     8d0:	1800091e 	bne	r3,zero,8f8 <strlen+0x78>
     8d4:	10800104 	addi	r2,r2,4
     8d8:	10c00017 	ldw	r3,0(r2)
     8dc:	19cb883a 	add	r5,r3,r7
     8e0:	00c6303a 	nor	r3,zero,r3
     8e4:	28c6703a 	and	r3,r5,r3
     8e8:	1986703a 	and	r3,r3,r6
     8ec:	183ff926 	beq	r3,zero,8d4 <strlen+0x54>
     8f0:	00000106 	br	8f8 <strlen+0x78>
     8f4:	10800044 	addi	r2,r2,1
     8f8:	10c00007 	ldb	r3,0(r2)
     8fc:	183ffd1e 	bne	r3,zero,8f4 <strlen+0x74>
     900:	1105c83a 	sub	r2,r2,r4
     904:	f800283a 	ret
     908:	2005883a 	mov	r2,r4
     90c:	003fe706 	br	8ac <strlen+0x2c>
     910:	0005883a 	mov	r2,zero
     914:	f800283a 	ret

00000918 <___vfprintf_internal_r>:
     918:	deffb804 	addi	sp,sp,-288
     91c:	dfc04715 	stw	ra,284(sp)
     920:	ddc04515 	stw	r23,276(sp)
     924:	dd404315 	stw	r21,268(sp)
     928:	d9002c15 	stw	r4,176(sp)
     92c:	282f883a 	mov	r23,r5
     930:	302b883a 	mov	r21,r6
     934:	d9c02d15 	stw	r7,180(sp)
     938:	df004615 	stw	fp,280(sp)
     93c:	dd804415 	stw	r22,272(sp)
     940:	dd004215 	stw	r20,264(sp)
     944:	dcc04115 	stw	r19,260(sp)
     948:	dc804015 	stw	r18,256(sp)
     94c:	dc403f15 	stw	r17,252(sp)
     950:	dc003e15 	stw	r16,248(sp)
     954:	00057300 	call	5730 <_localeconv_r>
     958:	10800017 	ldw	r2,0(r2)
     95c:	1009883a 	mov	r4,r2
     960:	d8803415 	stw	r2,208(sp)
     964:	00008800 	call	880 <strlen>
     968:	d8803715 	stw	r2,220(sp)
     96c:	d8802c17 	ldw	r2,176(sp)
     970:	10000226 	beq	r2,zero,97c <___vfprintf_internal_r+0x64>
     974:	10800e17 	ldw	r2,56(r2)
     978:	1000f926 	beq	r2,zero,d60 <___vfprintf_internal_r+0x448>
     97c:	b880030b 	ldhu	r2,12(r23)
     980:	10c8000c 	andi	r3,r2,8192
     984:	1800061e 	bne	r3,zero,9a0 <___vfprintf_internal_r+0x88>
     988:	b9001917 	ldw	r4,100(r23)
     98c:	00f7ffc4 	movi	r3,-8193
     990:	10880014 	ori	r2,r2,8192
     994:	20c6703a 	and	r3,r4,r3
     998:	b880030d 	sth	r2,12(r23)
     99c:	b8c01915 	stw	r3,100(r23)
     9a0:	10c0020c 	andi	r3,r2,8
     9a4:	1800c126 	beq	r3,zero,cac <___vfprintf_internal_r+0x394>
     9a8:	b8c00417 	ldw	r3,16(r23)
     9ac:	1800bf26 	beq	r3,zero,cac <___vfprintf_internal_r+0x394>
     9b0:	1080068c 	andi	r2,r2,26
     9b4:	00c00284 	movi	r3,10
     9b8:	10c0c426 	beq	r2,r3,ccc <___vfprintf_internal_r+0x3b4>
     9bc:	d8c00404 	addi	r3,sp,16
     9c0:	050000f4 	movhi	r20,3
     9c4:	d9001e04 	addi	r4,sp,120
     9c8:	a512f984 	addi	r20,r20,19430
     9cc:	d8c01e15 	stw	r3,120(sp)
     9d0:	d8002015 	stw	zero,128(sp)
     9d4:	d8001f15 	stw	zero,124(sp)
     9d8:	d8003315 	stw	zero,204(sp)
     9dc:	d8003615 	stw	zero,216(sp)
     9e0:	d8003815 	stw	zero,224(sp)
     9e4:	1811883a 	mov	r8,r3
     9e8:	d8003915 	stw	zero,228(sp)
     9ec:	d8003a15 	stw	zero,232(sp)
     9f0:	d8002f15 	stw	zero,188(sp)
     9f4:	d9002815 	stw	r4,160(sp)
     9f8:	a8800007 	ldb	r2,0(r21)
     9fc:	10027b26 	beq	r2,zero,13ec <___vfprintf_internal_r+0xad4>
     a00:	00c00944 	movi	r3,37
     a04:	a821883a 	mov	r16,r21
     a08:	10c0021e 	bne	r2,r3,a14 <___vfprintf_internal_r+0xfc>
     a0c:	00001406 	br	a60 <___vfprintf_internal_r+0x148>
     a10:	10c00326 	beq	r2,r3,a20 <___vfprintf_internal_r+0x108>
     a14:	84000044 	addi	r16,r16,1
     a18:	80800007 	ldb	r2,0(r16)
     a1c:	103ffc1e 	bne	r2,zero,a10 <___vfprintf_internal_r+0xf8>
     a20:	8563c83a 	sub	r17,r16,r21
     a24:	88000e26 	beq	r17,zero,a60 <___vfprintf_internal_r+0x148>
     a28:	d8c02017 	ldw	r3,128(sp)
     a2c:	d8801f17 	ldw	r2,124(sp)
     a30:	45400015 	stw	r21,0(r8)
     a34:	1c47883a 	add	r3,r3,r17
     a38:	10800044 	addi	r2,r2,1
     a3c:	d8c02015 	stw	r3,128(sp)
     a40:	44400115 	stw	r17,4(r8)
     a44:	d8801f15 	stw	r2,124(sp)
     a48:	00c001c4 	movi	r3,7
     a4c:	1880a716 	blt	r3,r2,cec <___vfprintf_internal_r+0x3d4>
     a50:	42000204 	addi	r8,r8,8
     a54:	d9402f17 	ldw	r5,188(sp)
     a58:	2c4b883a 	add	r5,r5,r17
     a5c:	d9402f15 	stw	r5,188(sp)
     a60:	80800007 	ldb	r2,0(r16)
     a64:	1000a826 	beq	r2,zero,d08 <___vfprintf_internal_r+0x3f0>
     a68:	84400047 	ldb	r17,1(r16)
     a6c:	00bfffc4 	movi	r2,-1
     a70:	85400044 	addi	r21,r16,1
     a74:	d8002785 	stb	zero,158(sp)
     a78:	0007883a 	mov	r3,zero
     a7c:	000f883a 	mov	r7,zero
     a80:	d8802915 	stw	r2,164(sp)
     a84:	d8003115 	stw	zero,196(sp)
     a88:	0025883a 	mov	r18,zero
     a8c:	01401604 	movi	r5,88
     a90:	01800244 	movi	r6,9
     a94:	02800a84 	movi	r10,42
     a98:	02401b04 	movi	r9,108
     a9c:	ad400044 	addi	r21,r21,1
     aa0:	88bff804 	addi	r2,r17,-32
     aa4:	28830436 	bltu	r5,r2,16b8 <___vfprintf_internal_r+0xda0>
     aa8:	100490ba 	slli	r2,r2,2
     aac:	01000034 	movhi	r4,0
     ab0:	2102b004 	addi	r4,r4,2752
     ab4:	1105883a 	add	r2,r2,r4
     ab8:	10800017 	ldw	r2,0(r2)
     abc:	1000683a 	jmp	r2
     ac0:	000015d8 	cmpnei	zero,zero,87
     ac4:	000016b8 	rdprs	zero,zero,90
     ac8:	000016b8 	rdprs	zero,zero,90
     acc:	000015f8 	rdprs	zero,zero,87
     ad0:	000016b8 	rdprs	zero,zero,90
     ad4:	000016b8 	rdprs	zero,zero,90
     ad8:	000016b8 	rdprs	zero,zero,90
     adc:	000016b8 	rdprs	zero,zero,90
     ae0:	000016b8 	rdprs	zero,zero,90
     ae4:	000016b8 	rdprs	zero,zero,90
     ae8:	00000d6c 	andhi	zero,zero,53
     aec:	00001514 	movui	zero,84
     af0:	000016b8 	rdprs	zero,zero,90
     af4:	00000c34 	movhi	zero,48
     af8:	00000d94 	movui	zero,54
     afc:	000016b8 	rdprs	zero,zero,90
     b00:	00000dd4 	movui	zero,55
     b04:	00000de0 	cmpeqi	zero,zero,55
     b08:	00000de0 	cmpeqi	zero,zero,55
     b0c:	00000de0 	cmpeqi	zero,zero,55
     b10:	00000de0 	cmpeqi	zero,zero,55
     b14:	00000de0 	cmpeqi	zero,zero,55
     b18:	00000de0 	cmpeqi	zero,zero,55
     b1c:	00000de0 	cmpeqi	zero,zero,55
     b20:	00000de0 	cmpeqi	zero,zero,55
     b24:	00000de0 	cmpeqi	zero,zero,55
     b28:	000016b8 	rdprs	zero,zero,90
     b2c:	000016b8 	rdprs	zero,zero,90
     b30:	000016b8 	rdprs	zero,zero,90
     b34:	000016b8 	rdprs	zero,zero,90
     b38:	000016b8 	rdprs	zero,zero,90
     b3c:	000016b8 	rdprs	zero,zero,90
     b40:	000016b8 	rdprs	zero,zero,90
     b44:	000016b8 	rdprs	zero,zero,90
     b48:	000016b8 	rdprs	zero,zero,90
     b4c:	000016b8 	rdprs	zero,zero,90
     b50:	00000e14 	movui	zero,56
     b54:	00000ed0 	cmplti	zero,zero,59
     b58:	000016b8 	rdprs	zero,zero,90
     b5c:	00000ed0 	cmplti	zero,zero,59
     b60:	000016b8 	rdprs	zero,zero,90
     b64:	000016b8 	rdprs	zero,zero,90
     b68:	000016b8 	rdprs	zero,zero,90
     b6c:	000016b8 	rdprs	zero,zero,90
     b70:	00000f70 	cmpltui	zero,zero,61
     b74:	000016b8 	rdprs	zero,zero,90
     b78:	000016b8 	rdprs	zero,zero,90
     b7c:	00000f7c 	xorhi	zero,zero,61
     b80:	000016b8 	rdprs	zero,zero,90
     b84:	000016b8 	rdprs	zero,zero,90
     b88:	000016b8 	rdprs	zero,zero,90
     b8c:	000016b8 	rdprs	zero,zero,90
     b90:	000016b8 	rdprs	zero,zero,90
     b94:	000013f4 	movhi	zero,79
     b98:	000016b8 	rdprs	zero,zero,90
     b9c:	000016b8 	rdprs	zero,zero,90
     ba0:	00001454 	movui	zero,81
     ba4:	000016b8 	rdprs	zero,zero,90
     ba8:	000016b8 	rdprs	zero,zero,90
     bac:	000016b8 	rdprs	zero,zero,90
     bb0:	000016b8 	rdprs	zero,zero,90
     bb4:	000016b8 	rdprs	zero,zero,90
     bb8:	000016b8 	rdprs	zero,zero,90
     bbc:	000016b8 	rdprs	zero,zero,90
     bc0:	000016b8 	rdprs	zero,zero,90
     bc4:	000016b8 	rdprs	zero,zero,90
     bc8:	000016b8 	rdprs	zero,zero,90
     bcc:	00001664 	muli	zero,zero,89
     bd0:	00001604 	movi	zero,88
     bd4:	00000ed0 	cmplti	zero,zero,59
     bd8:	00000ed0 	cmplti	zero,zero,59
     bdc:	00000ed0 	cmplti	zero,zero,59
     be0:	00001614 	movui	zero,88
     be4:	00001604 	movi	zero,88
     be8:	000016b8 	rdprs	zero,zero,90
     bec:	000016b8 	rdprs	zero,zero,90
     bf0:	00001620 	cmpeqi	zero,zero,88
     bf4:	000016b8 	rdprs	zero,zero,90
     bf8:	00001630 	cmpltui	zero,zero,88
     bfc:	00001504 	movi	zero,84
     c00:	00000c40 	call	c4 <OSCtxSw_SWITCH_PC+0x84>
     c04:	00001524 	muli	zero,zero,84
     c08:	000016b8 	rdprs	zero,zero,90
     c0c:	00001530 	cmpltui	zero,zero,84
     c10:	000016b8 	rdprs	zero,zero,90
     c14:	0000158c 	andi	zero,zero,86
     c18:	000016b8 	rdprs	zero,zero,90
     c1c:	000016b8 	rdprs	zero,zero,90
     c20:	0000159c 	xori	zero,zero,86
     c24:	d9003117 	ldw	r4,196(sp)
     c28:	d8802d15 	stw	r2,180(sp)
     c2c:	0109c83a 	sub	r4,zero,r4
     c30:	d9003115 	stw	r4,196(sp)
     c34:	94800114 	ori	r18,r18,4
     c38:	ac400007 	ldb	r17,0(r21)
     c3c:	003f9706 	br	a9c <___vfprintf_internal_r+0x184>
     c40:	00800c04 	movi	r2,48
     c44:	d9002d17 	ldw	r4,180(sp)
     c48:	d9402917 	ldw	r5,164(sp)
     c4c:	d8802705 	stb	r2,156(sp)
     c50:	00801e04 	movi	r2,120
     c54:	d8802745 	stb	r2,157(sp)
     c58:	d8002785 	stb	zero,158(sp)
     c5c:	20c00104 	addi	r3,r4,4
     c60:	24c00017 	ldw	r19,0(r4)
     c64:	002d883a 	mov	r22,zero
     c68:	90800094 	ori	r2,r18,2
     c6c:	28029a16 	blt	r5,zero,16d8 <___vfprintf_internal_r+0xdc0>
     c70:	00bfdfc4 	movi	r2,-129
     c74:	90a4703a 	and	r18,r18,r2
     c78:	d8c02d15 	stw	r3,180(sp)
     c7c:	94800094 	ori	r18,r18,2
     c80:	9802871e 	bne	r19,zero,16a0 <___vfprintf_internal_r+0xd88>
     c84:	008000f4 	movhi	r2,3
     c88:	1092f204 	addi	r2,r2,19400
     c8c:	d8803915 	stw	r2,228(sp)
     c90:	04401e04 	movi	r17,120
     c94:	d8802917 	ldw	r2,164(sp)
     c98:	0039883a 	mov	fp,zero
     c9c:	1001e926 	beq	r2,zero,1444 <___vfprintf_internal_r+0xb2c>
     ca0:	0027883a 	mov	r19,zero
     ca4:	002d883a 	mov	r22,zero
     ca8:	00020506 	br	14c0 <___vfprintf_internal_r+0xba8>
     cac:	d9002c17 	ldw	r4,176(sp)
     cb0:	b80b883a 	mov	r5,r23
     cb4:	0002be80 	call	2be8 <__swsetup_r>
     cb8:	1005ac1e 	bne	r2,zero,236c <___vfprintf_internal_r+0x1a54>
     cbc:	b880030b 	ldhu	r2,12(r23)
     cc0:	00c00284 	movi	r3,10
     cc4:	1080068c 	andi	r2,r2,26
     cc8:	10ff3c1e 	bne	r2,r3,9bc <___vfprintf_internal_r+0xa4>
     ccc:	b880038f 	ldh	r2,14(r23)
     cd0:	103f3a16 	blt	r2,zero,9bc <___vfprintf_internal_r+0xa4>
     cd4:	d9c02d17 	ldw	r7,180(sp)
     cd8:	d9002c17 	ldw	r4,176(sp)
     cdc:	a80d883a 	mov	r6,r21
     ce0:	b80b883a 	mov	r5,r23
     ce4:	0002b2c0 	call	2b2c <__sbprintf>
     ce8:	00001106 	br	d30 <___vfprintf_internal_r+0x418>
     cec:	d9002c17 	ldw	r4,176(sp)
     cf0:	d9801e04 	addi	r6,sp,120
     cf4:	b80b883a 	mov	r5,r23
     cf8:	0007f140 	call	7f14 <__sprint_r>
     cfc:	1000081e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
     d00:	da000404 	addi	r8,sp,16
     d04:	003f5306 	br	a54 <___vfprintf_internal_r+0x13c>
     d08:	d8802017 	ldw	r2,128(sp)
     d0c:	10000426 	beq	r2,zero,d20 <___vfprintf_internal_r+0x408>
     d10:	d9002c17 	ldw	r4,176(sp)
     d14:	d9801e04 	addi	r6,sp,120
     d18:	b80b883a 	mov	r5,r23
     d1c:	0007f140 	call	7f14 <__sprint_r>
     d20:	b880030b 	ldhu	r2,12(r23)
     d24:	1080100c 	andi	r2,r2,64
     d28:	1005901e 	bne	r2,zero,236c <___vfprintf_internal_r+0x1a54>
     d2c:	d8802f17 	ldw	r2,188(sp)
     d30:	dfc04717 	ldw	ra,284(sp)
     d34:	df004617 	ldw	fp,280(sp)
     d38:	ddc04517 	ldw	r23,276(sp)
     d3c:	dd804417 	ldw	r22,272(sp)
     d40:	dd404317 	ldw	r21,268(sp)
     d44:	dd004217 	ldw	r20,264(sp)
     d48:	dcc04117 	ldw	r19,260(sp)
     d4c:	dc804017 	ldw	r18,256(sp)
     d50:	dc403f17 	ldw	r17,252(sp)
     d54:	dc003e17 	ldw	r16,248(sp)
     d58:	dec04804 	addi	sp,sp,288
     d5c:	f800283a 	ret
     d60:	d9002c17 	ldw	r4,176(sp)
     d64:	0004bbc0 	call	4bbc <__sinit>
     d68:	003f0406 	br	97c <___vfprintf_internal_r+0x64>
     d6c:	d8802d17 	ldw	r2,180(sp)
     d70:	d9002d17 	ldw	r4,180(sp)
     d74:	10800017 	ldw	r2,0(r2)
     d78:	d8803115 	stw	r2,196(sp)
     d7c:	20800104 	addi	r2,r4,4
     d80:	d9003117 	ldw	r4,196(sp)
     d84:	203fa716 	blt	r4,zero,c24 <___vfprintf_internal_r+0x30c>
     d88:	d8802d15 	stw	r2,180(sp)
     d8c:	ac400007 	ldb	r17,0(r21)
     d90:	003f4206 	br	a9c <___vfprintf_internal_r+0x184>
     d94:	ac400007 	ldb	r17,0(r21)
     d98:	aac00044 	addi	r11,r21,1
     d9c:	8a872826 	beq	r17,r10,2a40 <___vfprintf_internal_r+0x2128>
     da0:	88bff404 	addi	r2,r17,-48
     da4:	0009883a 	mov	r4,zero
     da8:	30867d36 	bltu	r6,r2,27a0 <___vfprintf_internal_r+0x1e88>
     dac:	5c400007 	ldb	r17,0(r11)
     db0:	210002a4 	muli	r4,r4,10
     db4:	5d400044 	addi	r21,r11,1
     db8:	a817883a 	mov	r11,r21
     dbc:	2089883a 	add	r4,r4,r2
     dc0:	88bff404 	addi	r2,r17,-48
     dc4:	30bff92e 	bgeu	r6,r2,dac <___vfprintf_internal_r+0x494>
     dc8:	2005c916 	blt	r4,zero,24f0 <___vfprintf_internal_r+0x1bd8>
     dcc:	d9002915 	stw	r4,164(sp)
     dd0:	003f3306 	br	aa0 <___vfprintf_internal_r+0x188>
     dd4:	94802014 	ori	r18,r18,128
     dd8:	ac400007 	ldb	r17,0(r21)
     ddc:	003f2f06 	br	a9c <___vfprintf_internal_r+0x184>
     de0:	a809883a 	mov	r4,r21
     de4:	d8003115 	stw	zero,196(sp)
     de8:	88bff404 	addi	r2,r17,-48
     dec:	0017883a 	mov	r11,zero
     df0:	24400007 	ldb	r17,0(r4)
     df4:	5ac002a4 	muli	r11,r11,10
     df8:	ad400044 	addi	r21,r21,1
     dfc:	a809883a 	mov	r4,r21
     e00:	12d7883a 	add	r11,r2,r11
     e04:	88bff404 	addi	r2,r17,-48
     e08:	30bff92e 	bgeu	r6,r2,df0 <___vfprintf_internal_r+0x4d8>
     e0c:	dac03115 	stw	r11,196(sp)
     e10:	003f2306 	br	aa0 <___vfprintf_internal_r+0x188>
     e14:	18c03fcc 	andi	r3,r3,255
     e18:	18072b1e 	bne	r3,zero,2ac8 <___vfprintf_internal_r+0x21b0>
     e1c:	94800414 	ori	r18,r18,16
     e20:	9080080c 	andi	r2,r18,32
     e24:	10037b26 	beq	r2,zero,1c14 <___vfprintf_internal_r+0x12fc>
     e28:	d9402d17 	ldw	r5,180(sp)
     e2c:	28800117 	ldw	r2,4(r5)
     e30:	2cc00017 	ldw	r19,0(r5)
     e34:	29400204 	addi	r5,r5,8
     e38:	d9402d15 	stw	r5,180(sp)
     e3c:	102d883a 	mov	r22,r2
     e40:	10044b16 	blt	r2,zero,1f70 <___vfprintf_internal_r+0x1658>
     e44:	d9402917 	ldw	r5,164(sp)
     e48:	df002783 	ldbu	fp,158(sp)
     e4c:	2803bc16 	blt	r5,zero,1d40 <___vfprintf_internal_r+0x1428>
     e50:	00ffdfc4 	movi	r3,-129
     e54:	9d84b03a 	or	r2,r19,r22
     e58:	90e4703a 	and	r18,r18,r3
     e5c:	10017726 	beq	r2,zero,143c <___vfprintf_internal_r+0xb24>
     e60:	b0038326 	beq	r22,zero,1c70 <___vfprintf_internal_r+0x1358>
     e64:	dc402a15 	stw	r17,168(sp)
     e68:	dc001e04 	addi	r16,sp,120
     e6c:	b023883a 	mov	r17,r22
     e70:	402d883a 	mov	r22,r8
     e74:	9809883a 	mov	r4,r19
     e78:	880b883a 	mov	r5,r17
     e7c:	01800284 	movi	r6,10
     e80:	000f883a 	mov	r7,zero
     e84:	000a30c0 	call	a30c <__umoddi3>
     e88:	10800c04 	addi	r2,r2,48
     e8c:	843fffc4 	addi	r16,r16,-1
     e90:	9809883a 	mov	r4,r19
     e94:	880b883a 	mov	r5,r17
     e98:	80800005 	stb	r2,0(r16)
     e9c:	01800284 	movi	r6,10
     ea0:	000f883a 	mov	r7,zero
     ea4:	0009d940 	call	9d94 <__udivdi3>
     ea8:	1027883a 	mov	r19,r2
     eac:	10c4b03a 	or	r2,r2,r3
     eb0:	1823883a 	mov	r17,r3
     eb4:	103fef1e 	bne	r2,zero,e74 <___vfprintf_internal_r+0x55c>
     eb8:	d8c02817 	ldw	r3,160(sp)
     ebc:	dc402a17 	ldw	r17,168(sp)
     ec0:	b011883a 	mov	r8,r22
     ec4:	1c07c83a 	sub	r3,r3,r16
     ec8:	d8c02e15 	stw	r3,184(sp)
     ecc:	00005906 	br	1034 <___vfprintf_internal_r+0x71c>
     ed0:	18c03fcc 	andi	r3,r3,255
     ed4:	1806fa1e 	bne	r3,zero,2ac0 <___vfprintf_internal_r+0x21a8>
     ed8:	9080020c 	andi	r2,r18,8
     edc:	10048a26 	beq	r2,zero,2108 <___vfprintf_internal_r+0x17f0>
     ee0:	d8c02d17 	ldw	r3,180(sp)
     ee4:	d9002d17 	ldw	r4,180(sp)
     ee8:	d9402d17 	ldw	r5,180(sp)
     eec:	18c00017 	ldw	r3,0(r3)
     ef0:	21000117 	ldw	r4,4(r4)
     ef4:	29400204 	addi	r5,r5,8
     ef8:	d8c03615 	stw	r3,216(sp)
     efc:	d9003815 	stw	r4,224(sp)
     f00:	d9402d15 	stw	r5,180(sp)
     f04:	d9003617 	ldw	r4,216(sp)
     f08:	d9403817 	ldw	r5,224(sp)
     f0c:	da003d15 	stw	r8,244(sp)
     f10:	04000044 	movi	r16,1
     f14:	0007b380 	call	7b38 <__fpclassifyd>
     f18:	da003d17 	ldw	r8,244(sp)
     f1c:	14041f1e 	bne	r2,r16,1f9c <___vfprintf_internal_r+0x1684>
     f20:	d9003617 	ldw	r4,216(sp)
     f24:	d9403817 	ldw	r5,224(sp)
     f28:	000d883a 	mov	r6,zero
     f2c:	000f883a 	mov	r7,zero
     f30:	000bb3c0 	call	bb3c <__ledf2>
     f34:	da003d17 	ldw	r8,244(sp)
     f38:	1005be16 	blt	r2,zero,2634 <___vfprintf_internal_r+0x1d1c>
     f3c:	df002783 	ldbu	fp,158(sp)
     f40:	008011c4 	movi	r2,71
     f44:	1445330e 	bge	r2,r17,2414 <___vfprintf_internal_r+0x1afc>
     f48:	040000f4 	movhi	r16,3
     f4c:	8412ea04 	addi	r16,r16,19368
     f50:	00c000c4 	movi	r3,3
     f54:	00bfdfc4 	movi	r2,-129
     f58:	d8c02a15 	stw	r3,168(sp)
     f5c:	90a4703a 	and	r18,r18,r2
     f60:	d8c02e15 	stw	r3,184(sp)
     f64:	d8002915 	stw	zero,164(sp)
     f68:	d8003215 	stw	zero,200(sp)
     f6c:	00003706 	br	104c <___vfprintf_internal_r+0x734>
     f70:	94800214 	ori	r18,r18,8
     f74:	ac400007 	ldb	r17,0(r21)
     f78:	003ec806 	br	a9c <___vfprintf_internal_r+0x184>
     f7c:	18c03fcc 	andi	r3,r3,255
     f80:	1806db1e 	bne	r3,zero,2af0 <___vfprintf_internal_r+0x21d8>
     f84:	94800414 	ori	r18,r18,16
     f88:	9080080c 	andi	r2,r18,32
     f8c:	1002d826 	beq	r2,zero,1af0 <___vfprintf_internal_r+0x11d8>
     f90:	d9402d17 	ldw	r5,180(sp)
     f94:	d8c02917 	ldw	r3,164(sp)
     f98:	d8002785 	stb	zero,158(sp)
     f9c:	28800204 	addi	r2,r5,8
     fa0:	2cc00017 	ldw	r19,0(r5)
     fa4:	2d800117 	ldw	r22,4(r5)
     fa8:	18048f16 	blt	r3,zero,21e8 <___vfprintf_internal_r+0x18d0>
     fac:	013fdfc4 	movi	r4,-129
     fb0:	9d86b03a 	or	r3,r19,r22
     fb4:	d8802d15 	stw	r2,180(sp)
     fb8:	9124703a 	and	r18,r18,r4
     fbc:	1802d91e 	bne	r3,zero,1b24 <___vfprintf_internal_r+0x120c>
     fc0:	d8c02917 	ldw	r3,164(sp)
     fc4:	0039883a 	mov	fp,zero
     fc8:	1805c326 	beq	r3,zero,26d8 <___vfprintf_internal_r+0x1dc0>
     fcc:	0027883a 	mov	r19,zero
     fd0:	002d883a 	mov	r22,zero
     fd4:	dc001e04 	addi	r16,sp,120
     fd8:	9806d0fa 	srli	r3,r19,3
     fdc:	b008977a 	slli	r4,r22,29
     fe0:	b02cd0fa 	srli	r22,r22,3
     fe4:	9cc001cc 	andi	r19,r19,7
     fe8:	98800c04 	addi	r2,r19,48
     fec:	843fffc4 	addi	r16,r16,-1
     ff0:	20e6b03a 	or	r19,r4,r3
     ff4:	80800005 	stb	r2,0(r16)
     ff8:	9d86b03a 	or	r3,r19,r22
     ffc:	183ff61e 	bne	r3,zero,fd8 <___vfprintf_internal_r+0x6c0>
    1000:	90c0004c 	andi	r3,r18,1
    1004:	18013b26 	beq	r3,zero,14f4 <___vfprintf_internal_r+0xbdc>
    1008:	10803fcc 	andi	r2,r2,255
    100c:	1080201c 	xori	r2,r2,128
    1010:	10bfe004 	addi	r2,r2,-128
    1014:	00c00c04 	movi	r3,48
    1018:	10c13626 	beq	r2,r3,14f4 <___vfprintf_internal_r+0xbdc>
    101c:	80ffffc5 	stb	r3,-1(r16)
    1020:	d8c02817 	ldw	r3,160(sp)
    1024:	80bfffc4 	addi	r2,r16,-1
    1028:	1021883a 	mov	r16,r2
    102c:	1887c83a 	sub	r3,r3,r2
    1030:	d8c02e15 	stw	r3,184(sp)
    1034:	d8802e17 	ldw	r2,184(sp)
    1038:	d9002917 	ldw	r4,164(sp)
    103c:	1100010e 	bge	r2,r4,1044 <___vfprintf_internal_r+0x72c>
    1040:	2005883a 	mov	r2,r4
    1044:	d8802a15 	stw	r2,168(sp)
    1048:	d8003215 	stw	zero,200(sp)
    104c:	e7003fcc 	andi	fp,fp,255
    1050:	e700201c 	xori	fp,fp,128
    1054:	e73fe004 	addi	fp,fp,-128
    1058:	e0000326 	beq	fp,zero,1068 <___vfprintf_internal_r+0x750>
    105c:	d8c02a17 	ldw	r3,168(sp)
    1060:	18c00044 	addi	r3,r3,1
    1064:	d8c02a15 	stw	r3,168(sp)
    1068:	90c0008c 	andi	r3,r18,2
    106c:	d8c02b15 	stw	r3,172(sp)
    1070:	18000326 	beq	r3,zero,1080 <___vfprintf_internal_r+0x768>
    1074:	d8c02a17 	ldw	r3,168(sp)
    1078:	18c00084 	addi	r3,r3,2
    107c:	d8c02a15 	stw	r3,168(sp)
    1080:	90c0210c 	andi	r3,r18,132
    1084:	d8c03015 	stw	r3,192(sp)
    1088:	1801a31e 	bne	r3,zero,1718 <___vfprintf_internal_r+0xe00>
    108c:	d9003117 	ldw	r4,196(sp)
    1090:	d8c02a17 	ldw	r3,168(sp)
    1094:	20e7c83a 	sub	r19,r4,r3
    1098:	04c19f0e 	bge	zero,r19,1718 <___vfprintf_internal_r+0xe00>
    109c:	02400404 	movi	r9,16
    10a0:	d8c02017 	ldw	r3,128(sp)
    10a4:	d8801f17 	ldw	r2,124(sp)
    10a8:	4cc50d0e 	bge	r9,r19,24e0 <___vfprintf_internal_r+0x1bc8>
    10ac:	014000f4 	movhi	r5,3
    10b0:	2952fd84 	addi	r5,r5,19446
    10b4:	dc403b15 	stw	r17,236(sp)
    10b8:	d9403515 	stw	r5,212(sp)
    10bc:	9823883a 	mov	r17,r19
    10c0:	482d883a 	mov	r22,r9
    10c4:	9027883a 	mov	r19,r18
    10c8:	070001c4 	movi	fp,7
    10cc:	8025883a 	mov	r18,r16
    10d0:	dc002c17 	ldw	r16,176(sp)
    10d4:	00000306 	br	10e4 <___vfprintf_internal_r+0x7cc>
    10d8:	8c7ffc04 	addi	r17,r17,-16
    10dc:	42000204 	addi	r8,r8,8
    10e0:	b440130e 	bge	r22,r17,1130 <___vfprintf_internal_r+0x818>
    10e4:	010000f4 	movhi	r4,3
    10e8:	18c00404 	addi	r3,r3,16
    10ec:	10800044 	addi	r2,r2,1
    10f0:	2112fd84 	addi	r4,r4,19446
    10f4:	41000015 	stw	r4,0(r8)
    10f8:	45800115 	stw	r22,4(r8)
    10fc:	d8c02015 	stw	r3,128(sp)
    1100:	d8801f15 	stw	r2,124(sp)
    1104:	e0bff40e 	bge	fp,r2,10d8 <___vfprintf_internal_r+0x7c0>
    1108:	d9801e04 	addi	r6,sp,120
    110c:	b80b883a 	mov	r5,r23
    1110:	8009883a 	mov	r4,r16
    1114:	0007f140 	call	7f14 <__sprint_r>
    1118:	103f011e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    111c:	8c7ffc04 	addi	r17,r17,-16
    1120:	d8c02017 	ldw	r3,128(sp)
    1124:	d8801f17 	ldw	r2,124(sp)
    1128:	da000404 	addi	r8,sp,16
    112c:	b47fed16 	blt	r22,r17,10e4 <___vfprintf_internal_r+0x7cc>
    1130:	9021883a 	mov	r16,r18
    1134:	9825883a 	mov	r18,r19
    1138:	8827883a 	mov	r19,r17
    113c:	dc403b17 	ldw	r17,236(sp)
    1140:	d9403517 	ldw	r5,212(sp)
    1144:	98c7883a 	add	r3,r19,r3
    1148:	10800044 	addi	r2,r2,1
    114c:	41400015 	stw	r5,0(r8)
    1150:	44c00115 	stw	r19,4(r8)
    1154:	d8c02015 	stw	r3,128(sp)
    1158:	d8801f15 	stw	r2,124(sp)
    115c:	010001c4 	movi	r4,7
    1160:	2082a316 	blt	r4,r2,1bf0 <___vfprintf_internal_r+0x12d8>
    1164:	df002787 	ldb	fp,158(sp)
    1168:	42000204 	addi	r8,r8,8
    116c:	e0000c26 	beq	fp,zero,11a0 <___vfprintf_internal_r+0x888>
    1170:	d8801f17 	ldw	r2,124(sp)
    1174:	d9002784 	addi	r4,sp,158
    1178:	18c00044 	addi	r3,r3,1
    117c:	10800044 	addi	r2,r2,1
    1180:	41000015 	stw	r4,0(r8)
    1184:	01000044 	movi	r4,1
    1188:	41000115 	stw	r4,4(r8)
    118c:	d8c02015 	stw	r3,128(sp)
    1190:	d8801f15 	stw	r2,124(sp)
    1194:	010001c4 	movi	r4,7
    1198:	20823c16 	blt	r4,r2,1a8c <___vfprintf_internal_r+0x1174>
    119c:	42000204 	addi	r8,r8,8
    11a0:	d8802b17 	ldw	r2,172(sp)
    11a4:	10000c26 	beq	r2,zero,11d8 <___vfprintf_internal_r+0x8c0>
    11a8:	d8801f17 	ldw	r2,124(sp)
    11ac:	d9002704 	addi	r4,sp,156
    11b0:	18c00084 	addi	r3,r3,2
    11b4:	10800044 	addi	r2,r2,1
    11b8:	41000015 	stw	r4,0(r8)
    11bc:	01000084 	movi	r4,2
    11c0:	41000115 	stw	r4,4(r8)
    11c4:	d8c02015 	stw	r3,128(sp)
    11c8:	d8801f15 	stw	r2,124(sp)
    11cc:	010001c4 	movi	r4,7
    11d0:	20823616 	blt	r4,r2,1aac <___vfprintf_internal_r+0x1194>
    11d4:	42000204 	addi	r8,r8,8
    11d8:	d9003017 	ldw	r4,192(sp)
    11dc:	00802004 	movi	r2,128
    11e0:	20819926 	beq	r4,r2,1848 <___vfprintf_internal_r+0xf30>
    11e4:	d9402917 	ldw	r5,164(sp)
    11e8:	d8802e17 	ldw	r2,184(sp)
    11ec:	28adc83a 	sub	r22,r5,r2
    11f0:	0580310e 	bge	zero,r22,12b8 <___vfprintf_internal_r+0x9a0>
    11f4:	07000404 	movi	fp,16
    11f8:	d8801f17 	ldw	r2,124(sp)
    11fc:	e584140e 	bge	fp,r22,2250 <___vfprintf_internal_r+0x1938>
    1200:	014000f4 	movhi	r5,3
    1204:	2952f984 	addi	r5,r5,19430
    1208:	dc402915 	stw	r17,164(sp)
    120c:	d9402b15 	stw	r5,172(sp)
    1210:	b023883a 	mov	r17,r22
    1214:	04c001c4 	movi	r19,7
    1218:	a82d883a 	mov	r22,r21
    121c:	902b883a 	mov	r21,r18
    1220:	8025883a 	mov	r18,r16
    1224:	dc002c17 	ldw	r16,176(sp)
    1228:	00000306 	br	1238 <___vfprintf_internal_r+0x920>
    122c:	8c7ffc04 	addi	r17,r17,-16
    1230:	42000204 	addi	r8,r8,8
    1234:	e440110e 	bge	fp,r17,127c <___vfprintf_internal_r+0x964>
    1238:	18c00404 	addi	r3,r3,16
    123c:	10800044 	addi	r2,r2,1
    1240:	45000015 	stw	r20,0(r8)
    1244:	47000115 	stw	fp,4(r8)
    1248:	d8c02015 	stw	r3,128(sp)
    124c:	d8801f15 	stw	r2,124(sp)
    1250:	98bff60e 	bge	r19,r2,122c <___vfprintf_internal_r+0x914>
    1254:	d9801e04 	addi	r6,sp,120
    1258:	b80b883a 	mov	r5,r23
    125c:	8009883a 	mov	r4,r16
    1260:	0007f140 	call	7f14 <__sprint_r>
    1264:	103eae1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1268:	8c7ffc04 	addi	r17,r17,-16
    126c:	d8c02017 	ldw	r3,128(sp)
    1270:	d8801f17 	ldw	r2,124(sp)
    1274:	da000404 	addi	r8,sp,16
    1278:	e47fef16 	blt	fp,r17,1238 <___vfprintf_internal_r+0x920>
    127c:	9021883a 	mov	r16,r18
    1280:	a825883a 	mov	r18,r21
    1284:	b02b883a 	mov	r21,r22
    1288:	882d883a 	mov	r22,r17
    128c:	dc402917 	ldw	r17,164(sp)
    1290:	d9002b17 	ldw	r4,172(sp)
    1294:	1d87883a 	add	r3,r3,r22
    1298:	10800044 	addi	r2,r2,1
    129c:	41000015 	stw	r4,0(r8)
    12a0:	45800115 	stw	r22,4(r8)
    12a4:	d8c02015 	stw	r3,128(sp)
    12a8:	d8801f15 	stw	r2,124(sp)
    12ac:	010001c4 	movi	r4,7
    12b0:	2081ee16 	blt	r4,r2,1a6c <___vfprintf_internal_r+0x1154>
    12b4:	42000204 	addi	r8,r8,8
    12b8:	9080400c 	andi	r2,r18,256
    12bc:	1001181e 	bne	r2,zero,1720 <___vfprintf_internal_r+0xe08>
    12c0:	d9402e17 	ldw	r5,184(sp)
    12c4:	d8801f17 	ldw	r2,124(sp)
    12c8:	44000015 	stw	r16,0(r8)
    12cc:	1947883a 	add	r3,r3,r5
    12d0:	10800044 	addi	r2,r2,1
    12d4:	41400115 	stw	r5,4(r8)
    12d8:	d8c02015 	stw	r3,128(sp)
    12dc:	d8801f15 	stw	r2,124(sp)
    12e0:	010001c4 	movi	r4,7
    12e4:	2081d316 	blt	r4,r2,1a34 <___vfprintf_internal_r+0x111c>
    12e8:	42000204 	addi	r8,r8,8
    12ec:	9480010c 	andi	r18,r18,4
    12f0:	90003226 	beq	r18,zero,13bc <___vfprintf_internal_r+0xaa4>
    12f4:	d9403117 	ldw	r5,196(sp)
    12f8:	d8802a17 	ldw	r2,168(sp)
    12fc:	28a1c83a 	sub	r16,r5,r2
    1300:	04002e0e 	bge	zero,r16,13bc <___vfprintf_internal_r+0xaa4>
    1304:	04400404 	movi	r17,16
    1308:	d8801f17 	ldw	r2,124(sp)
    130c:	8c04a20e 	bge	r17,r16,2598 <___vfprintf_internal_r+0x1c80>
    1310:	014000f4 	movhi	r5,3
    1314:	2952fd84 	addi	r5,r5,19446
    1318:	d9403515 	stw	r5,212(sp)
    131c:	048001c4 	movi	r18,7
    1320:	dcc02c17 	ldw	r19,176(sp)
    1324:	00000306 	br	1334 <___vfprintf_internal_r+0xa1c>
    1328:	843ffc04 	addi	r16,r16,-16
    132c:	42000204 	addi	r8,r8,8
    1330:	8c00130e 	bge	r17,r16,1380 <___vfprintf_internal_r+0xa68>
    1334:	010000f4 	movhi	r4,3
    1338:	18c00404 	addi	r3,r3,16
    133c:	10800044 	addi	r2,r2,1
    1340:	2112fd84 	addi	r4,r4,19446
    1344:	41000015 	stw	r4,0(r8)
    1348:	44400115 	stw	r17,4(r8)
    134c:	d8c02015 	stw	r3,128(sp)
    1350:	d8801f15 	stw	r2,124(sp)
    1354:	90bff40e 	bge	r18,r2,1328 <___vfprintf_internal_r+0xa10>
    1358:	d9801e04 	addi	r6,sp,120
    135c:	b80b883a 	mov	r5,r23
    1360:	9809883a 	mov	r4,r19
    1364:	0007f140 	call	7f14 <__sprint_r>
    1368:	103e6d1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    136c:	843ffc04 	addi	r16,r16,-16
    1370:	d8c02017 	ldw	r3,128(sp)
    1374:	d8801f17 	ldw	r2,124(sp)
    1378:	da000404 	addi	r8,sp,16
    137c:	8c3fed16 	blt	r17,r16,1334 <___vfprintf_internal_r+0xa1c>
    1380:	d9403517 	ldw	r5,212(sp)
    1384:	1c07883a 	add	r3,r3,r16
    1388:	10800044 	addi	r2,r2,1
    138c:	41400015 	stw	r5,0(r8)
    1390:	44000115 	stw	r16,4(r8)
    1394:	d8c02015 	stw	r3,128(sp)
    1398:	d8801f15 	stw	r2,124(sp)
    139c:	010001c4 	movi	r4,7
    13a0:	2080060e 	bge	r4,r2,13bc <___vfprintf_internal_r+0xaa4>
    13a4:	d9002c17 	ldw	r4,176(sp)
    13a8:	d9801e04 	addi	r6,sp,120
    13ac:	b80b883a 	mov	r5,r23
    13b0:	0007f140 	call	7f14 <__sprint_r>
    13b4:	103e5a1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    13b8:	d8c02017 	ldw	r3,128(sp)
    13bc:	d8803117 	ldw	r2,196(sp)
    13c0:	d9002a17 	ldw	r4,168(sp)
    13c4:	1100010e 	bge	r2,r4,13cc <___vfprintf_internal_r+0xab4>
    13c8:	2005883a 	mov	r2,r4
    13cc:	d9402f17 	ldw	r5,188(sp)
    13d0:	288b883a 	add	r5,r5,r2
    13d4:	d9402f15 	stw	r5,188(sp)
    13d8:	18019e1e 	bne	r3,zero,1a54 <___vfprintf_internal_r+0x113c>
    13dc:	a8800007 	ldb	r2,0(r21)
    13e0:	d8001f15 	stw	zero,124(sp)
    13e4:	da000404 	addi	r8,sp,16
    13e8:	103d851e 	bne	r2,zero,a00 <___vfprintf_internal_r+0xe8>
    13ec:	a821883a 	mov	r16,r21
    13f0:	003d9b06 	br	a60 <___vfprintf_internal_r+0x148>
    13f4:	18c03fcc 	andi	r3,r3,255
    13f8:	1805c11e 	bne	r3,zero,2b00 <___vfprintf_internal_r+0x21e8>
    13fc:	94800414 	ori	r18,r18,16
    1400:	9080080c 	andi	r2,r18,32
    1404:	10020c26 	beq	r2,zero,1c38 <___vfprintf_internal_r+0x1320>
    1408:	d8802d17 	ldw	r2,180(sp)
    140c:	d9002917 	ldw	r4,164(sp)
    1410:	d8002785 	stb	zero,158(sp)
    1414:	10c00204 	addi	r3,r2,8
    1418:	14c00017 	ldw	r19,0(r2)
    141c:	15800117 	ldw	r22,4(r2)
    1420:	20040f16 	blt	r4,zero,2460 <___vfprintf_internal_r+0x1b48>
    1424:	013fdfc4 	movi	r4,-129
    1428:	9d84b03a 	or	r2,r19,r22
    142c:	d8c02d15 	stw	r3,180(sp)
    1430:	9124703a 	and	r18,r18,r4
    1434:	0039883a 	mov	fp,zero
    1438:	103e891e 	bne	r2,zero,e60 <___vfprintf_internal_r+0x548>
    143c:	d9002917 	ldw	r4,164(sp)
    1440:	2002c11e 	bne	r4,zero,1f48 <___vfprintf_internal_r+0x1630>
    1444:	d8002915 	stw	zero,164(sp)
    1448:	d8002e15 	stw	zero,184(sp)
    144c:	dc001e04 	addi	r16,sp,120
    1450:	003ef806 	br	1034 <___vfprintf_internal_r+0x71c>
    1454:	18c03fcc 	andi	r3,r3,255
    1458:	18059d1e 	bne	r3,zero,2ad0 <___vfprintf_internal_r+0x21b8>
    145c:	014000f4 	movhi	r5,3
    1460:	2952ed04 	addi	r5,r5,19380
    1464:	d9403915 	stw	r5,228(sp)
    1468:	9080080c 	andi	r2,r18,32
    146c:	10005226 	beq	r2,zero,15b8 <___vfprintf_internal_r+0xca0>
    1470:	d8802d17 	ldw	r2,180(sp)
    1474:	14c00017 	ldw	r19,0(r2)
    1478:	15800117 	ldw	r22,4(r2)
    147c:	10800204 	addi	r2,r2,8
    1480:	d8802d15 	stw	r2,180(sp)
    1484:	9080004c 	andi	r2,r18,1
    1488:	10019026 	beq	r2,zero,1acc <___vfprintf_internal_r+0x11b4>
    148c:	9d84b03a 	or	r2,r19,r22
    1490:	10036926 	beq	r2,zero,2238 <___vfprintf_internal_r+0x1920>
    1494:	d8c02917 	ldw	r3,164(sp)
    1498:	00800c04 	movi	r2,48
    149c:	d8802705 	stb	r2,156(sp)
    14a0:	dc402745 	stb	r17,157(sp)
    14a4:	d8002785 	stb	zero,158(sp)
    14a8:	90800094 	ori	r2,r18,2
    14ac:	18045d16 	blt	r3,zero,2624 <___vfprintf_internal_r+0x1d0c>
    14b0:	00bfdfc4 	movi	r2,-129
    14b4:	90a4703a 	and	r18,r18,r2
    14b8:	94800094 	ori	r18,r18,2
    14bc:	0039883a 	mov	fp,zero
    14c0:	d9003917 	ldw	r4,228(sp)
    14c4:	dc001e04 	addi	r16,sp,120
    14c8:	988003cc 	andi	r2,r19,15
    14cc:	b006973a 	slli	r3,r22,28
    14d0:	2085883a 	add	r2,r4,r2
    14d4:	9826d13a 	srli	r19,r19,4
    14d8:	10800003 	ldbu	r2,0(r2)
    14dc:	b02cd13a 	srli	r22,r22,4
    14e0:	843fffc4 	addi	r16,r16,-1
    14e4:	1ce6b03a 	or	r19,r3,r19
    14e8:	80800005 	stb	r2,0(r16)
    14ec:	9d84b03a 	or	r2,r19,r22
    14f0:	103ff51e 	bne	r2,zero,14c8 <___vfprintf_internal_r+0xbb0>
    14f4:	d8c02817 	ldw	r3,160(sp)
    14f8:	1c07c83a 	sub	r3,r3,r16
    14fc:	d8c02e15 	stw	r3,184(sp)
    1500:	003ecc06 	br	1034 <___vfprintf_internal_r+0x71c>
    1504:	18c03fcc 	andi	r3,r3,255
    1508:	183e9f26 	beq	r3,zero,f88 <___vfprintf_internal_r+0x670>
    150c:	d9c02785 	stb	r7,158(sp)
    1510:	003e9d06 	br	f88 <___vfprintf_internal_r+0x670>
    1514:	00c00044 	movi	r3,1
    1518:	01c00ac4 	movi	r7,43
    151c:	ac400007 	ldb	r17,0(r21)
    1520:	003d5e06 	br	a9c <___vfprintf_internal_r+0x184>
    1524:	94800814 	ori	r18,r18,32
    1528:	ac400007 	ldb	r17,0(r21)
    152c:	003d5b06 	br	a9c <___vfprintf_internal_r+0x184>
    1530:	d8c02d17 	ldw	r3,180(sp)
    1534:	d8002785 	stb	zero,158(sp)
    1538:	1c000017 	ldw	r16,0(r3)
    153c:	1cc00104 	addi	r19,r3,4
    1540:	80041926 	beq	r16,zero,25a8 <___vfprintf_internal_r+0x1c90>
    1544:	d9002917 	ldw	r4,164(sp)
    1548:	2003d016 	blt	r4,zero,248c <___vfprintf_internal_r+0x1b74>
    154c:	200d883a 	mov	r6,r4
    1550:	000b883a 	mov	r5,zero
    1554:	8009883a 	mov	r4,r16
    1558:	da003d15 	stw	r8,244(sp)
    155c:	00061280 	call	6128 <memchr>
    1560:	da003d17 	ldw	r8,244(sp)
    1564:	10045426 	beq	r2,zero,26b8 <___vfprintf_internal_r+0x1da0>
    1568:	1405c83a 	sub	r2,r2,r16
    156c:	d8802e15 	stw	r2,184(sp)
    1570:	1003cc16 	blt	r2,zero,24a4 <___vfprintf_internal_r+0x1b8c>
    1574:	df002783 	ldbu	fp,158(sp)
    1578:	d8802a15 	stw	r2,168(sp)
    157c:	dcc02d15 	stw	r19,180(sp)
    1580:	d8002915 	stw	zero,164(sp)
    1584:	d8003215 	stw	zero,200(sp)
    1588:	003eb006 	br	104c <___vfprintf_internal_r+0x734>
    158c:	18c03fcc 	andi	r3,r3,255
    1590:	183f9b26 	beq	r3,zero,1400 <___vfprintf_internal_r+0xae8>
    1594:	d9c02785 	stb	r7,158(sp)
    1598:	003f9906 	br	1400 <___vfprintf_internal_r+0xae8>
    159c:	18c03fcc 	andi	r3,r3,255
    15a0:	1805551e 	bne	r3,zero,2af8 <___vfprintf_internal_r+0x21e0>
    15a4:	014000f4 	movhi	r5,3
    15a8:	2952f204 	addi	r5,r5,19400
    15ac:	d9403915 	stw	r5,228(sp)
    15b0:	9080080c 	andi	r2,r18,32
    15b4:	103fae1e 	bne	r2,zero,1470 <___vfprintf_internal_r+0xb58>
    15b8:	9080040c 	andi	r2,r18,16
    15bc:	1002de26 	beq	r2,zero,2138 <___vfprintf_internal_r+0x1820>
    15c0:	d8c02d17 	ldw	r3,180(sp)
    15c4:	002d883a 	mov	r22,zero
    15c8:	1cc00017 	ldw	r19,0(r3)
    15cc:	18c00104 	addi	r3,r3,4
    15d0:	d8c02d15 	stw	r3,180(sp)
    15d4:	003fab06 	br	1484 <___vfprintf_internal_r+0xb6c>
    15d8:	38803fcc 	andi	r2,r7,255
    15dc:	1080201c 	xori	r2,r2,128
    15e0:	10bfe004 	addi	r2,r2,-128
    15e4:	1002d21e 	bne	r2,zero,2130 <___vfprintf_internal_r+0x1818>
    15e8:	00c00044 	movi	r3,1
    15ec:	01c00804 	movi	r7,32
    15f0:	ac400007 	ldb	r17,0(r21)
    15f4:	003d2906 	br	a9c <___vfprintf_internal_r+0x184>
    15f8:	94800054 	ori	r18,r18,1
    15fc:	ac400007 	ldb	r17,0(r21)
    1600:	003d2606 	br	a9c <___vfprintf_internal_r+0x184>
    1604:	18c03fcc 	andi	r3,r3,255
    1608:	183e0526 	beq	r3,zero,e20 <___vfprintf_internal_r+0x508>
    160c:	d9c02785 	stb	r7,158(sp)
    1610:	003e0306 	br	e20 <___vfprintf_internal_r+0x508>
    1614:	94801014 	ori	r18,r18,64
    1618:	ac400007 	ldb	r17,0(r21)
    161c:	003d1f06 	br	a9c <___vfprintf_internal_r+0x184>
    1620:	ac400007 	ldb	r17,0(r21)
    1624:	8a438726 	beq	r17,r9,2444 <___vfprintf_internal_r+0x1b2c>
    1628:	94800414 	ori	r18,r18,16
    162c:	003d1b06 	br	a9c <___vfprintf_internal_r+0x184>
    1630:	18c03fcc 	andi	r3,r3,255
    1634:	1805341e 	bne	r3,zero,2b08 <___vfprintf_internal_r+0x21f0>
    1638:	9080080c 	andi	r2,r18,32
    163c:	1002cd26 	beq	r2,zero,2174 <___vfprintf_internal_r+0x185c>
    1640:	d9402d17 	ldw	r5,180(sp)
    1644:	d9002f17 	ldw	r4,188(sp)
    1648:	28800017 	ldw	r2,0(r5)
    164c:	2007d7fa 	srai	r3,r4,31
    1650:	29400104 	addi	r5,r5,4
    1654:	d9402d15 	stw	r5,180(sp)
    1658:	11000015 	stw	r4,0(r2)
    165c:	10c00115 	stw	r3,4(r2)
    1660:	003ce506 	br	9f8 <___vfprintf_internal_r+0xe0>
    1664:	d8c02d17 	ldw	r3,180(sp)
    1668:	d9002d17 	ldw	r4,180(sp)
    166c:	d8002785 	stb	zero,158(sp)
    1670:	18800017 	ldw	r2,0(r3)
    1674:	21000104 	addi	r4,r4,4
    1678:	00c00044 	movi	r3,1
    167c:	d8c02a15 	stw	r3,168(sp)
    1680:	d8801405 	stb	r2,80(sp)
    1684:	d9002d15 	stw	r4,180(sp)
    1688:	d8c02e15 	stw	r3,184(sp)
    168c:	d8002915 	stw	zero,164(sp)
    1690:	d8003215 	stw	zero,200(sp)
    1694:	dc001404 	addi	r16,sp,80
    1698:	0039883a 	mov	fp,zero
    169c:	003e7206 	br	1068 <___vfprintf_internal_r+0x750>
    16a0:	010000f4 	movhi	r4,3
    16a4:	2112f204 	addi	r4,r4,19400
    16a8:	0039883a 	mov	fp,zero
    16ac:	d9003915 	stw	r4,228(sp)
    16b0:	04401e04 	movi	r17,120
    16b4:	003f8206 	br	14c0 <___vfprintf_internal_r+0xba8>
    16b8:	18c03fcc 	andi	r3,r3,255
    16bc:	1805061e 	bne	r3,zero,2ad8 <___vfprintf_internal_r+0x21c0>
    16c0:	883d9126 	beq	r17,zero,d08 <___vfprintf_internal_r+0x3f0>
    16c4:	00c00044 	movi	r3,1
    16c8:	d8c02a15 	stw	r3,168(sp)
    16cc:	dc401405 	stb	r17,80(sp)
    16d0:	d8002785 	stb	zero,158(sp)
    16d4:	003fec06 	br	1688 <___vfprintf_internal_r+0xd70>
    16d8:	014000f4 	movhi	r5,3
    16dc:	2952f204 	addi	r5,r5,19400
    16e0:	d9403915 	stw	r5,228(sp)
    16e4:	d8c02d15 	stw	r3,180(sp)
    16e8:	1025883a 	mov	r18,r2
    16ec:	04401e04 	movi	r17,120
    16f0:	9d84b03a 	or	r2,r19,r22
    16f4:	1000fc1e 	bne	r2,zero,1ae8 <___vfprintf_internal_r+0x11d0>
    16f8:	0039883a 	mov	fp,zero
    16fc:	00800084 	movi	r2,2
    1700:	10803fcc 	andi	r2,r2,255
    1704:	00c00044 	movi	r3,1
    1708:	10c20f26 	beq	r2,r3,1f48 <___vfprintf_internal_r+0x1630>
    170c:	00c00084 	movi	r3,2
    1710:	10fd6326 	beq	r2,r3,ca0 <___vfprintf_internal_r+0x388>
    1714:	003e2d06 	br	fcc <___vfprintf_internal_r+0x6b4>
    1718:	d8c02017 	ldw	r3,128(sp)
    171c:	003e9306 	br	116c <___vfprintf_internal_r+0x854>
    1720:	00801944 	movi	r2,101
    1724:	14407e0e 	bge	r2,r17,1920 <___vfprintf_internal_r+0x1008>
    1728:	d9003617 	ldw	r4,216(sp)
    172c:	d9403817 	ldw	r5,224(sp)
    1730:	000d883a 	mov	r6,zero
    1734:	000f883a 	mov	r7,zero
    1738:	d8c03c15 	stw	r3,240(sp)
    173c:	da003d15 	stw	r8,244(sp)
    1740:	000b9d80 	call	b9d8 <__eqdf2>
    1744:	d8c03c17 	ldw	r3,240(sp)
    1748:	da003d17 	ldw	r8,244(sp)
    174c:	1000f71e 	bne	r2,zero,1b2c <___vfprintf_internal_r+0x1214>
    1750:	d8801f17 	ldw	r2,124(sp)
    1754:	010000f4 	movhi	r4,3
    1758:	2112f904 	addi	r4,r4,19428
    175c:	18c00044 	addi	r3,r3,1
    1760:	10800044 	addi	r2,r2,1
    1764:	41000015 	stw	r4,0(r8)
    1768:	01000044 	movi	r4,1
    176c:	41000115 	stw	r4,4(r8)
    1770:	d8c02015 	stw	r3,128(sp)
    1774:	d8801f15 	stw	r2,124(sp)
    1778:	010001c4 	movi	r4,7
    177c:	2082b816 	blt	r4,r2,2260 <___vfprintf_internal_r+0x1948>
    1780:	42000204 	addi	r8,r8,8
    1784:	d8802617 	ldw	r2,152(sp)
    1788:	d9403317 	ldw	r5,204(sp)
    178c:	11400216 	blt	r2,r5,1798 <___vfprintf_internal_r+0xe80>
    1790:	9080004c 	andi	r2,r18,1
    1794:	103ed526 	beq	r2,zero,12ec <___vfprintf_internal_r+0x9d4>
    1798:	d8803717 	ldw	r2,220(sp)
    179c:	d9003417 	ldw	r4,208(sp)
    17a0:	d9403717 	ldw	r5,220(sp)
    17a4:	1887883a 	add	r3,r3,r2
    17a8:	d8801f17 	ldw	r2,124(sp)
    17ac:	41000015 	stw	r4,0(r8)
    17b0:	41400115 	stw	r5,4(r8)
    17b4:	10800044 	addi	r2,r2,1
    17b8:	d8c02015 	stw	r3,128(sp)
    17bc:	d8801f15 	stw	r2,124(sp)
    17c0:	010001c4 	movi	r4,7
    17c4:	20832916 	blt	r4,r2,246c <___vfprintf_internal_r+0x1b54>
    17c8:	42000204 	addi	r8,r8,8
    17cc:	d8803317 	ldw	r2,204(sp)
    17d0:	143fffc4 	addi	r16,r2,-1
    17d4:	043ec50e 	bge	zero,r16,12ec <___vfprintf_internal_r+0x9d4>
    17d8:	04400404 	movi	r17,16
    17dc:	d8801f17 	ldw	r2,124(sp)
    17e0:	8c00880e 	bge	r17,r16,1a04 <___vfprintf_internal_r+0x10ec>
    17e4:	014000f4 	movhi	r5,3
    17e8:	2952f984 	addi	r5,r5,19430
    17ec:	d9402b15 	stw	r5,172(sp)
    17f0:	058001c4 	movi	r22,7
    17f4:	dcc02c17 	ldw	r19,176(sp)
    17f8:	00000306 	br	1808 <___vfprintf_internal_r+0xef0>
    17fc:	42000204 	addi	r8,r8,8
    1800:	843ffc04 	addi	r16,r16,-16
    1804:	8c00820e 	bge	r17,r16,1a10 <___vfprintf_internal_r+0x10f8>
    1808:	18c00404 	addi	r3,r3,16
    180c:	10800044 	addi	r2,r2,1
    1810:	45000015 	stw	r20,0(r8)
    1814:	44400115 	stw	r17,4(r8)
    1818:	d8c02015 	stw	r3,128(sp)
    181c:	d8801f15 	stw	r2,124(sp)
    1820:	b0bff60e 	bge	r22,r2,17fc <___vfprintf_internal_r+0xee4>
    1824:	d9801e04 	addi	r6,sp,120
    1828:	b80b883a 	mov	r5,r23
    182c:	9809883a 	mov	r4,r19
    1830:	0007f140 	call	7f14 <__sprint_r>
    1834:	103d3a1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1838:	d8c02017 	ldw	r3,128(sp)
    183c:	d8801f17 	ldw	r2,124(sp)
    1840:	da000404 	addi	r8,sp,16
    1844:	003fee06 	br	1800 <___vfprintf_internal_r+0xee8>
    1848:	d9403117 	ldw	r5,196(sp)
    184c:	d8802a17 	ldw	r2,168(sp)
    1850:	28adc83a 	sub	r22,r5,r2
    1854:	05be630e 	bge	zero,r22,11e4 <___vfprintf_internal_r+0x8cc>
    1858:	07000404 	movi	fp,16
    185c:	d8801f17 	ldw	r2,124(sp)
    1860:	e5838f0e 	bge	fp,r22,26a0 <___vfprintf_internal_r+0x1d88>
    1864:	014000f4 	movhi	r5,3
    1868:	2952f984 	addi	r5,r5,19430
    186c:	dc403015 	stw	r17,192(sp)
    1870:	d9402b15 	stw	r5,172(sp)
    1874:	b023883a 	mov	r17,r22
    1878:	04c001c4 	movi	r19,7
    187c:	a82d883a 	mov	r22,r21
    1880:	902b883a 	mov	r21,r18
    1884:	8025883a 	mov	r18,r16
    1888:	dc002c17 	ldw	r16,176(sp)
    188c:	00000306 	br	189c <___vfprintf_internal_r+0xf84>
    1890:	8c7ffc04 	addi	r17,r17,-16
    1894:	42000204 	addi	r8,r8,8
    1898:	e440110e 	bge	fp,r17,18e0 <___vfprintf_internal_r+0xfc8>
    189c:	18c00404 	addi	r3,r3,16
    18a0:	10800044 	addi	r2,r2,1
    18a4:	45000015 	stw	r20,0(r8)
    18a8:	47000115 	stw	fp,4(r8)
    18ac:	d8c02015 	stw	r3,128(sp)
    18b0:	d8801f15 	stw	r2,124(sp)
    18b4:	98bff60e 	bge	r19,r2,1890 <___vfprintf_internal_r+0xf78>
    18b8:	d9801e04 	addi	r6,sp,120
    18bc:	b80b883a 	mov	r5,r23
    18c0:	8009883a 	mov	r4,r16
    18c4:	0007f140 	call	7f14 <__sprint_r>
    18c8:	103d151e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    18cc:	8c7ffc04 	addi	r17,r17,-16
    18d0:	d8c02017 	ldw	r3,128(sp)
    18d4:	d8801f17 	ldw	r2,124(sp)
    18d8:	da000404 	addi	r8,sp,16
    18dc:	e47fef16 	blt	fp,r17,189c <___vfprintf_internal_r+0xf84>
    18e0:	9021883a 	mov	r16,r18
    18e4:	a825883a 	mov	r18,r21
    18e8:	b02b883a 	mov	r21,r22
    18ec:	882d883a 	mov	r22,r17
    18f0:	dc403017 	ldw	r17,192(sp)
    18f4:	d9002b17 	ldw	r4,172(sp)
    18f8:	1d87883a 	add	r3,r3,r22
    18fc:	10800044 	addi	r2,r2,1
    1900:	41000015 	stw	r4,0(r8)
    1904:	45800115 	stw	r22,4(r8)
    1908:	d8c02015 	stw	r3,128(sp)
    190c:	d8801f15 	stw	r2,124(sp)
    1910:	010001c4 	movi	r4,7
    1914:	20818e16 	blt	r4,r2,1f50 <___vfprintf_internal_r+0x1638>
    1918:	42000204 	addi	r8,r8,8
    191c:	003e3106 	br	11e4 <___vfprintf_internal_r+0x8cc>
    1920:	d9403317 	ldw	r5,204(sp)
    1924:	00800044 	movi	r2,1
    1928:	18c00044 	addi	r3,r3,1
    192c:	1141530e 	bge	r2,r5,1e7c <___vfprintf_internal_r+0x1564>
    1930:	dc401f17 	ldw	r17,124(sp)
    1934:	00800044 	movi	r2,1
    1938:	40800115 	stw	r2,4(r8)
    193c:	8c400044 	addi	r17,r17,1
    1940:	44000015 	stw	r16,0(r8)
    1944:	d8c02015 	stw	r3,128(sp)
    1948:	dc401f15 	stw	r17,124(sp)
    194c:	008001c4 	movi	r2,7
    1950:	14416b16 	blt	r2,r17,1f00 <___vfprintf_internal_r+0x15e8>
    1954:	42000204 	addi	r8,r8,8
    1958:	d8803717 	ldw	r2,220(sp)
    195c:	d9003417 	ldw	r4,208(sp)
    1960:	8c400044 	addi	r17,r17,1
    1964:	10c7883a 	add	r3,r2,r3
    1968:	40800115 	stw	r2,4(r8)
    196c:	41000015 	stw	r4,0(r8)
    1970:	d8c02015 	stw	r3,128(sp)
    1974:	dc401f15 	stw	r17,124(sp)
    1978:	008001c4 	movi	r2,7
    197c:	14416916 	blt	r2,r17,1f24 <___vfprintf_internal_r+0x160c>
    1980:	45800204 	addi	r22,r8,8
    1984:	d9003617 	ldw	r4,216(sp)
    1988:	d9403817 	ldw	r5,224(sp)
    198c:	000d883a 	mov	r6,zero
    1990:	000f883a 	mov	r7,zero
    1994:	d8c03c15 	stw	r3,240(sp)
    1998:	000b9d80 	call	b9d8 <__eqdf2>
    199c:	d8c03c17 	ldw	r3,240(sp)
    19a0:	1000bc26 	beq	r2,zero,1c94 <___vfprintf_internal_r+0x137c>
    19a4:	d9403317 	ldw	r5,204(sp)
    19a8:	84000044 	addi	r16,r16,1
    19ac:	8c400044 	addi	r17,r17,1
    19b0:	28bfffc4 	addi	r2,r5,-1
    19b4:	1887883a 	add	r3,r3,r2
    19b8:	b0800115 	stw	r2,4(r22)
    19bc:	b4000015 	stw	r16,0(r22)
    19c0:	d8c02015 	stw	r3,128(sp)
    19c4:	dc401f15 	stw	r17,124(sp)
    19c8:	008001c4 	movi	r2,7
    19cc:	14414316 	blt	r2,r17,1edc <___vfprintf_internal_r+0x15c4>
    19d0:	b5800204 	addi	r22,r22,8
    19d4:	d9003a17 	ldw	r4,232(sp)
    19d8:	df0022c4 	addi	fp,sp,139
    19dc:	8c400044 	addi	r17,r17,1
    19e0:	20c7883a 	add	r3,r4,r3
    19e4:	b7000015 	stw	fp,0(r22)
    19e8:	b1000115 	stw	r4,4(r22)
    19ec:	d8c02015 	stw	r3,128(sp)
    19f0:	dc401f15 	stw	r17,124(sp)
    19f4:	008001c4 	movi	r2,7
    19f8:	14400e16 	blt	r2,r17,1a34 <___vfprintf_internal_r+0x111c>
    19fc:	b2000204 	addi	r8,r22,8
    1a00:	003e3a06 	br	12ec <___vfprintf_internal_r+0x9d4>
    1a04:	010000f4 	movhi	r4,3
    1a08:	2112f984 	addi	r4,r4,19430
    1a0c:	d9002b15 	stw	r4,172(sp)
    1a10:	d9002b17 	ldw	r4,172(sp)
    1a14:	1c07883a 	add	r3,r3,r16
    1a18:	44000115 	stw	r16,4(r8)
    1a1c:	41000015 	stw	r4,0(r8)
    1a20:	10800044 	addi	r2,r2,1
    1a24:	d8c02015 	stw	r3,128(sp)
    1a28:	d8801f15 	stw	r2,124(sp)
    1a2c:	010001c4 	movi	r4,7
    1a30:	20be2d0e 	bge	r4,r2,12e8 <___vfprintf_internal_r+0x9d0>
    1a34:	d9002c17 	ldw	r4,176(sp)
    1a38:	d9801e04 	addi	r6,sp,120
    1a3c:	b80b883a 	mov	r5,r23
    1a40:	0007f140 	call	7f14 <__sprint_r>
    1a44:	103cb61e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1a48:	d8c02017 	ldw	r3,128(sp)
    1a4c:	da000404 	addi	r8,sp,16
    1a50:	003e2606 	br	12ec <___vfprintf_internal_r+0x9d4>
    1a54:	d9002c17 	ldw	r4,176(sp)
    1a58:	d9801e04 	addi	r6,sp,120
    1a5c:	b80b883a 	mov	r5,r23
    1a60:	0007f140 	call	7f14 <__sprint_r>
    1a64:	103e5d26 	beq	r2,zero,13dc <___vfprintf_internal_r+0xac4>
    1a68:	003cad06 	br	d20 <___vfprintf_internal_r+0x408>
    1a6c:	d9002c17 	ldw	r4,176(sp)
    1a70:	d9801e04 	addi	r6,sp,120
    1a74:	b80b883a 	mov	r5,r23
    1a78:	0007f140 	call	7f14 <__sprint_r>
    1a7c:	103ca81e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1a80:	d8c02017 	ldw	r3,128(sp)
    1a84:	da000404 	addi	r8,sp,16
    1a88:	003e0b06 	br	12b8 <___vfprintf_internal_r+0x9a0>
    1a8c:	d9002c17 	ldw	r4,176(sp)
    1a90:	d9801e04 	addi	r6,sp,120
    1a94:	b80b883a 	mov	r5,r23
    1a98:	0007f140 	call	7f14 <__sprint_r>
    1a9c:	103ca01e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1aa0:	d8c02017 	ldw	r3,128(sp)
    1aa4:	da000404 	addi	r8,sp,16
    1aa8:	003dbd06 	br	11a0 <___vfprintf_internal_r+0x888>
    1aac:	d9002c17 	ldw	r4,176(sp)
    1ab0:	d9801e04 	addi	r6,sp,120
    1ab4:	b80b883a 	mov	r5,r23
    1ab8:	0007f140 	call	7f14 <__sprint_r>
    1abc:	103c981e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1ac0:	d8c02017 	ldw	r3,128(sp)
    1ac4:	da000404 	addi	r8,sp,16
    1ac8:	003dc306 	br	11d8 <___vfprintf_internal_r+0x8c0>
    1acc:	d8802917 	ldw	r2,164(sp)
    1ad0:	d8002785 	stb	zero,158(sp)
    1ad4:	103f0616 	blt	r2,zero,16f0 <___vfprintf_internal_r+0xdd8>
    1ad8:	00ffdfc4 	movi	r3,-129
    1adc:	9d84b03a 	or	r2,r19,r22
    1ae0:	90e4703a 	and	r18,r18,r3
    1ae4:	103c6b26 	beq	r2,zero,c94 <___vfprintf_internal_r+0x37c>
    1ae8:	0039883a 	mov	fp,zero
    1aec:	003e7406 	br	14c0 <___vfprintf_internal_r+0xba8>
    1af0:	9080040c 	andi	r2,r18,16
    1af4:	1001b326 	beq	r2,zero,21c4 <___vfprintf_internal_r+0x18ac>
    1af8:	d9002d17 	ldw	r4,180(sp)
    1afc:	d9402917 	ldw	r5,164(sp)
    1b00:	d8002785 	stb	zero,158(sp)
    1b04:	20800104 	addi	r2,r4,4
    1b08:	24c00017 	ldw	r19,0(r4)
    1b0c:	002d883a 	mov	r22,zero
    1b10:	2801b516 	blt	r5,zero,21e8 <___vfprintf_internal_r+0x18d0>
    1b14:	00ffdfc4 	movi	r3,-129
    1b18:	d8802d15 	stw	r2,180(sp)
    1b1c:	90e4703a 	and	r18,r18,r3
    1b20:	983d2726 	beq	r19,zero,fc0 <___vfprintf_internal_r+0x6a8>
    1b24:	0039883a 	mov	fp,zero
    1b28:	003d2a06 	br	fd4 <___vfprintf_internal_r+0x6bc>
    1b2c:	dc402617 	ldw	r17,152(sp)
    1b30:	0441d30e 	bge	zero,r17,2280 <___vfprintf_internal_r+0x1968>
    1b34:	dc403217 	ldw	r17,200(sp)
    1b38:	d8803317 	ldw	r2,204(sp)
    1b3c:	1440010e 	bge	r2,r17,1b44 <___vfprintf_internal_r+0x122c>
    1b40:	1023883a 	mov	r17,r2
    1b44:	04400a0e 	bge	zero,r17,1b70 <___vfprintf_internal_r+0x1258>
    1b48:	d8801f17 	ldw	r2,124(sp)
    1b4c:	1c47883a 	add	r3,r3,r17
    1b50:	44000015 	stw	r16,0(r8)
    1b54:	10800044 	addi	r2,r2,1
    1b58:	44400115 	stw	r17,4(r8)
    1b5c:	d8c02015 	stw	r3,128(sp)
    1b60:	d8801f15 	stw	r2,124(sp)
    1b64:	010001c4 	movi	r4,7
    1b68:	20826516 	blt	r4,r2,2500 <___vfprintf_internal_r+0x1be8>
    1b6c:	42000204 	addi	r8,r8,8
    1b70:	88026116 	blt	r17,zero,24f8 <___vfprintf_internal_r+0x1be0>
    1b74:	d9003217 	ldw	r4,200(sp)
    1b78:	2463c83a 	sub	r17,r4,r17
    1b7c:	04407b0e 	bge	zero,r17,1d6c <___vfprintf_internal_r+0x1454>
    1b80:	05800404 	movi	r22,16
    1b84:	d8801f17 	ldw	r2,124(sp)
    1b88:	b4419d0e 	bge	r22,r17,2200 <___vfprintf_internal_r+0x18e8>
    1b8c:	010000f4 	movhi	r4,3
    1b90:	2112f984 	addi	r4,r4,19430
    1b94:	d9002b15 	stw	r4,172(sp)
    1b98:	070001c4 	movi	fp,7
    1b9c:	dcc02c17 	ldw	r19,176(sp)
    1ba0:	00000306 	br	1bb0 <___vfprintf_internal_r+0x1298>
    1ba4:	42000204 	addi	r8,r8,8
    1ba8:	8c7ffc04 	addi	r17,r17,-16
    1bac:	b441970e 	bge	r22,r17,220c <___vfprintf_internal_r+0x18f4>
    1bb0:	18c00404 	addi	r3,r3,16
    1bb4:	10800044 	addi	r2,r2,1
    1bb8:	45000015 	stw	r20,0(r8)
    1bbc:	45800115 	stw	r22,4(r8)
    1bc0:	d8c02015 	stw	r3,128(sp)
    1bc4:	d8801f15 	stw	r2,124(sp)
    1bc8:	e0bff60e 	bge	fp,r2,1ba4 <___vfprintf_internal_r+0x128c>
    1bcc:	d9801e04 	addi	r6,sp,120
    1bd0:	b80b883a 	mov	r5,r23
    1bd4:	9809883a 	mov	r4,r19
    1bd8:	0007f140 	call	7f14 <__sprint_r>
    1bdc:	103c501e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1be0:	d8c02017 	ldw	r3,128(sp)
    1be4:	d8801f17 	ldw	r2,124(sp)
    1be8:	da000404 	addi	r8,sp,16
    1bec:	003fee06 	br	1ba8 <___vfprintf_internal_r+0x1290>
    1bf0:	d9002c17 	ldw	r4,176(sp)
    1bf4:	d9801e04 	addi	r6,sp,120
    1bf8:	b80b883a 	mov	r5,r23
    1bfc:	0007f140 	call	7f14 <__sprint_r>
    1c00:	103c471e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1c04:	d8c02017 	ldw	r3,128(sp)
    1c08:	df002787 	ldb	fp,158(sp)
    1c0c:	da000404 	addi	r8,sp,16
    1c10:	003d5606 	br	116c <___vfprintf_internal_r+0x854>
    1c14:	9080040c 	andi	r2,r18,16
    1c18:	10016126 	beq	r2,zero,21a0 <___vfprintf_internal_r+0x1888>
    1c1c:	d8802d17 	ldw	r2,180(sp)
    1c20:	14c00017 	ldw	r19,0(r2)
    1c24:	10800104 	addi	r2,r2,4
    1c28:	d8802d15 	stw	r2,180(sp)
    1c2c:	982dd7fa 	srai	r22,r19,31
    1c30:	b005883a 	mov	r2,r22
    1c34:	003c8206 	br	e40 <___vfprintf_internal_r+0x528>
    1c38:	9080040c 	andi	r2,r18,16
    1c3c:	10003526 	beq	r2,zero,1d14 <___vfprintf_internal_r+0x13fc>
    1c40:	d9402d17 	ldw	r5,180(sp)
    1c44:	d8c02917 	ldw	r3,164(sp)
    1c48:	d8002785 	stb	zero,158(sp)
    1c4c:	28800104 	addi	r2,r5,4
    1c50:	2cc00017 	ldw	r19,0(r5)
    1c54:	002d883a 	mov	r22,zero
    1c58:	18003716 	blt	r3,zero,1d38 <___vfprintf_internal_r+0x1420>
    1c5c:	00ffdfc4 	movi	r3,-129
    1c60:	d8802d15 	stw	r2,180(sp)
    1c64:	90e4703a 	and	r18,r18,r3
    1c68:	0039883a 	mov	fp,zero
    1c6c:	983df326 	beq	r19,zero,143c <___vfprintf_internal_r+0xb24>
    1c70:	00800244 	movi	r2,9
    1c74:	14fc7b36 	bltu	r2,r19,e64 <___vfprintf_internal_r+0x54c>
    1c78:	d8c02817 	ldw	r3,160(sp)
    1c7c:	dc001dc4 	addi	r16,sp,119
    1c80:	9cc00c04 	addi	r19,r19,48
    1c84:	1c07c83a 	sub	r3,r3,r16
    1c88:	dcc01dc5 	stb	r19,119(sp)
    1c8c:	d8c02e15 	stw	r3,184(sp)
    1c90:	003ce806 	br	1034 <___vfprintf_internal_r+0x71c>
    1c94:	d8803317 	ldw	r2,204(sp)
    1c98:	143fffc4 	addi	r16,r2,-1
    1c9c:	043f4d0e 	bge	zero,r16,19d4 <___vfprintf_internal_r+0x10bc>
    1ca0:	07000404 	movi	fp,16
    1ca4:	e400810e 	bge	fp,r16,1eac <___vfprintf_internal_r+0x1594>
    1ca8:	014000f4 	movhi	r5,3
    1cac:	2952f984 	addi	r5,r5,19430
    1cb0:	d9402b15 	stw	r5,172(sp)
    1cb4:	01c001c4 	movi	r7,7
    1cb8:	dcc02c17 	ldw	r19,176(sp)
    1cbc:	00000306 	br	1ccc <___vfprintf_internal_r+0x13b4>
    1cc0:	b5800204 	addi	r22,r22,8
    1cc4:	843ffc04 	addi	r16,r16,-16
    1cc8:	e4007b0e 	bge	fp,r16,1eb8 <___vfprintf_internal_r+0x15a0>
    1ccc:	18c00404 	addi	r3,r3,16
    1cd0:	8c400044 	addi	r17,r17,1
    1cd4:	b5000015 	stw	r20,0(r22)
    1cd8:	b7000115 	stw	fp,4(r22)
    1cdc:	d8c02015 	stw	r3,128(sp)
    1ce0:	dc401f15 	stw	r17,124(sp)
    1ce4:	3c7ff60e 	bge	r7,r17,1cc0 <___vfprintf_internal_r+0x13a8>
    1ce8:	d9801e04 	addi	r6,sp,120
    1cec:	b80b883a 	mov	r5,r23
    1cf0:	9809883a 	mov	r4,r19
    1cf4:	d9c03c15 	stw	r7,240(sp)
    1cf8:	0007f140 	call	7f14 <__sprint_r>
    1cfc:	d9c03c17 	ldw	r7,240(sp)
    1d00:	103c071e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1d04:	d8c02017 	ldw	r3,128(sp)
    1d08:	dc401f17 	ldw	r17,124(sp)
    1d0c:	dd800404 	addi	r22,sp,16
    1d10:	003fec06 	br	1cc4 <___vfprintf_internal_r+0x13ac>
    1d14:	9080100c 	andi	r2,r18,64
    1d18:	d8002785 	stb	zero,158(sp)
    1d1c:	10010e26 	beq	r2,zero,2158 <___vfprintf_internal_r+0x1840>
    1d20:	d9002d17 	ldw	r4,180(sp)
    1d24:	d9402917 	ldw	r5,164(sp)
    1d28:	002d883a 	mov	r22,zero
    1d2c:	20800104 	addi	r2,r4,4
    1d30:	24c0000b 	ldhu	r19,0(r4)
    1d34:	283fc90e 	bge	r5,zero,1c5c <___vfprintf_internal_r+0x1344>
    1d38:	d8802d15 	stw	r2,180(sp)
    1d3c:	0039883a 	mov	fp,zero
    1d40:	9d84b03a 	or	r2,r19,r22
    1d44:	103c461e 	bne	r2,zero,e60 <___vfprintf_internal_r+0x548>
    1d48:	00800044 	movi	r2,1
    1d4c:	003e6c06 	br	1700 <___vfprintf_internal_r+0xde8>
    1d50:	d9002c17 	ldw	r4,176(sp)
    1d54:	d9801e04 	addi	r6,sp,120
    1d58:	b80b883a 	mov	r5,r23
    1d5c:	0007f140 	call	7f14 <__sprint_r>
    1d60:	103bef1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1d64:	d8c02017 	ldw	r3,128(sp)
    1d68:	da000404 	addi	r8,sp,16
    1d6c:	d9003217 	ldw	r4,200(sp)
    1d70:	d8802617 	ldw	r2,152(sp)
    1d74:	d9403317 	ldw	r5,204(sp)
    1d78:	8123883a 	add	r17,r16,r4
    1d7c:	11400216 	blt	r2,r5,1d88 <___vfprintf_internal_r+0x1470>
    1d80:	9100004c 	andi	r4,r18,1
    1d84:	20000d26 	beq	r4,zero,1dbc <___vfprintf_internal_r+0x14a4>
    1d88:	d9003717 	ldw	r4,220(sp)
    1d8c:	d9403417 	ldw	r5,208(sp)
    1d90:	1907883a 	add	r3,r3,r4
    1d94:	d9001f17 	ldw	r4,124(sp)
    1d98:	41400015 	stw	r5,0(r8)
    1d9c:	d9403717 	ldw	r5,220(sp)
    1da0:	21000044 	addi	r4,r4,1
    1da4:	d8c02015 	stw	r3,128(sp)
    1da8:	41400115 	stw	r5,4(r8)
    1dac:	d9001f15 	stw	r4,124(sp)
    1db0:	014001c4 	movi	r5,7
    1db4:	2901e816 	blt	r5,r4,2558 <___vfprintf_internal_r+0x1c40>
    1db8:	42000204 	addi	r8,r8,8
    1dbc:	d9003317 	ldw	r4,204(sp)
    1dc0:	8121883a 	add	r16,r16,r4
    1dc4:	2085c83a 	sub	r2,r4,r2
    1dc8:	8461c83a 	sub	r16,r16,r17
    1dcc:	1400010e 	bge	r2,r16,1dd4 <___vfprintf_internal_r+0x14bc>
    1dd0:	1021883a 	mov	r16,r2
    1dd4:	04000a0e 	bge	zero,r16,1e00 <___vfprintf_internal_r+0x14e8>
    1dd8:	d9001f17 	ldw	r4,124(sp)
    1ddc:	1c07883a 	add	r3,r3,r16
    1de0:	44400015 	stw	r17,0(r8)
    1de4:	21000044 	addi	r4,r4,1
    1de8:	44000115 	stw	r16,4(r8)
    1dec:	d8c02015 	stw	r3,128(sp)
    1df0:	d9001f15 	stw	r4,124(sp)
    1df4:	014001c4 	movi	r5,7
    1df8:	2901fb16 	blt	r5,r4,25e8 <___vfprintf_internal_r+0x1cd0>
    1dfc:	42000204 	addi	r8,r8,8
    1e00:	8001f716 	blt	r16,zero,25e0 <___vfprintf_internal_r+0x1cc8>
    1e04:	1421c83a 	sub	r16,r2,r16
    1e08:	043d380e 	bge	zero,r16,12ec <___vfprintf_internal_r+0x9d4>
    1e0c:	04400404 	movi	r17,16
    1e10:	d8801f17 	ldw	r2,124(sp)
    1e14:	8c3efb0e 	bge	r17,r16,1a04 <___vfprintf_internal_r+0x10ec>
    1e18:	014000f4 	movhi	r5,3
    1e1c:	2952f984 	addi	r5,r5,19430
    1e20:	d9402b15 	stw	r5,172(sp)
    1e24:	058001c4 	movi	r22,7
    1e28:	dcc02c17 	ldw	r19,176(sp)
    1e2c:	00000306 	br	1e3c <___vfprintf_internal_r+0x1524>
    1e30:	42000204 	addi	r8,r8,8
    1e34:	843ffc04 	addi	r16,r16,-16
    1e38:	8c3ef50e 	bge	r17,r16,1a10 <___vfprintf_internal_r+0x10f8>
    1e3c:	18c00404 	addi	r3,r3,16
    1e40:	10800044 	addi	r2,r2,1
    1e44:	45000015 	stw	r20,0(r8)
    1e48:	44400115 	stw	r17,4(r8)
    1e4c:	d8c02015 	stw	r3,128(sp)
    1e50:	d8801f15 	stw	r2,124(sp)
    1e54:	b0bff60e 	bge	r22,r2,1e30 <___vfprintf_internal_r+0x1518>
    1e58:	d9801e04 	addi	r6,sp,120
    1e5c:	b80b883a 	mov	r5,r23
    1e60:	9809883a 	mov	r4,r19
    1e64:	0007f140 	call	7f14 <__sprint_r>
    1e68:	103bad1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1e6c:	d8c02017 	ldw	r3,128(sp)
    1e70:	d8801f17 	ldw	r2,124(sp)
    1e74:	da000404 	addi	r8,sp,16
    1e78:	003fee06 	br	1e34 <___vfprintf_internal_r+0x151c>
    1e7c:	9088703a 	and	r4,r18,r2
    1e80:	203eab1e 	bne	r4,zero,1930 <___vfprintf_internal_r+0x1018>
    1e84:	dc401f17 	ldw	r17,124(sp)
    1e88:	40800115 	stw	r2,4(r8)
    1e8c:	44000015 	stw	r16,0(r8)
    1e90:	8c400044 	addi	r17,r17,1
    1e94:	d8c02015 	stw	r3,128(sp)
    1e98:	dc401f15 	stw	r17,124(sp)
    1e9c:	008001c4 	movi	r2,7
    1ea0:	14400e16 	blt	r2,r17,1edc <___vfprintf_internal_r+0x15c4>
    1ea4:	45800204 	addi	r22,r8,8
    1ea8:	003eca06 	br	19d4 <___vfprintf_internal_r+0x10bc>
    1eac:	010000f4 	movhi	r4,3
    1eb0:	2112f984 	addi	r4,r4,19430
    1eb4:	d9002b15 	stw	r4,172(sp)
    1eb8:	d8802b17 	ldw	r2,172(sp)
    1ebc:	1c07883a 	add	r3,r3,r16
    1ec0:	8c400044 	addi	r17,r17,1
    1ec4:	b0800015 	stw	r2,0(r22)
    1ec8:	b4000115 	stw	r16,4(r22)
    1ecc:	d8c02015 	stw	r3,128(sp)
    1ed0:	dc401f15 	stw	r17,124(sp)
    1ed4:	008001c4 	movi	r2,7
    1ed8:	147ebd0e 	bge	r2,r17,19d0 <___vfprintf_internal_r+0x10b8>
    1edc:	d9002c17 	ldw	r4,176(sp)
    1ee0:	d9801e04 	addi	r6,sp,120
    1ee4:	b80b883a 	mov	r5,r23
    1ee8:	0007f140 	call	7f14 <__sprint_r>
    1eec:	103b8c1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1ef0:	d8c02017 	ldw	r3,128(sp)
    1ef4:	dc401f17 	ldw	r17,124(sp)
    1ef8:	dd800404 	addi	r22,sp,16
    1efc:	003eb506 	br	19d4 <___vfprintf_internal_r+0x10bc>
    1f00:	d9002c17 	ldw	r4,176(sp)
    1f04:	d9801e04 	addi	r6,sp,120
    1f08:	b80b883a 	mov	r5,r23
    1f0c:	0007f140 	call	7f14 <__sprint_r>
    1f10:	103b831e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1f14:	d8c02017 	ldw	r3,128(sp)
    1f18:	dc401f17 	ldw	r17,124(sp)
    1f1c:	da000404 	addi	r8,sp,16
    1f20:	003e8d06 	br	1958 <___vfprintf_internal_r+0x1040>
    1f24:	d9002c17 	ldw	r4,176(sp)
    1f28:	d9801e04 	addi	r6,sp,120
    1f2c:	b80b883a 	mov	r5,r23
    1f30:	0007f140 	call	7f14 <__sprint_r>
    1f34:	103b7a1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1f38:	d8c02017 	ldw	r3,128(sp)
    1f3c:	dc401f17 	ldw	r17,124(sp)
    1f40:	dd800404 	addi	r22,sp,16
    1f44:	003e8f06 	br	1984 <___vfprintf_internal_r+0x106c>
    1f48:	0027883a 	mov	r19,zero
    1f4c:	003f4a06 	br	1c78 <___vfprintf_internal_r+0x1360>
    1f50:	d9002c17 	ldw	r4,176(sp)
    1f54:	d9801e04 	addi	r6,sp,120
    1f58:	b80b883a 	mov	r5,r23
    1f5c:	0007f140 	call	7f14 <__sprint_r>
    1f60:	103b6f1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    1f64:	d8c02017 	ldw	r3,128(sp)
    1f68:	da000404 	addi	r8,sp,16
    1f6c:	003c9d06 	br	11e4 <___vfprintf_internal_r+0x8cc>
    1f70:	04e7c83a 	sub	r19,zero,r19
    1f74:	9804c03a 	cmpne	r2,r19,zero
    1f78:	05adc83a 	sub	r22,zero,r22
    1f7c:	b0adc83a 	sub	r22,r22,r2
    1f80:	d8802917 	ldw	r2,164(sp)
    1f84:	07000b44 	movi	fp,45
    1f88:	df002785 	stb	fp,158(sp)
    1f8c:	10017b16 	blt	r2,zero,257c <___vfprintf_internal_r+0x1c64>
    1f90:	00bfdfc4 	movi	r2,-129
    1f94:	90a4703a 	and	r18,r18,r2
    1f98:	003bb106 	br	e60 <___vfprintf_internal_r+0x548>
    1f9c:	d9003617 	ldw	r4,216(sp)
    1fa0:	d9403817 	ldw	r5,224(sp)
    1fa4:	da003d15 	stw	r8,244(sp)
    1fa8:	0007b380 	call	7b38 <__fpclassifyd>
    1fac:	da003d17 	ldw	r8,244(sp)
    1fb0:	1000f026 	beq	r2,zero,2374 <___vfprintf_internal_r+0x1a5c>
    1fb4:	d9002917 	ldw	r4,164(sp)
    1fb8:	05bff7c4 	movi	r22,-33
    1fbc:	00bfffc4 	movi	r2,-1
    1fc0:	8dac703a 	and	r22,r17,r22
    1fc4:	20820026 	beq	r4,r2,27c8 <___vfprintf_internal_r+0x1eb0>
    1fc8:	008011c4 	movi	r2,71
    1fcc:	b081f726 	beq	r22,r2,27ac <___vfprintf_internal_r+0x1e94>
    1fd0:	d9003817 	ldw	r4,224(sp)
    1fd4:	90c04014 	ori	r3,r18,256
    1fd8:	d8c02b15 	stw	r3,172(sp)
    1fdc:	20021516 	blt	r4,zero,2834 <___vfprintf_internal_r+0x1f1c>
    1fe0:	dcc03817 	ldw	r19,224(sp)
    1fe4:	d8002a05 	stb	zero,168(sp)
    1fe8:	00801984 	movi	r2,102
    1fec:	8881f926 	beq	r17,r2,27d4 <___vfprintf_internal_r+0x1ebc>
    1ff0:	00801184 	movi	r2,70
    1ff4:	88821c26 	beq	r17,r2,2868 <___vfprintf_internal_r+0x1f50>
    1ff8:	00801144 	movi	r2,69
    1ffc:	b081ef26 	beq	r22,r2,27bc <___vfprintf_internal_r+0x1ea4>
    2000:	d8c02917 	ldw	r3,164(sp)
    2004:	d8802104 	addi	r2,sp,132
    2008:	d8800315 	stw	r2,12(sp)
    200c:	d9403617 	ldw	r5,216(sp)
    2010:	d8802504 	addi	r2,sp,148
    2014:	d9002c17 	ldw	r4,176(sp)
    2018:	d8800215 	stw	r2,8(sp)
    201c:	d8802604 	addi	r2,sp,152
    2020:	d8c00015 	stw	r3,0(sp)
    2024:	d8800115 	stw	r2,4(sp)
    2028:	01c00084 	movi	r7,2
    202c:	980d883a 	mov	r6,r19
    2030:	d8c03c15 	stw	r3,240(sp)
    2034:	da003d15 	stw	r8,244(sp)
    2038:	0002f3c0 	call	2f3c <_dtoa_r>
    203c:	1021883a 	mov	r16,r2
    2040:	008019c4 	movi	r2,103
    2044:	d8c03c17 	ldw	r3,240(sp)
    2048:	da003d17 	ldw	r8,244(sp)
    204c:	88817126 	beq	r17,r2,2614 <___vfprintf_internal_r+0x1cfc>
    2050:	008011c4 	movi	r2,71
    2054:	88829226 	beq	r17,r2,2aa0 <___vfprintf_internal_r+0x2188>
    2058:	80f9883a 	add	fp,r16,r3
    205c:	d9003617 	ldw	r4,216(sp)
    2060:	000d883a 	mov	r6,zero
    2064:	000f883a 	mov	r7,zero
    2068:	980b883a 	mov	r5,r19
    206c:	da003d15 	stw	r8,244(sp)
    2070:	000b9d80 	call	b9d8 <__eqdf2>
    2074:	da003d17 	ldw	r8,244(sp)
    2078:	10018d26 	beq	r2,zero,26b0 <___vfprintf_internal_r+0x1d98>
    207c:	d8802117 	ldw	r2,132(sp)
    2080:	1700062e 	bgeu	r2,fp,209c <___vfprintf_internal_r+0x1784>
    2084:	01000c04 	movi	r4,48
    2088:	10c00044 	addi	r3,r2,1
    208c:	d8c02115 	stw	r3,132(sp)
    2090:	11000005 	stb	r4,0(r2)
    2094:	d8802117 	ldw	r2,132(sp)
    2098:	173ffb36 	bltu	r2,fp,2088 <___vfprintf_internal_r+0x1770>
    209c:	1405c83a 	sub	r2,r2,r16
    20a0:	d8803315 	stw	r2,204(sp)
    20a4:	008011c4 	movi	r2,71
    20a8:	b0817626 	beq	r22,r2,2684 <___vfprintf_internal_r+0x1d6c>
    20ac:	00801944 	movi	r2,101
    20b0:	1442810e 	bge	r2,r17,2ab8 <___vfprintf_internal_r+0x21a0>
    20b4:	d8c02617 	ldw	r3,152(sp)
    20b8:	00801984 	movi	r2,102
    20bc:	d8c03215 	stw	r3,200(sp)
    20c0:	8881fe26 	beq	r17,r2,28bc <___vfprintf_internal_r+0x1fa4>
    20c4:	d8c03217 	ldw	r3,200(sp)
    20c8:	d9003317 	ldw	r4,204(sp)
    20cc:	1901dd16 	blt	r3,r4,2844 <___vfprintf_internal_r+0x1f2c>
    20d0:	9480004c 	andi	r18,r18,1
    20d4:	90022b1e 	bne	r18,zero,2984 <___vfprintf_internal_r+0x206c>
    20d8:	1805883a 	mov	r2,r3
    20dc:	18028016 	blt	r3,zero,2ae0 <___vfprintf_internal_r+0x21c8>
    20e0:	d8c03217 	ldw	r3,200(sp)
    20e4:	044019c4 	movi	r17,103
    20e8:	d8c02e15 	stw	r3,184(sp)
    20ec:	df002a07 	ldb	fp,168(sp)
    20f0:	e001531e 	bne	fp,zero,2640 <___vfprintf_internal_r+0x1d28>
    20f4:	df002783 	ldbu	fp,158(sp)
    20f8:	d8802a15 	stw	r2,168(sp)
    20fc:	dc802b17 	ldw	r18,172(sp)
    2100:	d8002915 	stw	zero,164(sp)
    2104:	003bd106 	br	104c <___vfprintf_internal_r+0x734>
    2108:	d8802d17 	ldw	r2,180(sp)
    210c:	d8c02d17 	ldw	r3,180(sp)
    2110:	d9002d17 	ldw	r4,180(sp)
    2114:	10800017 	ldw	r2,0(r2)
    2118:	18c00117 	ldw	r3,4(r3)
    211c:	21000204 	addi	r4,r4,8
    2120:	d8803615 	stw	r2,216(sp)
    2124:	d8c03815 	stw	r3,224(sp)
    2128:	d9002d15 	stw	r4,180(sp)
    212c:	003b7506 	br	f04 <___vfprintf_internal_r+0x5ec>
    2130:	ac400007 	ldb	r17,0(r21)
    2134:	003a5906 	br	a9c <___vfprintf_internal_r+0x184>
    2138:	9080100c 	andi	r2,r18,64
    213c:	1000a826 	beq	r2,zero,23e0 <___vfprintf_internal_r+0x1ac8>
    2140:	d9002d17 	ldw	r4,180(sp)
    2144:	002d883a 	mov	r22,zero
    2148:	24c0000b 	ldhu	r19,0(r4)
    214c:	21000104 	addi	r4,r4,4
    2150:	d9002d15 	stw	r4,180(sp)
    2154:	003ccb06 	br	1484 <___vfprintf_internal_r+0xb6c>
    2158:	d8c02d17 	ldw	r3,180(sp)
    215c:	d9002917 	ldw	r4,164(sp)
    2160:	002d883a 	mov	r22,zero
    2164:	18800104 	addi	r2,r3,4
    2168:	1cc00017 	ldw	r19,0(r3)
    216c:	203ebb0e 	bge	r4,zero,1c5c <___vfprintf_internal_r+0x1344>
    2170:	003ef106 	br	1d38 <___vfprintf_internal_r+0x1420>
    2174:	9080040c 	andi	r2,r18,16
    2178:	1000921e 	bne	r2,zero,23c4 <___vfprintf_internal_r+0x1aac>
    217c:	9480100c 	andi	r18,r18,64
    2180:	90013926 	beq	r18,zero,2668 <___vfprintf_internal_r+0x1d50>
    2184:	d9002d17 	ldw	r4,180(sp)
    2188:	d9402f17 	ldw	r5,188(sp)
    218c:	20800017 	ldw	r2,0(r4)
    2190:	21000104 	addi	r4,r4,4
    2194:	d9002d15 	stw	r4,180(sp)
    2198:	1140000d 	sth	r5,0(r2)
    219c:	003a1606 	br	9f8 <___vfprintf_internal_r+0xe0>
    21a0:	9080100c 	andi	r2,r18,64
    21a4:	10008026 	beq	r2,zero,23a8 <___vfprintf_internal_r+0x1a90>
    21a8:	d8c02d17 	ldw	r3,180(sp)
    21ac:	1cc0000f 	ldh	r19,0(r3)
    21b0:	18c00104 	addi	r3,r3,4
    21b4:	d8c02d15 	stw	r3,180(sp)
    21b8:	982dd7fa 	srai	r22,r19,31
    21bc:	b005883a 	mov	r2,r22
    21c0:	003b1f06 	br	e40 <___vfprintf_internal_r+0x528>
    21c4:	9080100c 	andi	r2,r18,64
    21c8:	d8002785 	stb	zero,158(sp)
    21cc:	10008a1e 	bne	r2,zero,23f8 <___vfprintf_internal_r+0x1ae0>
    21d0:	d9402d17 	ldw	r5,180(sp)
    21d4:	d8c02917 	ldw	r3,164(sp)
    21d8:	002d883a 	mov	r22,zero
    21dc:	28800104 	addi	r2,r5,4
    21e0:	2cc00017 	ldw	r19,0(r5)
    21e4:	183e4b0e 	bge	r3,zero,1b14 <___vfprintf_internal_r+0x11fc>
    21e8:	9d86b03a 	or	r3,r19,r22
    21ec:	d8802d15 	stw	r2,180(sp)
    21f0:	183e4c1e 	bne	r3,zero,1b24 <___vfprintf_internal_r+0x120c>
    21f4:	0039883a 	mov	fp,zero
    21f8:	0005883a 	mov	r2,zero
    21fc:	003d4006 	br	1700 <___vfprintf_internal_r+0xde8>
    2200:	014000f4 	movhi	r5,3
    2204:	2952f984 	addi	r5,r5,19430
    2208:	d9402b15 	stw	r5,172(sp)
    220c:	d9402b17 	ldw	r5,172(sp)
    2210:	1c47883a 	add	r3,r3,r17
    2214:	10800044 	addi	r2,r2,1
    2218:	41400015 	stw	r5,0(r8)
    221c:	44400115 	stw	r17,4(r8)
    2220:	d8c02015 	stw	r3,128(sp)
    2224:	d8801f15 	stw	r2,124(sp)
    2228:	010001c4 	movi	r4,7
    222c:	20bec816 	blt	r4,r2,1d50 <___vfprintf_internal_r+0x1438>
    2230:	42000204 	addi	r8,r8,8
    2234:	003ecd06 	br	1d6c <___vfprintf_internal_r+0x1454>
    2238:	d9002917 	ldw	r4,164(sp)
    223c:	d8002785 	stb	zero,158(sp)
    2240:	203d2d16 	blt	r4,zero,16f8 <___vfprintf_internal_r+0xde0>
    2244:	00bfdfc4 	movi	r2,-129
    2248:	90a4703a 	and	r18,r18,r2
    224c:	003a9106 	br	c94 <___vfprintf_internal_r+0x37c>
    2250:	010000f4 	movhi	r4,3
    2254:	2112f984 	addi	r4,r4,19430
    2258:	d9002b15 	stw	r4,172(sp)
    225c:	003c0c06 	br	1290 <___vfprintf_internal_r+0x978>
    2260:	d9002c17 	ldw	r4,176(sp)
    2264:	d9801e04 	addi	r6,sp,120
    2268:	b80b883a 	mov	r5,r23
    226c:	0007f140 	call	7f14 <__sprint_r>
    2270:	103aab1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    2274:	d8c02017 	ldw	r3,128(sp)
    2278:	da000404 	addi	r8,sp,16
    227c:	003d4106 	br	1784 <___vfprintf_internal_r+0xe6c>
    2280:	d8801f17 	ldw	r2,124(sp)
    2284:	014000f4 	movhi	r5,3
    2288:	01000044 	movi	r4,1
    228c:	18c00044 	addi	r3,r3,1
    2290:	10800044 	addi	r2,r2,1
    2294:	2952f904 	addi	r5,r5,19428
    2298:	41000115 	stw	r4,4(r8)
    229c:	41400015 	stw	r5,0(r8)
    22a0:	d8c02015 	stw	r3,128(sp)
    22a4:	d8801f15 	stw	r2,124(sp)
    22a8:	010001c4 	movi	r4,7
    22ac:	20805c16 	blt	r4,r2,2420 <___vfprintf_internal_r+0x1b08>
    22b0:	42000204 	addi	r8,r8,8
    22b4:	8800041e 	bne	r17,zero,22c8 <___vfprintf_internal_r+0x19b0>
    22b8:	d8803317 	ldw	r2,204(sp)
    22bc:	1000021e 	bne	r2,zero,22c8 <___vfprintf_internal_r+0x19b0>
    22c0:	9080004c 	andi	r2,r18,1
    22c4:	103c0926 	beq	r2,zero,12ec <___vfprintf_internal_r+0x9d4>
    22c8:	d9003717 	ldw	r4,220(sp)
    22cc:	d8801f17 	ldw	r2,124(sp)
    22d0:	d9403417 	ldw	r5,208(sp)
    22d4:	20c7883a 	add	r3,r4,r3
    22d8:	10800044 	addi	r2,r2,1
    22dc:	41000115 	stw	r4,4(r8)
    22e0:	41400015 	stw	r5,0(r8)
    22e4:	d8c02015 	stw	r3,128(sp)
    22e8:	d8801f15 	stw	r2,124(sp)
    22ec:	010001c4 	movi	r4,7
    22f0:	20812116 	blt	r4,r2,2778 <___vfprintf_internal_r+0x1e60>
    22f4:	42000204 	addi	r8,r8,8
    22f8:	0463c83a 	sub	r17,zero,r17
    22fc:	0440730e 	bge	zero,r17,24cc <___vfprintf_internal_r+0x1bb4>
    2300:	05800404 	movi	r22,16
    2304:	b440860e 	bge	r22,r17,2520 <___vfprintf_internal_r+0x1c08>
    2308:	014000f4 	movhi	r5,3
    230c:	2952f984 	addi	r5,r5,19430
    2310:	d9402b15 	stw	r5,172(sp)
    2314:	070001c4 	movi	fp,7
    2318:	dcc02c17 	ldw	r19,176(sp)
    231c:	00000306 	br	232c <___vfprintf_internal_r+0x1a14>
    2320:	42000204 	addi	r8,r8,8
    2324:	8c7ffc04 	addi	r17,r17,-16
    2328:	b440800e 	bge	r22,r17,252c <___vfprintf_internal_r+0x1c14>
    232c:	18c00404 	addi	r3,r3,16
    2330:	10800044 	addi	r2,r2,1
    2334:	45000015 	stw	r20,0(r8)
    2338:	45800115 	stw	r22,4(r8)
    233c:	d8c02015 	stw	r3,128(sp)
    2340:	d8801f15 	stw	r2,124(sp)
    2344:	e0bff60e 	bge	fp,r2,2320 <___vfprintf_internal_r+0x1a08>
    2348:	d9801e04 	addi	r6,sp,120
    234c:	b80b883a 	mov	r5,r23
    2350:	9809883a 	mov	r4,r19
    2354:	0007f140 	call	7f14 <__sprint_r>
    2358:	103a711e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    235c:	d8c02017 	ldw	r3,128(sp)
    2360:	d8801f17 	ldw	r2,124(sp)
    2364:	da000404 	addi	r8,sp,16
    2368:	003fee06 	br	2324 <___vfprintf_internal_r+0x1a0c>
    236c:	00bfffc4 	movi	r2,-1
    2370:	003a6f06 	br	d30 <___vfprintf_internal_r+0x418>
    2374:	008011c4 	movi	r2,71
    2378:	1440b816 	blt	r2,r17,265c <___vfprintf_internal_r+0x1d44>
    237c:	040000f4 	movhi	r16,3
    2380:	8412eb04 	addi	r16,r16,19372
    2384:	00c000c4 	movi	r3,3
    2388:	00bfdfc4 	movi	r2,-129
    238c:	d8c02a15 	stw	r3,168(sp)
    2390:	90a4703a 	and	r18,r18,r2
    2394:	df002783 	ldbu	fp,158(sp)
    2398:	d8c02e15 	stw	r3,184(sp)
    239c:	d8002915 	stw	zero,164(sp)
    23a0:	d8003215 	stw	zero,200(sp)
    23a4:	003b2906 	br	104c <___vfprintf_internal_r+0x734>
    23a8:	d9002d17 	ldw	r4,180(sp)
    23ac:	24c00017 	ldw	r19,0(r4)
    23b0:	21000104 	addi	r4,r4,4
    23b4:	d9002d15 	stw	r4,180(sp)
    23b8:	982dd7fa 	srai	r22,r19,31
    23bc:	b005883a 	mov	r2,r22
    23c0:	003a9f06 	br	e40 <___vfprintf_internal_r+0x528>
    23c4:	d9402d17 	ldw	r5,180(sp)
    23c8:	d8c02f17 	ldw	r3,188(sp)
    23cc:	28800017 	ldw	r2,0(r5)
    23d0:	29400104 	addi	r5,r5,4
    23d4:	d9402d15 	stw	r5,180(sp)
    23d8:	10c00015 	stw	r3,0(r2)
    23dc:	00398606 	br	9f8 <___vfprintf_internal_r+0xe0>
    23e0:	d9402d17 	ldw	r5,180(sp)
    23e4:	002d883a 	mov	r22,zero
    23e8:	2cc00017 	ldw	r19,0(r5)
    23ec:	29400104 	addi	r5,r5,4
    23f0:	d9402d15 	stw	r5,180(sp)
    23f4:	003c2306 	br	1484 <___vfprintf_internal_r+0xb6c>
    23f8:	d8c02d17 	ldw	r3,180(sp)
    23fc:	d9002917 	ldw	r4,164(sp)
    2400:	002d883a 	mov	r22,zero
    2404:	18800104 	addi	r2,r3,4
    2408:	1cc0000b 	ldhu	r19,0(r3)
    240c:	203dc10e 	bge	r4,zero,1b14 <___vfprintf_internal_r+0x11fc>
    2410:	003f7506 	br	21e8 <___vfprintf_internal_r+0x18d0>
    2414:	040000f4 	movhi	r16,3
    2418:	8412e904 	addi	r16,r16,19364
    241c:	003acc06 	br	f50 <___vfprintf_internal_r+0x638>
    2420:	d9002c17 	ldw	r4,176(sp)
    2424:	d9801e04 	addi	r6,sp,120
    2428:	b80b883a 	mov	r5,r23
    242c:	0007f140 	call	7f14 <__sprint_r>
    2430:	103a3b1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    2434:	dc402617 	ldw	r17,152(sp)
    2438:	d8c02017 	ldw	r3,128(sp)
    243c:	da000404 	addi	r8,sp,16
    2440:	003f9c06 	br	22b4 <___vfprintf_internal_r+0x199c>
    2444:	ac400043 	ldbu	r17,1(r21)
    2448:	94800814 	ori	r18,r18,32
    244c:	ad400044 	addi	r21,r21,1
    2450:	8c403fcc 	andi	r17,r17,255
    2454:	8c40201c 	xori	r17,r17,128
    2458:	8c7fe004 	addi	r17,r17,-128
    245c:	00398f06 	br	a9c <___vfprintf_internal_r+0x184>
    2460:	d8c02d15 	stw	r3,180(sp)
    2464:	0039883a 	mov	fp,zero
    2468:	003e3506 	br	1d40 <___vfprintf_internal_r+0x1428>
    246c:	d9002c17 	ldw	r4,176(sp)
    2470:	d9801e04 	addi	r6,sp,120
    2474:	b80b883a 	mov	r5,r23
    2478:	0007f140 	call	7f14 <__sprint_r>
    247c:	103a281e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    2480:	d8c02017 	ldw	r3,128(sp)
    2484:	da000404 	addi	r8,sp,16
    2488:	003cd006 	br	17cc <___vfprintf_internal_r+0xeb4>
    248c:	8009883a 	mov	r4,r16
    2490:	da003d15 	stw	r8,244(sp)
    2494:	00008800 	call	880 <strlen>
    2498:	d8802e15 	stw	r2,184(sp)
    249c:	da003d17 	ldw	r8,244(sp)
    24a0:	103c340e 	bge	r2,zero,1574 <___vfprintf_internal_r+0xc5c>
    24a4:	0005883a 	mov	r2,zero
    24a8:	003c3206 	br	1574 <___vfprintf_internal_r+0xc5c>
    24ac:	d9002c17 	ldw	r4,176(sp)
    24b0:	d9801e04 	addi	r6,sp,120
    24b4:	b80b883a 	mov	r5,r23
    24b8:	0007f140 	call	7f14 <__sprint_r>
    24bc:	103a181e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    24c0:	d8c02017 	ldw	r3,128(sp)
    24c4:	d8801f17 	ldw	r2,124(sp)
    24c8:	da000404 	addi	r8,sp,16
    24cc:	d9403317 	ldw	r5,204(sp)
    24d0:	10800044 	addi	r2,r2,1
    24d4:	44000015 	stw	r16,0(r8)
    24d8:	28c7883a 	add	r3,r5,r3
    24dc:	003b7d06 	br	12d4 <___vfprintf_internal_r+0x9bc>
    24e0:	010000f4 	movhi	r4,3
    24e4:	2112fd84 	addi	r4,r4,19446
    24e8:	d9003515 	stw	r4,212(sp)
    24ec:	003b1406 	br	1140 <___vfprintf_internal_r+0x828>
    24f0:	013fffc4 	movi	r4,-1
    24f4:	003a3506 	br	dcc <___vfprintf_internal_r+0x4b4>
    24f8:	0023883a 	mov	r17,zero
    24fc:	003d9d06 	br	1b74 <___vfprintf_internal_r+0x125c>
    2500:	d9002c17 	ldw	r4,176(sp)
    2504:	d9801e04 	addi	r6,sp,120
    2508:	b80b883a 	mov	r5,r23
    250c:	0007f140 	call	7f14 <__sprint_r>
    2510:	103a031e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    2514:	d8c02017 	ldw	r3,128(sp)
    2518:	da000404 	addi	r8,sp,16
    251c:	003d9406 	br	1b70 <___vfprintf_internal_r+0x1258>
    2520:	010000f4 	movhi	r4,3
    2524:	2112f984 	addi	r4,r4,19430
    2528:	d9002b15 	stw	r4,172(sp)
    252c:	d9002b17 	ldw	r4,172(sp)
    2530:	1c47883a 	add	r3,r3,r17
    2534:	10800044 	addi	r2,r2,1
    2538:	41000015 	stw	r4,0(r8)
    253c:	44400115 	stw	r17,4(r8)
    2540:	d8c02015 	stw	r3,128(sp)
    2544:	d8801f15 	stw	r2,124(sp)
    2548:	010001c4 	movi	r4,7
    254c:	20bfd716 	blt	r4,r2,24ac <___vfprintf_internal_r+0x1b94>
    2550:	42000204 	addi	r8,r8,8
    2554:	003fdd06 	br	24cc <___vfprintf_internal_r+0x1bb4>
    2558:	d9002c17 	ldw	r4,176(sp)
    255c:	d9801e04 	addi	r6,sp,120
    2560:	b80b883a 	mov	r5,r23
    2564:	0007f140 	call	7f14 <__sprint_r>
    2568:	1039ed1e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    256c:	d8802617 	ldw	r2,152(sp)
    2570:	d8c02017 	ldw	r3,128(sp)
    2574:	da000404 	addi	r8,sp,16
    2578:	003e1006 	br	1dbc <___vfprintf_internal_r+0x14a4>
    257c:	00800044 	movi	r2,1
    2580:	10803fcc 	andi	r2,r2,255
    2584:	00c00044 	movi	r3,1
    2588:	10fa3526 	beq	r2,r3,e60 <___vfprintf_internal_r+0x548>
    258c:	00c00084 	movi	r3,2
    2590:	10fbcb26 	beq	r2,r3,14c0 <___vfprintf_internal_r+0xba8>
    2594:	003a8f06 	br	fd4 <___vfprintf_internal_r+0x6bc>
    2598:	010000f4 	movhi	r4,3
    259c:	2112fd84 	addi	r4,r4,19446
    25a0:	d9003515 	stw	r4,212(sp)
    25a4:	003b7606 	br	1380 <___vfprintf_internal_r+0xa68>
    25a8:	d8802917 	ldw	r2,164(sp)
    25ac:	00c00184 	movi	r3,6
    25b0:	1880012e 	bgeu	r3,r2,25b8 <___vfprintf_internal_r+0x1ca0>
    25b4:	1805883a 	mov	r2,r3
    25b8:	d8802e15 	stw	r2,184(sp)
    25bc:	1000ef16 	blt	r2,zero,297c <___vfprintf_internal_r+0x2064>
    25c0:	040000f4 	movhi	r16,3
    25c4:	d8802a15 	stw	r2,168(sp)
    25c8:	dcc02d15 	stw	r19,180(sp)
    25cc:	d8002915 	stw	zero,164(sp)
    25d0:	d8003215 	stw	zero,200(sp)
    25d4:	8412f704 	addi	r16,r16,19420
    25d8:	0039883a 	mov	fp,zero
    25dc:	003aa206 	br	1068 <___vfprintf_internal_r+0x750>
    25e0:	0021883a 	mov	r16,zero
    25e4:	003e0706 	br	1e04 <___vfprintf_internal_r+0x14ec>
    25e8:	d9002c17 	ldw	r4,176(sp)
    25ec:	d9801e04 	addi	r6,sp,120
    25f0:	b80b883a 	mov	r5,r23
    25f4:	0007f140 	call	7f14 <__sprint_r>
    25f8:	1039c91e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    25fc:	d8802617 	ldw	r2,152(sp)
    2600:	d9403317 	ldw	r5,204(sp)
    2604:	d8c02017 	ldw	r3,128(sp)
    2608:	da000404 	addi	r8,sp,16
    260c:	2885c83a 	sub	r2,r5,r2
    2610:	003dfb06 	br	1e00 <___vfprintf_internal_r+0x14e8>
    2614:	9080004c 	andi	r2,r18,1
    2618:	103e8f1e 	bne	r2,zero,2058 <___vfprintf_internal_r+0x1740>
    261c:	d8802117 	ldw	r2,132(sp)
    2620:	003e9e06 	br	209c <___vfprintf_internal_r+0x1784>
    2624:	1025883a 	mov	r18,r2
    2628:	0039883a 	mov	fp,zero
    262c:	00800084 	movi	r2,2
    2630:	003fd306 	br	2580 <___vfprintf_internal_r+0x1c68>
    2634:	07000b44 	movi	fp,45
    2638:	df002785 	stb	fp,158(sp)
    263c:	003a4006 	br	f40 <___vfprintf_internal_r+0x628>
    2640:	00c00b44 	movi	r3,45
    2644:	d8c02785 	stb	r3,158(sp)
    2648:	d8802a15 	stw	r2,168(sp)
    264c:	dc802b17 	ldw	r18,172(sp)
    2650:	d8002915 	stw	zero,164(sp)
    2654:	07000b44 	movi	fp,45
    2658:	003a8006 	br	105c <___vfprintf_internal_r+0x744>
    265c:	040000f4 	movhi	r16,3
    2660:	8412ec04 	addi	r16,r16,19376
    2664:	003f4706 	br	2384 <___vfprintf_internal_r+0x1a6c>
    2668:	d8c02d17 	ldw	r3,180(sp)
    266c:	d9002f17 	ldw	r4,188(sp)
    2670:	18800017 	ldw	r2,0(r3)
    2674:	18c00104 	addi	r3,r3,4
    2678:	d8c02d15 	stw	r3,180(sp)
    267c:	11000015 	stw	r4,0(r2)
    2680:	0038dd06 	br	9f8 <___vfprintf_internal_r+0xe0>
    2684:	dd802617 	ldw	r22,152(sp)
    2688:	00bfff44 	movi	r2,-3
    268c:	b0801c16 	blt	r22,r2,2700 <___vfprintf_internal_r+0x1de8>
    2690:	d9402917 	ldw	r5,164(sp)
    2694:	2d801a16 	blt	r5,r22,2700 <___vfprintf_internal_r+0x1de8>
    2698:	dd803215 	stw	r22,200(sp)
    269c:	003e8906 	br	20c4 <___vfprintf_internal_r+0x17ac>
    26a0:	010000f4 	movhi	r4,3
    26a4:	2112f984 	addi	r4,r4,19430
    26a8:	d9002b15 	stw	r4,172(sp)
    26ac:	003c9106 	br	18f4 <___vfprintf_internal_r+0xfdc>
    26b0:	e005883a 	mov	r2,fp
    26b4:	003e7906 	br	209c <___vfprintf_internal_r+0x1784>
    26b8:	d9402917 	ldw	r5,164(sp)
    26bc:	df002783 	ldbu	fp,158(sp)
    26c0:	dcc02d15 	stw	r19,180(sp)
    26c4:	d9402a15 	stw	r5,168(sp)
    26c8:	d9402e15 	stw	r5,184(sp)
    26cc:	d8002915 	stw	zero,164(sp)
    26d0:	d8003215 	stw	zero,200(sp)
    26d4:	003a5d06 	br	104c <___vfprintf_internal_r+0x734>
    26d8:	9080004c 	andi	r2,r18,1
    26dc:	0039883a 	mov	fp,zero
    26e0:	10000426 	beq	r2,zero,26f4 <___vfprintf_internal_r+0x1ddc>
    26e4:	00800c04 	movi	r2,48
    26e8:	dc001dc4 	addi	r16,sp,119
    26ec:	d8801dc5 	stb	r2,119(sp)
    26f0:	003b8006 	br	14f4 <___vfprintf_internal_r+0xbdc>
    26f4:	d8002e15 	stw	zero,184(sp)
    26f8:	dc001e04 	addi	r16,sp,120
    26fc:	003a4d06 	br	1034 <___vfprintf_internal_r+0x71c>
    2700:	8c7fff84 	addi	r17,r17,-2
    2704:	b5bfffc4 	addi	r22,r22,-1
    2708:	dd802615 	stw	r22,152(sp)
    270c:	dc4022c5 	stb	r17,139(sp)
    2710:	b000bf16 	blt	r22,zero,2a10 <___vfprintf_internal_r+0x20f8>
    2714:	00800ac4 	movi	r2,43
    2718:	d8802305 	stb	r2,140(sp)
    271c:	00800244 	movi	r2,9
    2720:	15807016 	blt	r2,r22,28e4 <___vfprintf_internal_r+0x1fcc>
    2724:	00800c04 	movi	r2,48
    2728:	b5800c04 	addi	r22,r22,48
    272c:	d8802345 	stb	r2,141(sp)
    2730:	dd802385 	stb	r22,142(sp)
    2734:	d88023c4 	addi	r2,sp,143
    2738:	df0022c4 	addi	fp,sp,139
    273c:	d8c03317 	ldw	r3,204(sp)
    2740:	1739c83a 	sub	fp,r2,fp
    2744:	d9003317 	ldw	r4,204(sp)
    2748:	e0c7883a 	add	r3,fp,r3
    274c:	df003a15 	stw	fp,232(sp)
    2750:	d8c02e15 	stw	r3,184(sp)
    2754:	00800044 	movi	r2,1
    2758:	1100b30e 	bge	r2,r4,2a28 <___vfprintf_internal_r+0x2110>
    275c:	d8c02e17 	ldw	r3,184(sp)
    2760:	18c00044 	addi	r3,r3,1
    2764:	d8c02e15 	stw	r3,184(sp)
    2768:	1805883a 	mov	r2,r3
    276c:	1800ac16 	blt	r3,zero,2a20 <___vfprintf_internal_r+0x2108>
    2770:	d8003215 	stw	zero,200(sp)
    2774:	003e5d06 	br	20ec <___vfprintf_internal_r+0x17d4>
    2778:	d9002c17 	ldw	r4,176(sp)
    277c:	d9801e04 	addi	r6,sp,120
    2780:	b80b883a 	mov	r5,r23
    2784:	0007f140 	call	7f14 <__sprint_r>
    2788:	1039651e 	bne	r2,zero,d20 <___vfprintf_internal_r+0x408>
    278c:	dc402617 	ldw	r17,152(sp)
    2790:	d8c02017 	ldw	r3,128(sp)
    2794:	d8801f17 	ldw	r2,124(sp)
    2798:	da000404 	addi	r8,sp,16
    279c:	003ed606 	br	22f8 <___vfprintf_internal_r+0x19e0>
    27a0:	582b883a 	mov	r21,r11
    27a4:	d8002915 	stw	zero,164(sp)
    27a8:	0038bd06 	br	aa0 <___vfprintf_internal_r+0x188>
    27ac:	d8802917 	ldw	r2,164(sp)
    27b0:	103e071e 	bne	r2,zero,1fd0 <___vfprintf_internal_r+0x16b8>
    27b4:	dc002915 	stw	r16,164(sp)
    27b8:	003e0506 	br	1fd0 <___vfprintf_internal_r+0x16b8>
    27bc:	d9002917 	ldw	r4,164(sp)
    27c0:	20c00044 	addi	r3,r4,1
    27c4:	003e0f06 	br	2004 <___vfprintf_internal_r+0x16ec>
    27c8:	01400184 	movi	r5,6
    27cc:	d9402915 	stw	r5,164(sp)
    27d0:	003dff06 	br	1fd0 <___vfprintf_internal_r+0x16b8>
    27d4:	d8802104 	addi	r2,sp,132
    27d8:	d8800315 	stw	r2,12(sp)
    27dc:	d8802504 	addi	r2,sp,148
    27e0:	d8800215 	stw	r2,8(sp)
    27e4:	d8802604 	addi	r2,sp,152
    27e8:	d8800115 	stw	r2,4(sp)
    27ec:	d8802917 	ldw	r2,164(sp)
    27f0:	d9403617 	ldw	r5,216(sp)
    27f4:	d9002c17 	ldw	r4,176(sp)
    27f8:	d8800015 	stw	r2,0(sp)
    27fc:	01c000c4 	movi	r7,3
    2800:	980d883a 	mov	r6,r19
    2804:	da003d15 	stw	r8,244(sp)
    2808:	0002f3c0 	call	2f3c <_dtoa_r>
    280c:	d8c02917 	ldw	r3,164(sp)
    2810:	da003d17 	ldw	r8,244(sp)
    2814:	1021883a 	mov	r16,r2
    2818:	10f9883a 	add	fp,r2,r3
    281c:	81000007 	ldb	r4,0(r16)
    2820:	00800c04 	movi	r2,48
    2824:	20805e26 	beq	r4,r2,29a0 <___vfprintf_internal_r+0x2088>
    2828:	d8c02617 	ldw	r3,152(sp)
    282c:	e0f9883a 	add	fp,fp,r3
    2830:	003e0a06 	br	205c <___vfprintf_internal_r+0x1744>
    2834:	00c00b44 	movi	r3,45
    2838:	24e0003c 	xorhi	r19,r4,32768
    283c:	d8c02a05 	stb	r3,168(sp)
    2840:	003de906 	br	1fe8 <___vfprintf_internal_r+0x16d0>
    2844:	d8c03217 	ldw	r3,200(sp)
    2848:	00c07a0e 	bge	zero,r3,2a34 <___vfprintf_internal_r+0x211c>
    284c:	00800044 	movi	r2,1
    2850:	d9003317 	ldw	r4,204(sp)
    2854:	1105883a 	add	r2,r2,r4
    2858:	d8802e15 	stw	r2,184(sp)
    285c:	10004e16 	blt	r2,zero,2998 <___vfprintf_internal_r+0x2080>
    2860:	044019c4 	movi	r17,103
    2864:	003e2106 	br	20ec <___vfprintf_internal_r+0x17d4>
    2868:	d9002917 	ldw	r4,164(sp)
    286c:	d8802104 	addi	r2,sp,132
    2870:	d8800315 	stw	r2,12(sp)
    2874:	d9000015 	stw	r4,0(sp)
    2878:	d8802504 	addi	r2,sp,148
    287c:	d9403617 	ldw	r5,216(sp)
    2880:	d9002c17 	ldw	r4,176(sp)
    2884:	d8800215 	stw	r2,8(sp)
    2888:	d8802604 	addi	r2,sp,152
    288c:	d8800115 	stw	r2,4(sp)
    2890:	01c000c4 	movi	r7,3
    2894:	980d883a 	mov	r6,r19
    2898:	da003d15 	stw	r8,244(sp)
    289c:	0002f3c0 	call	2f3c <_dtoa_r>
    28a0:	d8c02917 	ldw	r3,164(sp)
    28a4:	da003d17 	ldw	r8,244(sp)
    28a8:	1021883a 	mov	r16,r2
    28ac:	00801184 	movi	r2,70
    28b0:	80f9883a 	add	fp,r16,r3
    28b4:	88bfd926 	beq	r17,r2,281c <___vfprintf_internal_r+0x1f04>
    28b8:	003de806 	br	205c <___vfprintf_internal_r+0x1744>
    28bc:	d9002917 	ldw	r4,164(sp)
    28c0:	00c04d0e 	bge	zero,r3,29f8 <___vfprintf_internal_r+0x20e0>
    28c4:	2000441e 	bne	r4,zero,29d8 <___vfprintf_internal_r+0x20c0>
    28c8:	9480004c 	andi	r18,r18,1
    28cc:	9000421e 	bne	r18,zero,29d8 <___vfprintf_internal_r+0x20c0>
    28d0:	1805883a 	mov	r2,r3
    28d4:	18007016 	blt	r3,zero,2a98 <___vfprintf_internal_r+0x2180>
    28d8:	d8c03217 	ldw	r3,200(sp)
    28dc:	d8c02e15 	stw	r3,184(sp)
    28e0:	003e0206 	br	20ec <___vfprintf_internal_r+0x17d4>
    28e4:	df0022c4 	addi	fp,sp,139
    28e8:	dc002915 	stw	r16,164(sp)
    28ec:	4027883a 	mov	r19,r8
    28f0:	e021883a 	mov	r16,fp
    28f4:	b009883a 	mov	r4,r22
    28f8:	01400284 	movi	r5,10
    28fc:	00006100 	call	610 <__modsi3>
    2900:	10800c04 	addi	r2,r2,48
    2904:	843fffc4 	addi	r16,r16,-1
    2908:	b009883a 	mov	r4,r22
    290c:	01400284 	movi	r5,10
    2910:	80800005 	stb	r2,0(r16)
    2914:	000058c0 	call	58c <__divsi3>
    2918:	102d883a 	mov	r22,r2
    291c:	00800244 	movi	r2,9
    2920:	15bff416 	blt	r2,r22,28f4 <___vfprintf_internal_r+0x1fdc>
    2924:	9811883a 	mov	r8,r19
    2928:	b0800c04 	addi	r2,r22,48
    292c:	8027883a 	mov	r19,r16
    2930:	997fffc4 	addi	r5,r19,-1
    2934:	98bfffc5 	stb	r2,-1(r19)
    2938:	dc002917 	ldw	r16,164(sp)
    293c:	2f006a2e 	bgeu	r5,fp,2ae8 <___vfprintf_internal_r+0x21d0>
    2940:	d9c02384 	addi	r7,sp,142
    2944:	3ccfc83a 	sub	r7,r7,r19
    2948:	d9002344 	addi	r4,sp,141
    294c:	e1cf883a 	add	r7,fp,r7
    2950:	00000106 	br	2958 <___vfprintf_internal_r+0x2040>
    2954:	28800003 	ldbu	r2,0(r5)
    2958:	20800005 	stb	r2,0(r4)
    295c:	21000044 	addi	r4,r4,1
    2960:	29400044 	addi	r5,r5,1
    2964:	393ffb1e 	bne	r7,r4,2954 <___vfprintf_internal_r+0x203c>
    2968:	d8802304 	addi	r2,sp,140
    296c:	14c5c83a 	sub	r2,r2,r19
    2970:	d8c02344 	addi	r3,sp,141
    2974:	1885883a 	add	r2,r3,r2
    2978:	003f7006 	br	273c <___vfprintf_internal_r+0x1e24>
    297c:	0005883a 	mov	r2,zero
    2980:	003f0f06 	br	25c0 <___vfprintf_internal_r+0x1ca8>
    2984:	d8c03217 	ldw	r3,200(sp)
    2988:	18c00044 	addi	r3,r3,1
    298c:	d8c02e15 	stw	r3,184(sp)
    2990:	1805883a 	mov	r2,r3
    2994:	183fb20e 	bge	r3,zero,2860 <___vfprintf_internal_r+0x1f48>
    2998:	0005883a 	mov	r2,zero
    299c:	003fb006 	br	2860 <___vfprintf_internal_r+0x1f48>
    29a0:	d9003617 	ldw	r4,216(sp)
    29a4:	000d883a 	mov	r6,zero
    29a8:	000f883a 	mov	r7,zero
    29ac:	980b883a 	mov	r5,r19
    29b0:	d8c03c15 	stw	r3,240(sp)
    29b4:	da003d15 	stw	r8,244(sp)
    29b8:	000b9d80 	call	b9d8 <__eqdf2>
    29bc:	d8c03c17 	ldw	r3,240(sp)
    29c0:	da003d17 	ldw	r8,244(sp)
    29c4:	103f9826 	beq	r2,zero,2828 <___vfprintf_internal_r+0x1f10>
    29c8:	00800044 	movi	r2,1
    29cc:	10c7c83a 	sub	r3,r2,r3
    29d0:	d8c02615 	stw	r3,152(sp)
    29d4:	003f9506 	br	282c <___vfprintf_internal_r+0x1f14>
    29d8:	d9002917 	ldw	r4,164(sp)
    29dc:	d8c03217 	ldw	r3,200(sp)
    29e0:	20800044 	addi	r2,r4,1
    29e4:	1885883a 	add	r2,r3,r2
    29e8:	d8802e15 	stw	r2,184(sp)
    29ec:	103dbf0e 	bge	r2,zero,20ec <___vfprintf_internal_r+0x17d4>
    29f0:	0005883a 	mov	r2,zero
    29f4:	003dbd06 	br	20ec <___vfprintf_internal_r+0x17d4>
    29f8:	2000211e 	bne	r4,zero,2a80 <___vfprintf_internal_r+0x2168>
    29fc:	9480004c 	andi	r18,r18,1
    2a00:	90001f1e 	bne	r18,zero,2a80 <___vfprintf_internal_r+0x2168>
    2a04:	00800044 	movi	r2,1
    2a08:	d8802e15 	stw	r2,184(sp)
    2a0c:	003db706 	br	20ec <___vfprintf_internal_r+0x17d4>
    2a10:	00800b44 	movi	r2,45
    2a14:	05adc83a 	sub	r22,zero,r22
    2a18:	d8802305 	stb	r2,140(sp)
    2a1c:	003f3f06 	br	271c <___vfprintf_internal_r+0x1e04>
    2a20:	0005883a 	mov	r2,zero
    2a24:	003f5206 	br	2770 <___vfprintf_internal_r+0x1e58>
    2a28:	90a4703a 	and	r18,r18,r2
    2a2c:	903f4e26 	beq	r18,zero,2768 <___vfprintf_internal_r+0x1e50>
    2a30:	003f4a06 	br	275c <___vfprintf_internal_r+0x1e44>
    2a34:	00800084 	movi	r2,2
    2a38:	10c5c83a 	sub	r2,r2,r3
    2a3c:	003f8406 	br	2850 <___vfprintf_internal_r+0x1f38>
    2a40:	d8802d17 	ldw	r2,180(sp)
    2a44:	d9002d17 	ldw	r4,180(sp)
    2a48:	ac400043 	ldbu	r17,1(r21)
    2a4c:	10800017 	ldw	r2,0(r2)
    2a50:	582b883a 	mov	r21,r11
    2a54:	d8802915 	stw	r2,164(sp)
    2a58:	20800104 	addi	r2,r4,4
    2a5c:	d9002917 	ldw	r4,164(sp)
    2a60:	d8802d15 	stw	r2,180(sp)
    2a64:	203e7a0e 	bge	r4,zero,2450 <___vfprintf_internal_r+0x1b38>
    2a68:	8c403fcc 	andi	r17,r17,255
    2a6c:	00bfffc4 	movi	r2,-1
    2a70:	8c40201c 	xori	r17,r17,128
    2a74:	d8802915 	stw	r2,164(sp)
    2a78:	8c7fe004 	addi	r17,r17,-128
    2a7c:	00380706 	br	a9c <___vfprintf_internal_r+0x184>
    2a80:	d8c02917 	ldw	r3,164(sp)
    2a84:	18c00084 	addi	r3,r3,2
    2a88:	d8c02e15 	stw	r3,184(sp)
    2a8c:	1805883a 	mov	r2,r3
    2a90:	183d960e 	bge	r3,zero,20ec <___vfprintf_internal_r+0x17d4>
    2a94:	003fd606 	br	29f0 <___vfprintf_internal_r+0x20d8>
    2a98:	0005883a 	mov	r2,zero
    2a9c:	003f8e06 	br	28d8 <___vfprintf_internal_r+0x1fc0>
    2aa0:	9080004c 	andi	r2,r18,1
    2aa4:	103f811e 	bne	r2,zero,28ac <___vfprintf_internal_r+0x1f94>
    2aa8:	d8802117 	ldw	r2,132(sp)
    2aac:	1405c83a 	sub	r2,r2,r16
    2ab0:	d8803315 	stw	r2,204(sp)
    2ab4:	b47ef326 	beq	r22,r17,2684 <___vfprintf_internal_r+0x1d6c>
    2ab8:	dd802617 	ldw	r22,152(sp)
    2abc:	003f1106 	br	2704 <___vfprintf_internal_r+0x1dec>
    2ac0:	d9c02785 	stb	r7,158(sp)
    2ac4:	00390406 	br	ed8 <___vfprintf_internal_r+0x5c0>
    2ac8:	d9c02785 	stb	r7,158(sp)
    2acc:	0038d306 	br	e1c <___vfprintf_internal_r+0x504>
    2ad0:	d9c02785 	stb	r7,158(sp)
    2ad4:	003a6106 	br	145c <___vfprintf_internal_r+0xb44>
    2ad8:	d9c02785 	stb	r7,158(sp)
    2adc:	003af806 	br	16c0 <___vfprintf_internal_r+0xda8>
    2ae0:	0005883a 	mov	r2,zero
    2ae4:	003d7e06 	br	20e0 <___vfprintf_internal_r+0x17c8>
    2ae8:	d8802344 	addi	r2,sp,141
    2aec:	003f1306 	br	273c <___vfprintf_internal_r+0x1e24>
    2af0:	d9c02785 	stb	r7,158(sp)
    2af4:	00392306 	br	f84 <___vfprintf_internal_r+0x66c>
    2af8:	d9c02785 	stb	r7,158(sp)
    2afc:	003aa906 	br	15a4 <___vfprintf_internal_r+0xc8c>
    2b00:	d9c02785 	stb	r7,158(sp)
    2b04:	003a3d06 	br	13fc <___vfprintf_internal_r+0xae4>
    2b08:	d9c02785 	stb	r7,158(sp)
    2b0c:	003aca06 	br	1638 <___vfprintf_internal_r+0xd20>

00002b10 <__vfprintf_internal>:
    2b10:	008000f4 	movhi	r2,3
    2b14:	109aa104 	addi	r2,r2,27268
    2b18:	300f883a 	mov	r7,r6
    2b1c:	280d883a 	mov	r6,r5
    2b20:	200b883a 	mov	r5,r4
    2b24:	11000017 	ldw	r4,0(r2)
    2b28:	00009181 	jmpi	918 <___vfprintf_internal_r>

00002b2c <__sbprintf>:
    2b2c:	2880030b 	ldhu	r2,12(r5)
    2b30:	2ac01917 	ldw	r11,100(r5)
    2b34:	2a80038b 	ldhu	r10,14(r5)
    2b38:	2a400717 	ldw	r9,28(r5)
    2b3c:	2a000917 	ldw	r8,36(r5)
    2b40:	defee204 	addi	sp,sp,-1144
    2b44:	00c10004 	movi	r3,1024
    2b48:	dc011a15 	stw	r16,1128(sp)
    2b4c:	10bfff4c 	andi	r2,r2,65533
    2b50:	2821883a 	mov	r16,r5
    2b54:	d8cb883a 	add	r5,sp,r3
    2b58:	dc811c15 	stw	r18,1136(sp)
    2b5c:	dc411b15 	stw	r17,1132(sp)
    2b60:	dfc11d15 	stw	ra,1140(sp)
    2b64:	2025883a 	mov	r18,r4
    2b68:	d881030d 	sth	r2,1036(sp)
    2b6c:	dac11915 	stw	r11,1124(sp)
    2b70:	da81038d 	sth	r10,1038(sp)
    2b74:	da410715 	stw	r9,1052(sp)
    2b78:	da010915 	stw	r8,1060(sp)
    2b7c:	dec10015 	stw	sp,1024(sp)
    2b80:	dec10415 	stw	sp,1040(sp)
    2b84:	d8c10215 	stw	r3,1032(sp)
    2b88:	d8c10515 	stw	r3,1044(sp)
    2b8c:	d8010615 	stw	zero,1048(sp)
    2b90:	00009180 	call	918 <___vfprintf_internal_r>
    2b94:	1023883a 	mov	r17,r2
    2b98:	10000416 	blt	r2,zero,2bac <__sbprintf+0x80>
    2b9c:	d9410004 	addi	r5,sp,1024
    2ba0:	9009883a 	mov	r4,r18
    2ba4:	00047e00 	call	47e0 <_fflush_r>
    2ba8:	10000d1e 	bne	r2,zero,2be0 <__sbprintf+0xb4>
    2bac:	d881030b 	ldhu	r2,1036(sp)
    2bb0:	1080100c 	andi	r2,r2,64
    2bb4:	10000326 	beq	r2,zero,2bc4 <__sbprintf+0x98>
    2bb8:	8080030b 	ldhu	r2,12(r16)
    2bbc:	10801014 	ori	r2,r2,64
    2bc0:	8080030d 	sth	r2,12(r16)
    2bc4:	8805883a 	mov	r2,r17
    2bc8:	dfc11d17 	ldw	ra,1140(sp)
    2bcc:	dc811c17 	ldw	r18,1136(sp)
    2bd0:	dc411b17 	ldw	r17,1132(sp)
    2bd4:	dc011a17 	ldw	r16,1128(sp)
    2bd8:	dec11e04 	addi	sp,sp,1144
    2bdc:	f800283a 	ret
    2be0:	047fffc4 	movi	r17,-1
    2be4:	003ff106 	br	2bac <__sbprintf+0x80>

00002be8 <__swsetup_r>:
    2be8:	008000f4 	movhi	r2,3
    2bec:	defffd04 	addi	sp,sp,-12
    2bf0:	109aa104 	addi	r2,r2,27268
    2bf4:	dc400115 	stw	r17,4(sp)
    2bf8:	2023883a 	mov	r17,r4
    2bfc:	11000017 	ldw	r4,0(r2)
    2c00:	dc000015 	stw	r16,0(sp)
    2c04:	dfc00215 	stw	ra,8(sp)
    2c08:	2821883a 	mov	r16,r5
    2c0c:	20000226 	beq	r4,zero,2c18 <__swsetup_r+0x30>
    2c10:	20800e17 	ldw	r2,56(r4)
    2c14:	10003126 	beq	r2,zero,2cdc <__swsetup_r+0xf4>
    2c18:	8080030b 	ldhu	r2,12(r16)
    2c1c:	10c0020c 	andi	r3,r2,8
    2c20:	1009883a 	mov	r4,r2
    2c24:	18000f26 	beq	r3,zero,2c64 <__swsetup_r+0x7c>
    2c28:	80c00417 	ldw	r3,16(r16)
    2c2c:	18001526 	beq	r3,zero,2c84 <__swsetup_r+0x9c>
    2c30:	1100004c 	andi	r4,r2,1
    2c34:	20001c1e 	bne	r4,zero,2ca8 <__swsetup_r+0xc0>
    2c38:	1080008c 	andi	r2,r2,2
    2c3c:	1000291e 	bne	r2,zero,2ce4 <__swsetup_r+0xfc>
    2c40:	80800517 	ldw	r2,20(r16)
    2c44:	80800215 	stw	r2,8(r16)
    2c48:	18001c26 	beq	r3,zero,2cbc <__swsetup_r+0xd4>
    2c4c:	0005883a 	mov	r2,zero
    2c50:	dfc00217 	ldw	ra,8(sp)
    2c54:	dc400117 	ldw	r17,4(sp)
    2c58:	dc000017 	ldw	r16,0(sp)
    2c5c:	dec00304 	addi	sp,sp,12
    2c60:	f800283a 	ret
    2c64:	2080040c 	andi	r2,r4,16
    2c68:	10002e26 	beq	r2,zero,2d24 <__swsetup_r+0x13c>
    2c6c:	2080010c 	andi	r2,r4,4
    2c70:	10001e1e 	bne	r2,zero,2cec <__swsetup_r+0x104>
    2c74:	80c00417 	ldw	r3,16(r16)
    2c78:	20800214 	ori	r2,r4,8
    2c7c:	8080030d 	sth	r2,12(r16)
    2c80:	183feb1e 	bne	r3,zero,2c30 <__swsetup_r+0x48>
    2c84:	1100a00c 	andi	r4,r2,640
    2c88:	01408004 	movi	r5,512
    2c8c:	217fe826 	beq	r4,r5,2c30 <__swsetup_r+0x48>
    2c90:	800b883a 	mov	r5,r16
    2c94:	8809883a 	mov	r4,r17
    2c98:	00057600 	call	5760 <__smakebuf_r>
    2c9c:	8080030b 	ldhu	r2,12(r16)
    2ca0:	80c00417 	ldw	r3,16(r16)
    2ca4:	003fe206 	br	2c30 <__swsetup_r+0x48>
    2ca8:	80800517 	ldw	r2,20(r16)
    2cac:	80000215 	stw	zero,8(r16)
    2cb0:	0085c83a 	sub	r2,zero,r2
    2cb4:	80800615 	stw	r2,24(r16)
    2cb8:	183fe41e 	bne	r3,zero,2c4c <__swsetup_r+0x64>
    2cbc:	80c0030b 	ldhu	r3,12(r16)
    2cc0:	0005883a 	mov	r2,zero
    2cc4:	1900200c 	andi	r4,r3,128
    2cc8:	203fe126 	beq	r4,zero,2c50 <__swsetup_r+0x68>
    2ccc:	18c01014 	ori	r3,r3,64
    2cd0:	80c0030d 	sth	r3,12(r16)
    2cd4:	00bfffc4 	movi	r2,-1
    2cd8:	003fdd06 	br	2c50 <__swsetup_r+0x68>
    2cdc:	0004bbc0 	call	4bbc <__sinit>
    2ce0:	003fcd06 	br	2c18 <__swsetup_r+0x30>
    2ce4:	0005883a 	mov	r2,zero
    2ce8:	003fd606 	br	2c44 <__swsetup_r+0x5c>
    2cec:	81400c17 	ldw	r5,48(r16)
    2cf0:	28000626 	beq	r5,zero,2d0c <__swsetup_r+0x124>
    2cf4:	80801004 	addi	r2,r16,64
    2cf8:	28800326 	beq	r5,r2,2d08 <__swsetup_r+0x120>
    2cfc:	8809883a 	mov	r4,r17
    2d00:	0004d300 	call	4d30 <_free_r>
    2d04:	8100030b 	ldhu	r4,12(r16)
    2d08:	80000c15 	stw	zero,48(r16)
    2d0c:	80c00417 	ldw	r3,16(r16)
    2d10:	00bff6c4 	movi	r2,-37
    2d14:	1108703a 	and	r4,r2,r4
    2d18:	80000115 	stw	zero,4(r16)
    2d1c:	80c00015 	stw	r3,0(r16)
    2d20:	003fd506 	br	2c78 <__swsetup_r+0x90>
    2d24:	00800244 	movi	r2,9
    2d28:	88800015 	stw	r2,0(r17)
    2d2c:	20801014 	ori	r2,r4,64
    2d30:	8080030d 	sth	r2,12(r16)
    2d34:	00bfffc4 	movi	r2,-1
    2d38:	003fc506 	br	2c50 <__swsetup_r+0x68>

00002d3c <quorem>:
    2d3c:	defff704 	addi	sp,sp,-36
    2d40:	dc800215 	stw	r18,8(sp)
    2d44:	20800417 	ldw	r2,16(r4)
    2d48:	2c800417 	ldw	r18,16(r5)
    2d4c:	dfc00815 	stw	ra,32(sp)
    2d50:	ddc00715 	stw	r23,28(sp)
    2d54:	dd800615 	stw	r22,24(sp)
    2d58:	dd400515 	stw	r21,20(sp)
    2d5c:	dd000415 	stw	r20,16(sp)
    2d60:	dcc00315 	stw	r19,12(sp)
    2d64:	dc400115 	stw	r17,4(sp)
    2d68:	dc000015 	stw	r16,0(sp)
    2d6c:	14807116 	blt	r2,r18,2f34 <quorem+0x1f8>
    2d70:	94bfffc4 	addi	r18,r18,-1
    2d74:	94ad883a 	add	r22,r18,r18
    2d78:	b5ad883a 	add	r22,r22,r22
    2d7c:	2c400504 	addi	r17,r5,20
    2d80:	8da9883a 	add	r20,r17,r22
    2d84:	25400504 	addi	r21,r4,20
    2d88:	282f883a 	mov	r23,r5
    2d8c:	adad883a 	add	r22,r21,r22
    2d90:	a1400017 	ldw	r5,0(r20)
    2d94:	2021883a 	mov	r16,r4
    2d98:	b1000017 	ldw	r4,0(r22)
    2d9c:	29400044 	addi	r5,r5,1
    2da0:	00006840 	call	684 <__udivsi3>
    2da4:	1027883a 	mov	r19,r2
    2da8:	10002c26 	beq	r2,zero,2e5c <quorem+0x120>
    2dac:	a813883a 	mov	r9,r21
    2db0:	880b883a 	mov	r5,r17
    2db4:	0009883a 	mov	r4,zero
    2db8:	000d883a 	mov	r6,zero
    2dbc:	2a000017 	ldw	r8,0(r5)
    2dc0:	49c00017 	ldw	r7,0(r9)
    2dc4:	29400104 	addi	r5,r5,4
    2dc8:	40bfffcc 	andi	r2,r8,65535
    2dcc:	14c5383a 	mul	r2,r2,r19
    2dd0:	4010d43a 	srli	r8,r8,16
    2dd4:	38ffffcc 	andi	r3,r7,65535
    2dd8:	1105883a 	add	r2,r2,r4
    2ddc:	1008d43a 	srli	r4,r2,16
    2de0:	44d1383a 	mul	r8,r8,r19
    2de4:	198d883a 	add	r6,r3,r6
    2de8:	10ffffcc 	andi	r3,r2,65535
    2dec:	30c7c83a 	sub	r3,r6,r3
    2df0:	380ed43a 	srli	r7,r7,16
    2df4:	4105883a 	add	r2,r8,r4
    2df8:	180dd43a 	srai	r6,r3,16
    2dfc:	113fffcc 	andi	r4,r2,65535
    2e00:	390fc83a 	sub	r7,r7,r4
    2e04:	398d883a 	add	r6,r7,r6
    2e08:	300e943a 	slli	r7,r6,16
    2e0c:	18ffffcc 	andi	r3,r3,65535
    2e10:	1008d43a 	srli	r4,r2,16
    2e14:	38ceb03a 	or	r7,r7,r3
    2e18:	49c00015 	stw	r7,0(r9)
    2e1c:	300dd43a 	srai	r6,r6,16
    2e20:	4a400104 	addi	r9,r9,4
    2e24:	a17fe52e 	bgeu	r20,r5,2dbc <quorem+0x80>
    2e28:	b0800017 	ldw	r2,0(r22)
    2e2c:	10000b1e 	bne	r2,zero,2e5c <quorem+0x120>
    2e30:	b0bfff04 	addi	r2,r22,-4
    2e34:	a880082e 	bgeu	r21,r2,2e58 <quorem+0x11c>
    2e38:	b0ffff17 	ldw	r3,-4(r22)
    2e3c:	18000326 	beq	r3,zero,2e4c <quorem+0x110>
    2e40:	00000506 	br	2e58 <quorem+0x11c>
    2e44:	10c00017 	ldw	r3,0(r2)
    2e48:	1800031e 	bne	r3,zero,2e58 <quorem+0x11c>
    2e4c:	10bfff04 	addi	r2,r2,-4
    2e50:	94bfffc4 	addi	r18,r18,-1
    2e54:	a8bffb36 	bltu	r21,r2,2e44 <quorem+0x108>
    2e58:	84800415 	stw	r18,16(r16)
    2e5c:	b80b883a 	mov	r5,r23
    2e60:	8009883a 	mov	r4,r16
    2e64:	0006ea00 	call	6ea0 <__mcmp>
    2e68:	10002616 	blt	r2,zero,2f04 <quorem+0x1c8>
    2e6c:	9cc00044 	addi	r19,r19,1
    2e70:	a805883a 	mov	r2,r21
    2e74:	000b883a 	mov	r5,zero
    2e78:	11000017 	ldw	r4,0(r2)
    2e7c:	89800017 	ldw	r6,0(r17)
    2e80:	10800104 	addi	r2,r2,4
    2e84:	20ffffcc 	andi	r3,r4,65535
    2e88:	194b883a 	add	r5,r3,r5
    2e8c:	30ffffcc 	andi	r3,r6,65535
    2e90:	28c7c83a 	sub	r3,r5,r3
    2e94:	300cd43a 	srli	r6,r6,16
    2e98:	2008d43a 	srli	r4,r4,16
    2e9c:	180bd43a 	srai	r5,r3,16
    2ea0:	18ffffcc 	andi	r3,r3,65535
    2ea4:	2189c83a 	sub	r4,r4,r6
    2ea8:	2149883a 	add	r4,r4,r5
    2eac:	200c943a 	slli	r6,r4,16
    2eb0:	8c400104 	addi	r17,r17,4
    2eb4:	200bd43a 	srai	r5,r4,16
    2eb8:	30c6b03a 	or	r3,r6,r3
    2ebc:	10ffff15 	stw	r3,-4(r2)
    2ec0:	a47fed2e 	bgeu	r20,r17,2e78 <quorem+0x13c>
    2ec4:	9485883a 	add	r2,r18,r18
    2ec8:	1085883a 	add	r2,r2,r2
    2ecc:	a887883a 	add	r3,r21,r2
    2ed0:	18800017 	ldw	r2,0(r3)
    2ed4:	10000b1e 	bne	r2,zero,2f04 <quorem+0x1c8>
    2ed8:	18bfff04 	addi	r2,r3,-4
    2edc:	a880082e 	bgeu	r21,r2,2f00 <quorem+0x1c4>
    2ee0:	18ffff17 	ldw	r3,-4(r3)
    2ee4:	18000326 	beq	r3,zero,2ef4 <quorem+0x1b8>
    2ee8:	00000506 	br	2f00 <quorem+0x1c4>
    2eec:	10c00017 	ldw	r3,0(r2)
    2ef0:	1800031e 	bne	r3,zero,2f00 <quorem+0x1c4>
    2ef4:	10bfff04 	addi	r2,r2,-4
    2ef8:	94bfffc4 	addi	r18,r18,-1
    2efc:	a8bffb36 	bltu	r21,r2,2eec <quorem+0x1b0>
    2f00:	84800415 	stw	r18,16(r16)
    2f04:	9805883a 	mov	r2,r19
    2f08:	dfc00817 	ldw	ra,32(sp)
    2f0c:	ddc00717 	ldw	r23,28(sp)
    2f10:	dd800617 	ldw	r22,24(sp)
    2f14:	dd400517 	ldw	r21,20(sp)
    2f18:	dd000417 	ldw	r20,16(sp)
    2f1c:	dcc00317 	ldw	r19,12(sp)
    2f20:	dc800217 	ldw	r18,8(sp)
    2f24:	dc400117 	ldw	r17,4(sp)
    2f28:	dc000017 	ldw	r16,0(sp)
    2f2c:	dec00904 	addi	sp,sp,36
    2f30:	f800283a 	ret
    2f34:	0005883a 	mov	r2,zero
    2f38:	003ff306 	br	2f08 <quorem+0x1cc>

00002f3c <_dtoa_r>:
    2f3c:	20801017 	ldw	r2,64(r4)
    2f40:	deffde04 	addi	sp,sp,-136
    2f44:	df002015 	stw	fp,128(sp)
    2f48:	dcc01b15 	stw	r19,108(sp)
    2f4c:	dc801a15 	stw	r18,104(sp)
    2f50:	dc401915 	stw	r17,100(sp)
    2f54:	dc001815 	stw	r16,96(sp)
    2f58:	dfc02115 	stw	ra,132(sp)
    2f5c:	ddc01f15 	stw	r23,124(sp)
    2f60:	dd801e15 	stw	r22,120(sp)
    2f64:	dd401d15 	stw	r21,116(sp)
    2f68:	dd001c15 	stw	r20,112(sp)
    2f6c:	d9c00315 	stw	r7,12(sp)
    2f70:	2039883a 	mov	fp,r4
    2f74:	3023883a 	mov	r17,r6
    2f78:	2825883a 	mov	r18,r5
    2f7c:	dc002417 	ldw	r16,144(sp)
    2f80:	3027883a 	mov	r19,r6
    2f84:	10000826 	beq	r2,zero,2fa8 <_dtoa_r+0x6c>
    2f88:	21801117 	ldw	r6,68(r4)
    2f8c:	00c00044 	movi	r3,1
    2f90:	100b883a 	mov	r5,r2
    2f94:	1986983a 	sll	r3,r3,r6
    2f98:	11800115 	stw	r6,4(r2)
    2f9c:	10c00215 	stw	r3,8(r2)
    2fa0:	00066800 	call	6680 <_Bfree>
    2fa4:	e0001015 	stw	zero,64(fp)
    2fa8:	88002e16 	blt	r17,zero,3064 <_dtoa_r+0x128>
    2fac:	80000015 	stw	zero,0(r16)
    2fb0:	889ffc2c 	andhi	r2,r17,32752
    2fb4:	00dffc34 	movhi	r3,32752
    2fb8:	10c01c26 	beq	r2,r3,302c <_dtoa_r+0xf0>
    2fbc:	000d883a 	mov	r6,zero
    2fc0:	000f883a 	mov	r7,zero
    2fc4:	9009883a 	mov	r4,r18
    2fc8:	980b883a 	mov	r5,r19
    2fcc:	000b9d80 	call	b9d8 <__eqdf2>
    2fd0:	10002b1e 	bne	r2,zero,3080 <_dtoa_r+0x144>
    2fd4:	d9c02317 	ldw	r7,140(sp)
    2fd8:	00800044 	movi	r2,1
    2fdc:	38800015 	stw	r2,0(r7)
    2fe0:	d8802517 	ldw	r2,148(sp)
    2fe4:	10019e26 	beq	r2,zero,3660 <_dtoa_r+0x724>
    2fe8:	d8c02517 	ldw	r3,148(sp)
    2fec:	008000f4 	movhi	r2,3
    2ff0:	1092f944 	addi	r2,r2,19429
    2ff4:	18800015 	stw	r2,0(r3)
    2ff8:	10bfffc4 	addi	r2,r2,-1
    2ffc:	dfc02117 	ldw	ra,132(sp)
    3000:	df002017 	ldw	fp,128(sp)
    3004:	ddc01f17 	ldw	r23,124(sp)
    3008:	dd801e17 	ldw	r22,120(sp)
    300c:	dd401d17 	ldw	r21,116(sp)
    3010:	dd001c17 	ldw	r20,112(sp)
    3014:	dcc01b17 	ldw	r19,108(sp)
    3018:	dc801a17 	ldw	r18,104(sp)
    301c:	dc401917 	ldw	r17,100(sp)
    3020:	dc001817 	ldw	r16,96(sp)
    3024:	dec02204 	addi	sp,sp,136
    3028:	f800283a 	ret
    302c:	d8c02317 	ldw	r3,140(sp)
    3030:	0089c3c4 	movi	r2,9999
    3034:	18800015 	stw	r2,0(r3)
    3038:	90017726 	beq	r18,zero,3618 <_dtoa_r+0x6dc>
    303c:	008000f4 	movhi	r2,3
    3040:	10930504 	addi	r2,r2,19476
    3044:	d9002517 	ldw	r4,148(sp)
    3048:	203fec26 	beq	r4,zero,2ffc <_dtoa_r+0xc0>
    304c:	10c000c7 	ldb	r3,3(r2)
    3050:	1801781e 	bne	r3,zero,3634 <_dtoa_r+0x6f8>
    3054:	10c000c4 	addi	r3,r2,3
    3058:	d9802517 	ldw	r6,148(sp)
    305c:	30c00015 	stw	r3,0(r6)
    3060:	003fe606 	br	2ffc <_dtoa_r+0xc0>
    3064:	04e00034 	movhi	r19,32768
    3068:	9cffffc4 	addi	r19,r19,-1
    306c:	00800044 	movi	r2,1
    3070:	8ce6703a 	and	r19,r17,r19
    3074:	80800015 	stw	r2,0(r16)
    3078:	9823883a 	mov	r17,r19
    307c:	003fcc06 	br	2fb0 <_dtoa_r+0x74>
    3080:	d8800204 	addi	r2,sp,8
    3084:	d8800015 	stw	r2,0(sp)
    3088:	d9c00104 	addi	r7,sp,4
    308c:	900b883a 	mov	r5,r18
    3090:	980d883a 	mov	r6,r19
    3094:	e009883a 	mov	r4,fp
    3098:	8820d53a 	srli	r16,r17,20
    309c:	000726c0 	call	726c <__d2b>
    30a0:	d8800915 	stw	r2,36(sp)
    30a4:	8001651e 	bne	r16,zero,363c <_dtoa_r+0x700>
    30a8:	dd800217 	ldw	r22,8(sp)
    30ac:	dc000117 	ldw	r16,4(sp)
    30b0:	00800804 	movi	r2,32
    30b4:	b421883a 	add	r16,r22,r16
    30b8:	80c10c84 	addi	r3,r16,1074
    30bc:	10c2d10e 	bge	r2,r3,3c04 <_dtoa_r+0xcc8>
    30c0:	00801004 	movi	r2,64
    30c4:	81010484 	addi	r4,r16,1042
    30c8:	10c7c83a 	sub	r3,r2,r3
    30cc:	9108d83a 	srl	r4,r18,r4
    30d0:	88e2983a 	sll	r17,r17,r3
    30d4:	2448b03a 	or	r4,r4,r17
    30d8:	000cda00 	call	cda0 <__floatunsidf>
    30dc:	017f8434 	movhi	r5,65040
    30e0:	01800044 	movi	r6,1
    30e4:	1009883a 	mov	r4,r2
    30e8:	194b883a 	add	r5,r3,r5
    30ec:	843fffc4 	addi	r16,r16,-1
    30f0:	d9801115 	stw	r6,68(sp)
    30f4:	000d883a 	mov	r6,zero
    30f8:	01cffe34 	movhi	r7,16376
    30fc:	000c3480 	call	c348 <__subdf3>
    3100:	0198dbf4 	movhi	r6,25455
    3104:	01cff4f4 	movhi	r7,16339
    3108:	3190d844 	addi	r6,r6,17249
    310c:	39e1e9c4 	addi	r7,r7,-30809
    3110:	1009883a 	mov	r4,r2
    3114:	180b883a 	mov	r5,r3
    3118:	000bc300 	call	bc30 <__muldf3>
    311c:	01a2d874 	movhi	r6,35681
    3120:	01cff1f4 	movhi	r7,16327
    3124:	31b22cc4 	addi	r6,r6,-14157
    3128:	39e28a04 	addi	r7,r7,-30168
    312c:	180b883a 	mov	r5,r3
    3130:	1009883a 	mov	r4,r2
    3134:	000a8440 	call	a844 <__adddf3>
    3138:	8009883a 	mov	r4,r16
    313c:	1029883a 	mov	r20,r2
    3140:	1823883a 	mov	r17,r3
    3144:	000ccc40 	call	ccc4 <__floatsidf>
    3148:	019427f4 	movhi	r6,20639
    314c:	01cff4f4 	movhi	r7,16339
    3150:	319e7ec4 	addi	r6,r6,31227
    3154:	39d104c4 	addi	r7,r7,17427
    3158:	1009883a 	mov	r4,r2
    315c:	180b883a 	mov	r5,r3
    3160:	000bc300 	call	bc30 <__muldf3>
    3164:	100d883a 	mov	r6,r2
    3168:	180f883a 	mov	r7,r3
    316c:	a009883a 	mov	r4,r20
    3170:	880b883a 	mov	r5,r17
    3174:	000a8440 	call	a844 <__adddf3>
    3178:	1009883a 	mov	r4,r2
    317c:	180b883a 	mov	r5,r3
    3180:	1029883a 	mov	r20,r2
    3184:	1823883a 	mov	r17,r3
    3188:	000cc440 	call	cc44 <__fixdfsi>
    318c:	000d883a 	mov	r6,zero
    3190:	000f883a 	mov	r7,zero
    3194:	a009883a 	mov	r4,r20
    3198:	880b883a 	mov	r5,r17
    319c:	d8800515 	stw	r2,20(sp)
    31a0:	000bb3c0 	call	bb3c <__ledf2>
    31a4:	10028716 	blt	r2,zero,3bc4 <_dtoa_r+0xc88>
    31a8:	d8c00517 	ldw	r3,20(sp)
    31ac:	00800584 	movi	r2,22
    31b0:	10c27536 	bltu	r2,r3,3b88 <_dtoa_r+0xc4c>
    31b4:	180490fa 	slli	r2,r3,3
    31b8:	00c000f4 	movhi	r3,3
    31bc:	18d32104 	addi	r3,r3,19588
    31c0:	1885883a 	add	r2,r3,r2
    31c4:	11000017 	ldw	r4,0(r2)
    31c8:	11400117 	ldw	r5,4(r2)
    31cc:	900d883a 	mov	r6,r18
    31d0:	980f883a 	mov	r7,r19
    31d4:	000ba600 	call	ba60 <__gedf2>
    31d8:	00828d0e 	bge	zero,r2,3c10 <_dtoa_r+0xcd4>
    31dc:	d9000517 	ldw	r4,20(sp)
    31e0:	d8000e15 	stw	zero,56(sp)
    31e4:	213fffc4 	addi	r4,r4,-1
    31e8:	d9000515 	stw	r4,20(sp)
    31ec:	b42dc83a 	sub	r22,r22,r16
    31f0:	b5bfffc4 	addi	r22,r22,-1
    31f4:	b0026f16 	blt	r22,zero,3bb4 <_dtoa_r+0xc78>
    31f8:	d8000815 	stw	zero,32(sp)
    31fc:	d9c00517 	ldw	r7,20(sp)
    3200:	38026416 	blt	r7,zero,3b94 <_dtoa_r+0xc58>
    3204:	b1ed883a 	add	r22,r22,r7
    3208:	d9c00d15 	stw	r7,52(sp)
    320c:	d8000a15 	stw	zero,40(sp)
    3210:	d9800317 	ldw	r6,12(sp)
    3214:	00800244 	movi	r2,9
    3218:	11811436 	bltu	r2,r6,366c <_dtoa_r+0x730>
    321c:	00800144 	movi	r2,5
    3220:	1184e10e 	bge	r2,r6,45a8 <_dtoa_r+0x166c>
    3224:	31bfff04 	addi	r6,r6,-4
    3228:	d9800315 	stw	r6,12(sp)
    322c:	0023883a 	mov	r17,zero
    3230:	d9800317 	ldw	r6,12(sp)
    3234:	008000c4 	movi	r2,3
    3238:	30836726 	beq	r6,r2,3fd8 <_dtoa_r+0x109c>
    323c:	1183410e 	bge	r2,r6,3f44 <_dtoa_r+0x1008>
    3240:	d9c00317 	ldw	r7,12(sp)
    3244:	00800104 	movi	r2,4
    3248:	38827c26 	beq	r7,r2,3c3c <_dtoa_r+0xd00>
    324c:	00800144 	movi	r2,5
    3250:	3884c41e 	bne	r7,r2,4564 <_dtoa_r+0x1628>
    3254:	00800044 	movi	r2,1
    3258:	d8800b15 	stw	r2,44(sp)
    325c:	d8c00517 	ldw	r3,20(sp)
    3260:	d9002217 	ldw	r4,136(sp)
    3264:	1907883a 	add	r3,r3,r4
    3268:	19800044 	addi	r6,r3,1
    326c:	d8c00c15 	stw	r3,48(sp)
    3270:	d9800615 	stw	r6,24(sp)
    3274:	0183a40e 	bge	zero,r6,4108 <_dtoa_r+0x11cc>
    3278:	d9800617 	ldw	r6,24(sp)
    327c:	3021883a 	mov	r16,r6
    3280:	e0001115 	stw	zero,68(fp)
    3284:	008005c4 	movi	r2,23
    3288:	1184c92e 	bgeu	r2,r6,45b0 <_dtoa_r+0x1674>
    328c:	00c00044 	movi	r3,1
    3290:	00800104 	movi	r2,4
    3294:	1085883a 	add	r2,r2,r2
    3298:	11000504 	addi	r4,r2,20
    329c:	180b883a 	mov	r5,r3
    32a0:	18c00044 	addi	r3,r3,1
    32a4:	313ffb2e 	bgeu	r6,r4,3294 <_dtoa_r+0x358>
    32a8:	e1401115 	stw	r5,68(fp)
    32ac:	e009883a 	mov	r4,fp
    32b0:	00065d80 	call	65d8 <_Balloc>
    32b4:	d8800715 	stw	r2,28(sp)
    32b8:	e0801015 	stw	r2,64(fp)
    32bc:	00800384 	movi	r2,14
    32c0:	1400f736 	bltu	r2,r16,36a0 <_dtoa_r+0x764>
    32c4:	8800f626 	beq	r17,zero,36a0 <_dtoa_r+0x764>
    32c8:	d9c00517 	ldw	r7,20(sp)
    32cc:	01c39a0e 	bge	zero,r7,4138 <_dtoa_r+0x11fc>
    32d0:	388003cc 	andi	r2,r7,15
    32d4:	100490fa 	slli	r2,r2,3
    32d8:	382bd13a 	srai	r21,r7,4
    32dc:	00c000f4 	movhi	r3,3
    32e0:	18d32104 	addi	r3,r3,19588
    32e4:	1885883a 	add	r2,r3,r2
    32e8:	a8c0040c 	andi	r3,r21,16
    32ec:	12400017 	ldw	r9,0(r2)
    32f0:	12000117 	ldw	r8,4(r2)
    32f4:	18037926 	beq	r3,zero,40dc <_dtoa_r+0x11a0>
    32f8:	008000f4 	movhi	r2,3
    32fc:	10931704 	addi	r2,r2,19548
    3300:	11800817 	ldw	r6,32(r2)
    3304:	11c00917 	ldw	r7,36(r2)
    3308:	9009883a 	mov	r4,r18
    330c:	980b883a 	mov	r5,r19
    3310:	da001715 	stw	r8,92(sp)
    3314:	da401615 	stw	r9,88(sp)
    3318:	000b0f00 	call	b0f0 <__divdf3>
    331c:	da001717 	ldw	r8,92(sp)
    3320:	da401617 	ldw	r9,88(sp)
    3324:	ad4003cc 	andi	r21,r21,15
    3328:	040000c4 	movi	r16,3
    332c:	1023883a 	mov	r17,r2
    3330:	1829883a 	mov	r20,r3
    3334:	a8001126 	beq	r21,zero,337c <_dtoa_r+0x440>
    3338:	05c000f4 	movhi	r23,3
    333c:	bdd31704 	addi	r23,r23,19548
    3340:	4805883a 	mov	r2,r9
    3344:	4007883a 	mov	r3,r8
    3348:	a980004c 	andi	r6,r21,1
    334c:	1009883a 	mov	r4,r2
    3350:	a82bd07a 	srai	r21,r21,1
    3354:	180b883a 	mov	r5,r3
    3358:	30000426 	beq	r6,zero,336c <_dtoa_r+0x430>
    335c:	b9800017 	ldw	r6,0(r23)
    3360:	b9c00117 	ldw	r7,4(r23)
    3364:	84000044 	addi	r16,r16,1
    3368:	000bc300 	call	bc30 <__muldf3>
    336c:	bdc00204 	addi	r23,r23,8
    3370:	a83ff51e 	bne	r21,zero,3348 <_dtoa_r+0x40c>
    3374:	1013883a 	mov	r9,r2
    3378:	1811883a 	mov	r8,r3
    337c:	480d883a 	mov	r6,r9
    3380:	400f883a 	mov	r7,r8
    3384:	8809883a 	mov	r4,r17
    3388:	a00b883a 	mov	r5,r20
    338c:	000b0f00 	call	b0f0 <__divdf3>
    3390:	d8800f15 	stw	r2,60(sp)
    3394:	d8c01015 	stw	r3,64(sp)
    3398:	d8c00e17 	ldw	r3,56(sp)
    339c:	18000626 	beq	r3,zero,33b8 <_dtoa_r+0x47c>
    33a0:	d9000f17 	ldw	r4,60(sp)
    33a4:	d9401017 	ldw	r5,64(sp)
    33a8:	000d883a 	mov	r6,zero
    33ac:	01cffc34 	movhi	r7,16368
    33b0:	000bb3c0 	call	bb3c <__ledf2>
    33b4:	10040b16 	blt	r2,zero,43e4 <_dtoa_r+0x14a8>
    33b8:	8009883a 	mov	r4,r16
    33bc:	000ccc40 	call	ccc4 <__floatsidf>
    33c0:	d9800f17 	ldw	r6,60(sp)
    33c4:	d9c01017 	ldw	r7,64(sp)
    33c8:	1009883a 	mov	r4,r2
    33cc:	180b883a 	mov	r5,r3
    33d0:	000bc300 	call	bc30 <__muldf3>
    33d4:	000d883a 	mov	r6,zero
    33d8:	01d00734 	movhi	r7,16412
    33dc:	1009883a 	mov	r4,r2
    33e0:	180b883a 	mov	r5,r3
    33e4:	000a8440 	call	a844 <__adddf3>
    33e8:	1021883a 	mov	r16,r2
    33ec:	d8800617 	ldw	r2,24(sp)
    33f0:	047f3034 	movhi	r17,64704
    33f4:	1c63883a 	add	r17,r3,r17
    33f8:	10031826 	beq	r2,zero,405c <_dtoa_r+0x1120>
    33fc:	d8c00517 	ldw	r3,20(sp)
    3400:	db000617 	ldw	r12,24(sp)
    3404:	d8c01315 	stw	r3,76(sp)
    3408:	d9000b17 	ldw	r4,44(sp)
    340c:	20038f26 	beq	r4,zero,424c <_dtoa_r+0x1310>
    3410:	60bfffc4 	addi	r2,r12,-1
    3414:	100490fa 	slli	r2,r2,3
    3418:	00c000f4 	movhi	r3,3
    341c:	18d32104 	addi	r3,r3,19588
    3420:	1885883a 	add	r2,r3,r2
    3424:	11800017 	ldw	r6,0(r2)
    3428:	11c00117 	ldw	r7,4(r2)
    342c:	d8800717 	ldw	r2,28(sp)
    3430:	0009883a 	mov	r4,zero
    3434:	014ff834 	movhi	r5,16352
    3438:	db001615 	stw	r12,88(sp)
    343c:	15c00044 	addi	r23,r2,1
    3440:	000b0f00 	call	b0f0 <__divdf3>
    3444:	800d883a 	mov	r6,r16
    3448:	880f883a 	mov	r7,r17
    344c:	1009883a 	mov	r4,r2
    3450:	180b883a 	mov	r5,r3
    3454:	000c3480 	call	c348 <__subdf3>
    3458:	d9401017 	ldw	r5,64(sp)
    345c:	d9000f17 	ldw	r4,60(sp)
    3460:	102b883a 	mov	r21,r2
    3464:	d8c01215 	stw	r3,72(sp)
    3468:	000cc440 	call	cc44 <__fixdfsi>
    346c:	1009883a 	mov	r4,r2
    3470:	1029883a 	mov	r20,r2
    3474:	000ccc40 	call	ccc4 <__floatsidf>
    3478:	d9000f17 	ldw	r4,60(sp)
    347c:	d9401017 	ldw	r5,64(sp)
    3480:	100d883a 	mov	r6,r2
    3484:	180f883a 	mov	r7,r3
    3488:	000c3480 	call	c348 <__subdf3>
    348c:	1823883a 	mov	r17,r3
    3490:	d8c00717 	ldw	r3,28(sp)
    3494:	d9401217 	ldw	r5,72(sp)
    3498:	a2000c04 	addi	r8,r20,48
    349c:	1021883a 	mov	r16,r2
    34a0:	1a000005 	stb	r8,0(r3)
    34a4:	800d883a 	mov	r6,r16
    34a8:	880f883a 	mov	r7,r17
    34ac:	a809883a 	mov	r4,r21
    34b0:	4029883a 	mov	r20,r8
    34b4:	000ba600 	call	ba60 <__gedf2>
    34b8:	00841d16 	blt	zero,r2,4530 <_dtoa_r+0x15f4>
    34bc:	800d883a 	mov	r6,r16
    34c0:	880f883a 	mov	r7,r17
    34c4:	0009883a 	mov	r4,zero
    34c8:	014ffc34 	movhi	r5,16368
    34cc:	000c3480 	call	c348 <__subdf3>
    34d0:	d9401217 	ldw	r5,72(sp)
    34d4:	100d883a 	mov	r6,r2
    34d8:	180f883a 	mov	r7,r3
    34dc:	a809883a 	mov	r4,r21
    34e0:	000ba600 	call	ba60 <__gedf2>
    34e4:	db001617 	ldw	r12,88(sp)
    34e8:	00840e16 	blt	zero,r2,4524 <_dtoa_r+0x15e8>
    34ec:	00800044 	movi	r2,1
    34f0:	13006b0e 	bge	r2,r12,36a0 <_dtoa_r+0x764>
    34f4:	d9000717 	ldw	r4,28(sp)
    34f8:	dd800f15 	stw	r22,60(sp)
    34fc:	dcc01015 	stw	r19,64(sp)
    3500:	2319883a 	add	r12,r4,r12
    3504:	dcc01217 	ldw	r19,72(sp)
    3508:	602d883a 	mov	r22,r12
    350c:	dc801215 	stw	r18,72(sp)
    3510:	b825883a 	mov	r18,r23
    3514:	00000906 	br	353c <_dtoa_r+0x600>
    3518:	000c3480 	call	c348 <__subdf3>
    351c:	a80d883a 	mov	r6,r21
    3520:	980f883a 	mov	r7,r19
    3524:	1009883a 	mov	r4,r2
    3528:	180b883a 	mov	r5,r3
    352c:	000bb3c0 	call	bb3c <__ledf2>
    3530:	1003e816 	blt	r2,zero,44d4 <_dtoa_r+0x1598>
    3534:	b825883a 	mov	r18,r23
    3538:	bd83e926 	beq	r23,r22,44e0 <_dtoa_r+0x15a4>
    353c:	a809883a 	mov	r4,r21
    3540:	980b883a 	mov	r5,r19
    3544:	000d883a 	mov	r6,zero
    3548:	01d00934 	movhi	r7,16420
    354c:	000bc300 	call	bc30 <__muldf3>
    3550:	000d883a 	mov	r6,zero
    3554:	01d00934 	movhi	r7,16420
    3558:	8009883a 	mov	r4,r16
    355c:	880b883a 	mov	r5,r17
    3560:	102b883a 	mov	r21,r2
    3564:	1827883a 	mov	r19,r3
    3568:	000bc300 	call	bc30 <__muldf3>
    356c:	180b883a 	mov	r5,r3
    3570:	1009883a 	mov	r4,r2
    3574:	1821883a 	mov	r16,r3
    3578:	1023883a 	mov	r17,r2
    357c:	000cc440 	call	cc44 <__fixdfsi>
    3580:	1009883a 	mov	r4,r2
    3584:	1029883a 	mov	r20,r2
    3588:	000ccc40 	call	ccc4 <__floatsidf>
    358c:	8809883a 	mov	r4,r17
    3590:	800b883a 	mov	r5,r16
    3594:	100d883a 	mov	r6,r2
    3598:	180f883a 	mov	r7,r3
    359c:	000c3480 	call	c348 <__subdf3>
    35a0:	a5000c04 	addi	r20,r20,48
    35a4:	a80d883a 	mov	r6,r21
    35a8:	980f883a 	mov	r7,r19
    35ac:	1009883a 	mov	r4,r2
    35b0:	180b883a 	mov	r5,r3
    35b4:	95000005 	stb	r20,0(r18)
    35b8:	1021883a 	mov	r16,r2
    35bc:	1823883a 	mov	r17,r3
    35c0:	000bb3c0 	call	bb3c <__ledf2>
    35c4:	bdc00044 	addi	r23,r23,1
    35c8:	800d883a 	mov	r6,r16
    35cc:	880f883a 	mov	r7,r17
    35d0:	0009883a 	mov	r4,zero
    35d4:	014ffc34 	movhi	r5,16368
    35d8:	103fcf0e 	bge	r2,zero,3518 <_dtoa_r+0x5dc>
    35dc:	d8c01317 	ldw	r3,76(sp)
    35e0:	d8c00515 	stw	r3,20(sp)
    35e4:	d9400917 	ldw	r5,36(sp)
    35e8:	e009883a 	mov	r4,fp
    35ec:	00066800 	call	6680 <_Bfree>
    35f0:	d9000517 	ldw	r4,20(sp)
    35f4:	d9802317 	ldw	r6,140(sp)
    35f8:	d9c02517 	ldw	r7,148(sp)
    35fc:	b8000005 	stb	zero,0(r23)
    3600:	20800044 	addi	r2,r4,1
    3604:	30800015 	stw	r2,0(r6)
    3608:	3802aa26 	beq	r7,zero,40b4 <_dtoa_r+0x1178>
    360c:	3dc00015 	stw	r23,0(r7)
    3610:	d8800717 	ldw	r2,28(sp)
    3614:	003e7906 	br	2ffc <_dtoa_r+0xc0>
    3618:	00800434 	movhi	r2,16
    361c:	10bfffc4 	addi	r2,r2,-1
    3620:	88a2703a 	and	r17,r17,r2
    3624:	883e851e 	bne	r17,zero,303c <_dtoa_r+0x100>
    3628:	008000f4 	movhi	r2,3
    362c:	10930204 	addi	r2,r2,19464
    3630:	003e8406 	br	3044 <_dtoa_r+0x108>
    3634:	10c00204 	addi	r3,r2,8
    3638:	003e8706 	br	3058 <_dtoa_r+0x11c>
    363c:	01400434 	movhi	r5,16
    3640:	297fffc4 	addi	r5,r5,-1
    3644:	994a703a 	and	r5,r19,r5
    3648:	9009883a 	mov	r4,r18
    364c:	843f0044 	addi	r16,r16,-1023
    3650:	294ffc34 	orhi	r5,r5,16368
    3654:	dd800217 	ldw	r22,8(sp)
    3658:	d8001115 	stw	zero,68(sp)
    365c:	003ea506 	br	30f4 <_dtoa_r+0x1b8>
    3660:	008000f4 	movhi	r2,3
    3664:	1092f904 	addi	r2,r2,19428
    3668:	003e6406 	br	2ffc <_dtoa_r+0xc0>
    366c:	e0001115 	stw	zero,68(fp)
    3670:	000b883a 	mov	r5,zero
    3674:	e009883a 	mov	r4,fp
    3678:	00065d80 	call	65d8 <_Balloc>
    367c:	01bfffc4 	movi	r6,-1
    3680:	01c00044 	movi	r7,1
    3684:	d8800715 	stw	r2,28(sp)
    3688:	d9800c15 	stw	r6,48(sp)
    368c:	e0801015 	stw	r2,64(fp)
    3690:	d8000315 	stw	zero,12(sp)
    3694:	d9c00b15 	stw	r7,44(sp)
    3698:	d9800615 	stw	r6,24(sp)
    369c:	d8002215 	stw	zero,136(sp)
    36a0:	d8800117 	ldw	r2,4(sp)
    36a4:	10008916 	blt	r2,zero,38cc <_dtoa_r+0x990>
    36a8:	d9000517 	ldw	r4,20(sp)
    36ac:	00c00384 	movi	r3,14
    36b0:	19008616 	blt	r3,r4,38cc <_dtoa_r+0x990>
    36b4:	200490fa 	slli	r2,r4,3
    36b8:	00c000f4 	movhi	r3,3
    36bc:	d9802217 	ldw	r6,136(sp)
    36c0:	18d32104 	addi	r3,r3,19588
    36c4:	1885883a 	add	r2,r3,r2
    36c8:	14000017 	ldw	r16,0(r2)
    36cc:	14400117 	ldw	r17,4(r2)
    36d0:	30016316 	blt	r6,zero,3c60 <_dtoa_r+0xd24>
    36d4:	800d883a 	mov	r6,r16
    36d8:	880f883a 	mov	r7,r17
    36dc:	9009883a 	mov	r4,r18
    36e0:	980b883a 	mov	r5,r19
    36e4:	000b0f00 	call	b0f0 <__divdf3>
    36e8:	180b883a 	mov	r5,r3
    36ec:	1009883a 	mov	r4,r2
    36f0:	000cc440 	call	cc44 <__fixdfsi>
    36f4:	1009883a 	mov	r4,r2
    36f8:	102b883a 	mov	r21,r2
    36fc:	000ccc40 	call	ccc4 <__floatsidf>
    3700:	800d883a 	mov	r6,r16
    3704:	880f883a 	mov	r7,r17
    3708:	1009883a 	mov	r4,r2
    370c:	180b883a 	mov	r5,r3
    3710:	000bc300 	call	bc30 <__muldf3>
    3714:	100d883a 	mov	r6,r2
    3718:	180f883a 	mov	r7,r3
    371c:	9009883a 	mov	r4,r18
    3720:	980b883a 	mov	r5,r19
    3724:	000c3480 	call	c348 <__subdf3>
    3728:	d9c00717 	ldw	r7,28(sp)
    372c:	1009883a 	mov	r4,r2
    3730:	a8800c04 	addi	r2,r21,48
    3734:	38800005 	stb	r2,0(r7)
    3738:	3dc00044 	addi	r23,r7,1
    373c:	d9c00617 	ldw	r7,24(sp)
    3740:	01800044 	movi	r6,1
    3744:	180b883a 	mov	r5,r3
    3748:	2005883a 	mov	r2,r4
    374c:	39803826 	beq	r7,r6,3830 <_dtoa_r+0x8f4>
    3750:	000d883a 	mov	r6,zero
    3754:	01d00934 	movhi	r7,16420
    3758:	000bc300 	call	bc30 <__muldf3>
    375c:	000d883a 	mov	r6,zero
    3760:	000f883a 	mov	r7,zero
    3764:	1009883a 	mov	r4,r2
    3768:	180b883a 	mov	r5,r3
    376c:	1025883a 	mov	r18,r2
    3770:	1827883a 	mov	r19,r3
    3774:	000b9d80 	call	b9d8 <__eqdf2>
    3778:	103f9a26 	beq	r2,zero,35e4 <_dtoa_r+0x6a8>
    377c:	d9c00617 	ldw	r7,24(sp)
    3780:	d8c00717 	ldw	r3,28(sp)
    3784:	b829883a 	mov	r20,r23
    3788:	38bfffc4 	addi	r2,r7,-1
    378c:	18ad883a 	add	r22,r3,r2
    3790:	00000a06 	br	37bc <_dtoa_r+0x880>
    3794:	000bc300 	call	bc30 <__muldf3>
    3798:	000d883a 	mov	r6,zero
    379c:	000f883a 	mov	r7,zero
    37a0:	1009883a 	mov	r4,r2
    37a4:	180b883a 	mov	r5,r3
    37a8:	1025883a 	mov	r18,r2
    37ac:	1827883a 	mov	r19,r3
    37b0:	b829883a 	mov	r20,r23
    37b4:	000b9d80 	call	b9d8 <__eqdf2>
    37b8:	103f8a26 	beq	r2,zero,35e4 <_dtoa_r+0x6a8>
    37bc:	800d883a 	mov	r6,r16
    37c0:	880f883a 	mov	r7,r17
    37c4:	9009883a 	mov	r4,r18
    37c8:	980b883a 	mov	r5,r19
    37cc:	000b0f00 	call	b0f0 <__divdf3>
    37d0:	180b883a 	mov	r5,r3
    37d4:	1009883a 	mov	r4,r2
    37d8:	000cc440 	call	cc44 <__fixdfsi>
    37dc:	1009883a 	mov	r4,r2
    37e0:	102b883a 	mov	r21,r2
    37e4:	000ccc40 	call	ccc4 <__floatsidf>
    37e8:	800d883a 	mov	r6,r16
    37ec:	880f883a 	mov	r7,r17
    37f0:	1009883a 	mov	r4,r2
    37f4:	180b883a 	mov	r5,r3
    37f8:	000bc300 	call	bc30 <__muldf3>
    37fc:	100d883a 	mov	r6,r2
    3800:	180f883a 	mov	r7,r3
    3804:	9009883a 	mov	r4,r18
    3808:	980b883a 	mov	r5,r19
    380c:	000c3480 	call	c348 <__subdf3>
    3810:	aa000c04 	addi	r8,r21,48
    3814:	a2000005 	stb	r8,0(r20)
    3818:	000d883a 	mov	r6,zero
    381c:	01d00934 	movhi	r7,16420
    3820:	1009883a 	mov	r4,r2
    3824:	180b883a 	mov	r5,r3
    3828:	a5c00044 	addi	r23,r20,1
    382c:	b53fd91e 	bne	r22,r20,3794 <_dtoa_r+0x858>
    3830:	100d883a 	mov	r6,r2
    3834:	180f883a 	mov	r7,r3
    3838:	1009883a 	mov	r4,r2
    383c:	180b883a 	mov	r5,r3
    3840:	000a8440 	call	a844 <__adddf3>
    3844:	100d883a 	mov	r6,r2
    3848:	180f883a 	mov	r7,r3
    384c:	8009883a 	mov	r4,r16
    3850:	880b883a 	mov	r5,r17
    3854:	1027883a 	mov	r19,r2
    3858:	1825883a 	mov	r18,r3
    385c:	000bb3c0 	call	bb3c <__ledf2>
    3860:	10000816 	blt	r2,zero,3884 <_dtoa_r+0x948>
    3864:	980d883a 	mov	r6,r19
    3868:	900f883a 	mov	r7,r18
    386c:	8009883a 	mov	r4,r16
    3870:	880b883a 	mov	r5,r17
    3874:	000b9d80 	call	b9d8 <__eqdf2>
    3878:	103f5a1e 	bne	r2,zero,35e4 <_dtoa_r+0x6a8>
    387c:	ad40004c 	andi	r21,r21,1
    3880:	a83f5826 	beq	r21,zero,35e4 <_dtoa_r+0x6a8>
    3884:	bd3fffc3 	ldbu	r20,-1(r23)
    3888:	b8bfffc4 	addi	r2,r23,-1
    388c:	1007883a 	mov	r3,r2
    3890:	01400e44 	movi	r5,57
    3894:	d9800717 	ldw	r6,28(sp)
    3898:	00000506 	br	38b0 <_dtoa_r+0x974>
    389c:	18ffffc4 	addi	r3,r3,-1
    38a0:	11824726 	beq	r2,r6,41c0 <_dtoa_r+0x1284>
    38a4:	1d000003 	ldbu	r20,0(r3)
    38a8:	102f883a 	mov	r23,r2
    38ac:	10bfffc4 	addi	r2,r2,-1
    38b0:	a1003fcc 	andi	r4,r20,255
    38b4:	2100201c 	xori	r4,r4,128
    38b8:	213fe004 	addi	r4,r4,-128
    38bc:	217ff726 	beq	r4,r5,389c <_dtoa_r+0x960>
    38c0:	a2000044 	addi	r8,r20,1
    38c4:	12000005 	stb	r8,0(r2)
    38c8:	003f4606 	br	35e4 <_dtoa_r+0x6a8>
    38cc:	d9000b17 	ldw	r4,44(sp)
    38d0:	2000c826 	beq	r4,zero,3bf4 <_dtoa_r+0xcb8>
    38d4:	d9800317 	ldw	r6,12(sp)
    38d8:	00c00044 	movi	r3,1
    38dc:	1980f90e 	bge	r3,r6,3cc4 <_dtoa_r+0xd88>
    38e0:	d8800617 	ldw	r2,24(sp)
    38e4:	d8c00a17 	ldw	r3,40(sp)
    38e8:	157fffc4 	addi	r21,r2,-1
    38ec:	1d41f316 	blt	r3,r21,40bc <_dtoa_r+0x1180>
    38f0:	1d6bc83a 	sub	r21,r3,r21
    38f4:	d9c00617 	ldw	r7,24(sp)
    38f8:	3802aa16 	blt	r7,zero,43a4 <_dtoa_r+0x1468>
    38fc:	dd000817 	ldw	r20,32(sp)
    3900:	d8800617 	ldw	r2,24(sp)
    3904:	d8c00817 	ldw	r3,32(sp)
    3908:	01400044 	movi	r5,1
    390c:	e009883a 	mov	r4,fp
    3910:	1887883a 	add	r3,r3,r2
    3914:	d8c00815 	stw	r3,32(sp)
    3918:	b0ad883a 	add	r22,r22,r2
    391c:	00069e40 	call	69e4 <__i2b>
    3920:	1023883a 	mov	r17,r2
    3924:	a0000826 	beq	r20,zero,3948 <_dtoa_r+0xa0c>
    3928:	0580070e 	bge	zero,r22,3948 <_dtoa_r+0xa0c>
    392c:	a005883a 	mov	r2,r20
    3930:	b500b916 	blt	r22,r20,3c18 <_dtoa_r+0xcdc>
    3934:	d9000817 	ldw	r4,32(sp)
    3938:	a0a9c83a 	sub	r20,r20,r2
    393c:	b0adc83a 	sub	r22,r22,r2
    3940:	2089c83a 	sub	r4,r4,r2
    3944:	d9000815 	stw	r4,32(sp)
    3948:	d9800a17 	ldw	r6,40(sp)
    394c:	0181810e 	bge	zero,r6,3f54 <_dtoa_r+0x1018>
    3950:	d9c00b17 	ldw	r7,44(sp)
    3954:	3800b326 	beq	r7,zero,3c24 <_dtoa_r+0xce8>
    3958:	a800b226 	beq	r21,zero,3c24 <_dtoa_r+0xce8>
    395c:	880b883a 	mov	r5,r17
    3960:	a80d883a 	mov	r6,r21
    3964:	e009883a 	mov	r4,fp
    3968:	0006c180 	call	6c18 <__pow5mult>
    396c:	d9800917 	ldw	r6,36(sp)
    3970:	100b883a 	mov	r5,r2
    3974:	e009883a 	mov	r4,fp
    3978:	1023883a 	mov	r17,r2
    397c:	0006a200 	call	6a20 <__multiply>
    3980:	1021883a 	mov	r16,r2
    3984:	d8800a17 	ldw	r2,40(sp)
    3988:	d9400917 	ldw	r5,36(sp)
    398c:	e009883a 	mov	r4,fp
    3990:	1545c83a 	sub	r2,r2,r21
    3994:	d8800a15 	stw	r2,40(sp)
    3998:	00066800 	call	6680 <_Bfree>
    399c:	d8c00a17 	ldw	r3,40(sp)
    39a0:	18009f1e 	bne	r3,zero,3c20 <_dtoa_r+0xce4>
    39a4:	05c00044 	movi	r23,1
    39a8:	e009883a 	mov	r4,fp
    39ac:	b80b883a 	mov	r5,r23
    39b0:	00069e40 	call	69e4 <__i2b>
    39b4:	d9000d17 	ldw	r4,52(sp)
    39b8:	102b883a 	mov	r21,r2
    39bc:	2000ce26 	beq	r4,zero,3cf8 <_dtoa_r+0xdbc>
    39c0:	200d883a 	mov	r6,r4
    39c4:	100b883a 	mov	r5,r2
    39c8:	e009883a 	mov	r4,fp
    39cc:	0006c180 	call	6c18 <__pow5mult>
    39d0:	d9800317 	ldw	r6,12(sp)
    39d4:	102b883a 	mov	r21,r2
    39d8:	b981810e 	bge	r23,r6,3fe0 <_dtoa_r+0x10a4>
    39dc:	0027883a 	mov	r19,zero
    39e0:	a8800417 	ldw	r2,16(r21)
    39e4:	05c00804 	movi	r23,32
    39e8:	10800104 	addi	r2,r2,4
    39ec:	1085883a 	add	r2,r2,r2
    39f0:	1085883a 	add	r2,r2,r2
    39f4:	a885883a 	add	r2,r21,r2
    39f8:	11000017 	ldw	r4,0(r2)
    39fc:	00068cc0 	call	68cc <__hi0bits>
    3a00:	b885c83a 	sub	r2,r23,r2
    3a04:	1585883a 	add	r2,r2,r22
    3a08:	108007cc 	andi	r2,r2,31
    3a0c:	1000b326 	beq	r2,zero,3cdc <_dtoa_r+0xda0>
    3a10:	00c00804 	movi	r3,32
    3a14:	1887c83a 	sub	r3,r3,r2
    3a18:	01000104 	movi	r4,4
    3a1c:	20c2cd0e 	bge	r4,r3,4554 <_dtoa_r+0x1618>
    3a20:	00c00704 	movi	r3,28
    3a24:	1885c83a 	sub	r2,r3,r2
    3a28:	d8c00817 	ldw	r3,32(sp)
    3a2c:	a0a9883a 	add	r20,r20,r2
    3a30:	b0ad883a 	add	r22,r22,r2
    3a34:	1887883a 	add	r3,r3,r2
    3a38:	d8c00815 	stw	r3,32(sp)
    3a3c:	d9800817 	ldw	r6,32(sp)
    3a40:	0180040e 	bge	zero,r6,3a54 <_dtoa_r+0xb18>
    3a44:	800b883a 	mov	r5,r16
    3a48:	e009883a 	mov	r4,fp
    3a4c:	0006d580 	call	6d58 <__lshift>
    3a50:	1021883a 	mov	r16,r2
    3a54:	0580050e 	bge	zero,r22,3a6c <_dtoa_r+0xb30>
    3a58:	a80b883a 	mov	r5,r21
    3a5c:	b00d883a 	mov	r6,r22
    3a60:	e009883a 	mov	r4,fp
    3a64:	0006d580 	call	6d58 <__lshift>
    3a68:	102b883a 	mov	r21,r2
    3a6c:	d9c00e17 	ldw	r7,56(sp)
    3a70:	3801211e 	bne	r7,zero,3ef8 <_dtoa_r+0xfbc>
    3a74:	d9800617 	ldw	r6,24(sp)
    3a78:	0181380e 	bge	zero,r6,3f5c <_dtoa_r+0x1020>
    3a7c:	d8c00b17 	ldw	r3,44(sp)
    3a80:	1800ab1e 	bne	r3,zero,3d30 <_dtoa_r+0xdf4>
    3a84:	dc800717 	ldw	r18,28(sp)
    3a88:	dcc00617 	ldw	r19,24(sp)
    3a8c:	9029883a 	mov	r20,r18
    3a90:	00000206 	br	3a9c <_dtoa_r+0xb60>
    3a94:	00066a80 	call	66a8 <__multadd>
    3a98:	1021883a 	mov	r16,r2
    3a9c:	a80b883a 	mov	r5,r21
    3aa0:	8009883a 	mov	r4,r16
    3aa4:	0002d3c0 	call	2d3c <quorem>
    3aa8:	10800c04 	addi	r2,r2,48
    3aac:	90800005 	stb	r2,0(r18)
    3ab0:	94800044 	addi	r18,r18,1
    3ab4:	9507c83a 	sub	r3,r18,r20
    3ab8:	000f883a 	mov	r7,zero
    3abc:	01800284 	movi	r6,10
    3ac0:	800b883a 	mov	r5,r16
    3ac4:	e009883a 	mov	r4,fp
    3ac8:	1cfff216 	blt	r3,r19,3a94 <_dtoa_r+0xb58>
    3acc:	1011883a 	mov	r8,r2
    3ad0:	d8800617 	ldw	r2,24(sp)
    3ad4:	0082370e 	bge	zero,r2,43b4 <_dtoa_r+0x1478>
    3ad8:	d9000717 	ldw	r4,28(sp)
    3adc:	0025883a 	mov	r18,zero
    3ae0:	20af883a 	add	r23,r4,r2
    3ae4:	01800044 	movi	r6,1
    3ae8:	800b883a 	mov	r5,r16
    3aec:	e009883a 	mov	r4,fp
    3af0:	da001715 	stw	r8,92(sp)
    3af4:	0006d580 	call	6d58 <__lshift>
    3af8:	a80b883a 	mov	r5,r21
    3afc:	1009883a 	mov	r4,r2
    3b00:	d8800915 	stw	r2,36(sp)
    3b04:	0006ea00 	call	6ea0 <__mcmp>
    3b08:	da001717 	ldw	r8,92(sp)
    3b0c:	0081800e 	bge	zero,r2,4110 <_dtoa_r+0x11d4>
    3b10:	b93fffc3 	ldbu	r4,-1(r23)
    3b14:	b8bfffc4 	addi	r2,r23,-1
    3b18:	1007883a 	mov	r3,r2
    3b1c:	01800e44 	movi	r6,57
    3b20:	d9c00717 	ldw	r7,28(sp)
    3b24:	00000506 	br	3b3c <_dtoa_r+0xc00>
    3b28:	18ffffc4 	addi	r3,r3,-1
    3b2c:	11c12326 	beq	r2,r7,3fbc <_dtoa_r+0x1080>
    3b30:	19000003 	ldbu	r4,0(r3)
    3b34:	102f883a 	mov	r23,r2
    3b38:	10bfffc4 	addi	r2,r2,-1
    3b3c:	21403fcc 	andi	r5,r4,255
    3b40:	2940201c 	xori	r5,r5,128
    3b44:	297fe004 	addi	r5,r5,-128
    3b48:	29bff726 	beq	r5,r6,3b28 <_dtoa_r+0xbec>
    3b4c:	21000044 	addi	r4,r4,1
    3b50:	11000005 	stb	r4,0(r2)
    3b54:	a80b883a 	mov	r5,r21
    3b58:	e009883a 	mov	r4,fp
    3b5c:	00066800 	call	6680 <_Bfree>
    3b60:	883ea026 	beq	r17,zero,35e4 <_dtoa_r+0x6a8>
    3b64:	90000426 	beq	r18,zero,3b78 <_dtoa_r+0xc3c>
    3b68:	94400326 	beq	r18,r17,3b78 <_dtoa_r+0xc3c>
    3b6c:	900b883a 	mov	r5,r18
    3b70:	e009883a 	mov	r4,fp
    3b74:	00066800 	call	6680 <_Bfree>
    3b78:	880b883a 	mov	r5,r17
    3b7c:	e009883a 	mov	r4,fp
    3b80:	00066800 	call	6680 <_Bfree>
    3b84:	003e9706 	br	35e4 <_dtoa_r+0x6a8>
    3b88:	01800044 	movi	r6,1
    3b8c:	d9800e15 	stw	r6,56(sp)
    3b90:	003d9606 	br	31ec <_dtoa_r+0x2b0>
    3b94:	d8800817 	ldw	r2,32(sp)
    3b98:	d8c00517 	ldw	r3,20(sp)
    3b9c:	d8000d15 	stw	zero,52(sp)
    3ba0:	10c5c83a 	sub	r2,r2,r3
    3ba4:	00c9c83a 	sub	r4,zero,r3
    3ba8:	d8800815 	stw	r2,32(sp)
    3bac:	d9000a15 	stw	r4,40(sp)
    3bb0:	003d9706 	br	3210 <_dtoa_r+0x2d4>
    3bb4:	05adc83a 	sub	r22,zero,r22
    3bb8:	dd800815 	stw	r22,32(sp)
    3bbc:	002d883a 	mov	r22,zero
    3bc0:	003d8e06 	br	31fc <_dtoa_r+0x2c0>
    3bc4:	d9000517 	ldw	r4,20(sp)
    3bc8:	000ccc40 	call	ccc4 <__floatsidf>
    3bcc:	100d883a 	mov	r6,r2
    3bd0:	180f883a 	mov	r7,r3
    3bd4:	a009883a 	mov	r4,r20
    3bd8:	880b883a 	mov	r5,r17
    3bdc:	000b9d80 	call	b9d8 <__eqdf2>
    3be0:	103d7126 	beq	r2,zero,31a8 <_dtoa_r+0x26c>
    3be4:	d9c00517 	ldw	r7,20(sp)
    3be8:	39ffffc4 	addi	r7,r7,-1
    3bec:	d9c00515 	stw	r7,20(sp)
    3bf0:	003d6d06 	br	31a8 <_dtoa_r+0x26c>
    3bf4:	dd400a17 	ldw	r21,40(sp)
    3bf8:	dd000817 	ldw	r20,32(sp)
    3bfc:	0023883a 	mov	r17,zero
    3c00:	003f4806 	br	3924 <_dtoa_r+0x9e8>
    3c04:	10e3c83a 	sub	r17,r2,r3
    3c08:	9448983a 	sll	r4,r18,r17
    3c0c:	003d3206 	br	30d8 <_dtoa_r+0x19c>
    3c10:	d8000e15 	stw	zero,56(sp)
    3c14:	003d7506 	br	31ec <_dtoa_r+0x2b0>
    3c18:	b005883a 	mov	r2,r22
    3c1c:	003f4506 	br	3934 <_dtoa_r+0x9f8>
    3c20:	dc000915 	stw	r16,36(sp)
    3c24:	d9800a17 	ldw	r6,40(sp)
    3c28:	d9400917 	ldw	r5,36(sp)
    3c2c:	e009883a 	mov	r4,fp
    3c30:	0006c180 	call	6c18 <__pow5mult>
    3c34:	1021883a 	mov	r16,r2
    3c38:	003f5a06 	br	39a4 <_dtoa_r+0xa68>
    3c3c:	01c00044 	movi	r7,1
    3c40:	d9c00b15 	stw	r7,44(sp)
    3c44:	d8802217 	ldw	r2,136(sp)
    3c48:	0081280e 	bge	zero,r2,40ec <_dtoa_r+0x11b0>
    3c4c:	100d883a 	mov	r6,r2
    3c50:	1021883a 	mov	r16,r2
    3c54:	d8800c15 	stw	r2,48(sp)
    3c58:	d8800615 	stw	r2,24(sp)
    3c5c:	003d8806 	br	3280 <_dtoa_r+0x344>
    3c60:	d8800617 	ldw	r2,24(sp)
    3c64:	00be9b16 	blt	zero,r2,36d4 <_dtoa_r+0x798>
    3c68:	10010f1e 	bne	r2,zero,40a8 <_dtoa_r+0x116c>
    3c6c:	880b883a 	mov	r5,r17
    3c70:	000d883a 	mov	r6,zero
    3c74:	01d00534 	movhi	r7,16404
    3c78:	8009883a 	mov	r4,r16
    3c7c:	000bc300 	call	bc30 <__muldf3>
    3c80:	900d883a 	mov	r6,r18
    3c84:	980f883a 	mov	r7,r19
    3c88:	1009883a 	mov	r4,r2
    3c8c:	180b883a 	mov	r5,r3
    3c90:	000ba600 	call	ba60 <__gedf2>
    3c94:	002b883a 	mov	r21,zero
    3c98:	0023883a 	mov	r17,zero
    3c9c:	1000bf16 	blt	r2,zero,3f9c <_dtoa_r+0x1060>
    3ca0:	d9802217 	ldw	r6,136(sp)
    3ca4:	ddc00717 	ldw	r23,28(sp)
    3ca8:	018c303a 	nor	r6,zero,r6
    3cac:	d9800515 	stw	r6,20(sp)
    3cb0:	a80b883a 	mov	r5,r21
    3cb4:	e009883a 	mov	r4,fp
    3cb8:	00066800 	call	6680 <_Bfree>
    3cbc:	883e4926 	beq	r17,zero,35e4 <_dtoa_r+0x6a8>
    3cc0:	003fad06 	br	3b78 <_dtoa_r+0xc3c>
    3cc4:	d9c01117 	ldw	r7,68(sp)
    3cc8:	3801bc26 	beq	r7,zero,43bc <_dtoa_r+0x1480>
    3ccc:	10810cc4 	addi	r2,r2,1075
    3cd0:	dd400a17 	ldw	r21,40(sp)
    3cd4:	dd000817 	ldw	r20,32(sp)
    3cd8:	003f0a06 	br	3904 <_dtoa_r+0x9c8>
    3cdc:	00800704 	movi	r2,28
    3ce0:	d9000817 	ldw	r4,32(sp)
    3ce4:	a0a9883a 	add	r20,r20,r2
    3ce8:	b0ad883a 	add	r22,r22,r2
    3cec:	2089883a 	add	r4,r4,r2
    3cf0:	d9000815 	stw	r4,32(sp)
    3cf4:	003f5106 	br	3a3c <_dtoa_r+0xb00>
    3cf8:	d8c00317 	ldw	r3,12(sp)
    3cfc:	b8c1fc0e 	bge	r23,r3,44f0 <_dtoa_r+0x15b4>
    3d00:	0027883a 	mov	r19,zero
    3d04:	b805883a 	mov	r2,r23
    3d08:	003f3e06 	br	3a04 <_dtoa_r+0xac8>
    3d0c:	880b883a 	mov	r5,r17
    3d10:	e009883a 	mov	r4,fp
    3d14:	000f883a 	mov	r7,zero
    3d18:	01800284 	movi	r6,10
    3d1c:	00066a80 	call	66a8 <__multadd>
    3d20:	d9000c17 	ldw	r4,48(sp)
    3d24:	1023883a 	mov	r17,r2
    3d28:	0102040e 	bge	zero,r4,453c <_dtoa_r+0x1600>
    3d2c:	d9000615 	stw	r4,24(sp)
    3d30:	0500050e 	bge	zero,r20,3d48 <_dtoa_r+0xe0c>
    3d34:	880b883a 	mov	r5,r17
    3d38:	a00d883a 	mov	r6,r20
    3d3c:	e009883a 	mov	r4,fp
    3d40:	0006d580 	call	6d58 <__lshift>
    3d44:	1023883a 	mov	r17,r2
    3d48:	9801241e 	bne	r19,zero,41dc <_dtoa_r+0x12a0>
    3d4c:	8829883a 	mov	r20,r17
    3d50:	d9000617 	ldw	r4,24(sp)
    3d54:	dcc00717 	ldw	r19,28(sp)
    3d58:	9480004c 	andi	r18,r18,1
    3d5c:	20bfffc4 	addi	r2,r4,-1
    3d60:	9885883a 	add	r2,r19,r2
    3d64:	d8800415 	stw	r2,16(sp)
    3d68:	dc800615 	stw	r18,24(sp)
    3d6c:	a80b883a 	mov	r5,r21
    3d70:	8009883a 	mov	r4,r16
    3d74:	0002d3c0 	call	2d3c <quorem>
    3d78:	880b883a 	mov	r5,r17
    3d7c:	8009883a 	mov	r4,r16
    3d80:	102f883a 	mov	r23,r2
    3d84:	0006ea00 	call	6ea0 <__mcmp>
    3d88:	a80b883a 	mov	r5,r21
    3d8c:	a00d883a 	mov	r6,r20
    3d90:	e009883a 	mov	r4,fp
    3d94:	102d883a 	mov	r22,r2
    3d98:	0006f000 	call	6f00 <__mdiff>
    3d9c:	1007883a 	mov	r3,r2
    3da0:	10800317 	ldw	r2,12(r2)
    3da4:	bc800c04 	addi	r18,r23,48
    3da8:	180b883a 	mov	r5,r3
    3dac:	10004e1e 	bne	r2,zero,3ee8 <_dtoa_r+0xfac>
    3db0:	8009883a 	mov	r4,r16
    3db4:	d8c01615 	stw	r3,88(sp)
    3db8:	0006ea00 	call	6ea0 <__mcmp>
    3dbc:	d8c01617 	ldw	r3,88(sp)
    3dc0:	e009883a 	mov	r4,fp
    3dc4:	d8801615 	stw	r2,88(sp)
    3dc8:	180b883a 	mov	r5,r3
    3dcc:	00066800 	call	6680 <_Bfree>
    3dd0:	d8801617 	ldw	r2,88(sp)
    3dd4:	1000041e 	bne	r2,zero,3de8 <_dtoa_r+0xeac>
    3dd8:	d9800317 	ldw	r6,12(sp)
    3ddc:	3000021e 	bne	r6,zero,3de8 <_dtoa_r+0xeac>
    3de0:	d8c00617 	ldw	r3,24(sp)
    3de4:	18003726 	beq	r3,zero,3ec4 <_dtoa_r+0xf88>
    3de8:	b0002016 	blt	r22,zero,3e6c <_dtoa_r+0xf30>
    3dec:	b000041e 	bne	r22,zero,3e00 <_dtoa_r+0xec4>
    3df0:	d9000317 	ldw	r4,12(sp)
    3df4:	2000021e 	bne	r4,zero,3e00 <_dtoa_r+0xec4>
    3df8:	d8c00617 	ldw	r3,24(sp)
    3dfc:	18001b26 	beq	r3,zero,3e6c <_dtoa_r+0xf30>
    3e00:	00810716 	blt	zero,r2,4220 <_dtoa_r+0x12e4>
    3e04:	d8c00417 	ldw	r3,16(sp)
    3e08:	9d800044 	addi	r22,r19,1
    3e0c:	9c800005 	stb	r18,0(r19)
    3e10:	b02f883a 	mov	r23,r22
    3e14:	98c10626 	beq	r19,r3,4230 <_dtoa_r+0x12f4>
    3e18:	800b883a 	mov	r5,r16
    3e1c:	000f883a 	mov	r7,zero
    3e20:	01800284 	movi	r6,10
    3e24:	e009883a 	mov	r4,fp
    3e28:	00066a80 	call	66a8 <__multadd>
    3e2c:	1021883a 	mov	r16,r2
    3e30:	000f883a 	mov	r7,zero
    3e34:	01800284 	movi	r6,10
    3e38:	880b883a 	mov	r5,r17
    3e3c:	e009883a 	mov	r4,fp
    3e40:	8d002526 	beq	r17,r20,3ed8 <_dtoa_r+0xf9c>
    3e44:	00066a80 	call	66a8 <__multadd>
    3e48:	a00b883a 	mov	r5,r20
    3e4c:	000f883a 	mov	r7,zero
    3e50:	01800284 	movi	r6,10
    3e54:	e009883a 	mov	r4,fp
    3e58:	1023883a 	mov	r17,r2
    3e5c:	00066a80 	call	66a8 <__multadd>
    3e60:	1029883a 	mov	r20,r2
    3e64:	b027883a 	mov	r19,r22
    3e68:	003fc006 	br	3d6c <_dtoa_r+0xe30>
    3e6c:	9011883a 	mov	r8,r18
    3e70:	00800e0e 	bge	zero,r2,3eac <_dtoa_r+0xf70>
    3e74:	800b883a 	mov	r5,r16
    3e78:	01800044 	movi	r6,1
    3e7c:	e009883a 	mov	r4,fp
    3e80:	da001715 	stw	r8,92(sp)
    3e84:	0006d580 	call	6d58 <__lshift>
    3e88:	a80b883a 	mov	r5,r21
    3e8c:	1009883a 	mov	r4,r2
    3e90:	1021883a 	mov	r16,r2
    3e94:	0006ea00 	call	6ea0 <__mcmp>
    3e98:	da001717 	ldw	r8,92(sp)
    3e9c:	0081960e 	bge	zero,r2,44f8 <_dtoa_r+0x15bc>
    3ea0:	00800e44 	movi	r2,57
    3ea4:	40817026 	beq	r8,r2,4468 <_dtoa_r+0x152c>
    3ea8:	ba000c44 	addi	r8,r23,49
    3eac:	8825883a 	mov	r18,r17
    3eb0:	9dc00044 	addi	r23,r19,1
    3eb4:	9a000005 	stb	r8,0(r19)
    3eb8:	a023883a 	mov	r17,r20
    3ebc:	dc000915 	stw	r16,36(sp)
    3ec0:	003f2406 	br	3b54 <_dtoa_r+0xc18>
    3ec4:	00800e44 	movi	r2,57
    3ec8:	9011883a 	mov	r8,r18
    3ecc:	90816626 	beq	r18,r2,4468 <_dtoa_r+0x152c>
    3ed0:	05bff516 	blt	zero,r22,3ea8 <_dtoa_r+0xf6c>
    3ed4:	003ff506 	br	3eac <_dtoa_r+0xf70>
    3ed8:	00066a80 	call	66a8 <__multadd>
    3edc:	1023883a 	mov	r17,r2
    3ee0:	1029883a 	mov	r20,r2
    3ee4:	003fdf06 	br	3e64 <_dtoa_r+0xf28>
    3ee8:	e009883a 	mov	r4,fp
    3eec:	00066800 	call	6680 <_Bfree>
    3ef0:	00800044 	movi	r2,1
    3ef4:	003fbc06 	br	3de8 <_dtoa_r+0xeac>
    3ef8:	a80b883a 	mov	r5,r21
    3efc:	8009883a 	mov	r4,r16
    3f00:	0006ea00 	call	6ea0 <__mcmp>
    3f04:	103edb0e 	bge	r2,zero,3a74 <_dtoa_r+0xb38>
    3f08:	800b883a 	mov	r5,r16
    3f0c:	000f883a 	mov	r7,zero
    3f10:	01800284 	movi	r6,10
    3f14:	e009883a 	mov	r4,fp
    3f18:	00066a80 	call	66a8 <__multadd>
    3f1c:	1021883a 	mov	r16,r2
    3f20:	d8800517 	ldw	r2,20(sp)
    3f24:	d8c00b17 	ldw	r3,44(sp)
    3f28:	10bfffc4 	addi	r2,r2,-1
    3f2c:	d8800515 	stw	r2,20(sp)
    3f30:	183f761e 	bne	r3,zero,3d0c <_dtoa_r+0xdd0>
    3f34:	d9000c17 	ldw	r4,48(sp)
    3f38:	0101730e 	bge	zero,r4,4508 <_dtoa_r+0x15cc>
    3f3c:	d9000615 	stw	r4,24(sp)
    3f40:	003ed006 	br	3a84 <_dtoa_r+0xb48>
    3f44:	00800084 	movi	r2,2
    3f48:	3081861e 	bne	r6,r2,4564 <_dtoa_r+0x1628>
    3f4c:	d8000b15 	stw	zero,44(sp)
    3f50:	003f3c06 	br	3c44 <_dtoa_r+0xd08>
    3f54:	dc000917 	ldw	r16,36(sp)
    3f58:	003e9206 	br	39a4 <_dtoa_r+0xa68>
    3f5c:	d9c00317 	ldw	r7,12(sp)
    3f60:	00800084 	movi	r2,2
    3f64:	11fec50e 	bge	r2,r7,3a7c <_dtoa_r+0xb40>
    3f68:	d9000617 	ldw	r4,24(sp)
    3f6c:	20013c1e 	bne	r4,zero,4460 <_dtoa_r+0x1524>
    3f70:	a80b883a 	mov	r5,r21
    3f74:	000f883a 	mov	r7,zero
    3f78:	01800144 	movi	r6,5
    3f7c:	e009883a 	mov	r4,fp
    3f80:	00066a80 	call	66a8 <__multadd>
    3f84:	100b883a 	mov	r5,r2
    3f88:	8009883a 	mov	r4,r16
    3f8c:	102b883a 	mov	r21,r2
    3f90:	0006ea00 	call	6ea0 <__mcmp>
    3f94:	dc000915 	stw	r16,36(sp)
    3f98:	00bf410e 	bge	zero,r2,3ca0 <_dtoa_r+0xd64>
    3f9c:	d9c00717 	ldw	r7,28(sp)
    3fa0:	00800c44 	movi	r2,49
    3fa4:	38800005 	stb	r2,0(r7)
    3fa8:	d8800517 	ldw	r2,20(sp)
    3fac:	3dc00044 	addi	r23,r7,1
    3fb0:	10800044 	addi	r2,r2,1
    3fb4:	d8800515 	stw	r2,20(sp)
    3fb8:	003f3d06 	br	3cb0 <_dtoa_r+0xd74>
    3fbc:	d9800517 	ldw	r6,20(sp)
    3fc0:	d9c00717 	ldw	r7,28(sp)
    3fc4:	00800c44 	movi	r2,49
    3fc8:	31800044 	addi	r6,r6,1
    3fcc:	d9800515 	stw	r6,20(sp)
    3fd0:	38800005 	stb	r2,0(r7)
    3fd4:	003edf06 	br	3b54 <_dtoa_r+0xc18>
    3fd8:	d8000b15 	stw	zero,44(sp)
    3fdc:	003c9f06 	br	325c <_dtoa_r+0x320>
    3fe0:	903e7e1e 	bne	r18,zero,39dc <_dtoa_r+0xaa0>
    3fe4:	00800434 	movhi	r2,16
    3fe8:	10bfffc4 	addi	r2,r2,-1
    3fec:	9884703a 	and	r2,r19,r2
    3ff0:	1000ea1e 	bne	r2,zero,439c <_dtoa_r+0x1460>
    3ff4:	9cdffc2c 	andhi	r19,r19,32752
    3ff8:	9800e826 	beq	r19,zero,439c <_dtoa_r+0x1460>
    3ffc:	d9c00817 	ldw	r7,32(sp)
    4000:	b5800044 	addi	r22,r22,1
    4004:	04c00044 	movi	r19,1
    4008:	39c00044 	addi	r7,r7,1
    400c:	d9c00815 	stw	r7,32(sp)
    4010:	d8800d17 	ldw	r2,52(sp)
    4014:	103e721e 	bne	r2,zero,39e0 <_dtoa_r+0xaa4>
    4018:	00800044 	movi	r2,1
    401c:	003e7906 	br	3a04 <_dtoa_r+0xac8>
    4020:	8009883a 	mov	r4,r16
    4024:	000ccc40 	call	ccc4 <__floatsidf>
    4028:	d9800f17 	ldw	r6,60(sp)
    402c:	d9c01017 	ldw	r7,64(sp)
    4030:	1009883a 	mov	r4,r2
    4034:	180b883a 	mov	r5,r3
    4038:	000bc300 	call	bc30 <__muldf3>
    403c:	000d883a 	mov	r6,zero
    4040:	01d00734 	movhi	r7,16412
    4044:	1009883a 	mov	r4,r2
    4048:	180b883a 	mov	r5,r3
    404c:	000a8440 	call	a844 <__adddf3>
    4050:	047f3034 	movhi	r17,64704
    4054:	1021883a 	mov	r16,r2
    4058:	1c63883a 	add	r17,r3,r17
    405c:	d9000f17 	ldw	r4,60(sp)
    4060:	d9401017 	ldw	r5,64(sp)
    4064:	000d883a 	mov	r6,zero
    4068:	01d00534 	movhi	r7,16404
    406c:	000c3480 	call	c348 <__subdf3>
    4070:	800d883a 	mov	r6,r16
    4074:	880f883a 	mov	r7,r17
    4078:	1009883a 	mov	r4,r2
    407c:	180b883a 	mov	r5,r3
    4080:	102b883a 	mov	r21,r2
    4084:	1829883a 	mov	r20,r3
    4088:	000ba600 	call	ba60 <__gedf2>
    408c:	00806c16 	blt	zero,r2,4240 <_dtoa_r+0x1304>
    4090:	89e0003c 	xorhi	r7,r17,32768
    4094:	800d883a 	mov	r6,r16
    4098:	a809883a 	mov	r4,r21
    409c:	a00b883a 	mov	r5,r20
    40a0:	000bb3c0 	call	bb3c <__ledf2>
    40a4:	103d7e0e 	bge	r2,zero,36a0 <_dtoa_r+0x764>
    40a8:	002b883a 	mov	r21,zero
    40ac:	0023883a 	mov	r17,zero
    40b0:	003efb06 	br	3ca0 <_dtoa_r+0xd64>
    40b4:	d8800717 	ldw	r2,28(sp)
    40b8:	003bd006 	br	2ffc <_dtoa_r+0xc0>
    40bc:	d9000a17 	ldw	r4,40(sp)
    40c0:	d9800d17 	ldw	r6,52(sp)
    40c4:	dd400a15 	stw	r21,40(sp)
    40c8:	a905c83a 	sub	r2,r21,r4
    40cc:	308d883a 	add	r6,r6,r2
    40d0:	d9800d15 	stw	r6,52(sp)
    40d4:	002b883a 	mov	r21,zero
    40d8:	003e0606 	br	38f4 <_dtoa_r+0x9b8>
    40dc:	9023883a 	mov	r17,r18
    40e0:	9829883a 	mov	r20,r19
    40e4:	04000084 	movi	r16,2
    40e8:	003c9206 	br	3334 <_dtoa_r+0x3f8>
    40ec:	04000044 	movi	r16,1
    40f0:	dc000c15 	stw	r16,48(sp)
    40f4:	dc000615 	stw	r16,24(sp)
    40f8:	dc002215 	stw	r16,136(sp)
    40fc:	e0001115 	stw	zero,68(fp)
    4100:	000b883a 	mov	r5,zero
    4104:	003c6906 	br	32ac <_dtoa_r+0x370>
    4108:	3021883a 	mov	r16,r6
    410c:	003ffb06 	br	40fc <_dtoa_r+0x11c0>
    4110:	1000021e 	bne	r2,zero,411c <_dtoa_r+0x11e0>
    4114:	4200004c 	andi	r8,r8,1
    4118:	403e7d1e 	bne	r8,zero,3b10 <_dtoa_r+0xbd4>
    411c:	01000c04 	movi	r4,48
    4120:	00000106 	br	4128 <_dtoa_r+0x11ec>
    4124:	102f883a 	mov	r23,r2
    4128:	b8bfffc4 	addi	r2,r23,-1
    412c:	10c00007 	ldb	r3,0(r2)
    4130:	193ffc26 	beq	r3,r4,4124 <_dtoa_r+0x11e8>
    4134:	003e8706 	br	3b54 <_dtoa_r+0xc18>
    4138:	d8800517 	ldw	r2,20(sp)
    413c:	00a3c83a 	sub	r17,zero,r2
    4140:	8800a426 	beq	r17,zero,43d4 <_dtoa_r+0x1498>
    4144:	888003cc 	andi	r2,r17,15
    4148:	100490fa 	slli	r2,r2,3
    414c:	00c000f4 	movhi	r3,3
    4150:	18d32104 	addi	r3,r3,19588
    4154:	1885883a 	add	r2,r3,r2
    4158:	11800017 	ldw	r6,0(r2)
    415c:	11c00117 	ldw	r7,4(r2)
    4160:	9009883a 	mov	r4,r18
    4164:	980b883a 	mov	r5,r19
    4168:	8823d13a 	srai	r17,r17,4
    416c:	000bc300 	call	bc30 <__muldf3>
    4170:	d8800f15 	stw	r2,60(sp)
    4174:	d8c01015 	stw	r3,64(sp)
    4178:	8800e826 	beq	r17,zero,451c <_dtoa_r+0x15e0>
    417c:	050000f4 	movhi	r20,3
    4180:	a5131704 	addi	r20,r20,19548
    4184:	04000084 	movi	r16,2
    4188:	8980004c 	andi	r6,r17,1
    418c:	1009883a 	mov	r4,r2
    4190:	8823d07a 	srai	r17,r17,1
    4194:	180b883a 	mov	r5,r3
    4198:	30000426 	beq	r6,zero,41ac <_dtoa_r+0x1270>
    419c:	a1800017 	ldw	r6,0(r20)
    41a0:	a1c00117 	ldw	r7,4(r20)
    41a4:	84000044 	addi	r16,r16,1
    41a8:	000bc300 	call	bc30 <__muldf3>
    41ac:	a5000204 	addi	r20,r20,8
    41b0:	883ff51e 	bne	r17,zero,4188 <_dtoa_r+0x124c>
    41b4:	d8800f15 	stw	r2,60(sp)
    41b8:	d8c01015 	stw	r3,64(sp)
    41bc:	003c7606 	br	3398 <_dtoa_r+0x45c>
    41c0:	00c00c04 	movi	r3,48
    41c4:	10c00005 	stb	r3,0(r2)
    41c8:	d8c00517 	ldw	r3,20(sp)
    41cc:	bd3fffc3 	ldbu	r20,-1(r23)
    41d0:	18c00044 	addi	r3,r3,1
    41d4:	d8c00515 	stw	r3,20(sp)
    41d8:	003db906 	br	38c0 <_dtoa_r+0x984>
    41dc:	89400117 	ldw	r5,4(r17)
    41e0:	e009883a 	mov	r4,fp
    41e4:	00065d80 	call	65d8 <_Balloc>
    41e8:	89800417 	ldw	r6,16(r17)
    41ec:	89400304 	addi	r5,r17,12
    41f0:	11000304 	addi	r4,r2,12
    41f4:	31800084 	addi	r6,r6,2
    41f8:	318d883a 	add	r6,r6,r6
    41fc:	318d883a 	add	r6,r6,r6
    4200:	1027883a 	mov	r19,r2
    4204:	000620c0 	call	620c <memcpy>
    4208:	01800044 	movi	r6,1
    420c:	980b883a 	mov	r5,r19
    4210:	e009883a 	mov	r4,fp
    4214:	0006d580 	call	6d58 <__lshift>
    4218:	1029883a 	mov	r20,r2
    421c:	003ecc06 	br	3d50 <_dtoa_r+0xe14>
    4220:	00800e44 	movi	r2,57
    4224:	90809026 	beq	r18,r2,4468 <_dtoa_r+0x152c>
    4228:	92000044 	addi	r8,r18,1
    422c:	003f1f06 	br	3eac <_dtoa_r+0xf70>
    4230:	9011883a 	mov	r8,r18
    4234:	8825883a 	mov	r18,r17
    4238:	a023883a 	mov	r17,r20
    423c:	003e2906 	br	3ae4 <_dtoa_r+0xba8>
    4240:	002b883a 	mov	r21,zero
    4244:	0023883a 	mov	r17,zero
    4248:	003f5406 	br	3f9c <_dtoa_r+0x1060>
    424c:	61bfffc4 	addi	r6,r12,-1
    4250:	300490fa 	slli	r2,r6,3
    4254:	00c000f4 	movhi	r3,3
    4258:	18d32104 	addi	r3,r3,19588
    425c:	1885883a 	add	r2,r3,r2
    4260:	11000017 	ldw	r4,0(r2)
    4264:	11400117 	ldw	r5,4(r2)
    4268:	d8800717 	ldw	r2,28(sp)
    426c:	880f883a 	mov	r7,r17
    4270:	d9801215 	stw	r6,72(sp)
    4274:	800d883a 	mov	r6,r16
    4278:	db001615 	stw	r12,88(sp)
    427c:	15c00044 	addi	r23,r2,1
    4280:	000bc300 	call	bc30 <__muldf3>
    4284:	d9401017 	ldw	r5,64(sp)
    4288:	d9000f17 	ldw	r4,60(sp)
    428c:	d8c01515 	stw	r3,84(sp)
    4290:	d8801415 	stw	r2,80(sp)
    4294:	000cc440 	call	cc44 <__fixdfsi>
    4298:	1009883a 	mov	r4,r2
    429c:	1021883a 	mov	r16,r2
    42a0:	000ccc40 	call	ccc4 <__floatsidf>
    42a4:	d9000f17 	ldw	r4,60(sp)
    42a8:	d9401017 	ldw	r5,64(sp)
    42ac:	100d883a 	mov	r6,r2
    42b0:	180f883a 	mov	r7,r3
    42b4:	000c3480 	call	c348 <__subdf3>
    42b8:	1829883a 	mov	r20,r3
    42bc:	d8c00717 	ldw	r3,28(sp)
    42c0:	84000c04 	addi	r16,r16,48
    42c4:	1023883a 	mov	r17,r2
    42c8:	1c000005 	stb	r16,0(r3)
    42cc:	db001617 	ldw	r12,88(sp)
    42d0:	00800044 	movi	r2,1
    42d4:	60802226 	beq	r12,r2,4360 <_dtoa_r+0x1424>
    42d8:	d9c00717 	ldw	r7,28(sp)
    42dc:	8805883a 	mov	r2,r17
    42e0:	b82b883a 	mov	r21,r23
    42e4:	3b19883a 	add	r12,r7,r12
    42e8:	6023883a 	mov	r17,r12
    42ec:	a007883a 	mov	r3,r20
    42f0:	dc800f15 	stw	r18,60(sp)
    42f4:	000d883a 	mov	r6,zero
    42f8:	01d00934 	movhi	r7,16420
    42fc:	1009883a 	mov	r4,r2
    4300:	180b883a 	mov	r5,r3
    4304:	000bc300 	call	bc30 <__muldf3>
    4308:	180b883a 	mov	r5,r3
    430c:	1009883a 	mov	r4,r2
    4310:	1829883a 	mov	r20,r3
    4314:	1025883a 	mov	r18,r2
    4318:	000cc440 	call	cc44 <__fixdfsi>
    431c:	1009883a 	mov	r4,r2
    4320:	1021883a 	mov	r16,r2
    4324:	000ccc40 	call	ccc4 <__floatsidf>
    4328:	100d883a 	mov	r6,r2
    432c:	180f883a 	mov	r7,r3
    4330:	9009883a 	mov	r4,r18
    4334:	a00b883a 	mov	r5,r20
    4338:	84000c04 	addi	r16,r16,48
    433c:	000c3480 	call	c348 <__subdf3>
    4340:	ad400044 	addi	r21,r21,1
    4344:	ac3fffc5 	stb	r16,-1(r21)
    4348:	ac7fea1e 	bne	r21,r17,42f4 <_dtoa_r+0x13b8>
    434c:	1023883a 	mov	r17,r2
    4350:	d8801217 	ldw	r2,72(sp)
    4354:	dc800f17 	ldw	r18,60(sp)
    4358:	1829883a 	mov	r20,r3
    435c:	b8af883a 	add	r23,r23,r2
    4360:	d9001417 	ldw	r4,80(sp)
    4364:	d9401517 	ldw	r5,84(sp)
    4368:	000d883a 	mov	r6,zero
    436c:	01cff834 	movhi	r7,16352
    4370:	000a8440 	call	a844 <__adddf3>
    4374:	880d883a 	mov	r6,r17
    4378:	a00f883a 	mov	r7,r20
    437c:	1009883a 	mov	r4,r2
    4380:	180b883a 	mov	r5,r3
    4384:	000bb3c0 	call	bb3c <__ledf2>
    4388:	10003e0e 	bge	r2,zero,4484 <_dtoa_r+0x1548>
    438c:	d9001317 	ldw	r4,76(sp)
    4390:	bd3fffc3 	ldbu	r20,-1(r23)
    4394:	d9000515 	stw	r4,20(sp)
    4398:	003d3b06 	br	3888 <_dtoa_r+0x94c>
    439c:	0027883a 	mov	r19,zero
    43a0:	003f1b06 	br	4010 <_dtoa_r+0x10d4>
    43a4:	d8800817 	ldw	r2,32(sp)
    43a8:	11e9c83a 	sub	r20,r2,r7
    43ac:	0005883a 	mov	r2,zero
    43b0:	003d5406 	br	3904 <_dtoa_r+0x9c8>
    43b4:	00800044 	movi	r2,1
    43b8:	003dc706 	br	3ad8 <_dtoa_r+0xb9c>
    43bc:	d8c00217 	ldw	r3,8(sp)
    43c0:	00800d84 	movi	r2,54
    43c4:	dd400a17 	ldw	r21,40(sp)
    43c8:	10c5c83a 	sub	r2,r2,r3
    43cc:	dd000817 	ldw	r20,32(sp)
    43d0:	003d4c06 	br	3904 <_dtoa_r+0x9c8>
    43d4:	dc800f15 	stw	r18,60(sp)
    43d8:	dcc01015 	stw	r19,64(sp)
    43dc:	04000084 	movi	r16,2
    43e0:	003bed06 	br	3398 <_dtoa_r+0x45c>
    43e4:	d9000617 	ldw	r4,24(sp)
    43e8:	203f0d26 	beq	r4,zero,4020 <_dtoa_r+0x10e4>
    43ec:	d9800c17 	ldw	r6,48(sp)
    43f0:	01bcab0e 	bge	zero,r6,36a0 <_dtoa_r+0x764>
    43f4:	d9401017 	ldw	r5,64(sp)
    43f8:	d9000f17 	ldw	r4,60(sp)
    43fc:	000d883a 	mov	r6,zero
    4400:	01d00934 	movhi	r7,16420
    4404:	000bc300 	call	bc30 <__muldf3>
    4408:	81000044 	addi	r4,r16,1
    440c:	d8800f15 	stw	r2,60(sp)
    4410:	d8c01015 	stw	r3,64(sp)
    4414:	000ccc40 	call	ccc4 <__floatsidf>
    4418:	d9800f17 	ldw	r6,60(sp)
    441c:	d9c01017 	ldw	r7,64(sp)
    4420:	1009883a 	mov	r4,r2
    4424:	180b883a 	mov	r5,r3
    4428:	000bc300 	call	bc30 <__muldf3>
    442c:	01d00734 	movhi	r7,16412
    4430:	000d883a 	mov	r6,zero
    4434:	1009883a 	mov	r4,r2
    4438:	180b883a 	mov	r5,r3
    443c:	000a8440 	call	a844 <__adddf3>
    4440:	d9c00517 	ldw	r7,20(sp)
    4444:	047f3034 	movhi	r17,64704
    4448:	1021883a 	mov	r16,r2
    444c:	39ffffc4 	addi	r7,r7,-1
    4450:	d9c01315 	stw	r7,76(sp)
    4454:	1c63883a 	add	r17,r3,r17
    4458:	db000c17 	ldw	r12,48(sp)
    445c:	003bea06 	br	3408 <_dtoa_r+0x4cc>
    4460:	dc000915 	stw	r16,36(sp)
    4464:	003e0e06 	br	3ca0 <_dtoa_r+0xd64>
    4468:	01000e44 	movi	r4,57
    446c:	8825883a 	mov	r18,r17
    4470:	9dc00044 	addi	r23,r19,1
    4474:	99000005 	stb	r4,0(r19)
    4478:	a023883a 	mov	r17,r20
    447c:	dc000915 	stw	r16,36(sp)
    4480:	003da406 	br	3b14 <_dtoa_r+0xbd8>
    4484:	d9801417 	ldw	r6,80(sp)
    4488:	d9c01517 	ldw	r7,84(sp)
    448c:	0009883a 	mov	r4,zero
    4490:	014ff834 	movhi	r5,16352
    4494:	000c3480 	call	c348 <__subdf3>
    4498:	880d883a 	mov	r6,r17
    449c:	a00f883a 	mov	r7,r20
    44a0:	1009883a 	mov	r4,r2
    44a4:	180b883a 	mov	r5,r3
    44a8:	000ba600 	call	ba60 <__gedf2>
    44ac:	00bc7c0e 	bge	zero,r2,36a0 <_dtoa_r+0x764>
    44b0:	01000c04 	movi	r4,48
    44b4:	00000106 	br	44bc <_dtoa_r+0x1580>
    44b8:	102f883a 	mov	r23,r2
    44bc:	b8bfffc4 	addi	r2,r23,-1
    44c0:	10c00007 	ldb	r3,0(r2)
    44c4:	193ffc26 	beq	r3,r4,44b8 <_dtoa_r+0x157c>
    44c8:	d9801317 	ldw	r6,76(sp)
    44cc:	d9800515 	stw	r6,20(sp)
    44d0:	003c4406 	br	35e4 <_dtoa_r+0x6a8>
    44d4:	d9801317 	ldw	r6,76(sp)
    44d8:	d9800515 	stw	r6,20(sp)
    44dc:	003cea06 	br	3888 <_dtoa_r+0x94c>
    44e0:	dd800f17 	ldw	r22,60(sp)
    44e4:	dcc01017 	ldw	r19,64(sp)
    44e8:	dc801217 	ldw	r18,72(sp)
    44ec:	003c6c06 	br	36a0 <_dtoa_r+0x764>
    44f0:	903e031e 	bne	r18,zero,3d00 <_dtoa_r+0xdc4>
    44f4:	003ebb06 	br	3fe4 <_dtoa_r+0x10a8>
    44f8:	103e6c1e 	bne	r2,zero,3eac <_dtoa_r+0xf70>
    44fc:	4080004c 	andi	r2,r8,1
    4500:	103e6a26 	beq	r2,zero,3eac <_dtoa_r+0xf70>
    4504:	003e6606 	br	3ea0 <_dtoa_r+0xf64>
    4508:	d8c00317 	ldw	r3,12(sp)
    450c:	00800084 	movi	r2,2
    4510:	10c02916 	blt	r2,r3,45b8 <_dtoa_r+0x167c>
    4514:	d9000c17 	ldw	r4,48(sp)
    4518:	003e8806 	br	3f3c <_dtoa_r+0x1000>
    451c:	04000084 	movi	r16,2
    4520:	003b9d06 	br	3398 <_dtoa_r+0x45c>
    4524:	d9001317 	ldw	r4,76(sp)
    4528:	d9000515 	stw	r4,20(sp)
    452c:	003cd606 	br	3888 <_dtoa_r+0x94c>
    4530:	d8801317 	ldw	r2,76(sp)
    4534:	d8800515 	stw	r2,20(sp)
    4538:	003c2a06 	br	35e4 <_dtoa_r+0x6a8>
    453c:	d9800317 	ldw	r6,12(sp)
    4540:	00800084 	movi	r2,2
    4544:	11801516 	blt	r2,r6,459c <_dtoa_r+0x1660>
    4548:	d9c00c17 	ldw	r7,48(sp)
    454c:	d9c00615 	stw	r7,24(sp)
    4550:	003df706 	br	3d30 <_dtoa_r+0xdf4>
    4554:	193d3926 	beq	r3,r4,3a3c <_dtoa_r+0xb00>
    4558:	00c00f04 	movi	r3,60
    455c:	1885c83a 	sub	r2,r3,r2
    4560:	003ddf06 	br	3ce0 <_dtoa_r+0xda4>
    4564:	e009883a 	mov	r4,fp
    4568:	e0001115 	stw	zero,68(fp)
    456c:	000b883a 	mov	r5,zero
    4570:	00065d80 	call	65d8 <_Balloc>
    4574:	d8800715 	stw	r2,28(sp)
    4578:	d8c00717 	ldw	r3,28(sp)
    457c:	00bfffc4 	movi	r2,-1
    4580:	01000044 	movi	r4,1
    4584:	d8800c15 	stw	r2,48(sp)
    4588:	e0c01015 	stw	r3,64(fp)
    458c:	d9000b15 	stw	r4,44(sp)
    4590:	d8800615 	stw	r2,24(sp)
    4594:	d8002215 	stw	zero,136(sp)
    4598:	003c4106 	br	36a0 <_dtoa_r+0x764>
    459c:	d8c00c17 	ldw	r3,48(sp)
    45a0:	d8c00615 	stw	r3,24(sp)
    45a4:	003e7006 	br	3f68 <_dtoa_r+0x102c>
    45a8:	04400044 	movi	r17,1
    45ac:	003b2006 	br	3230 <_dtoa_r+0x2f4>
    45b0:	000b883a 	mov	r5,zero
    45b4:	003b3d06 	br	32ac <_dtoa_r+0x370>
    45b8:	d8800c17 	ldw	r2,48(sp)
    45bc:	d8800615 	stw	r2,24(sp)
    45c0:	003e6906 	br	3f68 <_dtoa_r+0x102c>

000045c4 <__sflush_r>:
    45c4:	2880030b 	ldhu	r2,12(r5)
    45c8:	defffb04 	addi	sp,sp,-20
    45cc:	dcc00315 	stw	r19,12(sp)
    45d0:	dc400115 	stw	r17,4(sp)
    45d4:	dfc00415 	stw	ra,16(sp)
    45d8:	dc800215 	stw	r18,8(sp)
    45dc:	dc000015 	stw	r16,0(sp)
    45e0:	10c0020c 	andi	r3,r2,8
    45e4:	2823883a 	mov	r17,r5
    45e8:	2027883a 	mov	r19,r4
    45ec:	1800311e 	bne	r3,zero,46b4 <__sflush_r+0xf0>
    45f0:	28c00117 	ldw	r3,4(r5)
    45f4:	10820014 	ori	r2,r2,2048
    45f8:	2880030d 	sth	r2,12(r5)
    45fc:	00c04b0e 	bge	zero,r3,472c <__sflush_r+0x168>
    4600:	8a000a17 	ldw	r8,40(r17)
    4604:	40002326 	beq	r8,zero,4694 <__sflush_r+0xd0>
    4608:	9c000017 	ldw	r16,0(r19)
    460c:	10c4000c 	andi	r3,r2,4096
    4610:	98000015 	stw	zero,0(r19)
    4614:	18004826 	beq	r3,zero,4738 <__sflush_r+0x174>
    4618:	89801417 	ldw	r6,80(r17)
    461c:	10c0010c 	andi	r3,r2,4
    4620:	18000626 	beq	r3,zero,463c <__sflush_r+0x78>
    4624:	88c00117 	ldw	r3,4(r17)
    4628:	88800c17 	ldw	r2,48(r17)
    462c:	30cdc83a 	sub	r6,r6,r3
    4630:	10000226 	beq	r2,zero,463c <__sflush_r+0x78>
    4634:	88800f17 	ldw	r2,60(r17)
    4638:	308dc83a 	sub	r6,r6,r2
    463c:	89400717 	ldw	r5,28(r17)
    4640:	000f883a 	mov	r7,zero
    4644:	9809883a 	mov	r4,r19
    4648:	403ee83a 	callr	r8
    464c:	00ffffc4 	movi	r3,-1
    4650:	10c04426 	beq	r2,r3,4764 <__sflush_r+0x1a0>
    4654:	88c0030b 	ldhu	r3,12(r17)
    4658:	89000417 	ldw	r4,16(r17)
    465c:	88000115 	stw	zero,4(r17)
    4660:	197dffcc 	andi	r5,r3,63487
    4664:	8940030d 	sth	r5,12(r17)
    4668:	89000015 	stw	r4,0(r17)
    466c:	18c4000c 	andi	r3,r3,4096
    4670:	18002c1e 	bne	r3,zero,4724 <__sflush_r+0x160>
    4674:	89400c17 	ldw	r5,48(r17)
    4678:	9c000015 	stw	r16,0(r19)
    467c:	28000526 	beq	r5,zero,4694 <__sflush_r+0xd0>
    4680:	88801004 	addi	r2,r17,64
    4684:	28800226 	beq	r5,r2,4690 <__sflush_r+0xcc>
    4688:	9809883a 	mov	r4,r19
    468c:	0004d300 	call	4d30 <_free_r>
    4690:	88000c15 	stw	zero,48(r17)
    4694:	0005883a 	mov	r2,zero
    4698:	dfc00417 	ldw	ra,16(sp)
    469c:	dcc00317 	ldw	r19,12(sp)
    46a0:	dc800217 	ldw	r18,8(sp)
    46a4:	dc400117 	ldw	r17,4(sp)
    46a8:	dc000017 	ldw	r16,0(sp)
    46ac:	dec00504 	addi	sp,sp,20
    46b0:	f800283a 	ret
    46b4:	2c800417 	ldw	r18,16(r5)
    46b8:	903ff626 	beq	r18,zero,4694 <__sflush_r+0xd0>
    46bc:	2c000017 	ldw	r16,0(r5)
    46c0:	108000cc 	andi	r2,r2,3
    46c4:	2c800015 	stw	r18,0(r5)
    46c8:	84a1c83a 	sub	r16,r16,r18
    46cc:	1000131e 	bne	r2,zero,471c <__sflush_r+0x158>
    46d0:	28800517 	ldw	r2,20(r5)
    46d4:	88800215 	stw	r2,8(r17)
    46d8:	04000316 	blt	zero,r16,46e8 <__sflush_r+0x124>
    46dc:	003fed06 	br	4694 <__sflush_r+0xd0>
    46e0:	90a5883a 	add	r18,r18,r2
    46e4:	043feb0e 	bge	zero,r16,4694 <__sflush_r+0xd0>
    46e8:	88800917 	ldw	r2,36(r17)
    46ec:	89400717 	ldw	r5,28(r17)
    46f0:	800f883a 	mov	r7,r16
    46f4:	900d883a 	mov	r6,r18
    46f8:	9809883a 	mov	r4,r19
    46fc:	103ee83a 	callr	r2
    4700:	80a1c83a 	sub	r16,r16,r2
    4704:	00bff616 	blt	zero,r2,46e0 <__sflush_r+0x11c>
    4708:	88c0030b 	ldhu	r3,12(r17)
    470c:	00bfffc4 	movi	r2,-1
    4710:	18c01014 	ori	r3,r3,64
    4714:	88c0030d 	sth	r3,12(r17)
    4718:	003fdf06 	br	4698 <__sflush_r+0xd4>
    471c:	0005883a 	mov	r2,zero
    4720:	003fec06 	br	46d4 <__sflush_r+0x110>
    4724:	88801415 	stw	r2,80(r17)
    4728:	003fd206 	br	4674 <__sflush_r+0xb0>
    472c:	28c00f17 	ldw	r3,60(r5)
    4730:	00ffb316 	blt	zero,r3,4600 <__sflush_r+0x3c>
    4734:	003fd706 	br	4694 <__sflush_r+0xd0>
    4738:	89400717 	ldw	r5,28(r17)
    473c:	000d883a 	mov	r6,zero
    4740:	01c00044 	movi	r7,1
    4744:	9809883a 	mov	r4,r19
    4748:	403ee83a 	callr	r8
    474c:	100d883a 	mov	r6,r2
    4750:	00bfffc4 	movi	r2,-1
    4754:	30801426 	beq	r6,r2,47a8 <__sflush_r+0x1e4>
    4758:	8880030b 	ldhu	r2,12(r17)
    475c:	8a000a17 	ldw	r8,40(r17)
    4760:	003fae06 	br	461c <__sflush_r+0x58>
    4764:	98c00017 	ldw	r3,0(r19)
    4768:	183fba26 	beq	r3,zero,4654 <__sflush_r+0x90>
    476c:	01000744 	movi	r4,29
    4770:	19000626 	beq	r3,r4,478c <__sflush_r+0x1c8>
    4774:	01000584 	movi	r4,22
    4778:	19000426 	beq	r3,r4,478c <__sflush_r+0x1c8>
    477c:	88c0030b 	ldhu	r3,12(r17)
    4780:	18c01014 	ori	r3,r3,64
    4784:	88c0030d 	sth	r3,12(r17)
    4788:	003fc306 	br	4698 <__sflush_r+0xd4>
    478c:	8880030b 	ldhu	r2,12(r17)
    4790:	88c00417 	ldw	r3,16(r17)
    4794:	88000115 	stw	zero,4(r17)
    4798:	10bdffcc 	andi	r2,r2,63487
    479c:	8880030d 	sth	r2,12(r17)
    47a0:	88c00015 	stw	r3,0(r17)
    47a4:	003fb306 	br	4674 <__sflush_r+0xb0>
    47a8:	98800017 	ldw	r2,0(r19)
    47ac:	103fea26 	beq	r2,zero,4758 <__sflush_r+0x194>
    47b0:	00c00744 	movi	r3,29
    47b4:	10c00226 	beq	r2,r3,47c0 <__sflush_r+0x1fc>
    47b8:	00c00584 	movi	r3,22
    47bc:	10c0031e 	bne	r2,r3,47cc <__sflush_r+0x208>
    47c0:	9c000015 	stw	r16,0(r19)
    47c4:	0005883a 	mov	r2,zero
    47c8:	003fb306 	br	4698 <__sflush_r+0xd4>
    47cc:	88c0030b 	ldhu	r3,12(r17)
    47d0:	3005883a 	mov	r2,r6
    47d4:	18c01014 	ori	r3,r3,64
    47d8:	88c0030d 	sth	r3,12(r17)
    47dc:	003fae06 	br	4698 <__sflush_r+0xd4>

000047e0 <_fflush_r>:
    47e0:	defffd04 	addi	sp,sp,-12
    47e4:	dc000115 	stw	r16,4(sp)
    47e8:	dfc00215 	stw	ra,8(sp)
    47ec:	2021883a 	mov	r16,r4
    47f0:	20000226 	beq	r4,zero,47fc <_fflush_r+0x1c>
    47f4:	20800e17 	ldw	r2,56(r4)
    47f8:	10000c26 	beq	r2,zero,482c <_fflush_r+0x4c>
    47fc:	2880030f 	ldh	r2,12(r5)
    4800:	1000051e 	bne	r2,zero,4818 <_fflush_r+0x38>
    4804:	0005883a 	mov	r2,zero
    4808:	dfc00217 	ldw	ra,8(sp)
    480c:	dc000117 	ldw	r16,4(sp)
    4810:	dec00304 	addi	sp,sp,12
    4814:	f800283a 	ret
    4818:	8009883a 	mov	r4,r16
    481c:	dfc00217 	ldw	ra,8(sp)
    4820:	dc000117 	ldw	r16,4(sp)
    4824:	dec00304 	addi	sp,sp,12
    4828:	00045c41 	jmpi	45c4 <__sflush_r>
    482c:	d9400015 	stw	r5,0(sp)
    4830:	0004bbc0 	call	4bbc <__sinit>
    4834:	d9400017 	ldw	r5,0(sp)
    4838:	003ff006 	br	47fc <_fflush_r+0x1c>

0000483c <fflush>:
    483c:	20000526 	beq	r4,zero,4854 <fflush+0x18>
    4840:	008000f4 	movhi	r2,3
    4844:	109aa104 	addi	r2,r2,27268
    4848:	200b883a 	mov	r5,r4
    484c:	11000017 	ldw	r4,0(r2)
    4850:	00047e01 	jmpi	47e0 <_fflush_r>
    4854:	008000f4 	movhi	r2,3
    4858:	109aa004 	addi	r2,r2,27264
    485c:	11000017 	ldw	r4,0(r2)
    4860:	01400034 	movhi	r5,0
    4864:	2951f804 	addi	r5,r5,18400
    4868:	00055c01 	jmpi	55c0 <_fwalk_reent>

0000486c <__fp_unlock>:
    486c:	0005883a 	mov	r2,zero
    4870:	f800283a 	ret

00004874 <_cleanup_r>:
    4874:	01400074 	movhi	r5,1
    4878:	29657604 	addi	r5,r5,-27176
    487c:	00055c01 	jmpi	55c0 <_fwalk_reent>

00004880 <__sinit.part.1>:
    4880:	defff704 	addi	sp,sp,-36
    4884:	00c00034 	movhi	r3,0
    4888:	dfc00815 	stw	ra,32(sp)
    488c:	ddc00715 	stw	r23,28(sp)
    4890:	dd800615 	stw	r22,24(sp)
    4894:	dd400515 	stw	r21,20(sp)
    4898:	dd000415 	stw	r20,16(sp)
    489c:	dcc00315 	stw	r19,12(sp)
    48a0:	dc800215 	stw	r18,8(sp)
    48a4:	dc400115 	stw	r17,4(sp)
    48a8:	dc000015 	stw	r16,0(sp)
    48ac:	18d21d04 	addi	r3,r3,18548
    48b0:	24000117 	ldw	r16,4(r4)
    48b4:	20c00f15 	stw	r3,60(r4)
    48b8:	2080bb04 	addi	r2,r4,748
    48bc:	00c000c4 	movi	r3,3
    48c0:	20c0b915 	stw	r3,740(r4)
    48c4:	2080ba15 	stw	r2,744(r4)
    48c8:	2000b815 	stw	zero,736(r4)
    48cc:	05c00204 	movi	r23,8
    48d0:	00800104 	movi	r2,4
    48d4:	2025883a 	mov	r18,r4
    48d8:	b80d883a 	mov	r6,r23
    48dc:	81001704 	addi	r4,r16,92
    48e0:	000b883a 	mov	r5,zero
    48e4:	80000015 	stw	zero,0(r16)
    48e8:	80000115 	stw	zero,4(r16)
    48ec:	80000215 	stw	zero,8(r16)
    48f0:	8080030d 	sth	r2,12(r16)
    48f4:	80001915 	stw	zero,100(r16)
    48f8:	8000038d 	sth	zero,14(r16)
    48fc:	80000415 	stw	zero,16(r16)
    4900:	80000515 	stw	zero,20(r16)
    4904:	80000615 	stw	zero,24(r16)
    4908:	00064b00 	call	64b0 <memset>
    490c:	05800034 	movhi	r22,0
    4910:	94400217 	ldw	r17,8(r18)
    4914:	05400034 	movhi	r21,0
    4918:	05000034 	movhi	r20,0
    491c:	04c00034 	movhi	r19,0
    4920:	b59f0004 	addi	r22,r22,31744
    4924:	ad5f1704 	addi	r21,r21,31836
    4928:	a51f3604 	addi	r20,r20,31960
    492c:	9cdf4d04 	addi	r19,r19,32052
    4930:	85800815 	stw	r22,32(r16)
    4934:	85400915 	stw	r21,36(r16)
    4938:	85000a15 	stw	r20,40(r16)
    493c:	84c00b15 	stw	r19,44(r16)
    4940:	84000715 	stw	r16,28(r16)
    4944:	00800284 	movi	r2,10
    4948:	8880030d 	sth	r2,12(r17)
    494c:	00800044 	movi	r2,1
    4950:	b80d883a 	mov	r6,r23
    4954:	89001704 	addi	r4,r17,92
    4958:	000b883a 	mov	r5,zero
    495c:	88000015 	stw	zero,0(r17)
    4960:	88000115 	stw	zero,4(r17)
    4964:	88000215 	stw	zero,8(r17)
    4968:	88001915 	stw	zero,100(r17)
    496c:	8880038d 	sth	r2,14(r17)
    4970:	88000415 	stw	zero,16(r17)
    4974:	88000515 	stw	zero,20(r17)
    4978:	88000615 	stw	zero,24(r17)
    497c:	00064b00 	call	64b0 <memset>
    4980:	94000317 	ldw	r16,12(r18)
    4984:	00800484 	movi	r2,18
    4988:	8c400715 	stw	r17,28(r17)
    498c:	8d800815 	stw	r22,32(r17)
    4990:	8d400915 	stw	r21,36(r17)
    4994:	8d000a15 	stw	r20,40(r17)
    4998:	8cc00b15 	stw	r19,44(r17)
    499c:	8080030d 	sth	r2,12(r16)
    49a0:	00800084 	movi	r2,2
    49a4:	80000015 	stw	zero,0(r16)
    49a8:	80000115 	stw	zero,4(r16)
    49ac:	80000215 	stw	zero,8(r16)
    49b0:	80001915 	stw	zero,100(r16)
    49b4:	8080038d 	sth	r2,14(r16)
    49b8:	80000415 	stw	zero,16(r16)
    49bc:	80000515 	stw	zero,20(r16)
    49c0:	80000615 	stw	zero,24(r16)
    49c4:	b80d883a 	mov	r6,r23
    49c8:	000b883a 	mov	r5,zero
    49cc:	81001704 	addi	r4,r16,92
    49d0:	00064b00 	call	64b0 <memset>
    49d4:	00800044 	movi	r2,1
    49d8:	84000715 	stw	r16,28(r16)
    49dc:	85800815 	stw	r22,32(r16)
    49e0:	85400915 	stw	r21,36(r16)
    49e4:	85000a15 	stw	r20,40(r16)
    49e8:	84c00b15 	stw	r19,44(r16)
    49ec:	90800e15 	stw	r2,56(r18)
    49f0:	dfc00817 	ldw	ra,32(sp)
    49f4:	ddc00717 	ldw	r23,28(sp)
    49f8:	dd800617 	ldw	r22,24(sp)
    49fc:	dd400517 	ldw	r21,20(sp)
    4a00:	dd000417 	ldw	r20,16(sp)
    4a04:	dcc00317 	ldw	r19,12(sp)
    4a08:	dc800217 	ldw	r18,8(sp)
    4a0c:	dc400117 	ldw	r17,4(sp)
    4a10:	dc000017 	ldw	r16,0(sp)
    4a14:	dec00904 	addi	sp,sp,36
    4a18:	f800283a 	ret

00004a1c <__fp_lock>:
    4a1c:	0005883a 	mov	r2,zero
    4a20:	f800283a 	ret

00004a24 <__sfmoreglue>:
    4a24:	defffc04 	addi	sp,sp,-16
    4a28:	dc400115 	stw	r17,4(sp)
    4a2c:	2c7fffc4 	addi	r17,r5,-1
    4a30:	8c401a24 	muli	r17,r17,104
    4a34:	dc800215 	stw	r18,8(sp)
    4a38:	2825883a 	mov	r18,r5
    4a3c:	89401d04 	addi	r5,r17,116
    4a40:	dc000015 	stw	r16,0(sp)
    4a44:	dfc00315 	stw	ra,12(sp)
    4a48:	000591c0 	call	591c <_malloc_r>
    4a4c:	1021883a 	mov	r16,r2
    4a50:	10000726 	beq	r2,zero,4a70 <__sfmoreglue+0x4c>
    4a54:	11000304 	addi	r4,r2,12
    4a58:	10000015 	stw	zero,0(r2)
    4a5c:	14800115 	stw	r18,4(r2)
    4a60:	11000215 	stw	r4,8(r2)
    4a64:	89801a04 	addi	r6,r17,104
    4a68:	000b883a 	mov	r5,zero
    4a6c:	00064b00 	call	64b0 <memset>
    4a70:	8005883a 	mov	r2,r16
    4a74:	dfc00317 	ldw	ra,12(sp)
    4a78:	dc800217 	ldw	r18,8(sp)
    4a7c:	dc400117 	ldw	r17,4(sp)
    4a80:	dc000017 	ldw	r16,0(sp)
    4a84:	dec00404 	addi	sp,sp,16
    4a88:	f800283a 	ret

00004a8c <__sfp>:
    4a8c:	defffb04 	addi	sp,sp,-20
    4a90:	dc000015 	stw	r16,0(sp)
    4a94:	040000f4 	movhi	r16,3
    4a98:	841aa004 	addi	r16,r16,27264
    4a9c:	dcc00315 	stw	r19,12(sp)
    4aa0:	2027883a 	mov	r19,r4
    4aa4:	81000017 	ldw	r4,0(r16)
    4aa8:	dfc00415 	stw	ra,16(sp)
    4aac:	dc800215 	stw	r18,8(sp)
    4ab0:	20800e17 	ldw	r2,56(r4)
    4ab4:	dc400115 	stw	r17,4(sp)
    4ab8:	1000021e 	bne	r2,zero,4ac4 <__sfp+0x38>
    4abc:	00048800 	call	4880 <__sinit.part.1>
    4ac0:	81000017 	ldw	r4,0(r16)
    4ac4:	2480b804 	addi	r18,r4,736
    4ac8:	047fffc4 	movi	r17,-1
    4acc:	91000117 	ldw	r4,4(r18)
    4ad0:	94000217 	ldw	r16,8(r18)
    4ad4:	213fffc4 	addi	r4,r4,-1
    4ad8:	20000a16 	blt	r4,zero,4b04 <__sfp+0x78>
    4adc:	8080030f 	ldh	r2,12(r16)
    4ae0:	10000c26 	beq	r2,zero,4b14 <__sfp+0x88>
    4ae4:	80c01d04 	addi	r3,r16,116
    4ae8:	00000206 	br	4af4 <__sfp+0x68>
    4aec:	18bfe60f 	ldh	r2,-104(r3)
    4af0:	10000826 	beq	r2,zero,4b14 <__sfp+0x88>
    4af4:	213fffc4 	addi	r4,r4,-1
    4af8:	1c3ffd04 	addi	r16,r3,-12
    4afc:	18c01a04 	addi	r3,r3,104
    4b00:	247ffa1e 	bne	r4,r17,4aec <__sfp+0x60>
    4b04:	90800017 	ldw	r2,0(r18)
    4b08:	10001d26 	beq	r2,zero,4b80 <__sfp+0xf4>
    4b0c:	1025883a 	mov	r18,r2
    4b10:	003fee06 	br	4acc <__sfp+0x40>
    4b14:	00bfffc4 	movi	r2,-1
    4b18:	8080038d 	sth	r2,14(r16)
    4b1c:	00800044 	movi	r2,1
    4b20:	8080030d 	sth	r2,12(r16)
    4b24:	80001915 	stw	zero,100(r16)
    4b28:	80000015 	stw	zero,0(r16)
    4b2c:	80000215 	stw	zero,8(r16)
    4b30:	80000115 	stw	zero,4(r16)
    4b34:	80000415 	stw	zero,16(r16)
    4b38:	80000515 	stw	zero,20(r16)
    4b3c:	80000615 	stw	zero,24(r16)
    4b40:	01800204 	movi	r6,8
    4b44:	000b883a 	mov	r5,zero
    4b48:	81001704 	addi	r4,r16,92
    4b4c:	00064b00 	call	64b0 <memset>
    4b50:	8005883a 	mov	r2,r16
    4b54:	80000c15 	stw	zero,48(r16)
    4b58:	80000d15 	stw	zero,52(r16)
    4b5c:	80001115 	stw	zero,68(r16)
    4b60:	80001215 	stw	zero,72(r16)
    4b64:	dfc00417 	ldw	ra,16(sp)
    4b68:	dcc00317 	ldw	r19,12(sp)
    4b6c:	dc800217 	ldw	r18,8(sp)
    4b70:	dc400117 	ldw	r17,4(sp)
    4b74:	dc000017 	ldw	r16,0(sp)
    4b78:	dec00504 	addi	sp,sp,20
    4b7c:	f800283a 	ret
    4b80:	01400104 	movi	r5,4
    4b84:	9809883a 	mov	r4,r19
    4b88:	0004a240 	call	4a24 <__sfmoreglue>
    4b8c:	90800015 	stw	r2,0(r18)
    4b90:	103fde1e 	bne	r2,zero,4b0c <__sfp+0x80>
    4b94:	00800304 	movi	r2,12
    4b98:	98800015 	stw	r2,0(r19)
    4b9c:	0005883a 	mov	r2,zero
    4ba0:	003ff006 	br	4b64 <__sfp+0xd8>

00004ba4 <_cleanup>:
    4ba4:	008000f4 	movhi	r2,3
    4ba8:	109aa004 	addi	r2,r2,27264
    4bac:	11000017 	ldw	r4,0(r2)
    4bb0:	01400074 	movhi	r5,1
    4bb4:	29657604 	addi	r5,r5,-27176
    4bb8:	00055c01 	jmpi	55c0 <_fwalk_reent>

00004bbc <__sinit>:
    4bbc:	20800e17 	ldw	r2,56(r4)
    4bc0:	10000126 	beq	r2,zero,4bc8 <__sinit+0xc>
    4bc4:	f800283a 	ret
    4bc8:	00048801 	jmpi	4880 <__sinit.part.1>

00004bcc <__sfp_lock_acquire>:
    4bcc:	f800283a 	ret

00004bd0 <__sfp_lock_release>:
    4bd0:	f800283a 	ret

00004bd4 <__sinit_lock_acquire>:
    4bd4:	f800283a 	ret

00004bd8 <__sinit_lock_release>:
    4bd8:	f800283a 	ret

00004bdc <__fp_lock_all>:
    4bdc:	008000f4 	movhi	r2,3
    4be0:	109aa104 	addi	r2,r2,27268
    4be4:	11000017 	ldw	r4,0(r2)
    4be8:	01400034 	movhi	r5,0
    4bec:	29528704 	addi	r5,r5,18972
    4bf0:	00054fc1 	jmpi	54fc <_fwalk>

00004bf4 <__fp_unlock_all>:
    4bf4:	008000f4 	movhi	r2,3
    4bf8:	109aa104 	addi	r2,r2,27268
    4bfc:	11000017 	ldw	r4,0(r2)
    4c00:	01400034 	movhi	r5,0
    4c04:	29521b04 	addi	r5,r5,18540
    4c08:	00054fc1 	jmpi	54fc <_fwalk>

00004c0c <_malloc_trim_r>:
    4c0c:	defffb04 	addi	sp,sp,-20
    4c10:	dcc00315 	stw	r19,12(sp)
    4c14:	04c000f4 	movhi	r19,3
    4c18:	dc800215 	stw	r18,8(sp)
    4c1c:	dc400115 	stw	r17,4(sp)
    4c20:	dc000015 	stw	r16,0(sp)
    4c24:	dfc00415 	stw	ra,16(sp)
    4c28:	2821883a 	mov	r16,r5
    4c2c:	9cd51804 	addi	r19,r19,21600
    4c30:	2025883a 	mov	r18,r4
    4c34:	000d90c0 	call	d90c <__malloc_lock>
    4c38:	98800217 	ldw	r2,8(r19)
    4c3c:	14400117 	ldw	r17,4(r2)
    4c40:	00bfff04 	movi	r2,-4
    4c44:	88a2703a 	and	r17,r17,r2
    4c48:	8c21c83a 	sub	r16,r17,r16
    4c4c:	8403fbc4 	addi	r16,r16,4079
    4c50:	8020d33a 	srli	r16,r16,12
    4c54:	0083ffc4 	movi	r2,4095
    4c58:	843fffc4 	addi	r16,r16,-1
    4c5c:	8020933a 	slli	r16,r16,12
    4c60:	1400060e 	bge	r2,r16,4c7c <_malloc_trim_r+0x70>
    4c64:	000b883a 	mov	r5,zero
    4c68:	9009883a 	mov	r4,r18
    4c6c:	0007bac0 	call	7bac <_sbrk_r>
    4c70:	98c00217 	ldw	r3,8(r19)
    4c74:	1c47883a 	add	r3,r3,r17
    4c78:	10c00a26 	beq	r2,r3,4ca4 <_malloc_trim_r+0x98>
    4c7c:	9009883a 	mov	r4,r18
    4c80:	000da2c0 	call	da2c <__malloc_unlock>
    4c84:	0005883a 	mov	r2,zero
    4c88:	dfc00417 	ldw	ra,16(sp)
    4c8c:	dcc00317 	ldw	r19,12(sp)
    4c90:	dc800217 	ldw	r18,8(sp)
    4c94:	dc400117 	ldw	r17,4(sp)
    4c98:	dc000017 	ldw	r16,0(sp)
    4c9c:	dec00504 	addi	sp,sp,20
    4ca0:	f800283a 	ret
    4ca4:	040bc83a 	sub	r5,zero,r16
    4ca8:	9009883a 	mov	r4,r18
    4cac:	0007bac0 	call	7bac <_sbrk_r>
    4cb0:	00ffffc4 	movi	r3,-1
    4cb4:	10c00d26 	beq	r2,r3,4cec <_malloc_trim_r+0xe0>
    4cb8:	00c00134 	movhi	r3,4
    4cbc:	18e1d604 	addi	r3,r3,-30888
    4cc0:	18800017 	ldw	r2,0(r3)
    4cc4:	99000217 	ldw	r4,8(r19)
    4cc8:	8c23c83a 	sub	r17,r17,r16
    4ccc:	8c400054 	ori	r17,r17,1
    4cd0:	1421c83a 	sub	r16,r2,r16
    4cd4:	24400115 	stw	r17,4(r4)
    4cd8:	9009883a 	mov	r4,r18
    4cdc:	1c000015 	stw	r16,0(r3)
    4ce0:	000da2c0 	call	da2c <__malloc_unlock>
    4ce4:	00800044 	movi	r2,1
    4ce8:	003fe706 	br	4c88 <_malloc_trim_r+0x7c>
    4cec:	000b883a 	mov	r5,zero
    4cf0:	9009883a 	mov	r4,r18
    4cf4:	0007bac0 	call	7bac <_sbrk_r>
    4cf8:	99000217 	ldw	r4,8(r19)
    4cfc:	014003c4 	movi	r5,15
    4d00:	1107c83a 	sub	r3,r2,r4
    4d04:	28ffdd0e 	bge	r5,r3,4c7c <_malloc_trim_r+0x70>
    4d08:	014000f4 	movhi	r5,3
    4d0c:	295aa304 	addi	r5,r5,27276
    4d10:	29400017 	ldw	r5,0(r5)
    4d14:	18c00054 	ori	r3,r3,1
    4d18:	20c00115 	stw	r3,4(r4)
    4d1c:	00c00134 	movhi	r3,4
    4d20:	1145c83a 	sub	r2,r2,r5
    4d24:	18e1d604 	addi	r3,r3,-30888
    4d28:	18800015 	stw	r2,0(r3)
    4d2c:	003fd306 	br	4c7c <_malloc_trim_r+0x70>

00004d30 <_free_r>:
    4d30:	28004126 	beq	r5,zero,4e38 <_free_r+0x108>
    4d34:	defffd04 	addi	sp,sp,-12
    4d38:	dc400115 	stw	r17,4(sp)
    4d3c:	dc000015 	stw	r16,0(sp)
    4d40:	2023883a 	mov	r17,r4
    4d44:	2821883a 	mov	r16,r5
    4d48:	dfc00215 	stw	ra,8(sp)
    4d4c:	000d90c0 	call	d90c <__malloc_lock>
    4d50:	81ffff17 	ldw	r7,-4(r16)
    4d54:	00bfff84 	movi	r2,-2
    4d58:	010000f4 	movhi	r4,3
    4d5c:	81bffe04 	addi	r6,r16,-8
    4d60:	3884703a 	and	r2,r7,r2
    4d64:	21151804 	addi	r4,r4,21600
    4d68:	308b883a 	add	r5,r6,r2
    4d6c:	2a400117 	ldw	r9,4(r5)
    4d70:	22000217 	ldw	r8,8(r4)
    4d74:	00ffff04 	movi	r3,-4
    4d78:	48c6703a 	and	r3,r9,r3
    4d7c:	2a005726 	beq	r5,r8,4edc <_free_r+0x1ac>
    4d80:	28c00115 	stw	r3,4(r5)
    4d84:	39c0004c 	andi	r7,r7,1
    4d88:	3800091e 	bne	r7,zero,4db0 <_free_r+0x80>
    4d8c:	823ffe17 	ldw	r8,-8(r16)
    4d90:	22400204 	addi	r9,r4,8
    4d94:	320dc83a 	sub	r6,r6,r8
    4d98:	31c00217 	ldw	r7,8(r6)
    4d9c:	1205883a 	add	r2,r2,r8
    4da0:	3a406526 	beq	r7,r9,4f38 <_free_r+0x208>
    4da4:	32000317 	ldw	r8,12(r6)
    4da8:	3a000315 	stw	r8,12(r7)
    4dac:	41c00215 	stw	r7,8(r8)
    4db0:	28cf883a 	add	r7,r5,r3
    4db4:	39c00117 	ldw	r7,4(r7)
    4db8:	39c0004c 	andi	r7,r7,1
    4dbc:	38003a26 	beq	r7,zero,4ea8 <_free_r+0x178>
    4dc0:	10c00054 	ori	r3,r2,1
    4dc4:	30c00115 	stw	r3,4(r6)
    4dc8:	3087883a 	add	r3,r6,r2
    4dcc:	18800015 	stw	r2,0(r3)
    4dd0:	00c07fc4 	movi	r3,511
    4dd4:	18801936 	bltu	r3,r2,4e3c <_free_r+0x10c>
    4dd8:	1004d0fa 	srli	r2,r2,3
    4ddc:	01c00044 	movi	r7,1
    4de0:	21400117 	ldw	r5,4(r4)
    4de4:	10c00044 	addi	r3,r2,1
    4de8:	18c7883a 	add	r3,r3,r3
    4dec:	1005d0ba 	srai	r2,r2,2
    4df0:	18c7883a 	add	r3,r3,r3
    4df4:	18c7883a 	add	r3,r3,r3
    4df8:	1907883a 	add	r3,r3,r4
    4dfc:	3884983a 	sll	r2,r7,r2
    4e00:	19c00017 	ldw	r7,0(r3)
    4e04:	1a3ffe04 	addi	r8,r3,-8
    4e08:	1144b03a 	or	r2,r2,r5
    4e0c:	32000315 	stw	r8,12(r6)
    4e10:	31c00215 	stw	r7,8(r6)
    4e14:	20800115 	stw	r2,4(r4)
    4e18:	19800015 	stw	r6,0(r3)
    4e1c:	39800315 	stw	r6,12(r7)
    4e20:	8809883a 	mov	r4,r17
    4e24:	dfc00217 	ldw	ra,8(sp)
    4e28:	dc400117 	ldw	r17,4(sp)
    4e2c:	dc000017 	ldw	r16,0(sp)
    4e30:	dec00304 	addi	sp,sp,12
    4e34:	000da2c1 	jmpi	da2c <__malloc_unlock>
    4e38:	f800283a 	ret
    4e3c:	100ad27a 	srli	r5,r2,9
    4e40:	00c00104 	movi	r3,4
    4e44:	19404a36 	bltu	r3,r5,4f70 <_free_r+0x240>
    4e48:	100ad1ba 	srli	r5,r2,6
    4e4c:	28c00e44 	addi	r3,r5,57
    4e50:	18c7883a 	add	r3,r3,r3
    4e54:	29400e04 	addi	r5,r5,56
    4e58:	18c7883a 	add	r3,r3,r3
    4e5c:	18c7883a 	add	r3,r3,r3
    4e60:	1909883a 	add	r4,r3,r4
    4e64:	20c00017 	ldw	r3,0(r4)
    4e68:	01c000f4 	movhi	r7,3
    4e6c:	213ffe04 	addi	r4,r4,-8
    4e70:	39d51804 	addi	r7,r7,21600
    4e74:	20c04426 	beq	r4,r3,4f88 <_free_r+0x258>
    4e78:	01ffff04 	movi	r7,-4
    4e7c:	19400117 	ldw	r5,4(r3)
    4e80:	29ca703a 	and	r5,r5,r7
    4e84:	1140022e 	bgeu	r2,r5,4e90 <_free_r+0x160>
    4e88:	18c00217 	ldw	r3,8(r3)
    4e8c:	20fffb1e 	bne	r4,r3,4e7c <_free_r+0x14c>
    4e90:	19000317 	ldw	r4,12(r3)
    4e94:	31000315 	stw	r4,12(r6)
    4e98:	30c00215 	stw	r3,8(r6)
    4e9c:	21800215 	stw	r6,8(r4)
    4ea0:	19800315 	stw	r6,12(r3)
    4ea4:	003fde06 	br	4e20 <_free_r+0xf0>
    4ea8:	29c00217 	ldw	r7,8(r5)
    4eac:	10c5883a 	add	r2,r2,r3
    4eb0:	00c000f4 	movhi	r3,3
    4eb4:	18d51a04 	addi	r3,r3,21608
    4eb8:	38c03b26 	beq	r7,r3,4fa8 <_free_r+0x278>
    4ebc:	2a000317 	ldw	r8,12(r5)
    4ec0:	11400054 	ori	r5,r2,1
    4ec4:	3087883a 	add	r3,r6,r2
    4ec8:	3a000315 	stw	r8,12(r7)
    4ecc:	41c00215 	stw	r7,8(r8)
    4ed0:	31400115 	stw	r5,4(r6)
    4ed4:	18800015 	stw	r2,0(r3)
    4ed8:	003fbd06 	br	4dd0 <_free_r+0xa0>
    4edc:	39c0004c 	andi	r7,r7,1
    4ee0:	10c5883a 	add	r2,r2,r3
    4ee4:	3800071e 	bne	r7,zero,4f04 <_free_r+0x1d4>
    4ee8:	81fffe17 	ldw	r7,-8(r16)
    4eec:	31cdc83a 	sub	r6,r6,r7
    4ef0:	30c00317 	ldw	r3,12(r6)
    4ef4:	31400217 	ldw	r5,8(r6)
    4ef8:	11c5883a 	add	r2,r2,r7
    4efc:	28c00315 	stw	r3,12(r5)
    4f00:	19400215 	stw	r5,8(r3)
    4f04:	10c00054 	ori	r3,r2,1
    4f08:	30c00115 	stw	r3,4(r6)
    4f0c:	00c000f4 	movhi	r3,3
    4f10:	18daa404 	addi	r3,r3,27280
    4f14:	18c00017 	ldw	r3,0(r3)
    4f18:	21800215 	stw	r6,8(r4)
    4f1c:	10ffc036 	bltu	r2,r3,4e20 <_free_r+0xf0>
    4f20:	00800134 	movhi	r2,4
    4f24:	10a1b404 	addi	r2,r2,-31024
    4f28:	11400017 	ldw	r5,0(r2)
    4f2c:	8809883a 	mov	r4,r17
    4f30:	0004c0c0 	call	4c0c <_malloc_trim_r>
    4f34:	003fba06 	br	4e20 <_free_r+0xf0>
    4f38:	28c9883a 	add	r4,r5,r3
    4f3c:	21000117 	ldw	r4,4(r4)
    4f40:	2100004c 	andi	r4,r4,1
    4f44:	2000391e 	bne	r4,zero,502c <_free_r+0x2fc>
    4f48:	29c00217 	ldw	r7,8(r5)
    4f4c:	29000317 	ldw	r4,12(r5)
    4f50:	1885883a 	add	r2,r3,r2
    4f54:	10c00054 	ori	r3,r2,1
    4f58:	39000315 	stw	r4,12(r7)
    4f5c:	21c00215 	stw	r7,8(r4)
    4f60:	30c00115 	stw	r3,4(r6)
    4f64:	308d883a 	add	r6,r6,r2
    4f68:	30800015 	stw	r2,0(r6)
    4f6c:	003fac06 	br	4e20 <_free_r+0xf0>
    4f70:	00c00504 	movi	r3,20
    4f74:	19401536 	bltu	r3,r5,4fcc <_free_r+0x29c>
    4f78:	28c01704 	addi	r3,r5,92
    4f7c:	18c7883a 	add	r3,r3,r3
    4f80:	294016c4 	addi	r5,r5,91
    4f84:	003fb406 	br	4e58 <_free_r+0x128>
    4f88:	280bd0ba 	srai	r5,r5,2
    4f8c:	00c00044 	movi	r3,1
    4f90:	38800117 	ldw	r2,4(r7)
    4f94:	194a983a 	sll	r5,r3,r5
    4f98:	2007883a 	mov	r3,r4
    4f9c:	2884b03a 	or	r2,r5,r2
    4fa0:	38800115 	stw	r2,4(r7)
    4fa4:	003fbb06 	br	4e94 <_free_r+0x164>
    4fa8:	21800515 	stw	r6,20(r4)
    4fac:	21800415 	stw	r6,16(r4)
    4fb0:	10c00054 	ori	r3,r2,1
    4fb4:	31c00315 	stw	r7,12(r6)
    4fb8:	31c00215 	stw	r7,8(r6)
    4fbc:	30c00115 	stw	r3,4(r6)
    4fc0:	308d883a 	add	r6,r6,r2
    4fc4:	30800015 	stw	r2,0(r6)
    4fc8:	003f9506 	br	4e20 <_free_r+0xf0>
    4fcc:	00c01504 	movi	r3,84
    4fd0:	19400536 	bltu	r3,r5,4fe8 <_free_r+0x2b8>
    4fd4:	100ad33a 	srli	r5,r2,12
    4fd8:	28c01bc4 	addi	r3,r5,111
    4fdc:	18c7883a 	add	r3,r3,r3
    4fe0:	29401b84 	addi	r5,r5,110
    4fe4:	003f9c06 	br	4e58 <_free_r+0x128>
    4fe8:	00c05504 	movi	r3,340
    4fec:	19400536 	bltu	r3,r5,5004 <_free_r+0x2d4>
    4ff0:	100ad3fa 	srli	r5,r2,15
    4ff4:	28c01e04 	addi	r3,r5,120
    4ff8:	18c7883a 	add	r3,r3,r3
    4ffc:	29401dc4 	addi	r5,r5,119
    5000:	003f9506 	br	4e58 <_free_r+0x128>
    5004:	00c15504 	movi	r3,1364
    5008:	19400536 	bltu	r3,r5,5020 <_free_r+0x2f0>
    500c:	100ad4ba 	srli	r5,r2,18
    5010:	28c01f44 	addi	r3,r5,125
    5014:	18c7883a 	add	r3,r3,r3
    5018:	29401f04 	addi	r5,r5,124
    501c:	003f8e06 	br	4e58 <_free_r+0x128>
    5020:	00c03f84 	movi	r3,254
    5024:	01401f84 	movi	r5,126
    5028:	003f8b06 	br	4e58 <_free_r+0x128>
    502c:	10c00054 	ori	r3,r2,1
    5030:	30c00115 	stw	r3,4(r6)
    5034:	308d883a 	add	r6,r6,r2
    5038:	30800015 	stw	r2,0(r6)
    503c:	003f7806 	br	4e20 <_free_r+0xf0>

00005040 <__sfvwrite_r>:
    5040:	30800217 	ldw	r2,8(r6)
    5044:	10006726 	beq	r2,zero,51e4 <__sfvwrite_r+0x1a4>
    5048:	28c0030b 	ldhu	r3,12(r5)
    504c:	defff404 	addi	sp,sp,-48
    5050:	dd400715 	stw	r21,28(sp)
    5054:	dd000615 	stw	r20,24(sp)
    5058:	dc000215 	stw	r16,8(sp)
    505c:	dfc00b15 	stw	ra,44(sp)
    5060:	df000a15 	stw	fp,40(sp)
    5064:	ddc00915 	stw	r23,36(sp)
    5068:	dd800815 	stw	r22,32(sp)
    506c:	dcc00515 	stw	r19,20(sp)
    5070:	dc800415 	stw	r18,16(sp)
    5074:	dc400315 	stw	r17,12(sp)
    5078:	1880020c 	andi	r2,r3,8
    507c:	2821883a 	mov	r16,r5
    5080:	202b883a 	mov	r21,r4
    5084:	3029883a 	mov	r20,r6
    5088:	10002726 	beq	r2,zero,5128 <__sfvwrite_r+0xe8>
    508c:	28800417 	ldw	r2,16(r5)
    5090:	10002526 	beq	r2,zero,5128 <__sfvwrite_r+0xe8>
    5094:	1880008c 	andi	r2,r3,2
    5098:	a4400017 	ldw	r17,0(r20)
    509c:	10002a26 	beq	r2,zero,5148 <__sfvwrite_r+0x108>
    50a0:	05a00034 	movhi	r22,32768
    50a4:	0027883a 	mov	r19,zero
    50a8:	0025883a 	mov	r18,zero
    50ac:	b5bf0004 	addi	r22,r22,-1024
    50b0:	980d883a 	mov	r6,r19
    50b4:	a809883a 	mov	r4,r21
    50b8:	90004626 	beq	r18,zero,51d4 <__sfvwrite_r+0x194>
    50bc:	900f883a 	mov	r7,r18
    50c0:	b480022e 	bgeu	r22,r18,50cc <__sfvwrite_r+0x8c>
    50c4:	01e00034 	movhi	r7,32768
    50c8:	39ff0004 	addi	r7,r7,-1024
    50cc:	80800917 	ldw	r2,36(r16)
    50d0:	81400717 	ldw	r5,28(r16)
    50d4:	103ee83a 	callr	r2
    50d8:	0080570e 	bge	zero,r2,5238 <__sfvwrite_r+0x1f8>
    50dc:	a0c00217 	ldw	r3,8(r20)
    50e0:	98a7883a 	add	r19,r19,r2
    50e4:	90a5c83a 	sub	r18,r18,r2
    50e8:	1885c83a 	sub	r2,r3,r2
    50ec:	a0800215 	stw	r2,8(r20)
    50f0:	103fef1e 	bne	r2,zero,50b0 <__sfvwrite_r+0x70>
    50f4:	0005883a 	mov	r2,zero
    50f8:	dfc00b17 	ldw	ra,44(sp)
    50fc:	df000a17 	ldw	fp,40(sp)
    5100:	ddc00917 	ldw	r23,36(sp)
    5104:	dd800817 	ldw	r22,32(sp)
    5108:	dd400717 	ldw	r21,28(sp)
    510c:	dd000617 	ldw	r20,24(sp)
    5110:	dcc00517 	ldw	r19,20(sp)
    5114:	dc800417 	ldw	r18,16(sp)
    5118:	dc400317 	ldw	r17,12(sp)
    511c:	dc000217 	ldw	r16,8(sp)
    5120:	dec00c04 	addi	sp,sp,48
    5124:	f800283a 	ret
    5128:	800b883a 	mov	r5,r16
    512c:	a809883a 	mov	r4,r21
    5130:	0002be80 	call	2be8 <__swsetup_r>
    5134:	1000eb1e 	bne	r2,zero,54e4 <__sfvwrite_r+0x4a4>
    5138:	80c0030b 	ldhu	r3,12(r16)
    513c:	a4400017 	ldw	r17,0(r20)
    5140:	1880008c 	andi	r2,r3,2
    5144:	103fd61e 	bne	r2,zero,50a0 <__sfvwrite_r+0x60>
    5148:	1880004c 	andi	r2,r3,1
    514c:	10003f1e 	bne	r2,zero,524c <__sfvwrite_r+0x20c>
    5150:	0039883a 	mov	fp,zero
    5154:	0025883a 	mov	r18,zero
    5158:	90001a26 	beq	r18,zero,51c4 <__sfvwrite_r+0x184>
    515c:	1880800c 	andi	r2,r3,512
    5160:	84c00217 	ldw	r19,8(r16)
    5164:	10002126 	beq	r2,zero,51ec <__sfvwrite_r+0x1ac>
    5168:	982f883a 	mov	r23,r19
    516c:	94c09336 	bltu	r18,r19,53bc <__sfvwrite_r+0x37c>
    5170:	1881200c 	andi	r2,r3,1152
    5174:	10009e1e 	bne	r2,zero,53f0 <__sfvwrite_r+0x3b0>
    5178:	81000017 	ldw	r4,0(r16)
    517c:	b80d883a 	mov	r6,r23
    5180:	e00b883a 	mov	r5,fp
    5184:	00063540 	call	6354 <memmove>
    5188:	80c00217 	ldw	r3,8(r16)
    518c:	81000017 	ldw	r4,0(r16)
    5190:	9005883a 	mov	r2,r18
    5194:	1ce7c83a 	sub	r19,r3,r19
    5198:	25cf883a 	add	r7,r4,r23
    519c:	84c00215 	stw	r19,8(r16)
    51a0:	81c00015 	stw	r7,0(r16)
    51a4:	a0c00217 	ldw	r3,8(r20)
    51a8:	e0b9883a 	add	fp,fp,r2
    51ac:	90a5c83a 	sub	r18,r18,r2
    51b0:	18a7c83a 	sub	r19,r3,r2
    51b4:	a4c00215 	stw	r19,8(r20)
    51b8:	983fce26 	beq	r19,zero,50f4 <__sfvwrite_r+0xb4>
    51bc:	80c0030b 	ldhu	r3,12(r16)
    51c0:	903fe61e 	bne	r18,zero,515c <__sfvwrite_r+0x11c>
    51c4:	8f000017 	ldw	fp,0(r17)
    51c8:	8c800117 	ldw	r18,4(r17)
    51cc:	8c400204 	addi	r17,r17,8
    51d0:	003fe106 	br	5158 <__sfvwrite_r+0x118>
    51d4:	8cc00017 	ldw	r19,0(r17)
    51d8:	8c800117 	ldw	r18,4(r17)
    51dc:	8c400204 	addi	r17,r17,8
    51e0:	003fb306 	br	50b0 <__sfvwrite_r+0x70>
    51e4:	0005883a 	mov	r2,zero
    51e8:	f800283a 	ret
    51ec:	81000017 	ldw	r4,0(r16)
    51f0:	80800417 	ldw	r2,16(r16)
    51f4:	11005736 	bltu	r2,r4,5354 <__sfvwrite_r+0x314>
    51f8:	85c00517 	ldw	r23,20(r16)
    51fc:	95c05536 	bltu	r18,r23,5354 <__sfvwrite_r+0x314>
    5200:	00a00034 	movhi	r2,32768
    5204:	10bfffc4 	addi	r2,r2,-1
    5208:	9009883a 	mov	r4,r18
    520c:	1480012e 	bgeu	r2,r18,5214 <__sfvwrite_r+0x1d4>
    5210:	1009883a 	mov	r4,r2
    5214:	b80b883a 	mov	r5,r23
    5218:	000058c0 	call	58c <__divsi3>
    521c:	15cf383a 	mul	r7,r2,r23
    5220:	81400717 	ldw	r5,28(r16)
    5224:	80800917 	ldw	r2,36(r16)
    5228:	e00d883a 	mov	r6,fp
    522c:	a809883a 	mov	r4,r21
    5230:	103ee83a 	callr	r2
    5234:	00bfdb16 	blt	zero,r2,51a4 <__sfvwrite_r+0x164>
    5238:	8080030b 	ldhu	r2,12(r16)
    523c:	10801014 	ori	r2,r2,64
    5240:	8080030d 	sth	r2,12(r16)
    5244:	00bfffc4 	movi	r2,-1
    5248:	003fab06 	br	50f8 <__sfvwrite_r+0xb8>
    524c:	0027883a 	mov	r19,zero
    5250:	0011883a 	mov	r8,zero
    5254:	0039883a 	mov	fp,zero
    5258:	0025883a 	mov	r18,zero
    525c:	90001f26 	beq	r18,zero,52dc <__sfvwrite_r+0x29c>
    5260:	40005a26 	beq	r8,zero,53cc <__sfvwrite_r+0x38c>
    5264:	982d883a 	mov	r22,r19
    5268:	94c0012e 	bgeu	r18,r19,5270 <__sfvwrite_r+0x230>
    526c:	902d883a 	mov	r22,r18
    5270:	81000017 	ldw	r4,0(r16)
    5274:	80800417 	ldw	r2,16(r16)
    5278:	b02f883a 	mov	r23,r22
    527c:	81c00517 	ldw	r7,20(r16)
    5280:	1100032e 	bgeu	r2,r4,5290 <__sfvwrite_r+0x250>
    5284:	80c00217 	ldw	r3,8(r16)
    5288:	38c7883a 	add	r3,r7,r3
    528c:	1d801816 	blt	r3,r22,52f0 <__sfvwrite_r+0x2b0>
    5290:	b1c03e16 	blt	r22,r7,538c <__sfvwrite_r+0x34c>
    5294:	80800917 	ldw	r2,36(r16)
    5298:	81400717 	ldw	r5,28(r16)
    529c:	e00d883a 	mov	r6,fp
    52a0:	da000115 	stw	r8,4(sp)
    52a4:	a809883a 	mov	r4,r21
    52a8:	103ee83a 	callr	r2
    52ac:	102f883a 	mov	r23,r2
    52b0:	da000117 	ldw	r8,4(sp)
    52b4:	00bfe00e 	bge	zero,r2,5238 <__sfvwrite_r+0x1f8>
    52b8:	9de7c83a 	sub	r19,r19,r23
    52bc:	98001f26 	beq	r19,zero,533c <__sfvwrite_r+0x2fc>
    52c0:	a0800217 	ldw	r2,8(r20)
    52c4:	e5f9883a 	add	fp,fp,r23
    52c8:	95e5c83a 	sub	r18,r18,r23
    52cc:	15efc83a 	sub	r23,r2,r23
    52d0:	a5c00215 	stw	r23,8(r20)
    52d4:	b83f8726 	beq	r23,zero,50f4 <__sfvwrite_r+0xb4>
    52d8:	903fe11e 	bne	r18,zero,5260 <__sfvwrite_r+0x220>
    52dc:	8f000017 	ldw	fp,0(r17)
    52e0:	8c800117 	ldw	r18,4(r17)
    52e4:	0011883a 	mov	r8,zero
    52e8:	8c400204 	addi	r17,r17,8
    52ec:	003fdb06 	br	525c <__sfvwrite_r+0x21c>
    52f0:	180d883a 	mov	r6,r3
    52f4:	e00b883a 	mov	r5,fp
    52f8:	da000115 	stw	r8,4(sp)
    52fc:	d8c00015 	stw	r3,0(sp)
    5300:	00063540 	call	6354 <memmove>
    5304:	d8c00017 	ldw	r3,0(sp)
    5308:	80800017 	ldw	r2,0(r16)
    530c:	800b883a 	mov	r5,r16
    5310:	a809883a 	mov	r4,r21
    5314:	10c5883a 	add	r2,r2,r3
    5318:	80800015 	stw	r2,0(r16)
    531c:	d8c00015 	stw	r3,0(sp)
    5320:	00047e00 	call	47e0 <_fflush_r>
    5324:	d8c00017 	ldw	r3,0(sp)
    5328:	da000117 	ldw	r8,4(sp)
    532c:	103fc21e 	bne	r2,zero,5238 <__sfvwrite_r+0x1f8>
    5330:	182f883a 	mov	r23,r3
    5334:	9de7c83a 	sub	r19,r19,r23
    5338:	983fe11e 	bne	r19,zero,52c0 <__sfvwrite_r+0x280>
    533c:	800b883a 	mov	r5,r16
    5340:	a809883a 	mov	r4,r21
    5344:	00047e00 	call	47e0 <_fflush_r>
    5348:	103fbb1e 	bne	r2,zero,5238 <__sfvwrite_r+0x1f8>
    534c:	0011883a 	mov	r8,zero
    5350:	003fdb06 	br	52c0 <__sfvwrite_r+0x280>
    5354:	94c0012e 	bgeu	r18,r19,535c <__sfvwrite_r+0x31c>
    5358:	9027883a 	mov	r19,r18
    535c:	980d883a 	mov	r6,r19
    5360:	e00b883a 	mov	r5,fp
    5364:	00063540 	call	6354 <memmove>
    5368:	80800217 	ldw	r2,8(r16)
    536c:	80c00017 	ldw	r3,0(r16)
    5370:	14c5c83a 	sub	r2,r2,r19
    5374:	1cc7883a 	add	r3,r3,r19
    5378:	80800215 	stw	r2,8(r16)
    537c:	80c00015 	stw	r3,0(r16)
    5380:	10004326 	beq	r2,zero,5490 <__sfvwrite_r+0x450>
    5384:	9805883a 	mov	r2,r19
    5388:	003f8606 	br	51a4 <__sfvwrite_r+0x164>
    538c:	b00d883a 	mov	r6,r22
    5390:	e00b883a 	mov	r5,fp
    5394:	da000115 	stw	r8,4(sp)
    5398:	00063540 	call	6354 <memmove>
    539c:	80800217 	ldw	r2,8(r16)
    53a0:	80c00017 	ldw	r3,0(r16)
    53a4:	da000117 	ldw	r8,4(sp)
    53a8:	1585c83a 	sub	r2,r2,r22
    53ac:	1dad883a 	add	r22,r3,r22
    53b0:	80800215 	stw	r2,8(r16)
    53b4:	85800015 	stw	r22,0(r16)
    53b8:	003fbf06 	br	52b8 <__sfvwrite_r+0x278>
    53bc:	81000017 	ldw	r4,0(r16)
    53c0:	9027883a 	mov	r19,r18
    53c4:	902f883a 	mov	r23,r18
    53c8:	003f6c06 	br	517c <__sfvwrite_r+0x13c>
    53cc:	900d883a 	mov	r6,r18
    53d0:	01400284 	movi	r5,10
    53d4:	e009883a 	mov	r4,fp
    53d8:	00061280 	call	6128 <memchr>
    53dc:	10003e26 	beq	r2,zero,54d8 <__sfvwrite_r+0x498>
    53e0:	10800044 	addi	r2,r2,1
    53e4:	1727c83a 	sub	r19,r2,fp
    53e8:	02000044 	movi	r8,1
    53ec:	003f9d06 	br	5264 <__sfvwrite_r+0x224>
    53f0:	80800517 	ldw	r2,20(r16)
    53f4:	81400417 	ldw	r5,16(r16)
    53f8:	81c00017 	ldw	r7,0(r16)
    53fc:	10a7883a 	add	r19,r2,r2
    5400:	9885883a 	add	r2,r19,r2
    5404:	1026d7fa 	srli	r19,r2,31
    5408:	396dc83a 	sub	r22,r7,r5
    540c:	b1000044 	addi	r4,r22,1
    5410:	9885883a 	add	r2,r19,r2
    5414:	1027d07a 	srai	r19,r2,1
    5418:	2485883a 	add	r2,r4,r18
    541c:	980d883a 	mov	r6,r19
    5420:	9880022e 	bgeu	r19,r2,542c <__sfvwrite_r+0x3ec>
    5424:	1027883a 	mov	r19,r2
    5428:	100d883a 	mov	r6,r2
    542c:	18c1000c 	andi	r3,r3,1024
    5430:	18001c26 	beq	r3,zero,54a4 <__sfvwrite_r+0x464>
    5434:	300b883a 	mov	r5,r6
    5438:	a809883a 	mov	r4,r21
    543c:	000591c0 	call	591c <_malloc_r>
    5440:	102f883a 	mov	r23,r2
    5444:	10002926 	beq	r2,zero,54ec <__sfvwrite_r+0x4ac>
    5448:	81400417 	ldw	r5,16(r16)
    544c:	b00d883a 	mov	r6,r22
    5450:	1009883a 	mov	r4,r2
    5454:	000620c0 	call	620c <memcpy>
    5458:	8080030b 	ldhu	r2,12(r16)
    545c:	00fedfc4 	movi	r3,-1153
    5460:	10c4703a 	and	r2,r2,r3
    5464:	10802014 	ori	r2,r2,128
    5468:	8080030d 	sth	r2,12(r16)
    546c:	bd89883a 	add	r4,r23,r22
    5470:	9d8fc83a 	sub	r7,r19,r22
    5474:	85c00415 	stw	r23,16(r16)
    5478:	84c00515 	stw	r19,20(r16)
    547c:	81000015 	stw	r4,0(r16)
    5480:	9027883a 	mov	r19,r18
    5484:	81c00215 	stw	r7,8(r16)
    5488:	902f883a 	mov	r23,r18
    548c:	003f3b06 	br	517c <__sfvwrite_r+0x13c>
    5490:	800b883a 	mov	r5,r16
    5494:	a809883a 	mov	r4,r21
    5498:	00047e00 	call	47e0 <_fflush_r>
    549c:	103fb926 	beq	r2,zero,5384 <__sfvwrite_r+0x344>
    54a0:	003f6506 	br	5238 <__sfvwrite_r+0x1f8>
    54a4:	a809883a 	mov	r4,r21
    54a8:	00075d40 	call	75d4 <_realloc_r>
    54ac:	102f883a 	mov	r23,r2
    54b0:	103fee1e 	bne	r2,zero,546c <__sfvwrite_r+0x42c>
    54b4:	81400417 	ldw	r5,16(r16)
    54b8:	a809883a 	mov	r4,r21
    54bc:	0004d300 	call	4d30 <_free_r>
    54c0:	8080030b 	ldhu	r2,12(r16)
    54c4:	00ffdfc4 	movi	r3,-129
    54c8:	1884703a 	and	r2,r3,r2
    54cc:	00c00304 	movi	r3,12
    54d0:	a8c00015 	stw	r3,0(r21)
    54d4:	003f5906 	br	523c <__sfvwrite_r+0x1fc>
    54d8:	94c00044 	addi	r19,r18,1
    54dc:	02000044 	movi	r8,1
    54e0:	003f6006 	br	5264 <__sfvwrite_r+0x224>
    54e4:	00bfffc4 	movi	r2,-1
    54e8:	003f0306 	br	50f8 <__sfvwrite_r+0xb8>
    54ec:	00800304 	movi	r2,12
    54f0:	a8800015 	stw	r2,0(r21)
    54f4:	8080030b 	ldhu	r2,12(r16)
    54f8:	003f5006 	br	523c <__sfvwrite_r+0x1fc>

000054fc <_fwalk>:
    54fc:	defff704 	addi	sp,sp,-36
    5500:	dd000415 	stw	r20,16(sp)
    5504:	dfc00815 	stw	ra,32(sp)
    5508:	ddc00715 	stw	r23,28(sp)
    550c:	dd800615 	stw	r22,24(sp)
    5510:	dd400515 	stw	r21,20(sp)
    5514:	dcc00315 	stw	r19,12(sp)
    5518:	dc800215 	stw	r18,8(sp)
    551c:	dc400115 	stw	r17,4(sp)
    5520:	dc000015 	stw	r16,0(sp)
    5524:	2500b804 	addi	r20,r4,736
    5528:	a0002326 	beq	r20,zero,55b8 <_fwalk+0xbc>
    552c:	282b883a 	mov	r21,r5
    5530:	002f883a 	mov	r23,zero
    5534:	05800044 	movi	r22,1
    5538:	04ffffc4 	movi	r19,-1
    553c:	a4400117 	ldw	r17,4(r20)
    5540:	a4800217 	ldw	r18,8(r20)
    5544:	8c7fffc4 	addi	r17,r17,-1
    5548:	88000d16 	blt	r17,zero,5580 <_fwalk+0x84>
    554c:	94000304 	addi	r16,r18,12
    5550:	94800384 	addi	r18,r18,14
    5554:	8080000b 	ldhu	r2,0(r16)
    5558:	8c7fffc4 	addi	r17,r17,-1
    555c:	813ffd04 	addi	r4,r16,-12
    5560:	b080042e 	bgeu	r22,r2,5574 <_fwalk+0x78>
    5564:	9080000f 	ldh	r2,0(r18)
    5568:	14c00226 	beq	r2,r19,5574 <_fwalk+0x78>
    556c:	a83ee83a 	callr	r21
    5570:	b8aeb03a 	or	r23,r23,r2
    5574:	84001a04 	addi	r16,r16,104
    5578:	94801a04 	addi	r18,r18,104
    557c:	8cfff51e 	bne	r17,r19,5554 <_fwalk+0x58>
    5580:	a5000017 	ldw	r20,0(r20)
    5584:	a03fed1e 	bne	r20,zero,553c <_fwalk+0x40>
    5588:	b805883a 	mov	r2,r23
    558c:	dfc00817 	ldw	ra,32(sp)
    5590:	ddc00717 	ldw	r23,28(sp)
    5594:	dd800617 	ldw	r22,24(sp)
    5598:	dd400517 	ldw	r21,20(sp)
    559c:	dd000417 	ldw	r20,16(sp)
    55a0:	dcc00317 	ldw	r19,12(sp)
    55a4:	dc800217 	ldw	r18,8(sp)
    55a8:	dc400117 	ldw	r17,4(sp)
    55ac:	dc000017 	ldw	r16,0(sp)
    55b0:	dec00904 	addi	sp,sp,36
    55b4:	f800283a 	ret
    55b8:	002f883a 	mov	r23,zero
    55bc:	003ff206 	br	5588 <_fwalk+0x8c>

000055c0 <_fwalk_reent>:
    55c0:	defff704 	addi	sp,sp,-36
    55c4:	dd000415 	stw	r20,16(sp)
    55c8:	dfc00815 	stw	ra,32(sp)
    55cc:	ddc00715 	stw	r23,28(sp)
    55d0:	dd800615 	stw	r22,24(sp)
    55d4:	dd400515 	stw	r21,20(sp)
    55d8:	dcc00315 	stw	r19,12(sp)
    55dc:	dc800215 	stw	r18,8(sp)
    55e0:	dc400115 	stw	r17,4(sp)
    55e4:	dc000015 	stw	r16,0(sp)
    55e8:	2500b804 	addi	r20,r4,736
    55ec:	a0002326 	beq	r20,zero,567c <_fwalk_reent+0xbc>
    55f0:	282b883a 	mov	r21,r5
    55f4:	2027883a 	mov	r19,r4
    55f8:	002f883a 	mov	r23,zero
    55fc:	05800044 	movi	r22,1
    5600:	04bfffc4 	movi	r18,-1
    5604:	a4400117 	ldw	r17,4(r20)
    5608:	a4000217 	ldw	r16,8(r20)
    560c:	8c7fffc4 	addi	r17,r17,-1
    5610:	88000c16 	blt	r17,zero,5644 <_fwalk_reent+0x84>
    5614:	84000304 	addi	r16,r16,12
    5618:	8080000b 	ldhu	r2,0(r16)
    561c:	8c7fffc4 	addi	r17,r17,-1
    5620:	817ffd04 	addi	r5,r16,-12
    5624:	b080052e 	bgeu	r22,r2,563c <_fwalk_reent+0x7c>
    5628:	8080008f 	ldh	r2,2(r16)
    562c:	9809883a 	mov	r4,r19
    5630:	14800226 	beq	r2,r18,563c <_fwalk_reent+0x7c>
    5634:	a83ee83a 	callr	r21
    5638:	b8aeb03a 	or	r23,r23,r2
    563c:	84001a04 	addi	r16,r16,104
    5640:	8cbff51e 	bne	r17,r18,5618 <_fwalk_reent+0x58>
    5644:	a5000017 	ldw	r20,0(r20)
    5648:	a03fee1e 	bne	r20,zero,5604 <_fwalk_reent+0x44>
    564c:	b805883a 	mov	r2,r23
    5650:	dfc00817 	ldw	ra,32(sp)
    5654:	ddc00717 	ldw	r23,28(sp)
    5658:	dd800617 	ldw	r22,24(sp)
    565c:	dd400517 	ldw	r21,20(sp)
    5660:	dd000417 	ldw	r20,16(sp)
    5664:	dcc00317 	ldw	r19,12(sp)
    5668:	dc800217 	ldw	r18,8(sp)
    566c:	dc400117 	ldw	r17,4(sp)
    5670:	dc000017 	ldw	r16,0(sp)
    5674:	dec00904 	addi	sp,sp,36
    5678:	f800283a 	ret
    567c:	002f883a 	mov	r23,zero
    5680:	003ff206 	br	564c <_fwalk_reent+0x8c>

00005684 <_setlocale_r>:
    5684:	30001b26 	beq	r6,zero,56f4 <_setlocale_r+0x70>
    5688:	014000f4 	movhi	r5,3
    568c:	defffe04 	addi	sp,sp,-8
    5690:	29530704 	addi	r5,r5,19484
    5694:	3009883a 	mov	r4,r6
    5698:	dc000015 	stw	r16,0(sp)
    569c:	dfc00115 	stw	ra,4(sp)
    56a0:	3021883a 	mov	r16,r6
    56a4:	0007d3c0 	call	7d3c <strcmp>
    56a8:	1000061e 	bne	r2,zero,56c4 <_setlocale_r+0x40>
    56ac:	008000f4 	movhi	r2,3
    56b0:	10930604 	addi	r2,r2,19480
    56b4:	dfc00117 	ldw	ra,4(sp)
    56b8:	dc000017 	ldw	r16,0(sp)
    56bc:	dec00204 	addi	sp,sp,8
    56c0:	f800283a 	ret
    56c4:	014000f4 	movhi	r5,3
    56c8:	29530604 	addi	r5,r5,19480
    56cc:	8009883a 	mov	r4,r16
    56d0:	0007d3c0 	call	7d3c <strcmp>
    56d4:	103ff526 	beq	r2,zero,56ac <_setlocale_r+0x28>
    56d8:	014000f4 	movhi	r5,3
    56dc:	2952f104 	addi	r5,r5,19396
    56e0:	8009883a 	mov	r4,r16
    56e4:	0007d3c0 	call	7d3c <strcmp>
    56e8:	103ff026 	beq	r2,zero,56ac <_setlocale_r+0x28>
    56ec:	0005883a 	mov	r2,zero
    56f0:	003ff006 	br	56b4 <_setlocale_r+0x30>
    56f4:	008000f4 	movhi	r2,3
    56f8:	10930604 	addi	r2,r2,19480
    56fc:	f800283a 	ret

00005700 <__locale_charset>:
    5700:	008000f4 	movhi	r2,3
    5704:	10950204 	addi	r2,r2,21512
    5708:	f800283a 	ret

0000570c <__locale_mb_cur_max>:
    570c:	008000f4 	movhi	r2,3
    5710:	109aa204 	addi	r2,r2,27272
    5714:	10800017 	ldw	r2,0(r2)
    5718:	f800283a 	ret

0000571c <__locale_msgcharset>:
    571c:	008000f4 	movhi	r2,3
    5720:	1094fa04 	addi	r2,r2,21480
    5724:	f800283a 	ret

00005728 <__locale_cjk_lang>:
    5728:	0005883a 	mov	r2,zero
    572c:	f800283a 	ret

00005730 <_localeconv_r>:
    5730:	008000f4 	movhi	r2,3
    5734:	10950a04 	addi	r2,r2,21544
    5738:	f800283a 	ret

0000573c <setlocale>:
    573c:	008000f4 	movhi	r2,3
    5740:	109aa104 	addi	r2,r2,27268
    5744:	280d883a 	mov	r6,r5
    5748:	200b883a 	mov	r5,r4
    574c:	11000017 	ldw	r4,0(r2)
    5750:	00056841 	jmpi	5684 <_setlocale_r>

00005754 <localeconv>:
    5754:	008000f4 	movhi	r2,3
    5758:	10950a04 	addi	r2,r2,21544
    575c:	f800283a 	ret

00005760 <__smakebuf_r>:
    5760:	2880030b 	ldhu	r2,12(r5)
    5764:	10c0008c 	andi	r3,r2,2
    5768:	1800411e 	bne	r3,zero,5870 <__smakebuf_r+0x110>
    576c:	deffec04 	addi	sp,sp,-80
    5770:	dc000f15 	stw	r16,60(sp)
    5774:	2821883a 	mov	r16,r5
    5778:	2940038f 	ldh	r5,14(r5)
    577c:	dc401015 	stw	r17,64(sp)
    5780:	dfc01315 	stw	ra,76(sp)
    5784:	dcc01215 	stw	r19,72(sp)
    5788:	dc801115 	stw	r18,68(sp)
    578c:	2023883a 	mov	r17,r4
    5790:	28001c16 	blt	r5,zero,5804 <__smakebuf_r+0xa4>
    5794:	d80d883a 	mov	r6,sp
    5798:	00098e40 	call	98e4 <_fstat_r>
    579c:	10001816 	blt	r2,zero,5800 <__smakebuf_r+0xa0>
    57a0:	d8800117 	ldw	r2,4(sp)
    57a4:	00e00014 	movui	r3,32768
    57a8:	10bc000c 	andi	r2,r2,61440
    57ac:	14c80020 	cmpeqi	r19,r2,8192
    57b0:	10c03726 	beq	r2,r3,5890 <__smakebuf_r+0x130>
    57b4:	80c0030b 	ldhu	r3,12(r16)
    57b8:	18c20014 	ori	r3,r3,2048
    57bc:	80c0030d 	sth	r3,12(r16)
    57c0:	00c80004 	movi	r3,8192
    57c4:	10c0521e 	bne	r2,r3,5910 <__smakebuf_r+0x1b0>
    57c8:	8140038f 	ldh	r5,14(r16)
    57cc:	8809883a 	mov	r4,r17
    57d0:	00099400 	call	9940 <_isatty_r>
    57d4:	10004c26 	beq	r2,zero,5908 <__smakebuf_r+0x1a8>
    57d8:	8080030b 	ldhu	r2,12(r16)
    57dc:	80c010c4 	addi	r3,r16,67
    57e0:	80c00015 	stw	r3,0(r16)
    57e4:	10800054 	ori	r2,r2,1
    57e8:	8080030d 	sth	r2,12(r16)
    57ec:	00800044 	movi	r2,1
    57f0:	80c00415 	stw	r3,16(r16)
    57f4:	80800515 	stw	r2,20(r16)
    57f8:	04810004 	movi	r18,1024
    57fc:	00000706 	br	581c <__smakebuf_r+0xbc>
    5800:	8080030b 	ldhu	r2,12(r16)
    5804:	10c0200c 	andi	r3,r2,128
    5808:	18001f1e 	bne	r3,zero,5888 <__smakebuf_r+0x128>
    580c:	04810004 	movi	r18,1024
    5810:	10820014 	ori	r2,r2,2048
    5814:	8080030d 	sth	r2,12(r16)
    5818:	0027883a 	mov	r19,zero
    581c:	900b883a 	mov	r5,r18
    5820:	8809883a 	mov	r4,r17
    5824:	000591c0 	call	591c <_malloc_r>
    5828:	10002c26 	beq	r2,zero,58dc <__smakebuf_r+0x17c>
    582c:	80c0030b 	ldhu	r3,12(r16)
    5830:	01000034 	movhi	r4,0
    5834:	21121d04 	addi	r4,r4,18548
    5838:	89000f15 	stw	r4,60(r17)
    583c:	18c02014 	ori	r3,r3,128
    5840:	80c0030d 	sth	r3,12(r16)
    5844:	80800015 	stw	r2,0(r16)
    5848:	80800415 	stw	r2,16(r16)
    584c:	84800515 	stw	r18,20(r16)
    5850:	98001a1e 	bne	r19,zero,58bc <__smakebuf_r+0x15c>
    5854:	dfc01317 	ldw	ra,76(sp)
    5858:	dcc01217 	ldw	r19,72(sp)
    585c:	dc801117 	ldw	r18,68(sp)
    5860:	dc401017 	ldw	r17,64(sp)
    5864:	dc000f17 	ldw	r16,60(sp)
    5868:	dec01404 	addi	sp,sp,80
    586c:	f800283a 	ret
    5870:	288010c4 	addi	r2,r5,67
    5874:	28800015 	stw	r2,0(r5)
    5878:	28800415 	stw	r2,16(r5)
    587c:	00800044 	movi	r2,1
    5880:	28800515 	stw	r2,20(r5)
    5884:	f800283a 	ret
    5888:	04801004 	movi	r18,64
    588c:	003fe006 	br	5810 <__smakebuf_r+0xb0>
    5890:	81000a17 	ldw	r4,40(r16)
    5894:	00c00034 	movhi	r3,0
    5898:	18df3604 	addi	r3,r3,31960
    589c:	20ffc51e 	bne	r4,r3,57b4 <__smakebuf_r+0x54>
    58a0:	8080030b 	ldhu	r2,12(r16)
    58a4:	04810004 	movi	r18,1024
    58a8:	84801315 	stw	r18,76(r16)
    58ac:	1484b03a 	or	r2,r2,r18
    58b0:	8080030d 	sth	r2,12(r16)
    58b4:	0027883a 	mov	r19,zero
    58b8:	003fd806 	br	581c <__smakebuf_r+0xbc>
    58bc:	8140038f 	ldh	r5,14(r16)
    58c0:	8809883a 	mov	r4,r17
    58c4:	00099400 	call	9940 <_isatty_r>
    58c8:	103fe226 	beq	r2,zero,5854 <__smakebuf_r+0xf4>
    58cc:	8080030b 	ldhu	r2,12(r16)
    58d0:	10800054 	ori	r2,r2,1
    58d4:	8080030d 	sth	r2,12(r16)
    58d8:	003fde06 	br	5854 <__smakebuf_r+0xf4>
    58dc:	8080030b 	ldhu	r2,12(r16)
    58e0:	10c0800c 	andi	r3,r2,512
    58e4:	183fdb1e 	bne	r3,zero,5854 <__smakebuf_r+0xf4>
    58e8:	10800094 	ori	r2,r2,2
    58ec:	80c010c4 	addi	r3,r16,67
    58f0:	8080030d 	sth	r2,12(r16)
    58f4:	00800044 	movi	r2,1
    58f8:	80c00015 	stw	r3,0(r16)
    58fc:	80c00415 	stw	r3,16(r16)
    5900:	80800515 	stw	r2,20(r16)
    5904:	003fd306 	br	5854 <__smakebuf_r+0xf4>
    5908:	04810004 	movi	r18,1024
    590c:	003fc306 	br	581c <__smakebuf_r+0xbc>
    5910:	0027883a 	mov	r19,zero
    5914:	04810004 	movi	r18,1024
    5918:	003fc006 	br	581c <__smakebuf_r+0xbc>

0000591c <_malloc_r>:
    591c:	defff504 	addi	sp,sp,-44
    5920:	dc800315 	stw	r18,12(sp)
    5924:	dfc00a15 	stw	ra,40(sp)
    5928:	df000915 	stw	fp,36(sp)
    592c:	ddc00815 	stw	r23,32(sp)
    5930:	dd800715 	stw	r22,28(sp)
    5934:	dd400615 	stw	r21,24(sp)
    5938:	dd000515 	stw	r20,20(sp)
    593c:	dcc00415 	stw	r19,16(sp)
    5940:	dc400215 	stw	r17,8(sp)
    5944:	dc000115 	stw	r16,4(sp)
    5948:	288002c4 	addi	r2,r5,11
    594c:	00c00584 	movi	r3,22
    5950:	2025883a 	mov	r18,r4
    5954:	18807f2e 	bgeu	r3,r2,5b54 <_malloc_r+0x238>
    5958:	047ffe04 	movi	r17,-8
    595c:	1462703a 	and	r17,r2,r17
    5960:	8800a316 	blt	r17,zero,5bf0 <_malloc_r+0x2d4>
    5964:	8940a236 	bltu	r17,r5,5bf0 <_malloc_r+0x2d4>
    5968:	000d90c0 	call	d90c <__malloc_lock>
    596c:	00807dc4 	movi	r2,503
    5970:	1441e92e 	bgeu	r2,r17,6118 <_malloc_r+0x7fc>
    5974:	8804d27a 	srli	r2,r17,9
    5978:	1000a126 	beq	r2,zero,5c00 <_malloc_r+0x2e4>
    597c:	00c00104 	movi	r3,4
    5980:	18811e36 	bltu	r3,r2,5dfc <_malloc_r+0x4e0>
    5984:	8804d1ba 	srli	r2,r17,6
    5988:	12000e44 	addi	r8,r2,57
    598c:	11c00e04 	addi	r7,r2,56
    5990:	4209883a 	add	r4,r8,r8
    5994:	04c000f4 	movhi	r19,3
    5998:	2109883a 	add	r4,r4,r4
    599c:	9cd51804 	addi	r19,r19,21600
    59a0:	2109883a 	add	r4,r4,r4
    59a4:	9909883a 	add	r4,r19,r4
    59a8:	24000117 	ldw	r16,4(r4)
    59ac:	213ffe04 	addi	r4,r4,-8
    59b0:	24009726 	beq	r4,r16,5c10 <_malloc_r+0x2f4>
    59b4:	80800117 	ldw	r2,4(r16)
    59b8:	01bfff04 	movi	r6,-4
    59bc:	014003c4 	movi	r5,15
    59c0:	1184703a 	and	r2,r2,r6
    59c4:	1447c83a 	sub	r3,r2,r17
    59c8:	28c00716 	blt	r5,r3,59e8 <_malloc_r+0xcc>
    59cc:	1800920e 	bge	r3,zero,5c18 <_malloc_r+0x2fc>
    59d0:	84000317 	ldw	r16,12(r16)
    59d4:	24008e26 	beq	r4,r16,5c10 <_malloc_r+0x2f4>
    59d8:	80800117 	ldw	r2,4(r16)
    59dc:	1184703a 	and	r2,r2,r6
    59e0:	1447c83a 	sub	r3,r2,r17
    59e4:	28fff90e 	bge	r5,r3,59cc <_malloc_r+0xb0>
    59e8:	3809883a 	mov	r4,r7
    59ec:	018000f4 	movhi	r6,3
    59f0:	9c000417 	ldw	r16,16(r19)
    59f4:	31951804 	addi	r6,r6,21600
    59f8:	32000204 	addi	r8,r6,8
    59fc:	82013426 	beq	r16,r8,5ed0 <_malloc_r+0x5b4>
    5a00:	80c00117 	ldw	r3,4(r16)
    5a04:	00bfff04 	movi	r2,-4
    5a08:	188e703a 	and	r7,r3,r2
    5a0c:	3c45c83a 	sub	r2,r7,r17
    5a10:	00c003c4 	movi	r3,15
    5a14:	18811f16 	blt	r3,r2,5e94 <_malloc_r+0x578>
    5a18:	32000515 	stw	r8,20(r6)
    5a1c:	32000415 	stw	r8,16(r6)
    5a20:	10007f0e 	bge	r2,zero,5c20 <_malloc_r+0x304>
    5a24:	00807fc4 	movi	r2,511
    5a28:	11c0fd36 	bltu	r2,r7,5e20 <_malloc_r+0x504>
    5a2c:	3806d0fa 	srli	r3,r7,3
    5a30:	01c00044 	movi	r7,1
    5a34:	30800117 	ldw	r2,4(r6)
    5a38:	19400044 	addi	r5,r3,1
    5a3c:	294b883a 	add	r5,r5,r5
    5a40:	1807d0ba 	srai	r3,r3,2
    5a44:	294b883a 	add	r5,r5,r5
    5a48:	294b883a 	add	r5,r5,r5
    5a4c:	298b883a 	add	r5,r5,r6
    5a50:	38c6983a 	sll	r3,r7,r3
    5a54:	29c00017 	ldw	r7,0(r5)
    5a58:	2a7ffe04 	addi	r9,r5,-8
    5a5c:	1886b03a 	or	r3,r3,r2
    5a60:	82400315 	stw	r9,12(r16)
    5a64:	81c00215 	stw	r7,8(r16)
    5a68:	30c00115 	stw	r3,4(r6)
    5a6c:	2c000015 	stw	r16,0(r5)
    5a70:	3c000315 	stw	r16,12(r7)
    5a74:	2005d0ba 	srai	r2,r4,2
    5a78:	01400044 	movi	r5,1
    5a7c:	288a983a 	sll	r5,r5,r2
    5a80:	19406f36 	bltu	r3,r5,5c40 <_malloc_r+0x324>
    5a84:	28c4703a 	and	r2,r5,r3
    5a88:	10000a1e 	bne	r2,zero,5ab4 <_malloc_r+0x198>
    5a8c:	00bfff04 	movi	r2,-4
    5a90:	294b883a 	add	r5,r5,r5
    5a94:	2088703a 	and	r4,r4,r2
    5a98:	28c4703a 	and	r2,r5,r3
    5a9c:	21000104 	addi	r4,r4,4
    5aa0:	1000041e 	bne	r2,zero,5ab4 <_malloc_r+0x198>
    5aa4:	294b883a 	add	r5,r5,r5
    5aa8:	28c4703a 	and	r2,r5,r3
    5aac:	21000104 	addi	r4,r4,4
    5ab0:	103ffc26 	beq	r2,zero,5aa4 <_malloc_r+0x188>
    5ab4:	02bfff04 	movi	r10,-4
    5ab8:	024003c4 	movi	r9,15
    5abc:	21800044 	addi	r6,r4,1
    5ac0:	318d883a 	add	r6,r6,r6
    5ac4:	318d883a 	add	r6,r6,r6
    5ac8:	318d883a 	add	r6,r6,r6
    5acc:	998d883a 	add	r6,r19,r6
    5ad0:	333ffe04 	addi	r12,r6,-8
    5ad4:	2017883a 	mov	r11,r4
    5ad8:	31800104 	addi	r6,r6,4
    5adc:	34000017 	ldw	r16,0(r6)
    5ae0:	31fffd04 	addi	r7,r6,-12
    5ae4:	81c0041e 	bne	r16,r7,5af8 <_malloc_r+0x1dc>
    5ae8:	0000fb06 	br	5ed8 <_malloc_r+0x5bc>
    5aec:	1801030e 	bge	r3,zero,5efc <_malloc_r+0x5e0>
    5af0:	84000317 	ldw	r16,12(r16)
    5af4:	81c0f826 	beq	r16,r7,5ed8 <_malloc_r+0x5bc>
    5af8:	80800117 	ldw	r2,4(r16)
    5afc:	1284703a 	and	r2,r2,r10
    5b00:	1447c83a 	sub	r3,r2,r17
    5b04:	48fff90e 	bge	r9,r3,5aec <_malloc_r+0x1d0>
    5b08:	80800317 	ldw	r2,12(r16)
    5b0c:	81000217 	ldw	r4,8(r16)
    5b10:	89400054 	ori	r5,r17,1
    5b14:	81400115 	stw	r5,4(r16)
    5b18:	20800315 	stw	r2,12(r4)
    5b1c:	11000215 	stw	r4,8(r2)
    5b20:	8463883a 	add	r17,r16,r17
    5b24:	9c400515 	stw	r17,20(r19)
    5b28:	9c400415 	stw	r17,16(r19)
    5b2c:	18800054 	ori	r2,r3,1
    5b30:	88800115 	stw	r2,4(r17)
    5b34:	8a000315 	stw	r8,12(r17)
    5b38:	8a000215 	stw	r8,8(r17)
    5b3c:	88e3883a 	add	r17,r17,r3
    5b40:	88c00015 	stw	r3,0(r17)
    5b44:	9009883a 	mov	r4,r18
    5b48:	000da2c0 	call	da2c <__malloc_unlock>
    5b4c:	80800204 	addi	r2,r16,8
    5b50:	00001b06 	br	5bc0 <_malloc_r+0x2a4>
    5b54:	04400404 	movi	r17,16
    5b58:	89402536 	bltu	r17,r5,5bf0 <_malloc_r+0x2d4>
    5b5c:	000d90c0 	call	d90c <__malloc_lock>
    5b60:	00800184 	movi	r2,6
    5b64:	01000084 	movi	r4,2
    5b68:	04c000f4 	movhi	r19,3
    5b6c:	1085883a 	add	r2,r2,r2
    5b70:	9cd51804 	addi	r19,r19,21600
    5b74:	1085883a 	add	r2,r2,r2
    5b78:	9885883a 	add	r2,r19,r2
    5b7c:	14000117 	ldw	r16,4(r2)
    5b80:	10fffe04 	addi	r3,r2,-8
    5b84:	80c0d926 	beq	r16,r3,5eec <_malloc_r+0x5d0>
    5b88:	80c00117 	ldw	r3,4(r16)
    5b8c:	81000317 	ldw	r4,12(r16)
    5b90:	00bfff04 	movi	r2,-4
    5b94:	1884703a 	and	r2,r3,r2
    5b98:	81400217 	ldw	r5,8(r16)
    5b9c:	8085883a 	add	r2,r16,r2
    5ba0:	10c00117 	ldw	r3,4(r2)
    5ba4:	29000315 	stw	r4,12(r5)
    5ba8:	21400215 	stw	r5,8(r4)
    5bac:	18c00054 	ori	r3,r3,1
    5bb0:	10c00115 	stw	r3,4(r2)
    5bb4:	9009883a 	mov	r4,r18
    5bb8:	000da2c0 	call	da2c <__malloc_unlock>
    5bbc:	80800204 	addi	r2,r16,8
    5bc0:	dfc00a17 	ldw	ra,40(sp)
    5bc4:	df000917 	ldw	fp,36(sp)
    5bc8:	ddc00817 	ldw	r23,32(sp)
    5bcc:	dd800717 	ldw	r22,28(sp)
    5bd0:	dd400617 	ldw	r21,24(sp)
    5bd4:	dd000517 	ldw	r20,20(sp)
    5bd8:	dcc00417 	ldw	r19,16(sp)
    5bdc:	dc800317 	ldw	r18,12(sp)
    5be0:	dc400217 	ldw	r17,8(sp)
    5be4:	dc000117 	ldw	r16,4(sp)
    5be8:	dec00b04 	addi	sp,sp,44
    5bec:	f800283a 	ret
    5bf0:	00800304 	movi	r2,12
    5bf4:	90800015 	stw	r2,0(r18)
    5bf8:	0005883a 	mov	r2,zero
    5bfc:	003ff006 	br	5bc0 <_malloc_r+0x2a4>
    5c00:	01002004 	movi	r4,128
    5c04:	02001004 	movi	r8,64
    5c08:	01c00fc4 	movi	r7,63
    5c0c:	003f6106 	br	5994 <_malloc_r+0x78>
    5c10:	4009883a 	mov	r4,r8
    5c14:	003f7506 	br	59ec <_malloc_r+0xd0>
    5c18:	81000317 	ldw	r4,12(r16)
    5c1c:	003fde06 	br	5b98 <_malloc_r+0x27c>
    5c20:	81c5883a 	add	r2,r16,r7
    5c24:	11400117 	ldw	r5,4(r2)
    5c28:	9009883a 	mov	r4,r18
    5c2c:	29400054 	ori	r5,r5,1
    5c30:	11400115 	stw	r5,4(r2)
    5c34:	000da2c0 	call	da2c <__malloc_unlock>
    5c38:	80800204 	addi	r2,r16,8
    5c3c:	003fe006 	br	5bc0 <_malloc_r+0x2a4>
    5c40:	9c000217 	ldw	r16,8(r19)
    5c44:	00bfff04 	movi	r2,-4
    5c48:	85800117 	ldw	r22,4(r16)
    5c4c:	b0ac703a 	and	r22,r22,r2
    5c50:	b4400336 	bltu	r22,r17,5c60 <_malloc_r+0x344>
    5c54:	b445c83a 	sub	r2,r22,r17
    5c58:	00c003c4 	movi	r3,15
    5c5c:	18805d16 	blt	r3,r2,5dd4 <_malloc_r+0x4b8>
    5c60:	05c000f4 	movhi	r23,3
    5c64:	00800134 	movhi	r2,4
    5c68:	10a1b404 	addi	r2,r2,-31024
    5c6c:	bddaa304 	addi	r23,r23,27276
    5c70:	15400017 	ldw	r21,0(r2)
    5c74:	b8c00017 	ldw	r3,0(r23)
    5c78:	00bfffc4 	movi	r2,-1
    5c7c:	858d883a 	add	r6,r16,r22
    5c80:	8d6b883a 	add	r21,r17,r21
    5c84:	1880ea26 	beq	r3,r2,6030 <_malloc_r+0x714>
    5c88:	ad4403c4 	addi	r21,r21,4111
    5c8c:	00bc0004 	movi	r2,-4096
    5c90:	a8aa703a 	and	r21,r21,r2
    5c94:	a80b883a 	mov	r5,r21
    5c98:	9009883a 	mov	r4,r18
    5c9c:	d9800015 	stw	r6,0(sp)
    5ca0:	0007bac0 	call	7bac <_sbrk_r>
    5ca4:	1029883a 	mov	r20,r2
    5ca8:	00bfffc4 	movi	r2,-1
    5cac:	d9800017 	ldw	r6,0(sp)
    5cb0:	a080e826 	beq	r20,r2,6054 <_malloc_r+0x738>
    5cb4:	a180a636 	bltu	r20,r6,5f50 <_malloc_r+0x634>
    5cb8:	07000134 	movhi	fp,4
    5cbc:	e721d604 	addi	fp,fp,-30888
    5cc0:	e0800017 	ldw	r2,0(fp)
    5cc4:	a887883a 	add	r3,r21,r2
    5cc8:	e0c00015 	stw	r3,0(fp)
    5ccc:	3500e626 	beq	r6,r20,6068 <_malloc_r+0x74c>
    5cd0:	b9000017 	ldw	r4,0(r23)
    5cd4:	00bfffc4 	movi	r2,-1
    5cd8:	2080ee26 	beq	r4,r2,6094 <_malloc_r+0x778>
    5cdc:	a185c83a 	sub	r2,r20,r6
    5ce0:	10c5883a 	add	r2,r2,r3
    5ce4:	e0800015 	stw	r2,0(fp)
    5ce8:	a0c001cc 	andi	r3,r20,7
    5cec:	1800bc26 	beq	r3,zero,5fe0 <_malloc_r+0x6c4>
    5cf0:	a0e9c83a 	sub	r20,r20,r3
    5cf4:	00840204 	movi	r2,4104
    5cf8:	a5000204 	addi	r20,r20,8
    5cfc:	10c7c83a 	sub	r3,r2,r3
    5d00:	a545883a 	add	r2,r20,r21
    5d04:	1083ffcc 	andi	r2,r2,4095
    5d08:	18abc83a 	sub	r21,r3,r2
    5d0c:	a80b883a 	mov	r5,r21
    5d10:	9009883a 	mov	r4,r18
    5d14:	0007bac0 	call	7bac <_sbrk_r>
    5d18:	00ffffc4 	movi	r3,-1
    5d1c:	10c0e126 	beq	r2,r3,60a4 <_malloc_r+0x788>
    5d20:	1505c83a 	sub	r2,r2,r20
    5d24:	1545883a 	add	r2,r2,r21
    5d28:	10800054 	ori	r2,r2,1
    5d2c:	e0c00017 	ldw	r3,0(fp)
    5d30:	9d000215 	stw	r20,8(r19)
    5d34:	a0800115 	stw	r2,4(r20)
    5d38:	a8c7883a 	add	r3,r21,r3
    5d3c:	e0c00015 	stw	r3,0(fp)
    5d40:	84c00e26 	beq	r16,r19,5d7c <_malloc_r+0x460>
    5d44:	018003c4 	movi	r6,15
    5d48:	3580a72e 	bgeu	r6,r22,5fe8 <_malloc_r+0x6cc>
    5d4c:	81400117 	ldw	r5,4(r16)
    5d50:	013ffe04 	movi	r4,-8
    5d54:	b0bffd04 	addi	r2,r22,-12
    5d58:	1104703a 	and	r2,r2,r4
    5d5c:	2900004c 	andi	r4,r5,1
    5d60:	2088b03a 	or	r4,r4,r2
    5d64:	81000115 	stw	r4,4(r16)
    5d68:	01400144 	movi	r5,5
    5d6c:	8089883a 	add	r4,r16,r2
    5d70:	21400115 	stw	r5,4(r4)
    5d74:	21400215 	stw	r5,8(r4)
    5d78:	3080cd36 	bltu	r6,r2,60b0 <_malloc_r+0x794>
    5d7c:	00800134 	movhi	r2,4
    5d80:	10a1b304 	addi	r2,r2,-31028
    5d84:	11000017 	ldw	r4,0(r2)
    5d88:	20c0012e 	bgeu	r4,r3,5d90 <_malloc_r+0x474>
    5d8c:	10c00015 	stw	r3,0(r2)
    5d90:	00800134 	movhi	r2,4
    5d94:	10a1b204 	addi	r2,r2,-31032
    5d98:	11000017 	ldw	r4,0(r2)
    5d9c:	9c000217 	ldw	r16,8(r19)
    5da0:	20c0012e 	bgeu	r4,r3,5da8 <_malloc_r+0x48c>
    5da4:	10c00015 	stw	r3,0(r2)
    5da8:	80c00117 	ldw	r3,4(r16)
    5dac:	00bfff04 	movi	r2,-4
    5db0:	1886703a 	and	r3,r3,r2
    5db4:	1c45c83a 	sub	r2,r3,r17
    5db8:	1c400236 	bltu	r3,r17,5dc4 <_malloc_r+0x4a8>
    5dbc:	00c003c4 	movi	r3,15
    5dc0:	18800416 	blt	r3,r2,5dd4 <_malloc_r+0x4b8>
    5dc4:	9009883a 	mov	r4,r18
    5dc8:	000da2c0 	call	da2c <__malloc_unlock>
    5dcc:	0005883a 	mov	r2,zero
    5dd0:	003f7b06 	br	5bc0 <_malloc_r+0x2a4>
    5dd4:	88c00054 	ori	r3,r17,1
    5dd8:	80c00115 	stw	r3,4(r16)
    5ddc:	8463883a 	add	r17,r16,r17
    5de0:	10800054 	ori	r2,r2,1
    5de4:	9c400215 	stw	r17,8(r19)
    5de8:	88800115 	stw	r2,4(r17)
    5dec:	9009883a 	mov	r4,r18
    5df0:	000da2c0 	call	da2c <__malloc_unlock>
    5df4:	80800204 	addi	r2,r16,8
    5df8:	003f7106 	br	5bc0 <_malloc_r+0x2a4>
    5dfc:	00c00504 	movi	r3,20
    5e00:	18804a2e 	bgeu	r3,r2,5f2c <_malloc_r+0x610>
    5e04:	00c01504 	movi	r3,84
    5e08:	18806e36 	bltu	r3,r2,5fc4 <_malloc_r+0x6a8>
    5e0c:	8804d33a 	srli	r2,r17,12
    5e10:	12001bc4 	addi	r8,r2,111
    5e14:	11c01b84 	addi	r7,r2,110
    5e18:	4209883a 	add	r4,r8,r8
    5e1c:	003edd06 	br	5994 <_malloc_r+0x78>
    5e20:	3804d27a 	srli	r2,r7,9
    5e24:	00c00104 	movi	r3,4
    5e28:	1880442e 	bgeu	r3,r2,5f3c <_malloc_r+0x620>
    5e2c:	00c00504 	movi	r3,20
    5e30:	18808136 	bltu	r3,r2,6038 <_malloc_r+0x71c>
    5e34:	11401704 	addi	r5,r2,92
    5e38:	10c016c4 	addi	r3,r2,91
    5e3c:	294b883a 	add	r5,r5,r5
    5e40:	294b883a 	add	r5,r5,r5
    5e44:	294b883a 	add	r5,r5,r5
    5e48:	994b883a 	add	r5,r19,r5
    5e4c:	28800017 	ldw	r2,0(r5)
    5e50:	018000f4 	movhi	r6,3
    5e54:	297ffe04 	addi	r5,r5,-8
    5e58:	31951804 	addi	r6,r6,21600
    5e5c:	28806526 	beq	r5,r2,5ff4 <_malloc_r+0x6d8>
    5e60:	01bfff04 	movi	r6,-4
    5e64:	10c00117 	ldw	r3,4(r2)
    5e68:	1986703a 	and	r3,r3,r6
    5e6c:	38c0022e 	bgeu	r7,r3,5e78 <_malloc_r+0x55c>
    5e70:	10800217 	ldw	r2,8(r2)
    5e74:	28bffb1e 	bne	r5,r2,5e64 <_malloc_r+0x548>
    5e78:	11400317 	ldw	r5,12(r2)
    5e7c:	98c00117 	ldw	r3,4(r19)
    5e80:	81400315 	stw	r5,12(r16)
    5e84:	80800215 	stw	r2,8(r16)
    5e88:	2c000215 	stw	r16,8(r5)
    5e8c:	14000315 	stw	r16,12(r2)
    5e90:	003ef806 	br	5a74 <_malloc_r+0x158>
    5e94:	88c00054 	ori	r3,r17,1
    5e98:	80c00115 	stw	r3,4(r16)
    5e9c:	8463883a 	add	r17,r16,r17
    5ea0:	34400515 	stw	r17,20(r6)
    5ea4:	34400415 	stw	r17,16(r6)
    5ea8:	10c00054 	ori	r3,r2,1
    5eac:	8a000315 	stw	r8,12(r17)
    5eb0:	8a000215 	stw	r8,8(r17)
    5eb4:	88c00115 	stw	r3,4(r17)
    5eb8:	88a3883a 	add	r17,r17,r2
    5ebc:	88800015 	stw	r2,0(r17)
    5ec0:	9009883a 	mov	r4,r18
    5ec4:	000da2c0 	call	da2c <__malloc_unlock>
    5ec8:	80800204 	addi	r2,r16,8
    5ecc:	003f3c06 	br	5bc0 <_malloc_r+0x2a4>
    5ed0:	30c00117 	ldw	r3,4(r6)
    5ed4:	003ee706 	br	5a74 <_malloc_r+0x158>
    5ed8:	5ac00044 	addi	r11,r11,1
    5edc:	588000cc 	andi	r2,r11,3
    5ee0:	31800204 	addi	r6,r6,8
    5ee4:	103efd1e 	bne	r2,zero,5adc <_malloc_r+0x1c0>
    5ee8:	00002406 	br	5f7c <_malloc_r+0x660>
    5eec:	14000317 	ldw	r16,12(r2)
    5ef0:	143f251e 	bne	r2,r16,5b88 <_malloc_r+0x26c>
    5ef4:	21000084 	addi	r4,r4,2
    5ef8:	003ebc06 	br	59ec <_malloc_r+0xd0>
    5efc:	8085883a 	add	r2,r16,r2
    5f00:	10c00117 	ldw	r3,4(r2)
    5f04:	81000317 	ldw	r4,12(r16)
    5f08:	81400217 	ldw	r5,8(r16)
    5f0c:	18c00054 	ori	r3,r3,1
    5f10:	10c00115 	stw	r3,4(r2)
    5f14:	29000315 	stw	r4,12(r5)
    5f18:	21400215 	stw	r5,8(r4)
    5f1c:	9009883a 	mov	r4,r18
    5f20:	000da2c0 	call	da2c <__malloc_unlock>
    5f24:	80800204 	addi	r2,r16,8
    5f28:	003f2506 	br	5bc0 <_malloc_r+0x2a4>
    5f2c:	12001704 	addi	r8,r2,92
    5f30:	11c016c4 	addi	r7,r2,91
    5f34:	4209883a 	add	r4,r8,r8
    5f38:	003e9606 	br	5994 <_malloc_r+0x78>
    5f3c:	3804d1ba 	srli	r2,r7,6
    5f40:	11400e44 	addi	r5,r2,57
    5f44:	10c00e04 	addi	r3,r2,56
    5f48:	294b883a 	add	r5,r5,r5
    5f4c:	003fbc06 	br	5e40 <_malloc_r+0x524>
    5f50:	84ff5926 	beq	r16,r19,5cb8 <_malloc_r+0x39c>
    5f54:	008000f4 	movhi	r2,3
    5f58:	10951804 	addi	r2,r2,21600
    5f5c:	14000217 	ldw	r16,8(r2)
    5f60:	00bfff04 	movi	r2,-4
    5f64:	80c00117 	ldw	r3,4(r16)
    5f68:	1886703a 	and	r3,r3,r2
    5f6c:	003f9106 	br	5db4 <_malloc_r+0x498>
    5f70:	60800217 	ldw	r2,8(r12)
    5f74:	213fffc4 	addi	r4,r4,-1
    5f78:	1300651e 	bne	r2,r12,6110 <_malloc_r+0x7f4>
    5f7c:	208000cc 	andi	r2,r4,3
    5f80:	633ffe04 	addi	r12,r12,-8
    5f84:	103ffa1e 	bne	r2,zero,5f70 <_malloc_r+0x654>
    5f88:	98800117 	ldw	r2,4(r19)
    5f8c:	0146303a 	nor	r3,zero,r5
    5f90:	1884703a 	and	r2,r3,r2
    5f94:	98800115 	stw	r2,4(r19)
    5f98:	294b883a 	add	r5,r5,r5
    5f9c:	117f2836 	bltu	r2,r5,5c40 <_malloc_r+0x324>
    5fa0:	283f2726 	beq	r5,zero,5c40 <_malloc_r+0x324>
    5fa4:	2886703a 	and	r3,r5,r2
    5fa8:	5809883a 	mov	r4,r11
    5fac:	183ec31e 	bne	r3,zero,5abc <_malloc_r+0x1a0>
    5fb0:	294b883a 	add	r5,r5,r5
    5fb4:	2886703a 	and	r3,r5,r2
    5fb8:	21000104 	addi	r4,r4,4
    5fbc:	183ffc26 	beq	r3,zero,5fb0 <_malloc_r+0x694>
    5fc0:	003ebe06 	br	5abc <_malloc_r+0x1a0>
    5fc4:	00c05504 	movi	r3,340
    5fc8:	18801236 	bltu	r3,r2,6014 <_malloc_r+0x6f8>
    5fcc:	8804d3fa 	srli	r2,r17,15
    5fd0:	12001e04 	addi	r8,r2,120
    5fd4:	11c01dc4 	addi	r7,r2,119
    5fd8:	4209883a 	add	r4,r8,r8
    5fdc:	003e6d06 	br	5994 <_malloc_r+0x78>
    5fe0:	00c40004 	movi	r3,4096
    5fe4:	003f4606 	br	5d00 <_malloc_r+0x3e4>
    5fe8:	00800044 	movi	r2,1
    5fec:	a0800115 	stw	r2,4(r20)
    5ff0:	003f7406 	br	5dc4 <_malloc_r+0x4a8>
    5ff4:	1805d0ba 	srai	r2,r3,2
    5ff8:	01c00044 	movi	r7,1
    5ffc:	30c00117 	ldw	r3,4(r6)
    6000:	388e983a 	sll	r7,r7,r2
    6004:	2805883a 	mov	r2,r5
    6008:	38c6b03a 	or	r3,r7,r3
    600c:	30c00115 	stw	r3,4(r6)
    6010:	003f9b06 	br	5e80 <_malloc_r+0x564>
    6014:	00c15504 	movi	r3,1364
    6018:	18801a36 	bltu	r3,r2,6084 <_malloc_r+0x768>
    601c:	8804d4ba 	srli	r2,r17,18
    6020:	12001f44 	addi	r8,r2,125
    6024:	11c01f04 	addi	r7,r2,124
    6028:	4209883a 	add	r4,r8,r8
    602c:	003e5906 	br	5994 <_malloc_r+0x78>
    6030:	ad400404 	addi	r21,r21,16
    6034:	003f1706 	br	5c94 <_malloc_r+0x378>
    6038:	00c01504 	movi	r3,84
    603c:	18802336 	bltu	r3,r2,60cc <_malloc_r+0x7b0>
    6040:	3804d33a 	srli	r2,r7,12
    6044:	11401bc4 	addi	r5,r2,111
    6048:	10c01b84 	addi	r3,r2,110
    604c:	294b883a 	add	r5,r5,r5
    6050:	003f7b06 	br	5e40 <_malloc_r+0x524>
    6054:	9c000217 	ldw	r16,8(r19)
    6058:	00bfff04 	movi	r2,-4
    605c:	80c00117 	ldw	r3,4(r16)
    6060:	1886703a 	and	r3,r3,r2
    6064:	003f5306 	br	5db4 <_malloc_r+0x498>
    6068:	3083ffcc 	andi	r2,r6,4095
    606c:	103f181e 	bne	r2,zero,5cd0 <_malloc_r+0x3b4>
    6070:	99000217 	ldw	r4,8(r19)
    6074:	b545883a 	add	r2,r22,r21
    6078:	10800054 	ori	r2,r2,1
    607c:	20800115 	stw	r2,4(r4)
    6080:	003f3e06 	br	5d7c <_malloc_r+0x460>
    6084:	01003f84 	movi	r4,254
    6088:	02001fc4 	movi	r8,127
    608c:	01c01f84 	movi	r7,126
    6090:	003e4006 	br	5994 <_malloc_r+0x78>
    6094:	008000f4 	movhi	r2,3
    6098:	109aa304 	addi	r2,r2,27276
    609c:	15000015 	stw	r20,0(r2)
    60a0:	003f1106 	br	5ce8 <_malloc_r+0x3cc>
    60a4:	00800044 	movi	r2,1
    60a8:	002b883a 	mov	r21,zero
    60ac:	003f1f06 	br	5d2c <_malloc_r+0x410>
    60b0:	81400204 	addi	r5,r16,8
    60b4:	9009883a 	mov	r4,r18
    60b8:	0004d300 	call	4d30 <_free_r>
    60bc:	00800134 	movhi	r2,4
    60c0:	10a1d604 	addi	r2,r2,-30888
    60c4:	10c00017 	ldw	r3,0(r2)
    60c8:	003f2c06 	br	5d7c <_malloc_r+0x460>
    60cc:	00c05504 	movi	r3,340
    60d0:	18800536 	bltu	r3,r2,60e8 <_malloc_r+0x7cc>
    60d4:	3804d3fa 	srli	r2,r7,15
    60d8:	11401e04 	addi	r5,r2,120
    60dc:	10c01dc4 	addi	r3,r2,119
    60e0:	294b883a 	add	r5,r5,r5
    60e4:	003f5606 	br	5e40 <_malloc_r+0x524>
    60e8:	00c15504 	movi	r3,1364
    60ec:	18800536 	bltu	r3,r2,6104 <_malloc_r+0x7e8>
    60f0:	3804d4ba 	srli	r2,r7,18
    60f4:	11401f44 	addi	r5,r2,125
    60f8:	10c01f04 	addi	r3,r2,124
    60fc:	294b883a 	add	r5,r5,r5
    6100:	003f4f06 	br	5e40 <_malloc_r+0x524>
    6104:	01403f84 	movi	r5,254
    6108:	00c01f84 	movi	r3,126
    610c:	003f4c06 	br	5e40 <_malloc_r+0x524>
    6110:	98800117 	ldw	r2,4(r19)
    6114:	003fa006 	br	5f98 <_malloc_r+0x67c>
    6118:	8808d0fa 	srli	r4,r17,3
    611c:	20800044 	addi	r2,r4,1
    6120:	1085883a 	add	r2,r2,r2
    6124:	003e9006 	br	5b68 <_malloc_r+0x24c>

00006128 <memchr>:
    6128:	208000cc 	andi	r2,r4,3
    612c:	280f883a 	mov	r7,r5
    6130:	10003426 	beq	r2,zero,6204 <memchr+0xdc>
    6134:	30bfffc4 	addi	r2,r6,-1
    6138:	30001a26 	beq	r6,zero,61a4 <memchr+0x7c>
    613c:	20c00003 	ldbu	r3,0(r4)
    6140:	29803fcc 	andi	r6,r5,255
    6144:	30c0051e 	bne	r6,r3,615c <memchr+0x34>
    6148:	00001806 	br	61ac <memchr+0x84>
    614c:	10001526 	beq	r2,zero,61a4 <memchr+0x7c>
    6150:	20c00003 	ldbu	r3,0(r4)
    6154:	10bfffc4 	addi	r2,r2,-1
    6158:	30c01426 	beq	r6,r3,61ac <memchr+0x84>
    615c:	21000044 	addi	r4,r4,1
    6160:	20c000cc 	andi	r3,r4,3
    6164:	183ff91e 	bne	r3,zero,614c <memchr+0x24>
    6168:	020000c4 	movi	r8,3
    616c:	40801136 	bltu	r8,r2,61b4 <memchr+0x8c>
    6170:	10000c26 	beq	r2,zero,61a4 <memchr+0x7c>
    6174:	20c00003 	ldbu	r3,0(r4)
    6178:	29403fcc 	andi	r5,r5,255
    617c:	28c00b26 	beq	r5,r3,61ac <memchr+0x84>
    6180:	20c00044 	addi	r3,r4,1
    6184:	39803fcc 	andi	r6,r7,255
    6188:	2089883a 	add	r4,r4,r2
    618c:	00000306 	br	619c <memchr+0x74>
    6190:	18c00044 	addi	r3,r3,1
    6194:	197fffc3 	ldbu	r5,-1(r3)
    6198:	31400526 	beq	r6,r5,61b0 <memchr+0x88>
    619c:	1805883a 	mov	r2,r3
    61a0:	20fffb1e 	bne	r4,r3,6190 <memchr+0x68>
    61a4:	0005883a 	mov	r2,zero
    61a8:	f800283a 	ret
    61ac:	2005883a 	mov	r2,r4
    61b0:	f800283a 	ret
    61b4:	28c03fcc 	andi	r3,r5,255
    61b8:	1812923a 	slli	r9,r3,8
    61bc:	02ffbff4 	movhi	r11,65279
    61c0:	02a02074 	movhi	r10,32897
    61c4:	48d2b03a 	or	r9,r9,r3
    61c8:	4806943a 	slli	r3,r9,16
    61cc:	5affbfc4 	addi	r11,r11,-257
    61d0:	52a02004 	addi	r10,r10,-32640
    61d4:	48d2b03a 	or	r9,r9,r3
    61d8:	20c00017 	ldw	r3,0(r4)
    61dc:	48c6f03a 	xor	r3,r9,r3
    61e0:	1acd883a 	add	r6,r3,r11
    61e4:	00c6303a 	nor	r3,zero,r3
    61e8:	30c6703a 	and	r3,r6,r3
    61ec:	1a86703a 	and	r3,r3,r10
    61f0:	183fe01e 	bne	r3,zero,6174 <memchr+0x4c>
    61f4:	10bfff04 	addi	r2,r2,-4
    61f8:	21000104 	addi	r4,r4,4
    61fc:	40bff636 	bltu	r8,r2,61d8 <memchr+0xb0>
    6200:	003fdb06 	br	6170 <memchr+0x48>
    6204:	3005883a 	mov	r2,r6
    6208:	003fd706 	br	6168 <memchr+0x40>

0000620c <memcpy>:
    620c:	defffd04 	addi	sp,sp,-12
    6210:	dfc00215 	stw	ra,8(sp)
    6214:	dc400115 	stw	r17,4(sp)
    6218:	dc000015 	stw	r16,0(sp)
    621c:	00c003c4 	movi	r3,15
    6220:	2005883a 	mov	r2,r4
    6224:	1980452e 	bgeu	r3,r6,633c <memcpy+0x130>
    6228:	2906b03a 	or	r3,r5,r4
    622c:	18c000cc 	andi	r3,r3,3
    6230:	1800441e 	bne	r3,zero,6344 <memcpy+0x138>
    6234:	347ffc04 	addi	r17,r6,-16
    6238:	8822d13a 	srli	r17,r17,4
    623c:	28c00104 	addi	r3,r5,4
    6240:	23400104 	addi	r13,r4,4
    6244:	8820913a 	slli	r16,r17,4
    6248:	2b000204 	addi	r12,r5,8
    624c:	22c00204 	addi	r11,r4,8
    6250:	84000504 	addi	r16,r16,20
    6254:	2a800304 	addi	r10,r5,12
    6258:	22400304 	addi	r9,r4,12
    625c:	2c21883a 	add	r16,r5,r16
    6260:	2811883a 	mov	r8,r5
    6264:	200f883a 	mov	r7,r4
    6268:	41000017 	ldw	r4,0(r8)
    626c:	1fc00017 	ldw	ra,0(r3)
    6270:	63c00017 	ldw	r15,0(r12)
    6274:	39000015 	stw	r4,0(r7)
    6278:	53800017 	ldw	r14,0(r10)
    627c:	6fc00015 	stw	ra,0(r13)
    6280:	5bc00015 	stw	r15,0(r11)
    6284:	4b800015 	stw	r14,0(r9)
    6288:	18c00404 	addi	r3,r3,16
    628c:	39c00404 	addi	r7,r7,16
    6290:	42000404 	addi	r8,r8,16
    6294:	6b400404 	addi	r13,r13,16
    6298:	63000404 	addi	r12,r12,16
    629c:	5ac00404 	addi	r11,r11,16
    62a0:	52800404 	addi	r10,r10,16
    62a4:	4a400404 	addi	r9,r9,16
    62a8:	1c3fef1e 	bne	r3,r16,6268 <memcpy+0x5c>
    62ac:	89c00044 	addi	r7,r17,1
    62b0:	380e913a 	slli	r7,r7,4
    62b4:	310003cc 	andi	r4,r6,15
    62b8:	02c000c4 	movi	r11,3
    62bc:	11c7883a 	add	r3,r2,r7
    62c0:	29cb883a 	add	r5,r5,r7
    62c4:	5900212e 	bgeu	r11,r4,634c <memcpy+0x140>
    62c8:	1813883a 	mov	r9,r3
    62cc:	2811883a 	mov	r8,r5
    62d0:	200f883a 	mov	r7,r4
    62d4:	42800017 	ldw	r10,0(r8)
    62d8:	4a400104 	addi	r9,r9,4
    62dc:	39ffff04 	addi	r7,r7,-4
    62e0:	4abfff15 	stw	r10,-4(r9)
    62e4:	42000104 	addi	r8,r8,4
    62e8:	59fffa36 	bltu	r11,r7,62d4 <memcpy+0xc8>
    62ec:	213fff04 	addi	r4,r4,-4
    62f0:	2008d0ba 	srli	r4,r4,2
    62f4:	318000cc 	andi	r6,r6,3
    62f8:	21000044 	addi	r4,r4,1
    62fc:	2109883a 	add	r4,r4,r4
    6300:	2109883a 	add	r4,r4,r4
    6304:	1907883a 	add	r3,r3,r4
    6308:	290b883a 	add	r5,r5,r4
    630c:	30000626 	beq	r6,zero,6328 <memcpy+0x11c>
    6310:	198d883a 	add	r6,r3,r6
    6314:	29c00003 	ldbu	r7,0(r5)
    6318:	18c00044 	addi	r3,r3,1
    631c:	29400044 	addi	r5,r5,1
    6320:	19ffffc5 	stb	r7,-1(r3)
    6324:	19bffb1e 	bne	r3,r6,6314 <memcpy+0x108>
    6328:	dfc00217 	ldw	ra,8(sp)
    632c:	dc400117 	ldw	r17,4(sp)
    6330:	dc000017 	ldw	r16,0(sp)
    6334:	dec00304 	addi	sp,sp,12
    6338:	f800283a 	ret
    633c:	2007883a 	mov	r3,r4
    6340:	003ff206 	br	630c <memcpy+0x100>
    6344:	2007883a 	mov	r3,r4
    6348:	003ff106 	br	6310 <memcpy+0x104>
    634c:	200d883a 	mov	r6,r4
    6350:	003fee06 	br	630c <memcpy+0x100>

00006354 <memmove>:
    6354:	2005883a 	mov	r2,r4
    6358:	29000b2e 	bgeu	r5,r4,6388 <memmove+0x34>
    635c:	298f883a 	add	r7,r5,r6
    6360:	21c0092e 	bgeu	r4,r7,6388 <memmove+0x34>
    6364:	2187883a 	add	r3,r4,r6
    6368:	198bc83a 	sub	r5,r3,r6
    636c:	30004826 	beq	r6,zero,6490 <memmove+0x13c>
    6370:	39ffffc4 	addi	r7,r7,-1
    6374:	39000003 	ldbu	r4,0(r7)
    6378:	18ffffc4 	addi	r3,r3,-1
    637c:	19000005 	stb	r4,0(r3)
    6380:	28fffb1e 	bne	r5,r3,6370 <memmove+0x1c>
    6384:	f800283a 	ret
    6388:	00c003c4 	movi	r3,15
    638c:	1980412e 	bgeu	r3,r6,6494 <memmove+0x140>
    6390:	2886b03a 	or	r3,r5,r2
    6394:	18c000cc 	andi	r3,r3,3
    6398:	1800401e 	bne	r3,zero,649c <memmove+0x148>
    639c:	33fffc04 	addi	r15,r6,-16
    63a0:	781ed13a 	srli	r15,r15,4
    63a4:	28c00104 	addi	r3,r5,4
    63a8:	13400104 	addi	r13,r2,4
    63ac:	781c913a 	slli	r14,r15,4
    63b0:	2b000204 	addi	r12,r5,8
    63b4:	12c00204 	addi	r11,r2,8
    63b8:	73800504 	addi	r14,r14,20
    63bc:	2a800304 	addi	r10,r5,12
    63c0:	12400304 	addi	r9,r2,12
    63c4:	2b9d883a 	add	r14,r5,r14
    63c8:	2811883a 	mov	r8,r5
    63cc:	100f883a 	mov	r7,r2
    63d0:	41000017 	ldw	r4,0(r8)
    63d4:	39c00404 	addi	r7,r7,16
    63d8:	18c00404 	addi	r3,r3,16
    63dc:	393ffc15 	stw	r4,-16(r7)
    63e0:	193ffc17 	ldw	r4,-16(r3)
    63e4:	6b400404 	addi	r13,r13,16
    63e8:	5ac00404 	addi	r11,r11,16
    63ec:	693ffc15 	stw	r4,-16(r13)
    63f0:	61000017 	ldw	r4,0(r12)
    63f4:	4a400404 	addi	r9,r9,16
    63f8:	42000404 	addi	r8,r8,16
    63fc:	593ffc15 	stw	r4,-16(r11)
    6400:	51000017 	ldw	r4,0(r10)
    6404:	63000404 	addi	r12,r12,16
    6408:	52800404 	addi	r10,r10,16
    640c:	493ffc15 	stw	r4,-16(r9)
    6410:	1bbfef1e 	bne	r3,r14,63d0 <memmove+0x7c>
    6414:	79000044 	addi	r4,r15,1
    6418:	2008913a 	slli	r4,r4,4
    641c:	328003cc 	andi	r10,r6,15
    6420:	02c000c4 	movi	r11,3
    6424:	1107883a 	add	r3,r2,r4
    6428:	290b883a 	add	r5,r5,r4
    642c:	5a801e2e 	bgeu	r11,r10,64a8 <memmove+0x154>
    6430:	1813883a 	mov	r9,r3
    6434:	2811883a 	mov	r8,r5
    6438:	500f883a 	mov	r7,r10
    643c:	41000017 	ldw	r4,0(r8)
    6440:	4a400104 	addi	r9,r9,4
    6444:	39ffff04 	addi	r7,r7,-4
    6448:	493fff15 	stw	r4,-4(r9)
    644c:	42000104 	addi	r8,r8,4
    6450:	59fffa36 	bltu	r11,r7,643c <memmove+0xe8>
    6454:	513fff04 	addi	r4,r10,-4
    6458:	2008d0ba 	srli	r4,r4,2
    645c:	318000cc 	andi	r6,r6,3
    6460:	21000044 	addi	r4,r4,1
    6464:	2109883a 	add	r4,r4,r4
    6468:	2109883a 	add	r4,r4,r4
    646c:	1907883a 	add	r3,r3,r4
    6470:	290b883a 	add	r5,r5,r4
    6474:	30000b26 	beq	r6,zero,64a4 <memmove+0x150>
    6478:	198d883a 	add	r6,r3,r6
    647c:	29c00003 	ldbu	r7,0(r5)
    6480:	18c00044 	addi	r3,r3,1
    6484:	29400044 	addi	r5,r5,1
    6488:	19ffffc5 	stb	r7,-1(r3)
    648c:	19bffb1e 	bne	r3,r6,647c <memmove+0x128>
    6490:	f800283a 	ret
    6494:	1007883a 	mov	r3,r2
    6498:	003ff606 	br	6474 <memmove+0x120>
    649c:	1007883a 	mov	r3,r2
    64a0:	003ff506 	br	6478 <memmove+0x124>
    64a4:	f800283a 	ret
    64a8:	500d883a 	mov	r6,r10
    64ac:	003ff106 	br	6474 <memmove+0x120>

000064b0 <memset>:
    64b0:	20c000cc 	andi	r3,r4,3
    64b4:	2005883a 	mov	r2,r4
    64b8:	18004426 	beq	r3,zero,65cc <memset+0x11c>
    64bc:	31ffffc4 	addi	r7,r6,-1
    64c0:	30004026 	beq	r6,zero,65c4 <memset+0x114>
    64c4:	2813883a 	mov	r9,r5
    64c8:	200d883a 	mov	r6,r4
    64cc:	2007883a 	mov	r3,r4
    64d0:	00000406 	br	64e4 <memset+0x34>
    64d4:	3a3fffc4 	addi	r8,r7,-1
    64d8:	31800044 	addi	r6,r6,1
    64dc:	38003926 	beq	r7,zero,65c4 <memset+0x114>
    64e0:	400f883a 	mov	r7,r8
    64e4:	18c00044 	addi	r3,r3,1
    64e8:	32400005 	stb	r9,0(r6)
    64ec:	1a0000cc 	andi	r8,r3,3
    64f0:	403ff81e 	bne	r8,zero,64d4 <memset+0x24>
    64f4:	010000c4 	movi	r4,3
    64f8:	21c02d2e 	bgeu	r4,r7,65b0 <memset+0x100>
    64fc:	29003fcc 	andi	r4,r5,255
    6500:	200c923a 	slli	r6,r4,8
    6504:	3108b03a 	or	r4,r6,r4
    6508:	200c943a 	slli	r6,r4,16
    650c:	218cb03a 	or	r6,r4,r6
    6510:	010003c4 	movi	r4,15
    6514:	21c0182e 	bgeu	r4,r7,6578 <memset+0xc8>
    6518:	3b3ffc04 	addi	r12,r7,-16
    651c:	6018d13a 	srli	r12,r12,4
    6520:	1a000104 	addi	r8,r3,4
    6524:	1ac00204 	addi	r11,r3,8
    6528:	6008913a 	slli	r4,r12,4
    652c:	1a800304 	addi	r10,r3,12
    6530:	1813883a 	mov	r9,r3
    6534:	21000504 	addi	r4,r4,20
    6538:	1909883a 	add	r4,r3,r4
    653c:	49800015 	stw	r6,0(r9)
    6540:	41800015 	stw	r6,0(r8)
    6544:	59800015 	stw	r6,0(r11)
    6548:	51800015 	stw	r6,0(r10)
    654c:	42000404 	addi	r8,r8,16
    6550:	4a400404 	addi	r9,r9,16
    6554:	5ac00404 	addi	r11,r11,16
    6558:	52800404 	addi	r10,r10,16
    655c:	413ff71e 	bne	r8,r4,653c <memset+0x8c>
    6560:	63000044 	addi	r12,r12,1
    6564:	6018913a 	slli	r12,r12,4
    6568:	39c003cc 	andi	r7,r7,15
    656c:	010000c4 	movi	r4,3
    6570:	1b07883a 	add	r3,r3,r12
    6574:	21c00e2e 	bgeu	r4,r7,65b0 <memset+0x100>
    6578:	1813883a 	mov	r9,r3
    657c:	3811883a 	mov	r8,r7
    6580:	010000c4 	movi	r4,3
    6584:	49800015 	stw	r6,0(r9)
    6588:	423fff04 	addi	r8,r8,-4
    658c:	4a400104 	addi	r9,r9,4
    6590:	223ffc36 	bltu	r4,r8,6584 <memset+0xd4>
    6594:	393fff04 	addi	r4,r7,-4
    6598:	2008d0ba 	srli	r4,r4,2
    659c:	39c000cc 	andi	r7,r7,3
    65a0:	21000044 	addi	r4,r4,1
    65a4:	2109883a 	add	r4,r4,r4
    65a8:	2109883a 	add	r4,r4,r4
    65ac:	1907883a 	add	r3,r3,r4
    65b0:	38000526 	beq	r7,zero,65c8 <memset+0x118>
    65b4:	19cf883a 	add	r7,r3,r7
    65b8:	19400005 	stb	r5,0(r3)
    65bc:	18c00044 	addi	r3,r3,1
    65c0:	38fffd1e 	bne	r7,r3,65b8 <memset+0x108>
    65c4:	f800283a 	ret
    65c8:	f800283a 	ret
    65cc:	2007883a 	mov	r3,r4
    65d0:	300f883a 	mov	r7,r6
    65d4:	003fc706 	br	64f4 <memset+0x44>

000065d8 <_Balloc>:
    65d8:	20801317 	ldw	r2,76(r4)
    65dc:	defffc04 	addi	sp,sp,-16
    65e0:	dc400115 	stw	r17,4(sp)
    65e4:	dc000015 	stw	r16,0(sp)
    65e8:	dfc00315 	stw	ra,12(sp)
    65ec:	dc800215 	stw	r18,8(sp)
    65f0:	2023883a 	mov	r17,r4
    65f4:	2821883a 	mov	r16,r5
    65f8:	10000f26 	beq	r2,zero,6638 <_Balloc+0x60>
    65fc:	8407883a 	add	r3,r16,r16
    6600:	18c7883a 	add	r3,r3,r3
    6604:	10c7883a 	add	r3,r2,r3
    6608:	18800017 	ldw	r2,0(r3)
    660c:	10001126 	beq	r2,zero,6654 <_Balloc+0x7c>
    6610:	11000017 	ldw	r4,0(r2)
    6614:	19000015 	stw	r4,0(r3)
    6618:	10000415 	stw	zero,16(r2)
    661c:	10000315 	stw	zero,12(r2)
    6620:	dfc00317 	ldw	ra,12(sp)
    6624:	dc800217 	ldw	r18,8(sp)
    6628:	dc400117 	ldw	r17,4(sp)
    662c:	dc000017 	ldw	r16,0(sp)
    6630:	dec00404 	addi	sp,sp,16
    6634:	f800283a 	ret
    6638:	01800844 	movi	r6,33
    663c:	01400104 	movi	r5,4
    6640:	00095140 	call	9514 <_calloc_r>
    6644:	88801315 	stw	r2,76(r17)
    6648:	103fec1e 	bne	r2,zero,65fc <_Balloc+0x24>
    664c:	0005883a 	mov	r2,zero
    6650:	003ff306 	br	6620 <_Balloc+0x48>
    6654:	01400044 	movi	r5,1
    6658:	2c24983a 	sll	r18,r5,r16
    665c:	8809883a 	mov	r4,r17
    6660:	91800144 	addi	r6,r18,5
    6664:	318d883a 	add	r6,r6,r6
    6668:	318d883a 	add	r6,r6,r6
    666c:	00095140 	call	9514 <_calloc_r>
    6670:	103ff626 	beq	r2,zero,664c <_Balloc+0x74>
    6674:	14000115 	stw	r16,4(r2)
    6678:	14800215 	stw	r18,8(r2)
    667c:	003fe606 	br	6618 <_Balloc+0x40>

00006680 <_Bfree>:
    6680:	28000826 	beq	r5,zero,66a4 <_Bfree+0x24>
    6684:	28c00117 	ldw	r3,4(r5)
    6688:	20801317 	ldw	r2,76(r4)
    668c:	18c7883a 	add	r3,r3,r3
    6690:	18c7883a 	add	r3,r3,r3
    6694:	10c5883a 	add	r2,r2,r3
    6698:	10c00017 	ldw	r3,0(r2)
    669c:	28c00015 	stw	r3,0(r5)
    66a0:	11400015 	stw	r5,0(r2)
    66a4:	f800283a 	ret

000066a8 <__multadd>:
    66a8:	defffa04 	addi	sp,sp,-24
    66ac:	dc800315 	stw	r18,12(sp)
    66b0:	dc400215 	stw	r17,8(sp)
    66b4:	dc000115 	stw	r16,4(sp)
    66b8:	2823883a 	mov	r17,r5
    66bc:	2c000417 	ldw	r16,16(r5)
    66c0:	dfc00515 	stw	ra,20(sp)
    66c4:	dcc00415 	stw	r19,16(sp)
    66c8:	2025883a 	mov	r18,r4
    66cc:	29400504 	addi	r5,r5,20
    66d0:	0011883a 	mov	r8,zero
    66d4:	28c00017 	ldw	r3,0(r5)
    66d8:	29400104 	addi	r5,r5,4
    66dc:	42000044 	addi	r8,r8,1
    66e0:	18bfffcc 	andi	r2,r3,65535
    66e4:	1185383a 	mul	r2,r2,r6
    66e8:	1806d43a 	srli	r3,r3,16
    66ec:	11cf883a 	add	r7,r2,r7
    66f0:	3808d43a 	srli	r4,r7,16
    66f4:	1987383a 	mul	r3,r3,r6
    66f8:	38bfffcc 	andi	r2,r7,65535
    66fc:	1907883a 	add	r3,r3,r4
    6700:	1808943a 	slli	r4,r3,16
    6704:	180ed43a 	srli	r7,r3,16
    6708:	2085883a 	add	r2,r4,r2
    670c:	28bfff15 	stw	r2,-4(r5)
    6710:	443ff016 	blt	r8,r16,66d4 <__multadd+0x2c>
    6714:	38000926 	beq	r7,zero,673c <__multadd+0x94>
    6718:	88800217 	ldw	r2,8(r17)
    671c:	80800f0e 	bge	r16,r2,675c <__multadd+0xb4>
    6720:	80800144 	addi	r2,r16,5
    6724:	1085883a 	add	r2,r2,r2
    6728:	1085883a 	add	r2,r2,r2
    672c:	8885883a 	add	r2,r17,r2
    6730:	11c00015 	stw	r7,0(r2)
    6734:	84000044 	addi	r16,r16,1
    6738:	8c000415 	stw	r16,16(r17)
    673c:	8805883a 	mov	r2,r17
    6740:	dfc00517 	ldw	ra,20(sp)
    6744:	dcc00417 	ldw	r19,16(sp)
    6748:	dc800317 	ldw	r18,12(sp)
    674c:	dc400217 	ldw	r17,8(sp)
    6750:	dc000117 	ldw	r16,4(sp)
    6754:	dec00604 	addi	sp,sp,24
    6758:	f800283a 	ret
    675c:	89400117 	ldw	r5,4(r17)
    6760:	9009883a 	mov	r4,r18
    6764:	d9c00015 	stw	r7,0(sp)
    6768:	29400044 	addi	r5,r5,1
    676c:	00065d80 	call	65d8 <_Balloc>
    6770:	89800417 	ldw	r6,16(r17)
    6774:	89400304 	addi	r5,r17,12
    6778:	11000304 	addi	r4,r2,12
    677c:	31800084 	addi	r6,r6,2
    6780:	318d883a 	add	r6,r6,r6
    6784:	318d883a 	add	r6,r6,r6
    6788:	1027883a 	mov	r19,r2
    678c:	000620c0 	call	620c <memcpy>
    6790:	d9c00017 	ldw	r7,0(sp)
    6794:	88000a26 	beq	r17,zero,67c0 <__multadd+0x118>
    6798:	88c00117 	ldw	r3,4(r17)
    679c:	90801317 	ldw	r2,76(r18)
    67a0:	18c7883a 	add	r3,r3,r3
    67a4:	18c7883a 	add	r3,r3,r3
    67a8:	10c5883a 	add	r2,r2,r3
    67ac:	10c00017 	ldw	r3,0(r2)
    67b0:	88c00015 	stw	r3,0(r17)
    67b4:	14400015 	stw	r17,0(r2)
    67b8:	9823883a 	mov	r17,r19
    67bc:	003fd806 	br	6720 <__multadd+0x78>
    67c0:	9823883a 	mov	r17,r19
    67c4:	003fd606 	br	6720 <__multadd+0x78>

000067c8 <__s2b>:
    67c8:	defff904 	addi	sp,sp,-28
    67cc:	dc400115 	stw	r17,4(sp)
    67d0:	dc000015 	stw	r16,0(sp)
    67d4:	2023883a 	mov	r17,r4
    67d8:	2821883a 	mov	r16,r5
    67dc:	39000204 	addi	r4,r7,8
    67e0:	01400244 	movi	r5,9
    67e4:	dcc00315 	stw	r19,12(sp)
    67e8:	dc800215 	stw	r18,8(sp)
    67ec:	dfc00615 	stw	ra,24(sp)
    67f0:	dd400515 	stw	r21,20(sp)
    67f4:	dd000415 	stw	r20,16(sp)
    67f8:	3825883a 	mov	r18,r7
    67fc:	3027883a 	mov	r19,r6
    6800:	000058c0 	call	58c <__divsi3>
    6804:	00c00044 	movi	r3,1
    6808:	000b883a 	mov	r5,zero
    680c:	1880030e 	bge	r3,r2,681c <__s2b+0x54>
    6810:	18c7883a 	add	r3,r3,r3
    6814:	29400044 	addi	r5,r5,1
    6818:	18bffd16 	blt	r3,r2,6810 <__s2b+0x48>
    681c:	8809883a 	mov	r4,r17
    6820:	00065d80 	call	65d8 <_Balloc>
    6824:	d8c00717 	ldw	r3,28(sp)
    6828:	10c00515 	stw	r3,20(r2)
    682c:	00c00044 	movi	r3,1
    6830:	10c00415 	stw	r3,16(r2)
    6834:	00c00244 	movi	r3,9
    6838:	1cc0210e 	bge	r3,r19,68c0 <__s2b+0xf8>
    683c:	80eb883a 	add	r21,r16,r3
    6840:	a829883a 	mov	r20,r21
    6844:	84e1883a 	add	r16,r16,r19
    6848:	a1c00007 	ldb	r7,0(r20)
    684c:	01800284 	movi	r6,10
    6850:	a5000044 	addi	r20,r20,1
    6854:	100b883a 	mov	r5,r2
    6858:	39fff404 	addi	r7,r7,-48
    685c:	8809883a 	mov	r4,r17
    6860:	00066a80 	call	66a8 <__multadd>
    6864:	a43ff81e 	bne	r20,r16,6848 <__s2b+0x80>
    6868:	ace1883a 	add	r16,r21,r19
    686c:	843ffe04 	addi	r16,r16,-8
    6870:	9c800a0e 	bge	r19,r18,689c <__s2b+0xd4>
    6874:	94e5c83a 	sub	r18,r18,r19
    6878:	84a5883a 	add	r18,r16,r18
    687c:	81c00007 	ldb	r7,0(r16)
    6880:	01800284 	movi	r6,10
    6884:	84000044 	addi	r16,r16,1
    6888:	100b883a 	mov	r5,r2
    688c:	39fff404 	addi	r7,r7,-48
    6890:	8809883a 	mov	r4,r17
    6894:	00066a80 	call	66a8 <__multadd>
    6898:	84bff81e 	bne	r16,r18,687c <__s2b+0xb4>
    689c:	dfc00617 	ldw	ra,24(sp)
    68a0:	dd400517 	ldw	r21,20(sp)
    68a4:	dd000417 	ldw	r20,16(sp)
    68a8:	dcc00317 	ldw	r19,12(sp)
    68ac:	dc800217 	ldw	r18,8(sp)
    68b0:	dc400117 	ldw	r17,4(sp)
    68b4:	dc000017 	ldw	r16,0(sp)
    68b8:	dec00704 	addi	sp,sp,28
    68bc:	f800283a 	ret
    68c0:	84000284 	addi	r16,r16,10
    68c4:	1827883a 	mov	r19,r3
    68c8:	003fe906 	br	6870 <__s2b+0xa8>

000068cc <__hi0bits>:
    68cc:	20bfffec 	andhi	r2,r4,65535
    68d0:	1000141e 	bne	r2,zero,6924 <__hi0bits+0x58>
    68d4:	2008943a 	slli	r4,r4,16
    68d8:	00800404 	movi	r2,16
    68dc:	20ffc02c 	andhi	r3,r4,65280
    68e0:	1800021e 	bne	r3,zero,68ec <__hi0bits+0x20>
    68e4:	2008923a 	slli	r4,r4,8
    68e8:	10800204 	addi	r2,r2,8
    68ec:	20fc002c 	andhi	r3,r4,61440
    68f0:	1800021e 	bne	r3,zero,68fc <__hi0bits+0x30>
    68f4:	2008913a 	slli	r4,r4,4
    68f8:	10800104 	addi	r2,r2,4
    68fc:	20f0002c 	andhi	r3,r4,49152
    6900:	1800031e 	bne	r3,zero,6910 <__hi0bits+0x44>
    6904:	2109883a 	add	r4,r4,r4
    6908:	10800084 	addi	r2,r2,2
    690c:	2109883a 	add	r4,r4,r4
    6910:	20000316 	blt	r4,zero,6920 <__hi0bits+0x54>
    6914:	2110002c 	andhi	r4,r4,16384
    6918:	2000041e 	bne	r4,zero,692c <__hi0bits+0x60>
    691c:	00800804 	movi	r2,32
    6920:	f800283a 	ret
    6924:	0005883a 	mov	r2,zero
    6928:	003fec06 	br	68dc <__hi0bits+0x10>
    692c:	10800044 	addi	r2,r2,1
    6930:	f800283a 	ret

00006934 <__lo0bits>:
    6934:	20c00017 	ldw	r3,0(r4)
    6938:	188001cc 	andi	r2,r3,7
    693c:	10000826 	beq	r2,zero,6960 <__lo0bits+0x2c>
    6940:	1880004c 	andi	r2,r3,1
    6944:	1000211e 	bne	r2,zero,69cc <__lo0bits+0x98>
    6948:	1880008c 	andi	r2,r3,2
    694c:	1000211e 	bne	r2,zero,69d4 <__lo0bits+0xa0>
    6950:	1806d0ba 	srli	r3,r3,2
    6954:	00800084 	movi	r2,2
    6958:	20c00015 	stw	r3,0(r4)
    695c:	f800283a 	ret
    6960:	18bfffcc 	andi	r2,r3,65535
    6964:	10001326 	beq	r2,zero,69b4 <__lo0bits+0x80>
    6968:	0005883a 	mov	r2,zero
    696c:	19403fcc 	andi	r5,r3,255
    6970:	2800021e 	bne	r5,zero,697c <__lo0bits+0x48>
    6974:	1806d23a 	srli	r3,r3,8
    6978:	10800204 	addi	r2,r2,8
    697c:	194003cc 	andi	r5,r3,15
    6980:	2800021e 	bne	r5,zero,698c <__lo0bits+0x58>
    6984:	1806d13a 	srli	r3,r3,4
    6988:	10800104 	addi	r2,r2,4
    698c:	194000cc 	andi	r5,r3,3
    6990:	2800021e 	bne	r5,zero,699c <__lo0bits+0x68>
    6994:	1806d0ba 	srli	r3,r3,2
    6998:	10800084 	addi	r2,r2,2
    699c:	1940004c 	andi	r5,r3,1
    69a0:	2800081e 	bne	r5,zero,69c4 <__lo0bits+0x90>
    69a4:	1806d07a 	srli	r3,r3,1
    69a8:	1800051e 	bne	r3,zero,69c0 <__lo0bits+0x8c>
    69ac:	00800804 	movi	r2,32
    69b0:	f800283a 	ret
    69b4:	1806d43a 	srli	r3,r3,16
    69b8:	00800404 	movi	r2,16
    69bc:	003feb06 	br	696c <__lo0bits+0x38>
    69c0:	10800044 	addi	r2,r2,1
    69c4:	20c00015 	stw	r3,0(r4)
    69c8:	f800283a 	ret
    69cc:	0005883a 	mov	r2,zero
    69d0:	f800283a 	ret
    69d4:	1806d07a 	srli	r3,r3,1
    69d8:	00800044 	movi	r2,1
    69dc:	20c00015 	stw	r3,0(r4)
    69e0:	f800283a 	ret

000069e4 <__i2b>:
    69e4:	defffd04 	addi	sp,sp,-12
    69e8:	dc000015 	stw	r16,0(sp)
    69ec:	04000044 	movi	r16,1
    69f0:	dc400115 	stw	r17,4(sp)
    69f4:	2823883a 	mov	r17,r5
    69f8:	800b883a 	mov	r5,r16
    69fc:	dfc00215 	stw	ra,8(sp)
    6a00:	00065d80 	call	65d8 <_Balloc>
    6a04:	14400515 	stw	r17,20(r2)
    6a08:	14000415 	stw	r16,16(r2)
    6a0c:	dfc00217 	ldw	ra,8(sp)
    6a10:	dc400117 	ldw	r17,4(sp)
    6a14:	dc000017 	ldw	r16,0(sp)
    6a18:	dec00304 	addi	sp,sp,12
    6a1c:	f800283a 	ret

00006a20 <__multiply>:
    6a20:	defffa04 	addi	sp,sp,-24
    6a24:	dcc00315 	stw	r19,12(sp)
    6a28:	dc800215 	stw	r18,8(sp)
    6a2c:	34c00417 	ldw	r19,16(r6)
    6a30:	2c800417 	ldw	r18,16(r5)
    6a34:	dd000415 	stw	r20,16(sp)
    6a38:	dc400115 	stw	r17,4(sp)
    6a3c:	dfc00515 	stw	ra,20(sp)
    6a40:	dc000015 	stw	r16,0(sp)
    6a44:	2829883a 	mov	r20,r5
    6a48:	3023883a 	mov	r17,r6
    6a4c:	94c0050e 	bge	r18,r19,6a64 <__multiply+0x44>
    6a50:	9007883a 	mov	r3,r18
    6a54:	3029883a 	mov	r20,r6
    6a58:	9825883a 	mov	r18,r19
    6a5c:	2823883a 	mov	r17,r5
    6a60:	1827883a 	mov	r19,r3
    6a64:	a0800217 	ldw	r2,8(r20)
    6a68:	94e1883a 	add	r16,r18,r19
    6a6c:	a1400117 	ldw	r5,4(r20)
    6a70:	1400010e 	bge	r2,r16,6a78 <__multiply+0x58>
    6a74:	29400044 	addi	r5,r5,1
    6a78:	00065d80 	call	65d8 <_Balloc>
    6a7c:	8415883a 	add	r10,r16,r16
    6a80:	12c00504 	addi	r11,r2,20
    6a84:	5295883a 	add	r10,r10,r10
    6a88:	5a95883a 	add	r10,r11,r10
    6a8c:	5807883a 	mov	r3,r11
    6a90:	5a80032e 	bgeu	r11,r10,6aa0 <__multiply+0x80>
    6a94:	18000015 	stw	zero,0(r3)
    6a98:	18c00104 	addi	r3,r3,4
    6a9c:	1abffd36 	bltu	r3,r10,6a94 <__multiply+0x74>
    6aa0:	9ce7883a 	add	r19,r19,r19
    6aa4:	94a5883a 	add	r18,r18,r18
    6aa8:	89800504 	addi	r6,r17,20
    6aac:	9ce7883a 	add	r19,r19,r19
    6ab0:	a3400504 	addi	r13,r20,20
    6ab4:	94a5883a 	add	r18,r18,r18
    6ab8:	34d9883a 	add	r12,r6,r19
    6abc:	6c93883a 	add	r9,r13,r18
    6ac0:	3300422e 	bgeu	r6,r12,6bcc <__multiply+0x1ac>
    6ac4:	37c00017 	ldw	ra,0(r6)
    6ac8:	fbffffcc 	andi	r15,ra,65535
    6acc:	78001b26 	beq	r15,zero,6b3c <__multiply+0x11c>
    6ad0:	5811883a 	mov	r8,r11
    6ad4:	681d883a 	mov	r14,r13
    6ad8:	000f883a 	mov	r7,zero
    6adc:	71000017 	ldw	r4,0(r14)
    6ae0:	40c00017 	ldw	r3,0(r8)
    6ae4:	73800104 	addi	r14,r14,4
    6ae8:	217fffcc 	andi	r5,r4,65535
    6aec:	2bcb383a 	mul	r5,r5,r15
    6af0:	2008d43a 	srli	r4,r4,16
    6af4:	1c7fffcc 	andi	r17,r3,65535
    6af8:	2c4b883a 	add	r5,r5,r17
    6afc:	29cb883a 	add	r5,r5,r7
    6b00:	23c9383a 	mul	r4,r4,r15
    6b04:	1806d43a 	srli	r3,r3,16
    6b08:	280ed43a 	srli	r7,r5,16
    6b0c:	297fffcc 	andi	r5,r5,65535
    6b10:	20c7883a 	add	r3,r4,r3
    6b14:	19c7883a 	add	r3,r3,r7
    6b18:	1808943a 	slli	r4,r3,16
    6b1c:	4023883a 	mov	r17,r8
    6b20:	180ed43a 	srli	r7,r3,16
    6b24:	214ab03a 	or	r5,r4,r5
    6b28:	41400015 	stw	r5,0(r8)
    6b2c:	42000104 	addi	r8,r8,4
    6b30:	727fea36 	bltu	r14,r9,6adc <__multiply+0xbc>
    6b34:	89c00115 	stw	r7,4(r17)
    6b38:	37c00017 	ldw	ra,0(r6)
    6b3c:	f83ed43a 	srli	ra,ra,16
    6b40:	f8001f26 	beq	ra,zero,6bc0 <__multiply+0x1a0>
    6b44:	58c00017 	ldw	r3,0(r11)
    6b48:	681d883a 	mov	r14,r13
    6b4c:	581f883a 	mov	r15,r11
    6b50:	1811883a 	mov	r8,r3
    6b54:	5825883a 	mov	r18,r11
    6b58:	000f883a 	mov	r7,zero
    6b5c:	00000106 	br	6b64 <__multiply+0x144>
    6b60:	8825883a 	mov	r18,r17
    6b64:	7140000b 	ldhu	r5,0(r14)
    6b68:	4010d43a 	srli	r8,r8,16
    6b6c:	193fffcc 	andi	r4,r3,65535
    6b70:	2fcb383a 	mul	r5,r5,ra
    6b74:	7bc00104 	addi	r15,r15,4
    6b78:	73800104 	addi	r14,r14,4
    6b7c:	2a0b883a 	add	r5,r5,r8
    6b80:	29cb883a 	add	r5,r5,r7
    6b84:	2806943a 	slli	r3,r5,16
    6b88:	94400104 	addi	r17,r18,4
    6b8c:	280ad43a 	srli	r5,r5,16
    6b90:	1908b03a 	or	r4,r3,r4
    6b94:	793fff15 	stw	r4,-4(r15)
    6b98:	70ffff17 	ldw	r3,-4(r14)
    6b9c:	8a000017 	ldw	r8,0(r17)
    6ba0:	1806d43a 	srli	r3,r3,16
    6ba4:	413fffcc 	andi	r4,r8,65535
    6ba8:	1fc7383a 	mul	r3,r3,ra
    6bac:	1907883a 	add	r3,r3,r4
    6bb0:	1947883a 	add	r3,r3,r5
    6bb4:	180ed43a 	srli	r7,r3,16
    6bb8:	727fe936 	bltu	r14,r9,6b60 <__multiply+0x140>
    6bbc:	90c00115 	stw	r3,4(r18)
    6bc0:	31800104 	addi	r6,r6,4
    6bc4:	5ac00104 	addi	r11,r11,4
    6bc8:	333fbe36 	bltu	r6,r12,6ac4 <__multiply+0xa4>
    6bcc:	0400090e 	bge	zero,r16,6bf4 <__multiply+0x1d4>
    6bd0:	50ffff17 	ldw	r3,-4(r10)
    6bd4:	52bfff04 	addi	r10,r10,-4
    6bd8:	18000326 	beq	r3,zero,6be8 <__multiply+0x1c8>
    6bdc:	00000506 	br	6bf4 <__multiply+0x1d4>
    6be0:	50c00017 	ldw	r3,0(r10)
    6be4:	1800031e 	bne	r3,zero,6bf4 <__multiply+0x1d4>
    6be8:	843fffc4 	addi	r16,r16,-1
    6bec:	52bfff04 	addi	r10,r10,-4
    6bf0:	803ffb1e 	bne	r16,zero,6be0 <__multiply+0x1c0>
    6bf4:	14000415 	stw	r16,16(r2)
    6bf8:	dfc00517 	ldw	ra,20(sp)
    6bfc:	dd000417 	ldw	r20,16(sp)
    6c00:	dcc00317 	ldw	r19,12(sp)
    6c04:	dc800217 	ldw	r18,8(sp)
    6c08:	dc400117 	ldw	r17,4(sp)
    6c0c:	dc000017 	ldw	r16,0(sp)
    6c10:	dec00604 	addi	sp,sp,24
    6c14:	f800283a 	ret

00006c18 <__pow5mult>:
    6c18:	defffa04 	addi	sp,sp,-24
    6c1c:	dcc00315 	stw	r19,12(sp)
    6c20:	dc000015 	stw	r16,0(sp)
    6c24:	dfc00515 	stw	ra,20(sp)
    6c28:	dd000415 	stw	r20,16(sp)
    6c2c:	dc800215 	stw	r18,8(sp)
    6c30:	dc400115 	stw	r17,4(sp)
    6c34:	308000cc 	andi	r2,r6,3
    6c38:	3021883a 	mov	r16,r6
    6c3c:	2027883a 	mov	r19,r4
    6c40:	10002f1e 	bne	r2,zero,6d00 <__pow5mult+0xe8>
    6c44:	2825883a 	mov	r18,r5
    6c48:	8021d0ba 	srai	r16,r16,2
    6c4c:	80001a26 	beq	r16,zero,6cb8 <__pow5mult+0xa0>
    6c50:	9c401217 	ldw	r17,72(r19)
    6c54:	8800061e 	bne	r17,zero,6c70 <__pow5mult+0x58>
    6c58:	00003406 	br	6d2c <__pow5mult+0x114>
    6c5c:	8021d07a 	srai	r16,r16,1
    6c60:	80001526 	beq	r16,zero,6cb8 <__pow5mult+0xa0>
    6c64:	88800017 	ldw	r2,0(r17)
    6c68:	10001c26 	beq	r2,zero,6cdc <__pow5mult+0xc4>
    6c6c:	1023883a 	mov	r17,r2
    6c70:	8080004c 	andi	r2,r16,1
    6c74:	103ff926 	beq	r2,zero,6c5c <__pow5mult+0x44>
    6c78:	880d883a 	mov	r6,r17
    6c7c:	900b883a 	mov	r5,r18
    6c80:	9809883a 	mov	r4,r19
    6c84:	0006a200 	call	6a20 <__multiply>
    6c88:	90001b26 	beq	r18,zero,6cf8 <__pow5mult+0xe0>
    6c8c:	91000117 	ldw	r4,4(r18)
    6c90:	98c01317 	ldw	r3,76(r19)
    6c94:	8021d07a 	srai	r16,r16,1
    6c98:	2109883a 	add	r4,r4,r4
    6c9c:	2109883a 	add	r4,r4,r4
    6ca0:	1907883a 	add	r3,r3,r4
    6ca4:	19000017 	ldw	r4,0(r3)
    6ca8:	91000015 	stw	r4,0(r18)
    6cac:	1c800015 	stw	r18,0(r3)
    6cb0:	1025883a 	mov	r18,r2
    6cb4:	803feb1e 	bne	r16,zero,6c64 <__pow5mult+0x4c>
    6cb8:	9005883a 	mov	r2,r18
    6cbc:	dfc00517 	ldw	ra,20(sp)
    6cc0:	dd000417 	ldw	r20,16(sp)
    6cc4:	dcc00317 	ldw	r19,12(sp)
    6cc8:	dc800217 	ldw	r18,8(sp)
    6ccc:	dc400117 	ldw	r17,4(sp)
    6cd0:	dc000017 	ldw	r16,0(sp)
    6cd4:	dec00604 	addi	sp,sp,24
    6cd8:	f800283a 	ret
    6cdc:	880d883a 	mov	r6,r17
    6ce0:	880b883a 	mov	r5,r17
    6ce4:	9809883a 	mov	r4,r19
    6ce8:	0006a200 	call	6a20 <__multiply>
    6cec:	88800015 	stw	r2,0(r17)
    6cf0:	10000015 	stw	zero,0(r2)
    6cf4:	003fdd06 	br	6c6c <__pow5mult+0x54>
    6cf8:	1025883a 	mov	r18,r2
    6cfc:	003fd706 	br	6c5c <__pow5mult+0x44>
    6d00:	10bfffc4 	addi	r2,r2,-1
    6d04:	1085883a 	add	r2,r2,r2
    6d08:	00c000f4 	movhi	r3,3
    6d0c:	18d30a04 	addi	r3,r3,19496
    6d10:	1085883a 	add	r2,r2,r2
    6d14:	1885883a 	add	r2,r3,r2
    6d18:	11800017 	ldw	r6,0(r2)
    6d1c:	000f883a 	mov	r7,zero
    6d20:	00066a80 	call	66a8 <__multadd>
    6d24:	1025883a 	mov	r18,r2
    6d28:	003fc706 	br	6c48 <__pow5mult+0x30>
    6d2c:	05000044 	movi	r20,1
    6d30:	a00b883a 	mov	r5,r20
    6d34:	9809883a 	mov	r4,r19
    6d38:	00065d80 	call	65d8 <_Balloc>
    6d3c:	1023883a 	mov	r17,r2
    6d40:	00809c44 	movi	r2,625
    6d44:	88800515 	stw	r2,20(r17)
    6d48:	8d000415 	stw	r20,16(r17)
    6d4c:	9c401215 	stw	r17,72(r19)
    6d50:	88000015 	stw	zero,0(r17)
    6d54:	003fc606 	br	6c70 <__pow5mult+0x58>

00006d58 <__lshift>:
    6d58:	defff904 	addi	sp,sp,-28
    6d5c:	dd400515 	stw	r21,20(sp)
    6d60:	dcc00315 	stw	r19,12(sp)
    6d64:	302bd17a 	srai	r21,r6,5
    6d68:	2cc00417 	ldw	r19,16(r5)
    6d6c:	28800217 	ldw	r2,8(r5)
    6d70:	dd000415 	stw	r20,16(sp)
    6d74:	ace7883a 	add	r19,r21,r19
    6d78:	dc800215 	stw	r18,8(sp)
    6d7c:	dc400115 	stw	r17,4(sp)
    6d80:	dc000015 	stw	r16,0(sp)
    6d84:	dfc00615 	stw	ra,24(sp)
    6d88:	9c000044 	addi	r16,r19,1
    6d8c:	2823883a 	mov	r17,r5
    6d90:	3029883a 	mov	r20,r6
    6d94:	2025883a 	mov	r18,r4
    6d98:	29400117 	ldw	r5,4(r5)
    6d9c:	1400030e 	bge	r2,r16,6dac <__lshift+0x54>
    6da0:	1085883a 	add	r2,r2,r2
    6da4:	29400044 	addi	r5,r5,1
    6da8:	143ffd16 	blt	r2,r16,6da0 <__lshift+0x48>
    6dac:	9009883a 	mov	r4,r18
    6db0:	00065d80 	call	65d8 <_Balloc>
    6db4:	10c00504 	addi	r3,r2,20
    6db8:	0540070e 	bge	zero,r21,6dd8 <__lshift+0x80>
    6dbc:	ad6b883a 	add	r21,r21,r21
    6dc0:	ad6b883a 	add	r21,r21,r21
    6dc4:	1809883a 	mov	r4,r3
    6dc8:	1d47883a 	add	r3,r3,r21
    6dcc:	20000015 	stw	zero,0(r4)
    6dd0:	21000104 	addi	r4,r4,4
    6dd4:	193ffd1e 	bne	r3,r4,6dcc <__lshift+0x74>
    6dd8:	8a000417 	ldw	r8,16(r17)
    6ddc:	89000504 	addi	r4,r17,20
    6de0:	a18007cc 	andi	r6,r20,31
    6de4:	4211883a 	add	r8,r8,r8
    6de8:	4211883a 	add	r8,r8,r8
    6dec:	2211883a 	add	r8,r4,r8
    6df0:	30002326 	beq	r6,zero,6e80 <__lshift+0x128>
    6df4:	02400804 	movi	r9,32
    6df8:	4993c83a 	sub	r9,r9,r6
    6dfc:	000b883a 	mov	r5,zero
    6e00:	21c00017 	ldw	r7,0(r4)
    6e04:	1815883a 	mov	r10,r3
    6e08:	18c00104 	addi	r3,r3,4
    6e0c:	398e983a 	sll	r7,r7,r6
    6e10:	21000104 	addi	r4,r4,4
    6e14:	394ab03a 	or	r5,r7,r5
    6e18:	197fff15 	stw	r5,-4(r3)
    6e1c:	217fff17 	ldw	r5,-4(r4)
    6e20:	2a4ad83a 	srl	r5,r5,r9
    6e24:	223ff636 	bltu	r4,r8,6e00 <__lshift+0xa8>
    6e28:	51400115 	stw	r5,4(r10)
    6e2c:	28001a1e 	bne	r5,zero,6e98 <__lshift+0x140>
    6e30:	843fffc4 	addi	r16,r16,-1
    6e34:	14000415 	stw	r16,16(r2)
    6e38:	88000826 	beq	r17,zero,6e5c <__lshift+0x104>
    6e3c:	89000117 	ldw	r4,4(r17)
    6e40:	90c01317 	ldw	r3,76(r18)
    6e44:	2109883a 	add	r4,r4,r4
    6e48:	2109883a 	add	r4,r4,r4
    6e4c:	1907883a 	add	r3,r3,r4
    6e50:	19000017 	ldw	r4,0(r3)
    6e54:	89000015 	stw	r4,0(r17)
    6e58:	1c400015 	stw	r17,0(r3)
    6e5c:	dfc00617 	ldw	ra,24(sp)
    6e60:	dd400517 	ldw	r21,20(sp)
    6e64:	dd000417 	ldw	r20,16(sp)
    6e68:	dcc00317 	ldw	r19,12(sp)
    6e6c:	dc800217 	ldw	r18,8(sp)
    6e70:	dc400117 	ldw	r17,4(sp)
    6e74:	dc000017 	ldw	r16,0(sp)
    6e78:	dec00704 	addi	sp,sp,28
    6e7c:	f800283a 	ret
    6e80:	21400017 	ldw	r5,0(r4)
    6e84:	18c00104 	addi	r3,r3,4
    6e88:	21000104 	addi	r4,r4,4
    6e8c:	197fff15 	stw	r5,-4(r3)
    6e90:	223ffb36 	bltu	r4,r8,6e80 <__lshift+0x128>
    6e94:	003fe606 	br	6e30 <__lshift+0xd8>
    6e98:	9c000084 	addi	r16,r19,2
    6e9c:	003fe406 	br	6e30 <__lshift+0xd8>

00006ea0 <__mcmp>:
    6ea0:	20800417 	ldw	r2,16(r4)
    6ea4:	28c00417 	ldw	r3,16(r5)
    6ea8:	10c5c83a 	sub	r2,r2,r3
    6eac:	1000111e 	bne	r2,zero,6ef4 <__mcmp+0x54>
    6eb0:	18c7883a 	add	r3,r3,r3
    6eb4:	18c7883a 	add	r3,r3,r3
    6eb8:	21000504 	addi	r4,r4,20
    6ebc:	29400504 	addi	r5,r5,20
    6ec0:	20c5883a 	add	r2,r4,r3
    6ec4:	28cb883a 	add	r5,r5,r3
    6ec8:	00000106 	br	6ed0 <__mcmp+0x30>
    6ecc:	20800a2e 	bgeu	r4,r2,6ef8 <__mcmp+0x58>
    6ed0:	10bfff04 	addi	r2,r2,-4
    6ed4:	297fff04 	addi	r5,r5,-4
    6ed8:	11800017 	ldw	r6,0(r2)
    6edc:	28c00017 	ldw	r3,0(r5)
    6ee0:	30fffa26 	beq	r6,r3,6ecc <__mcmp+0x2c>
    6ee4:	30c00236 	bltu	r6,r3,6ef0 <__mcmp+0x50>
    6ee8:	00800044 	movi	r2,1
    6eec:	f800283a 	ret
    6ef0:	00bfffc4 	movi	r2,-1
    6ef4:	f800283a 	ret
    6ef8:	0005883a 	mov	r2,zero
    6efc:	f800283a 	ret

00006f00 <__mdiff>:
    6f00:	28c00417 	ldw	r3,16(r5)
    6f04:	30800417 	ldw	r2,16(r6)
    6f08:	defffa04 	addi	sp,sp,-24
    6f0c:	dcc00315 	stw	r19,12(sp)
    6f10:	dc800215 	stw	r18,8(sp)
    6f14:	dfc00515 	stw	ra,20(sp)
    6f18:	dd000415 	stw	r20,16(sp)
    6f1c:	dc400115 	stw	r17,4(sp)
    6f20:	dc000015 	stw	r16,0(sp)
    6f24:	1887c83a 	sub	r3,r3,r2
    6f28:	2825883a 	mov	r18,r5
    6f2c:	3027883a 	mov	r19,r6
    6f30:	1800141e 	bne	r3,zero,6f84 <__mdiff+0x84>
    6f34:	1085883a 	add	r2,r2,r2
    6f38:	1085883a 	add	r2,r2,r2
    6f3c:	2a000504 	addi	r8,r5,20
    6f40:	34000504 	addi	r16,r6,20
    6f44:	4087883a 	add	r3,r8,r2
    6f48:	8085883a 	add	r2,r16,r2
    6f4c:	00000106 	br	6f54 <__mdiff+0x54>
    6f50:	40c0592e 	bgeu	r8,r3,70b8 <__mdiff+0x1b8>
    6f54:	18ffff04 	addi	r3,r3,-4
    6f58:	10bfff04 	addi	r2,r2,-4
    6f5c:	19c00017 	ldw	r7,0(r3)
    6f60:	11400017 	ldw	r5,0(r2)
    6f64:	397ffa26 	beq	r7,r5,6f50 <__mdiff+0x50>
    6f68:	3940592e 	bgeu	r7,r5,70d0 <__mdiff+0x1d0>
    6f6c:	9005883a 	mov	r2,r18
    6f70:	4023883a 	mov	r17,r8
    6f74:	9825883a 	mov	r18,r19
    6f78:	05000044 	movi	r20,1
    6f7c:	1027883a 	mov	r19,r2
    6f80:	00000406 	br	6f94 <__mdiff+0x94>
    6f84:	18005616 	blt	r3,zero,70e0 <__mdiff+0x1e0>
    6f88:	34400504 	addi	r17,r6,20
    6f8c:	2c000504 	addi	r16,r5,20
    6f90:	0029883a 	mov	r20,zero
    6f94:	91400117 	ldw	r5,4(r18)
    6f98:	00065d80 	call	65d8 <_Balloc>
    6f9c:	92400417 	ldw	r9,16(r18)
    6fa0:	9b000417 	ldw	r12,16(r19)
    6fa4:	12c00504 	addi	r11,r2,20
    6fa8:	4a51883a 	add	r8,r9,r9
    6fac:	6319883a 	add	r12,r12,r12
    6fb0:	4211883a 	add	r8,r8,r8
    6fb4:	6319883a 	add	r12,r12,r12
    6fb8:	15000315 	stw	r20,12(r2)
    6fbc:	8211883a 	add	r8,r16,r8
    6fc0:	8b19883a 	add	r12,r17,r12
    6fc4:	0007883a 	mov	r3,zero
    6fc8:	81400017 	ldw	r5,0(r16)
    6fcc:	89c00017 	ldw	r7,0(r17)
    6fd0:	59800104 	addi	r6,r11,4
    6fd4:	293fffcc 	andi	r4,r5,65535
    6fd8:	20c7883a 	add	r3,r4,r3
    6fdc:	393fffcc 	andi	r4,r7,65535
    6fe0:	1909c83a 	sub	r4,r3,r4
    6fe4:	280ad43a 	srli	r5,r5,16
    6fe8:	380ed43a 	srli	r7,r7,16
    6fec:	2007d43a 	srai	r3,r4,16
    6ff0:	213fffcc 	andi	r4,r4,65535
    6ff4:	29cbc83a 	sub	r5,r5,r7
    6ff8:	28c7883a 	add	r3,r5,r3
    6ffc:	180a943a 	slli	r5,r3,16
    7000:	8c400104 	addi	r17,r17,4
    7004:	84000104 	addi	r16,r16,4
    7008:	2908b03a 	or	r4,r5,r4
    700c:	59000015 	stw	r4,0(r11)
    7010:	1807d43a 	srai	r3,r3,16
    7014:	3015883a 	mov	r10,r6
    7018:	3017883a 	mov	r11,r6
    701c:	8b3fea36 	bltu	r17,r12,6fc8 <__mdiff+0xc8>
    7020:	8200162e 	bgeu	r16,r8,707c <__mdiff+0x17c>
    7024:	8017883a 	mov	r11,r16
    7028:	59400017 	ldw	r5,0(r11)
    702c:	31800104 	addi	r6,r6,4
    7030:	5ac00104 	addi	r11,r11,4
    7034:	293fffcc 	andi	r4,r5,65535
    7038:	20c7883a 	add	r3,r4,r3
    703c:	280ed43a 	srli	r7,r5,16
    7040:	180bd43a 	srai	r5,r3,16
    7044:	193fffcc 	andi	r4,r3,65535
    7048:	3947883a 	add	r3,r7,r5
    704c:	180a943a 	slli	r5,r3,16
    7050:	1807d43a 	srai	r3,r3,16
    7054:	2908b03a 	or	r4,r5,r4
    7058:	313fff15 	stw	r4,-4(r6)
    705c:	5a3ff236 	bltu	r11,r8,7028 <__mdiff+0x128>
    7060:	0406303a 	nor	r3,zero,r16
    7064:	1a07883a 	add	r3,r3,r8
    7068:	1806d0ba 	srli	r3,r3,2
    706c:	18c00044 	addi	r3,r3,1
    7070:	18c7883a 	add	r3,r3,r3
    7074:	18c7883a 	add	r3,r3,r3
    7078:	50d5883a 	add	r10,r10,r3
    707c:	50ffff04 	addi	r3,r10,-4
    7080:	2000041e 	bne	r4,zero,7094 <__mdiff+0x194>
    7084:	18ffff04 	addi	r3,r3,-4
    7088:	19000017 	ldw	r4,0(r3)
    708c:	4a7fffc4 	addi	r9,r9,-1
    7090:	203ffc26 	beq	r4,zero,7084 <__mdiff+0x184>
    7094:	12400415 	stw	r9,16(r2)
    7098:	dfc00517 	ldw	ra,20(sp)
    709c:	dd000417 	ldw	r20,16(sp)
    70a0:	dcc00317 	ldw	r19,12(sp)
    70a4:	dc800217 	ldw	r18,8(sp)
    70a8:	dc400117 	ldw	r17,4(sp)
    70ac:	dc000017 	ldw	r16,0(sp)
    70b0:	dec00604 	addi	sp,sp,24
    70b4:	f800283a 	ret
    70b8:	000b883a 	mov	r5,zero
    70bc:	00065d80 	call	65d8 <_Balloc>
    70c0:	00c00044 	movi	r3,1
    70c4:	10c00415 	stw	r3,16(r2)
    70c8:	10000515 	stw	zero,20(r2)
    70cc:	003ff206 	br	7098 <__mdiff+0x198>
    70d0:	8023883a 	mov	r17,r16
    70d4:	0029883a 	mov	r20,zero
    70d8:	4021883a 	mov	r16,r8
    70dc:	003fad06 	br	6f94 <__mdiff+0x94>
    70e0:	9005883a 	mov	r2,r18
    70e4:	94400504 	addi	r17,r18,20
    70e8:	9c000504 	addi	r16,r19,20
    70ec:	9825883a 	mov	r18,r19
    70f0:	05000044 	movi	r20,1
    70f4:	1027883a 	mov	r19,r2
    70f8:	003fa606 	br	6f94 <__mdiff+0x94>

000070fc <__ulp>:
    70fc:	295ffc2c 	andhi	r5,r5,32752
    7100:	00bf3034 	movhi	r2,64704
    7104:	2887883a 	add	r3,r5,r2
    7108:	00c0020e 	bge	zero,r3,7114 <__ulp+0x18>
    710c:	0005883a 	mov	r2,zero
    7110:	f800283a 	ret
    7114:	00c7c83a 	sub	r3,zero,r3
    7118:	1807d53a 	srai	r3,r3,20
    711c:	008004c4 	movi	r2,19
    7120:	10c00b0e 	bge	r2,r3,7150 <__ulp+0x54>
    7124:	18bffb04 	addi	r2,r3,-20
    7128:	01000784 	movi	r4,30
    712c:	0007883a 	mov	r3,zero
    7130:	20800516 	blt	r4,r2,7148 <__ulp+0x4c>
    7134:	010007c4 	movi	r4,31
    7138:	2089c83a 	sub	r4,r4,r2
    713c:	00800044 	movi	r2,1
    7140:	1104983a 	sll	r2,r2,r4
    7144:	f800283a 	ret
    7148:	00800044 	movi	r2,1
    714c:	f800283a 	ret
    7150:	01400234 	movhi	r5,8
    7154:	28c7d83a 	sra	r3,r5,r3
    7158:	0005883a 	mov	r2,zero
    715c:	f800283a 	ret

00007160 <__b2d>:
    7160:	defffa04 	addi	sp,sp,-24
    7164:	dc000015 	stw	r16,0(sp)
    7168:	24000417 	ldw	r16,16(r4)
    716c:	dc400115 	stw	r17,4(sp)
    7170:	24400504 	addi	r17,r4,20
    7174:	8421883a 	add	r16,r16,r16
    7178:	8421883a 	add	r16,r16,r16
    717c:	8c21883a 	add	r16,r17,r16
    7180:	dc800215 	stw	r18,8(sp)
    7184:	84bfff17 	ldw	r18,-4(r16)
    7188:	dd000415 	stw	r20,16(sp)
    718c:	dcc00315 	stw	r19,12(sp)
    7190:	9009883a 	mov	r4,r18
    7194:	2829883a 	mov	r20,r5
    7198:	dfc00515 	stw	ra,20(sp)
    719c:	00068cc0 	call	68cc <__hi0bits>
    71a0:	00c00804 	movi	r3,32
    71a4:	1889c83a 	sub	r4,r3,r2
    71a8:	a1000015 	stw	r4,0(r20)
    71ac:	01000284 	movi	r4,10
    71b0:	84ffff04 	addi	r19,r16,-4
    71b4:	20801216 	blt	r4,r2,7200 <__b2d+0xa0>
    71b8:	018002c4 	movi	r6,11
    71bc:	308dc83a 	sub	r6,r6,r2
    71c0:	9186d83a 	srl	r3,r18,r6
    71c4:	18cffc34 	orhi	r3,r3,16368
    71c8:	8cc0212e 	bgeu	r17,r19,7250 <__b2d+0xf0>
    71cc:	813ffe17 	ldw	r4,-8(r16)
    71d0:	218cd83a 	srl	r6,r4,r6
    71d4:	10800544 	addi	r2,r2,21
    71d8:	9084983a 	sll	r2,r18,r2
    71dc:	1184b03a 	or	r2,r2,r6
    71e0:	dfc00517 	ldw	ra,20(sp)
    71e4:	dd000417 	ldw	r20,16(sp)
    71e8:	dcc00317 	ldw	r19,12(sp)
    71ec:	dc800217 	ldw	r18,8(sp)
    71f0:	dc400117 	ldw	r17,4(sp)
    71f4:	dc000017 	ldw	r16,0(sp)
    71f8:	dec00604 	addi	sp,sp,24
    71fc:	f800283a 	ret
    7200:	8cc00f2e 	bgeu	r17,r19,7240 <__b2d+0xe0>
    7204:	117ffd44 	addi	r5,r2,-11
    7208:	80bffe17 	ldw	r2,-8(r16)
    720c:	28000e26 	beq	r5,zero,7248 <__b2d+0xe8>
    7210:	1949c83a 	sub	r4,r3,r5
    7214:	9164983a 	sll	r18,r18,r5
    7218:	1106d83a 	srl	r3,r2,r4
    721c:	81bffe04 	addi	r6,r16,-8
    7220:	948ffc34 	orhi	r18,r18,16368
    7224:	90c6b03a 	or	r3,r18,r3
    7228:	89800e2e 	bgeu	r17,r6,7264 <__b2d+0x104>
    722c:	81bffd17 	ldw	r6,-12(r16)
    7230:	1144983a 	sll	r2,r2,r5
    7234:	310ad83a 	srl	r5,r6,r4
    7238:	2884b03a 	or	r2,r5,r2
    723c:	003fe806 	br	71e0 <__b2d+0x80>
    7240:	10bffd44 	addi	r2,r2,-11
    7244:	1000041e 	bne	r2,zero,7258 <__b2d+0xf8>
    7248:	90cffc34 	orhi	r3,r18,16368
    724c:	003fe406 	br	71e0 <__b2d+0x80>
    7250:	000d883a 	mov	r6,zero
    7254:	003fdf06 	br	71d4 <__b2d+0x74>
    7258:	90a4983a 	sll	r18,r18,r2
    725c:	0005883a 	mov	r2,zero
    7260:	003ff906 	br	7248 <__b2d+0xe8>
    7264:	1144983a 	sll	r2,r2,r5
    7268:	003fdd06 	br	71e0 <__b2d+0x80>

0000726c <__d2b>:
    726c:	defff804 	addi	sp,sp,-32
    7270:	dc000215 	stw	r16,8(sp)
    7274:	3021883a 	mov	r16,r6
    7278:	dc400315 	stw	r17,12(sp)
    727c:	8022907a 	slli	r17,r16,1
    7280:	dd000615 	stw	r20,24(sp)
    7284:	2829883a 	mov	r20,r5
    7288:	01400044 	movi	r5,1
    728c:	dcc00515 	stw	r19,20(sp)
    7290:	dc800415 	stw	r18,16(sp)
    7294:	dfc00715 	stw	ra,28(sp)
    7298:	3825883a 	mov	r18,r7
    729c:	8822d57a 	srli	r17,r17,21
    72a0:	00065d80 	call	65d8 <_Balloc>
    72a4:	1027883a 	mov	r19,r2
    72a8:	00800434 	movhi	r2,16
    72ac:	10bfffc4 	addi	r2,r2,-1
    72b0:	808c703a 	and	r6,r16,r2
    72b4:	88000126 	beq	r17,zero,72bc <__d2b+0x50>
    72b8:	31800434 	orhi	r6,r6,16
    72bc:	d9800015 	stw	r6,0(sp)
    72c0:	a0002426 	beq	r20,zero,7354 <__d2b+0xe8>
    72c4:	d9000104 	addi	r4,sp,4
    72c8:	dd000115 	stw	r20,4(sp)
    72cc:	00069340 	call	6934 <__lo0bits>
    72d0:	d8c00017 	ldw	r3,0(sp)
    72d4:	10002f1e 	bne	r2,zero,7394 <__d2b+0x128>
    72d8:	d9000117 	ldw	r4,4(sp)
    72dc:	99000515 	stw	r4,20(r19)
    72e0:	1821003a 	cmpeq	r16,r3,zero
    72e4:	01000084 	movi	r4,2
    72e8:	2421c83a 	sub	r16,r4,r16
    72ec:	98c00615 	stw	r3,24(r19)
    72f0:	9c000415 	stw	r16,16(r19)
    72f4:	88001f1e 	bne	r17,zero,7374 <__d2b+0x108>
    72f8:	10bef384 	addi	r2,r2,-1074
    72fc:	90800015 	stw	r2,0(r18)
    7300:	00900034 	movhi	r2,16384
    7304:	10bfffc4 	addi	r2,r2,-1
    7308:	8085883a 	add	r2,r16,r2
    730c:	1085883a 	add	r2,r2,r2
    7310:	1085883a 	add	r2,r2,r2
    7314:	9885883a 	add	r2,r19,r2
    7318:	11000517 	ldw	r4,20(r2)
    731c:	8020917a 	slli	r16,r16,5
    7320:	00068cc0 	call	68cc <__hi0bits>
    7324:	d8c00817 	ldw	r3,32(sp)
    7328:	8085c83a 	sub	r2,r16,r2
    732c:	18800015 	stw	r2,0(r3)
    7330:	9805883a 	mov	r2,r19
    7334:	dfc00717 	ldw	ra,28(sp)
    7338:	dd000617 	ldw	r20,24(sp)
    733c:	dcc00517 	ldw	r19,20(sp)
    7340:	dc800417 	ldw	r18,16(sp)
    7344:	dc400317 	ldw	r17,12(sp)
    7348:	dc000217 	ldw	r16,8(sp)
    734c:	dec00804 	addi	sp,sp,32
    7350:	f800283a 	ret
    7354:	d809883a 	mov	r4,sp
    7358:	00069340 	call	6934 <__lo0bits>
    735c:	d8c00017 	ldw	r3,0(sp)
    7360:	04000044 	movi	r16,1
    7364:	9c000415 	stw	r16,16(r19)
    7368:	98c00515 	stw	r3,20(r19)
    736c:	10800804 	addi	r2,r2,32
    7370:	883fe126 	beq	r17,zero,72f8 <__d2b+0x8c>
    7374:	00c00d44 	movi	r3,53
    7378:	8c7ef344 	addi	r17,r17,-1075
    737c:	88a3883a 	add	r17,r17,r2
    7380:	1885c83a 	sub	r2,r3,r2
    7384:	d8c00817 	ldw	r3,32(sp)
    7388:	94400015 	stw	r17,0(r18)
    738c:	18800015 	stw	r2,0(r3)
    7390:	003fe706 	br	7330 <__d2b+0xc4>
    7394:	01000804 	movi	r4,32
    7398:	2089c83a 	sub	r4,r4,r2
    739c:	1908983a 	sll	r4,r3,r4
    73a0:	d9400117 	ldw	r5,4(sp)
    73a4:	1886d83a 	srl	r3,r3,r2
    73a8:	2148b03a 	or	r4,r4,r5
    73ac:	99000515 	stw	r4,20(r19)
    73b0:	d8c00015 	stw	r3,0(sp)
    73b4:	003fca06 	br	72e0 <__d2b+0x74>

000073b8 <__ratio>:
    73b8:	defff904 	addi	sp,sp,-28
    73bc:	dc400315 	stw	r17,12(sp)
    73c0:	2823883a 	mov	r17,r5
    73c4:	d9400104 	addi	r5,sp,4
    73c8:	dfc00615 	stw	ra,24(sp)
    73cc:	dcc00515 	stw	r19,20(sp)
    73d0:	dc800415 	stw	r18,16(sp)
    73d4:	2027883a 	mov	r19,r4
    73d8:	dc000215 	stw	r16,8(sp)
    73dc:	00071600 	call	7160 <__b2d>
    73e0:	d80b883a 	mov	r5,sp
    73e4:	8809883a 	mov	r4,r17
    73e8:	1025883a 	mov	r18,r2
    73ec:	1821883a 	mov	r16,r3
    73f0:	00071600 	call	7160 <__b2d>
    73f4:	8a000417 	ldw	r8,16(r17)
    73f8:	99000417 	ldw	r4,16(r19)
    73fc:	d9400117 	ldw	r5,4(sp)
    7400:	2209c83a 	sub	r4,r4,r8
    7404:	2010917a 	slli	r8,r4,5
    7408:	d9000017 	ldw	r4,0(sp)
    740c:	2909c83a 	sub	r4,r5,r4
    7410:	4109883a 	add	r4,r8,r4
    7414:	01000e0e 	bge	zero,r4,7450 <__ratio+0x98>
    7418:	2008953a 	slli	r4,r4,20
    741c:	2421883a 	add	r16,r4,r16
    7420:	100d883a 	mov	r6,r2
    7424:	180f883a 	mov	r7,r3
    7428:	9009883a 	mov	r4,r18
    742c:	800b883a 	mov	r5,r16
    7430:	000b0f00 	call	b0f0 <__divdf3>
    7434:	dfc00617 	ldw	ra,24(sp)
    7438:	dcc00517 	ldw	r19,20(sp)
    743c:	dc800417 	ldw	r18,16(sp)
    7440:	dc400317 	ldw	r17,12(sp)
    7444:	dc000217 	ldw	r16,8(sp)
    7448:	dec00704 	addi	sp,sp,28
    744c:	f800283a 	ret
    7450:	2008953a 	slli	r4,r4,20
    7454:	1907c83a 	sub	r3,r3,r4
    7458:	003ff106 	br	7420 <__ratio+0x68>

0000745c <_mprec_log10>:
    745c:	defffe04 	addi	sp,sp,-8
    7460:	dc000015 	stw	r16,0(sp)
    7464:	dfc00115 	stw	ra,4(sp)
    7468:	008005c4 	movi	r2,23
    746c:	2021883a 	mov	r16,r4
    7470:	11000d0e 	bge	r2,r4,74a8 <_mprec_log10+0x4c>
    7474:	0005883a 	mov	r2,zero
    7478:	00cffc34 	movhi	r3,16368
    747c:	843fffc4 	addi	r16,r16,-1
    7480:	000d883a 	mov	r6,zero
    7484:	01d00934 	movhi	r7,16420
    7488:	1009883a 	mov	r4,r2
    748c:	180b883a 	mov	r5,r3
    7490:	000bc300 	call	bc30 <__muldf3>
    7494:	803ff91e 	bne	r16,zero,747c <_mprec_log10+0x20>
    7498:	dfc00117 	ldw	ra,4(sp)
    749c:	dc000017 	ldw	r16,0(sp)
    74a0:	dec00204 	addi	sp,sp,8
    74a4:	f800283a 	ret
    74a8:	202090fa 	slli	r16,r4,3
    74ac:	008000f4 	movhi	r2,3
    74b0:	10932104 	addi	r2,r2,19588
    74b4:	1421883a 	add	r16,r2,r16
    74b8:	80800017 	ldw	r2,0(r16)
    74bc:	80c00117 	ldw	r3,4(r16)
    74c0:	dfc00117 	ldw	ra,4(sp)
    74c4:	dc000017 	ldw	r16,0(sp)
    74c8:	dec00204 	addi	sp,sp,8
    74cc:	f800283a 	ret

000074d0 <__copybits>:
    74d0:	297fffc4 	addi	r5,r5,-1
    74d4:	280fd17a 	srai	r7,r5,5
    74d8:	30c00417 	ldw	r3,16(r6)
    74dc:	30800504 	addi	r2,r6,20
    74e0:	39c00044 	addi	r7,r7,1
    74e4:	18c7883a 	add	r3,r3,r3
    74e8:	39cf883a 	add	r7,r7,r7
    74ec:	18c7883a 	add	r3,r3,r3
    74f0:	39cf883a 	add	r7,r7,r7
    74f4:	10c7883a 	add	r3,r2,r3
    74f8:	21cf883a 	add	r7,r4,r7
    74fc:	10c00d2e 	bgeu	r2,r3,7534 <__copybits+0x64>
    7500:	200b883a 	mov	r5,r4
    7504:	12000017 	ldw	r8,0(r2)
    7508:	29400104 	addi	r5,r5,4
    750c:	10800104 	addi	r2,r2,4
    7510:	2a3fff15 	stw	r8,-4(r5)
    7514:	10fffb36 	bltu	r2,r3,7504 <__copybits+0x34>
    7518:	1985c83a 	sub	r2,r3,r6
    751c:	10bffac4 	addi	r2,r2,-21
    7520:	1004d0ba 	srli	r2,r2,2
    7524:	10800044 	addi	r2,r2,1
    7528:	1085883a 	add	r2,r2,r2
    752c:	1085883a 	add	r2,r2,r2
    7530:	2089883a 	add	r4,r4,r2
    7534:	21c0032e 	bgeu	r4,r7,7544 <__copybits+0x74>
    7538:	20000015 	stw	zero,0(r4)
    753c:	21000104 	addi	r4,r4,4
    7540:	21fffd36 	bltu	r4,r7,7538 <__copybits+0x68>
    7544:	f800283a 	ret

00007548 <__any_on>:
    7548:	20c00417 	ldw	r3,16(r4)
    754c:	2805d17a 	srai	r2,r5,5
    7550:	21000504 	addi	r4,r4,20
    7554:	18800d0e 	bge	r3,r2,758c <__any_on+0x44>
    7558:	18c7883a 	add	r3,r3,r3
    755c:	18c7883a 	add	r3,r3,r3
    7560:	20c7883a 	add	r3,r4,r3
    7564:	20c0192e 	bgeu	r4,r3,75cc <__any_on+0x84>
    7568:	18bfff17 	ldw	r2,-4(r3)
    756c:	18ffff04 	addi	r3,r3,-4
    7570:	1000041e 	bne	r2,zero,7584 <__any_on+0x3c>
    7574:	20c0142e 	bgeu	r4,r3,75c8 <__any_on+0x80>
    7578:	18ffff04 	addi	r3,r3,-4
    757c:	19400017 	ldw	r5,0(r3)
    7580:	283ffc26 	beq	r5,zero,7574 <__any_on+0x2c>
    7584:	00800044 	movi	r2,1
    7588:	f800283a 	ret
    758c:	10c00a0e 	bge	r2,r3,75b8 <__any_on+0x70>
    7590:	1085883a 	add	r2,r2,r2
    7594:	1085883a 	add	r2,r2,r2
    7598:	294007cc 	andi	r5,r5,31
    759c:	2087883a 	add	r3,r4,r2
    75a0:	283ff026 	beq	r5,zero,7564 <__any_on+0x1c>
    75a4:	19800017 	ldw	r6,0(r3)
    75a8:	3144d83a 	srl	r2,r6,r5
    75ac:	114a983a 	sll	r5,r2,r5
    75b0:	317ff41e 	bne	r6,r5,7584 <__any_on+0x3c>
    75b4:	003feb06 	br	7564 <__any_on+0x1c>
    75b8:	1085883a 	add	r2,r2,r2
    75bc:	1085883a 	add	r2,r2,r2
    75c0:	2087883a 	add	r3,r4,r2
    75c4:	003fe706 	br	7564 <__any_on+0x1c>
    75c8:	f800283a 	ret
    75cc:	0005883a 	mov	r2,zero
    75d0:	f800283a 	ret

000075d4 <_realloc_r>:
    75d4:	defff604 	addi	sp,sp,-40
    75d8:	dc800215 	stw	r18,8(sp)
    75dc:	dfc00915 	stw	ra,36(sp)
    75e0:	df000815 	stw	fp,32(sp)
    75e4:	ddc00715 	stw	r23,28(sp)
    75e8:	dd800615 	stw	r22,24(sp)
    75ec:	dd400515 	stw	r21,20(sp)
    75f0:	dd000415 	stw	r20,16(sp)
    75f4:	dcc00315 	stw	r19,12(sp)
    75f8:	dc400115 	stw	r17,4(sp)
    75fc:	dc000015 	stw	r16,0(sp)
    7600:	3025883a 	mov	r18,r6
    7604:	2800b726 	beq	r5,zero,78e4 <_realloc_r+0x310>
    7608:	282b883a 	mov	r21,r5
    760c:	2029883a 	mov	r20,r4
    7610:	000d90c0 	call	d90c <__malloc_lock>
    7614:	a8bfff17 	ldw	r2,-4(r21)
    7618:	043fff04 	movi	r16,-4
    761c:	90c002c4 	addi	r3,r18,11
    7620:	01000584 	movi	r4,22
    7624:	acfffe04 	addi	r19,r21,-8
    7628:	1420703a 	and	r16,r2,r16
    762c:	20c0332e 	bgeu	r4,r3,76fc <_realloc_r+0x128>
    7630:	047ffe04 	movi	r17,-8
    7634:	1c62703a 	and	r17,r3,r17
    7638:	8807883a 	mov	r3,r17
    763c:	88005816 	blt	r17,zero,77a0 <_realloc_r+0x1cc>
    7640:	8c805736 	bltu	r17,r18,77a0 <_realloc_r+0x1cc>
    7644:	80c0300e 	bge	r16,r3,7708 <_realloc_r+0x134>
    7648:	070000f4 	movhi	fp,3
    764c:	e7151804 	addi	fp,fp,21600
    7650:	e1c00217 	ldw	r7,8(fp)
    7654:	9c09883a 	add	r4,r19,r16
    7658:	22000117 	ldw	r8,4(r4)
    765c:	21c06326 	beq	r4,r7,77ec <_realloc_r+0x218>
    7660:	017fff84 	movi	r5,-2
    7664:	414a703a 	and	r5,r8,r5
    7668:	214b883a 	add	r5,r4,r5
    766c:	29800117 	ldw	r6,4(r5)
    7670:	3180004c 	andi	r6,r6,1
    7674:	30003f26 	beq	r6,zero,7774 <_realloc_r+0x1a0>
    7678:	1080004c 	andi	r2,r2,1
    767c:	10008326 	beq	r2,zero,788c <_realloc_r+0x2b8>
    7680:	900b883a 	mov	r5,r18
    7684:	a009883a 	mov	r4,r20
    7688:	000591c0 	call	591c <_malloc_r>
    768c:	1025883a 	mov	r18,r2
    7690:	10011e26 	beq	r2,zero,7b0c <_realloc_r+0x538>
    7694:	a93fff17 	ldw	r4,-4(r21)
    7698:	10fffe04 	addi	r3,r2,-8
    769c:	00bfff84 	movi	r2,-2
    76a0:	2084703a 	and	r2,r4,r2
    76a4:	9885883a 	add	r2,r19,r2
    76a8:	1880ee26 	beq	r3,r2,7a64 <_realloc_r+0x490>
    76ac:	81bfff04 	addi	r6,r16,-4
    76b0:	00800904 	movi	r2,36
    76b4:	1180b836 	bltu	r2,r6,7998 <_realloc_r+0x3c4>
    76b8:	00c004c4 	movi	r3,19
    76bc:	19809636 	bltu	r3,r6,7918 <_realloc_r+0x344>
    76c0:	9005883a 	mov	r2,r18
    76c4:	a807883a 	mov	r3,r21
    76c8:	19000017 	ldw	r4,0(r3)
    76cc:	11000015 	stw	r4,0(r2)
    76d0:	19000117 	ldw	r4,4(r3)
    76d4:	11000115 	stw	r4,4(r2)
    76d8:	18c00217 	ldw	r3,8(r3)
    76dc:	10c00215 	stw	r3,8(r2)
    76e0:	a80b883a 	mov	r5,r21
    76e4:	a009883a 	mov	r4,r20
    76e8:	0004d300 	call	4d30 <_free_r>
    76ec:	a009883a 	mov	r4,r20
    76f0:	000da2c0 	call	da2c <__malloc_unlock>
    76f4:	9005883a 	mov	r2,r18
    76f8:	00001206 	br	7744 <_realloc_r+0x170>
    76fc:	00c00404 	movi	r3,16
    7700:	1823883a 	mov	r17,r3
    7704:	003fce06 	br	7640 <_realloc_r+0x6c>
    7708:	a825883a 	mov	r18,r21
    770c:	8445c83a 	sub	r2,r16,r17
    7710:	00c003c4 	movi	r3,15
    7714:	18802636 	bltu	r3,r2,77b0 <_realloc_r+0x1dc>
    7718:	99800117 	ldw	r6,4(r19)
    771c:	9c07883a 	add	r3,r19,r16
    7720:	3180004c 	andi	r6,r6,1
    7724:	3420b03a 	or	r16,r6,r16
    7728:	9c000115 	stw	r16,4(r19)
    772c:	18800117 	ldw	r2,4(r3)
    7730:	10800054 	ori	r2,r2,1
    7734:	18800115 	stw	r2,4(r3)
    7738:	a009883a 	mov	r4,r20
    773c:	000da2c0 	call	da2c <__malloc_unlock>
    7740:	9005883a 	mov	r2,r18
    7744:	dfc00917 	ldw	ra,36(sp)
    7748:	df000817 	ldw	fp,32(sp)
    774c:	ddc00717 	ldw	r23,28(sp)
    7750:	dd800617 	ldw	r22,24(sp)
    7754:	dd400517 	ldw	r21,20(sp)
    7758:	dd000417 	ldw	r20,16(sp)
    775c:	dcc00317 	ldw	r19,12(sp)
    7760:	dc800217 	ldw	r18,8(sp)
    7764:	dc400117 	ldw	r17,4(sp)
    7768:	dc000017 	ldw	r16,0(sp)
    776c:	dec00a04 	addi	sp,sp,40
    7770:	f800283a 	ret
    7774:	017fff04 	movi	r5,-4
    7778:	414a703a 	and	r5,r8,r5
    777c:	814d883a 	add	r6,r16,r5
    7780:	30c01f16 	blt	r6,r3,7800 <_realloc_r+0x22c>
    7784:	20800317 	ldw	r2,12(r4)
    7788:	20c00217 	ldw	r3,8(r4)
    778c:	a825883a 	mov	r18,r21
    7790:	3021883a 	mov	r16,r6
    7794:	18800315 	stw	r2,12(r3)
    7798:	10c00215 	stw	r3,8(r2)
    779c:	003fdb06 	br	770c <_realloc_r+0x138>
    77a0:	00800304 	movi	r2,12
    77a4:	a0800015 	stw	r2,0(r20)
    77a8:	0005883a 	mov	r2,zero
    77ac:	003fe506 	br	7744 <_realloc_r+0x170>
    77b0:	98c00117 	ldw	r3,4(r19)
    77b4:	9c4b883a 	add	r5,r19,r17
    77b8:	11000054 	ori	r4,r2,1
    77bc:	18c0004c 	andi	r3,r3,1
    77c0:	1c62b03a 	or	r17,r3,r17
    77c4:	9c400115 	stw	r17,4(r19)
    77c8:	29000115 	stw	r4,4(r5)
    77cc:	2885883a 	add	r2,r5,r2
    77d0:	10c00117 	ldw	r3,4(r2)
    77d4:	29400204 	addi	r5,r5,8
    77d8:	a009883a 	mov	r4,r20
    77dc:	18c00054 	ori	r3,r3,1
    77e0:	10c00115 	stw	r3,4(r2)
    77e4:	0004d300 	call	4d30 <_free_r>
    77e8:	003fd306 	br	7738 <_realloc_r+0x164>
    77ec:	017fff04 	movi	r5,-4
    77f0:	414a703a 	and	r5,r8,r5
    77f4:	89800404 	addi	r6,r17,16
    77f8:	8151883a 	add	r8,r16,r5
    77fc:	4180590e 	bge	r8,r6,7964 <_realloc_r+0x390>
    7800:	1080004c 	andi	r2,r2,1
    7804:	103f9e1e 	bne	r2,zero,7680 <_realloc_r+0xac>
    7808:	adbffe17 	ldw	r22,-8(r21)
    780c:	00bfff04 	movi	r2,-4
    7810:	9dadc83a 	sub	r22,r19,r22
    7814:	b1800117 	ldw	r6,4(r22)
    7818:	3084703a 	and	r2,r6,r2
    781c:	20002026 	beq	r4,zero,78a0 <_realloc_r+0x2cc>
    7820:	80af883a 	add	r23,r16,r2
    7824:	b96f883a 	add	r23,r23,r5
    7828:	21c05f26 	beq	r4,r7,79a8 <_realloc_r+0x3d4>
    782c:	b8c01c16 	blt	r23,r3,78a0 <_realloc_r+0x2cc>
    7830:	20800317 	ldw	r2,12(r4)
    7834:	20c00217 	ldw	r3,8(r4)
    7838:	81bfff04 	addi	r6,r16,-4
    783c:	01000904 	movi	r4,36
    7840:	18800315 	stw	r2,12(r3)
    7844:	10c00215 	stw	r3,8(r2)
    7848:	b0c00217 	ldw	r3,8(r22)
    784c:	b0800317 	ldw	r2,12(r22)
    7850:	b4800204 	addi	r18,r22,8
    7854:	18800315 	stw	r2,12(r3)
    7858:	10c00215 	stw	r3,8(r2)
    785c:	21801b36 	bltu	r4,r6,78cc <_realloc_r+0x2f8>
    7860:	008004c4 	movi	r2,19
    7864:	1180352e 	bgeu	r2,r6,793c <_realloc_r+0x368>
    7868:	a8800017 	ldw	r2,0(r21)
    786c:	b0800215 	stw	r2,8(r22)
    7870:	a8800117 	ldw	r2,4(r21)
    7874:	b0800315 	stw	r2,12(r22)
    7878:	008006c4 	movi	r2,27
    787c:	11807f36 	bltu	r2,r6,7a7c <_realloc_r+0x4a8>
    7880:	b0800404 	addi	r2,r22,16
    7884:	ad400204 	addi	r21,r21,8
    7888:	00002d06 	br	7940 <_realloc_r+0x36c>
    788c:	adbffe17 	ldw	r22,-8(r21)
    7890:	00bfff04 	movi	r2,-4
    7894:	9dadc83a 	sub	r22,r19,r22
    7898:	b1000117 	ldw	r4,4(r22)
    789c:	2084703a 	and	r2,r4,r2
    78a0:	b03f7726 	beq	r22,zero,7680 <_realloc_r+0xac>
    78a4:	80af883a 	add	r23,r16,r2
    78a8:	b8ff7516 	blt	r23,r3,7680 <_realloc_r+0xac>
    78ac:	b0800317 	ldw	r2,12(r22)
    78b0:	b0c00217 	ldw	r3,8(r22)
    78b4:	81bfff04 	addi	r6,r16,-4
    78b8:	01000904 	movi	r4,36
    78bc:	18800315 	stw	r2,12(r3)
    78c0:	10c00215 	stw	r3,8(r2)
    78c4:	b4800204 	addi	r18,r22,8
    78c8:	21bfe52e 	bgeu	r4,r6,7860 <_realloc_r+0x28c>
    78cc:	a80b883a 	mov	r5,r21
    78d0:	9009883a 	mov	r4,r18
    78d4:	00063540 	call	6354 <memmove>
    78d8:	b821883a 	mov	r16,r23
    78dc:	b027883a 	mov	r19,r22
    78e0:	003f8a06 	br	770c <_realloc_r+0x138>
    78e4:	300b883a 	mov	r5,r6
    78e8:	dfc00917 	ldw	ra,36(sp)
    78ec:	df000817 	ldw	fp,32(sp)
    78f0:	ddc00717 	ldw	r23,28(sp)
    78f4:	dd800617 	ldw	r22,24(sp)
    78f8:	dd400517 	ldw	r21,20(sp)
    78fc:	dd000417 	ldw	r20,16(sp)
    7900:	dcc00317 	ldw	r19,12(sp)
    7904:	dc800217 	ldw	r18,8(sp)
    7908:	dc400117 	ldw	r17,4(sp)
    790c:	dc000017 	ldw	r16,0(sp)
    7910:	dec00a04 	addi	sp,sp,40
    7914:	000591c1 	jmpi	591c <_malloc_r>
    7918:	a8c00017 	ldw	r3,0(r21)
    791c:	90c00015 	stw	r3,0(r18)
    7920:	a8c00117 	ldw	r3,4(r21)
    7924:	90c00115 	stw	r3,4(r18)
    7928:	00c006c4 	movi	r3,27
    792c:	19804536 	bltu	r3,r6,7a44 <_realloc_r+0x470>
    7930:	90800204 	addi	r2,r18,8
    7934:	a8c00204 	addi	r3,r21,8
    7938:	003f6306 	br	76c8 <_realloc_r+0xf4>
    793c:	9005883a 	mov	r2,r18
    7940:	a8c00017 	ldw	r3,0(r21)
    7944:	b821883a 	mov	r16,r23
    7948:	b027883a 	mov	r19,r22
    794c:	10c00015 	stw	r3,0(r2)
    7950:	a8c00117 	ldw	r3,4(r21)
    7954:	10c00115 	stw	r3,4(r2)
    7958:	a8c00217 	ldw	r3,8(r21)
    795c:	10c00215 	stw	r3,8(r2)
    7960:	003f6a06 	br	770c <_realloc_r+0x138>
    7964:	9c67883a 	add	r19,r19,r17
    7968:	4445c83a 	sub	r2,r8,r17
    796c:	e4c00215 	stw	r19,8(fp)
    7970:	10800054 	ori	r2,r2,1
    7974:	98800115 	stw	r2,4(r19)
    7978:	a8bfff17 	ldw	r2,-4(r21)
    797c:	a009883a 	mov	r4,r20
    7980:	1080004c 	andi	r2,r2,1
    7984:	1462b03a 	or	r17,r2,r17
    7988:	ac7fff15 	stw	r17,-4(r21)
    798c:	000da2c0 	call	da2c <__malloc_unlock>
    7990:	a805883a 	mov	r2,r21
    7994:	003f6b06 	br	7744 <_realloc_r+0x170>
    7998:	a80b883a 	mov	r5,r21
    799c:	9009883a 	mov	r4,r18
    79a0:	00063540 	call	6354 <memmove>
    79a4:	003f4e06 	br	76e0 <_realloc_r+0x10c>
    79a8:	89000404 	addi	r4,r17,16
    79ac:	b93fbc16 	blt	r23,r4,78a0 <_realloc_r+0x2cc>
    79b0:	b0800317 	ldw	r2,12(r22)
    79b4:	b0c00217 	ldw	r3,8(r22)
    79b8:	81bfff04 	addi	r6,r16,-4
    79bc:	01000904 	movi	r4,36
    79c0:	18800315 	stw	r2,12(r3)
    79c4:	10c00215 	stw	r3,8(r2)
    79c8:	b4800204 	addi	r18,r22,8
    79cc:	21804336 	bltu	r4,r6,7adc <_realloc_r+0x508>
    79d0:	008004c4 	movi	r2,19
    79d4:	11803f2e 	bgeu	r2,r6,7ad4 <_realloc_r+0x500>
    79d8:	a8800017 	ldw	r2,0(r21)
    79dc:	b0800215 	stw	r2,8(r22)
    79e0:	a8800117 	ldw	r2,4(r21)
    79e4:	b0800315 	stw	r2,12(r22)
    79e8:	008006c4 	movi	r2,27
    79ec:	11803f36 	bltu	r2,r6,7aec <_realloc_r+0x518>
    79f0:	b0800404 	addi	r2,r22,16
    79f4:	ad400204 	addi	r21,r21,8
    79f8:	a8c00017 	ldw	r3,0(r21)
    79fc:	10c00015 	stw	r3,0(r2)
    7a00:	a8c00117 	ldw	r3,4(r21)
    7a04:	10c00115 	stw	r3,4(r2)
    7a08:	a8c00217 	ldw	r3,8(r21)
    7a0c:	10c00215 	stw	r3,8(r2)
    7a10:	b447883a 	add	r3,r22,r17
    7a14:	bc45c83a 	sub	r2,r23,r17
    7a18:	e0c00215 	stw	r3,8(fp)
    7a1c:	10800054 	ori	r2,r2,1
    7a20:	18800115 	stw	r2,4(r3)
    7a24:	b0800117 	ldw	r2,4(r22)
    7a28:	a009883a 	mov	r4,r20
    7a2c:	1080004c 	andi	r2,r2,1
    7a30:	1462b03a 	or	r17,r2,r17
    7a34:	b4400115 	stw	r17,4(r22)
    7a38:	000da2c0 	call	da2c <__malloc_unlock>
    7a3c:	9005883a 	mov	r2,r18
    7a40:	003f4006 	br	7744 <_realloc_r+0x170>
    7a44:	a8c00217 	ldw	r3,8(r21)
    7a48:	90c00215 	stw	r3,8(r18)
    7a4c:	a8c00317 	ldw	r3,12(r21)
    7a50:	90c00315 	stw	r3,12(r18)
    7a54:	30801126 	beq	r6,r2,7a9c <_realloc_r+0x4c8>
    7a58:	90800404 	addi	r2,r18,16
    7a5c:	a8c00404 	addi	r3,r21,16
    7a60:	003f1906 	br	76c8 <_realloc_r+0xf4>
    7a64:	90ffff17 	ldw	r3,-4(r18)
    7a68:	00bfff04 	movi	r2,-4
    7a6c:	a825883a 	mov	r18,r21
    7a70:	1884703a 	and	r2,r3,r2
    7a74:	80a1883a 	add	r16,r16,r2
    7a78:	003f2406 	br	770c <_realloc_r+0x138>
    7a7c:	a8800217 	ldw	r2,8(r21)
    7a80:	b0800415 	stw	r2,16(r22)
    7a84:	a8800317 	ldw	r2,12(r21)
    7a88:	b0800515 	stw	r2,20(r22)
    7a8c:	31000a26 	beq	r6,r4,7ab8 <_realloc_r+0x4e4>
    7a90:	b0800604 	addi	r2,r22,24
    7a94:	ad400404 	addi	r21,r21,16
    7a98:	003fa906 	br	7940 <_realloc_r+0x36c>
    7a9c:	a9000417 	ldw	r4,16(r21)
    7aa0:	90800604 	addi	r2,r18,24
    7aa4:	a8c00604 	addi	r3,r21,24
    7aa8:	91000415 	stw	r4,16(r18)
    7aac:	a9000517 	ldw	r4,20(r21)
    7ab0:	91000515 	stw	r4,20(r18)
    7ab4:	003f0406 	br	76c8 <_realloc_r+0xf4>
    7ab8:	a8c00417 	ldw	r3,16(r21)
    7abc:	ad400604 	addi	r21,r21,24
    7ac0:	b0800804 	addi	r2,r22,32
    7ac4:	b0c00615 	stw	r3,24(r22)
    7ac8:	a8ffff17 	ldw	r3,-4(r21)
    7acc:	b0c00715 	stw	r3,28(r22)
    7ad0:	003f9b06 	br	7940 <_realloc_r+0x36c>
    7ad4:	9005883a 	mov	r2,r18
    7ad8:	003fc706 	br	79f8 <_realloc_r+0x424>
    7adc:	a80b883a 	mov	r5,r21
    7ae0:	9009883a 	mov	r4,r18
    7ae4:	00063540 	call	6354 <memmove>
    7ae8:	003fc906 	br	7a10 <_realloc_r+0x43c>
    7aec:	a8800217 	ldw	r2,8(r21)
    7af0:	b0800415 	stw	r2,16(r22)
    7af4:	a8800317 	ldw	r2,12(r21)
    7af8:	b0800515 	stw	r2,20(r22)
    7afc:	31000726 	beq	r6,r4,7b1c <_realloc_r+0x548>
    7b00:	b0800604 	addi	r2,r22,24
    7b04:	ad400404 	addi	r21,r21,16
    7b08:	003fbb06 	br	79f8 <_realloc_r+0x424>
    7b0c:	a009883a 	mov	r4,r20
    7b10:	000da2c0 	call	da2c <__malloc_unlock>
    7b14:	0005883a 	mov	r2,zero
    7b18:	003f0a06 	br	7744 <_realloc_r+0x170>
    7b1c:	a8c00417 	ldw	r3,16(r21)
    7b20:	ad400604 	addi	r21,r21,24
    7b24:	b0800804 	addi	r2,r22,32
    7b28:	b0c00615 	stw	r3,24(r22)
    7b2c:	a8ffff17 	ldw	r3,-4(r21)
    7b30:	b0c00715 	stw	r3,28(r22)
    7b34:	003fb006 	br	79f8 <_realloc_r+0x424>

00007b38 <__fpclassifyd>:
    7b38:	00a00034 	movhi	r2,32768
    7b3c:	10bfffc4 	addi	r2,r2,-1
    7b40:	2884703a 	and	r2,r5,r2
    7b44:	10000726 	beq	r2,zero,7b64 <__fpclassifyd+0x2c>
    7b48:	00fffc34 	movhi	r3,65520
    7b4c:	019ff834 	movhi	r6,32736
    7b50:	28c7883a 	add	r3,r5,r3
    7b54:	31bfffc4 	addi	r6,r6,-1
    7b58:	30c00536 	bltu	r6,r3,7b70 <__fpclassifyd+0x38>
    7b5c:	00800104 	movi	r2,4
    7b60:	f800283a 	ret
    7b64:	2000021e 	bne	r4,zero,7b70 <__fpclassifyd+0x38>
    7b68:	00800084 	movi	r2,2
    7b6c:	f800283a 	ret
    7b70:	00dffc34 	movhi	r3,32752
    7b74:	019ff834 	movhi	r6,32736
    7b78:	28cb883a 	add	r5,r5,r3
    7b7c:	31bfffc4 	addi	r6,r6,-1
    7b80:	317ff62e 	bgeu	r6,r5,7b5c <__fpclassifyd+0x24>
    7b84:	01400434 	movhi	r5,16
    7b88:	297fffc4 	addi	r5,r5,-1
    7b8c:	28800236 	bltu	r5,r2,7b98 <__fpclassifyd+0x60>
    7b90:	008000c4 	movi	r2,3
    7b94:	f800283a 	ret
    7b98:	10c00226 	beq	r2,r3,7ba4 <__fpclassifyd+0x6c>
    7b9c:	0005883a 	mov	r2,zero
    7ba0:	f800283a 	ret
    7ba4:	2005003a 	cmpeq	r2,r4,zero
    7ba8:	f800283a 	ret

00007bac <_sbrk_r>:
    7bac:	defffd04 	addi	sp,sp,-12
    7bb0:	dc000015 	stw	r16,0(sp)
    7bb4:	04000134 	movhi	r16,4
    7bb8:	dc400115 	stw	r17,4(sp)
    7bbc:	8421b504 	addi	r16,r16,-31020
    7bc0:	2023883a 	mov	r17,r4
    7bc4:	2809883a 	mov	r4,r5
    7bc8:	dfc00215 	stw	ra,8(sp)
    7bcc:	80000015 	stw	zero,0(r16)
    7bd0:	000d6040 	call	d604 <sbrk>
    7bd4:	00ffffc4 	movi	r3,-1
    7bd8:	10c00526 	beq	r2,r3,7bf0 <_sbrk_r+0x44>
    7bdc:	dfc00217 	ldw	ra,8(sp)
    7be0:	dc400117 	ldw	r17,4(sp)
    7be4:	dc000017 	ldw	r16,0(sp)
    7be8:	dec00304 	addi	sp,sp,12
    7bec:	f800283a 	ret
    7bf0:	80c00017 	ldw	r3,0(r16)
    7bf4:	183ff926 	beq	r3,zero,7bdc <_sbrk_r+0x30>
    7bf8:	88c00015 	stw	r3,0(r17)
    7bfc:	003ff706 	br	7bdc <_sbrk_r+0x30>

00007c00 <__sread>:
    7c00:	defffe04 	addi	sp,sp,-8
    7c04:	dc000015 	stw	r16,0(sp)
    7c08:	2821883a 	mov	r16,r5
    7c0c:	2940038f 	ldh	r5,14(r5)
    7c10:	dfc00115 	stw	ra,4(sp)
    7c14:	00099f40 	call	99f4 <_read_r>
    7c18:	10000716 	blt	r2,zero,7c38 <__sread+0x38>
    7c1c:	80c01417 	ldw	r3,80(r16)
    7c20:	1887883a 	add	r3,r3,r2
    7c24:	80c01415 	stw	r3,80(r16)
    7c28:	dfc00117 	ldw	ra,4(sp)
    7c2c:	dc000017 	ldw	r16,0(sp)
    7c30:	dec00204 	addi	sp,sp,8
    7c34:	f800283a 	ret
    7c38:	80c0030b 	ldhu	r3,12(r16)
    7c3c:	18fbffcc 	andi	r3,r3,61439
    7c40:	80c0030d 	sth	r3,12(r16)
    7c44:	dfc00117 	ldw	ra,4(sp)
    7c48:	dc000017 	ldw	r16,0(sp)
    7c4c:	dec00204 	addi	sp,sp,8
    7c50:	f800283a 	ret

00007c54 <__seofread>:
    7c54:	0005883a 	mov	r2,zero
    7c58:	f800283a 	ret

00007c5c <__swrite>:
    7c5c:	2880030b 	ldhu	r2,12(r5)
    7c60:	defffb04 	addi	sp,sp,-20
    7c64:	dcc00315 	stw	r19,12(sp)
    7c68:	dc800215 	stw	r18,8(sp)
    7c6c:	dc400115 	stw	r17,4(sp)
    7c70:	dc000015 	stw	r16,0(sp)
    7c74:	dfc00415 	stw	ra,16(sp)
    7c78:	10c0400c 	andi	r3,r2,256
    7c7c:	2821883a 	mov	r16,r5
    7c80:	2023883a 	mov	r17,r4
    7c84:	3025883a 	mov	r18,r6
    7c88:	3827883a 	mov	r19,r7
    7c8c:	18000526 	beq	r3,zero,7ca4 <__swrite+0x48>
    7c90:	2940038f 	ldh	r5,14(r5)
    7c94:	01c00084 	movi	r7,2
    7c98:	000d883a 	mov	r6,zero
    7c9c:	00099940 	call	9994 <_lseek_r>
    7ca0:	8080030b 	ldhu	r2,12(r16)
    7ca4:	8140038f 	ldh	r5,14(r16)
    7ca8:	10bbffcc 	andi	r2,r2,61439
    7cac:	980f883a 	mov	r7,r19
    7cb0:	900d883a 	mov	r6,r18
    7cb4:	8809883a 	mov	r4,r17
    7cb8:	8080030d 	sth	r2,12(r16)
    7cbc:	dfc00417 	ldw	ra,16(sp)
    7cc0:	dcc00317 	ldw	r19,12(sp)
    7cc4:	dc800217 	ldw	r18,8(sp)
    7cc8:	dc400117 	ldw	r17,4(sp)
    7ccc:	dc000017 	ldw	r16,0(sp)
    7cd0:	dec00504 	addi	sp,sp,20
    7cd4:	00094601 	jmpi	9460 <_write_r>

00007cd8 <__sseek>:
    7cd8:	defffe04 	addi	sp,sp,-8
    7cdc:	dc000015 	stw	r16,0(sp)
    7ce0:	2821883a 	mov	r16,r5
    7ce4:	2940038f 	ldh	r5,14(r5)
    7ce8:	dfc00115 	stw	ra,4(sp)
    7cec:	00099940 	call	9994 <_lseek_r>
    7cf0:	00ffffc4 	movi	r3,-1
    7cf4:	10c00826 	beq	r2,r3,7d18 <__sseek+0x40>
    7cf8:	80c0030b 	ldhu	r3,12(r16)
    7cfc:	80801415 	stw	r2,80(r16)
    7d00:	18c40014 	ori	r3,r3,4096
    7d04:	80c0030d 	sth	r3,12(r16)
    7d08:	dfc00117 	ldw	ra,4(sp)
    7d0c:	dc000017 	ldw	r16,0(sp)
    7d10:	dec00204 	addi	sp,sp,8
    7d14:	f800283a 	ret
    7d18:	80c0030b 	ldhu	r3,12(r16)
    7d1c:	18fbffcc 	andi	r3,r3,61439
    7d20:	80c0030d 	sth	r3,12(r16)
    7d24:	dfc00117 	ldw	ra,4(sp)
    7d28:	dc000017 	ldw	r16,0(sp)
    7d2c:	dec00204 	addi	sp,sp,8
    7d30:	f800283a 	ret

00007d34 <__sclose>:
    7d34:	2940038f 	ldh	r5,14(r5)
    7d38:	00094c01 	jmpi	94c0 <_close_r>

00007d3c <strcmp>:
    7d3c:	2144b03a 	or	r2,r4,r5
    7d40:	108000cc 	andi	r2,r2,3
    7d44:	1000171e 	bne	r2,zero,7da4 <strcmp+0x68>
    7d48:	20800017 	ldw	r2,0(r4)
    7d4c:	28c00017 	ldw	r3,0(r5)
    7d50:	10c0141e 	bne	r2,r3,7da4 <strcmp+0x68>
    7d54:	027fbff4 	movhi	r9,65279
    7d58:	4a7fbfc4 	addi	r9,r9,-257
    7d5c:	0086303a 	nor	r3,zero,r2
    7d60:	02202074 	movhi	r8,32897
    7d64:	1245883a 	add	r2,r2,r9
    7d68:	42202004 	addi	r8,r8,-32640
    7d6c:	10c4703a 	and	r2,r2,r3
    7d70:	1204703a 	and	r2,r2,r8
    7d74:	10000226 	beq	r2,zero,7d80 <strcmp+0x44>
    7d78:	00002306 	br	7e08 <strcmp+0xcc>
    7d7c:	1000221e 	bne	r2,zero,7e08 <strcmp+0xcc>
    7d80:	21000104 	addi	r4,r4,4
    7d84:	20c00017 	ldw	r3,0(r4)
    7d88:	29400104 	addi	r5,r5,4
    7d8c:	29800017 	ldw	r6,0(r5)
    7d90:	1a4f883a 	add	r7,r3,r9
    7d94:	00c4303a 	nor	r2,zero,r3
    7d98:	3884703a 	and	r2,r7,r2
    7d9c:	1204703a 	and	r2,r2,r8
    7da0:	19bff626 	beq	r3,r6,7d7c <strcmp+0x40>
    7da4:	20800003 	ldbu	r2,0(r4)
    7da8:	10c03fcc 	andi	r3,r2,255
    7dac:	18c0201c 	xori	r3,r3,128
    7db0:	18ffe004 	addi	r3,r3,-128
    7db4:	18000c26 	beq	r3,zero,7de8 <strcmp+0xac>
    7db8:	29800007 	ldb	r6,0(r5)
    7dbc:	19800326 	beq	r3,r6,7dcc <strcmp+0x90>
    7dc0:	00001306 	br	7e10 <strcmp+0xd4>
    7dc4:	29800007 	ldb	r6,0(r5)
    7dc8:	11800b1e 	bne	r2,r6,7df8 <strcmp+0xbc>
    7dcc:	21000044 	addi	r4,r4,1
    7dd0:	20c00003 	ldbu	r3,0(r4)
    7dd4:	29400044 	addi	r5,r5,1
    7dd8:	18803fcc 	andi	r2,r3,255
    7ddc:	1080201c 	xori	r2,r2,128
    7de0:	10bfe004 	addi	r2,r2,-128
    7de4:	103ff71e 	bne	r2,zero,7dc4 <strcmp+0x88>
    7de8:	0007883a 	mov	r3,zero
    7dec:	28800003 	ldbu	r2,0(r5)
    7df0:	1885c83a 	sub	r2,r3,r2
    7df4:	f800283a 	ret
    7df8:	28800003 	ldbu	r2,0(r5)
    7dfc:	18c03fcc 	andi	r3,r3,255
    7e00:	1885c83a 	sub	r2,r3,r2
    7e04:	f800283a 	ret
    7e08:	0005883a 	mov	r2,zero
    7e0c:	f800283a 	ret
    7e10:	10c03fcc 	andi	r3,r2,255
    7e14:	003ff506 	br	7dec <strcmp+0xb0>

00007e18 <__sprint_r.part.0>:
    7e18:	28801917 	ldw	r2,100(r5)
    7e1c:	defff604 	addi	sp,sp,-40
    7e20:	dd400515 	stw	r21,20(sp)
    7e24:	dfc00915 	stw	ra,36(sp)
    7e28:	df000815 	stw	fp,32(sp)
    7e2c:	ddc00715 	stw	r23,28(sp)
    7e30:	dd800615 	stw	r22,24(sp)
    7e34:	dd000415 	stw	r20,16(sp)
    7e38:	dcc00315 	stw	r19,12(sp)
    7e3c:	dc800215 	stw	r18,8(sp)
    7e40:	dc400115 	stw	r17,4(sp)
    7e44:	dc000015 	stw	r16,0(sp)
    7e48:	1088000c 	andi	r2,r2,8192
    7e4c:	302b883a 	mov	r21,r6
    7e50:	10002e26 	beq	r2,zero,7f0c <__sprint_r.part.0+0xf4>
    7e54:	30800217 	ldw	r2,8(r6)
    7e58:	35800017 	ldw	r22,0(r6)
    7e5c:	10002926 	beq	r2,zero,7f04 <__sprint_r.part.0+0xec>
    7e60:	2827883a 	mov	r19,r5
    7e64:	2029883a 	mov	r20,r4
    7e68:	b5c00104 	addi	r23,r22,4
    7e6c:	04bfffc4 	movi	r18,-1
    7e70:	bc400017 	ldw	r17,0(r23)
    7e74:	b4000017 	ldw	r16,0(r22)
    7e78:	0039883a 	mov	fp,zero
    7e7c:	8822d0ba 	srli	r17,r17,2
    7e80:	8800031e 	bne	r17,zero,7e90 <__sprint_r.part.0+0x78>
    7e84:	00001806 	br	7ee8 <__sprint_r.part.0+0xd0>
    7e88:	84000104 	addi	r16,r16,4
    7e8c:	8f001526 	beq	r17,fp,7ee4 <__sprint_r.part.0+0xcc>
    7e90:	81400017 	ldw	r5,0(r16)
    7e94:	980d883a 	mov	r6,r19
    7e98:	a009883a 	mov	r4,r20
    7e9c:	00098400 	call	9840 <_fputwc_r>
    7ea0:	e7000044 	addi	fp,fp,1
    7ea4:	14bff81e 	bne	r2,r18,7e88 <__sprint_r.part.0+0x70>
    7ea8:	9005883a 	mov	r2,r18
    7eac:	a8000215 	stw	zero,8(r21)
    7eb0:	a8000115 	stw	zero,4(r21)
    7eb4:	dfc00917 	ldw	ra,36(sp)
    7eb8:	df000817 	ldw	fp,32(sp)
    7ebc:	ddc00717 	ldw	r23,28(sp)
    7ec0:	dd800617 	ldw	r22,24(sp)
    7ec4:	dd400517 	ldw	r21,20(sp)
    7ec8:	dd000417 	ldw	r20,16(sp)
    7ecc:	dcc00317 	ldw	r19,12(sp)
    7ed0:	dc800217 	ldw	r18,8(sp)
    7ed4:	dc400117 	ldw	r17,4(sp)
    7ed8:	dc000017 	ldw	r16,0(sp)
    7edc:	dec00a04 	addi	sp,sp,40
    7ee0:	f800283a 	ret
    7ee4:	a8800217 	ldw	r2,8(r21)
    7ee8:	8c63883a 	add	r17,r17,r17
    7eec:	8c63883a 	add	r17,r17,r17
    7ef0:	1445c83a 	sub	r2,r2,r17
    7ef4:	a8800215 	stw	r2,8(r21)
    7ef8:	b5800204 	addi	r22,r22,8
    7efc:	bdc00204 	addi	r23,r23,8
    7f00:	103fdb1e 	bne	r2,zero,7e70 <__sprint_r.part.0+0x58>
    7f04:	0005883a 	mov	r2,zero
    7f08:	003fe806 	br	7eac <__sprint_r.part.0+0x94>
    7f0c:	00050400 	call	5040 <__sfvwrite_r>
    7f10:	003fe606 	br	7eac <__sprint_r.part.0+0x94>

00007f14 <__sprint_r>:
    7f14:	30c00217 	ldw	r3,8(r6)
    7f18:	18000126 	beq	r3,zero,7f20 <__sprint_r+0xc>
    7f1c:	0007e181 	jmpi	7e18 <__sprint_r.part.0>
    7f20:	30000115 	stw	zero,4(r6)
    7f24:	0005883a 	mov	r2,zero
    7f28:	f800283a 	ret

00007f2c <___vfiprintf_internal_r>:
    7f2c:	deffc904 	addi	sp,sp,-220
    7f30:	df003515 	stw	fp,212(sp)
    7f34:	dd003115 	stw	r20,196(sp)
    7f38:	dfc03615 	stw	ra,216(sp)
    7f3c:	ddc03415 	stw	r23,208(sp)
    7f40:	dd803315 	stw	r22,204(sp)
    7f44:	dd403215 	stw	r21,200(sp)
    7f48:	dcc03015 	stw	r19,192(sp)
    7f4c:	dc802f15 	stw	r18,188(sp)
    7f50:	dc402e15 	stw	r17,184(sp)
    7f54:	dc002d15 	stw	r16,180(sp)
    7f58:	d9002015 	stw	r4,128(sp)
    7f5c:	d9c02215 	stw	r7,136(sp)
    7f60:	2829883a 	mov	r20,r5
    7f64:	3039883a 	mov	fp,r6
    7f68:	20000226 	beq	r4,zero,7f74 <___vfiprintf_internal_r+0x48>
    7f6c:	20800e17 	ldw	r2,56(r4)
    7f70:	1000cf26 	beq	r2,zero,82b0 <___vfiprintf_internal_r+0x384>
    7f74:	a080030b 	ldhu	r2,12(r20)
    7f78:	10c8000c 	andi	r3,r2,8192
    7f7c:	1800061e 	bne	r3,zero,7f98 <___vfiprintf_internal_r+0x6c>
    7f80:	a1001917 	ldw	r4,100(r20)
    7f84:	00f7ffc4 	movi	r3,-8193
    7f88:	10880014 	ori	r2,r2,8192
    7f8c:	20c6703a 	and	r3,r4,r3
    7f90:	a080030d 	sth	r2,12(r20)
    7f94:	a0c01915 	stw	r3,100(r20)
    7f98:	10c0020c 	andi	r3,r2,8
    7f9c:	1800a926 	beq	r3,zero,8244 <___vfiprintf_internal_r+0x318>
    7fa0:	a0c00417 	ldw	r3,16(r20)
    7fa4:	1800a726 	beq	r3,zero,8244 <___vfiprintf_internal_r+0x318>
    7fa8:	1080068c 	andi	r2,r2,26
    7fac:	00c00284 	movi	r3,10
    7fb0:	10c0ac26 	beq	r2,r3,8264 <___vfiprintf_internal_r+0x338>
    7fb4:	da801a04 	addi	r10,sp,104
    7fb8:	da801e15 	stw	r10,120(sp)
    7fbc:	d8801e17 	ldw	r2,120(sp)
    7fc0:	da8019c4 	addi	r10,sp,103
    7fc4:	058000f4 	movhi	r22,3
    7fc8:	05c000f4 	movhi	r23,3
    7fcc:	da801f15 	stw	r10,124(sp)
    7fd0:	1295c83a 	sub	r10,r2,r10
    7fd4:	b5935704 	addi	r22,r22,19804
    7fd8:	bdd35304 	addi	r23,r23,19788
    7fdc:	dec01a15 	stw	sp,104(sp)
    7fe0:	d8001c15 	stw	zero,112(sp)
    7fe4:	d8001b15 	stw	zero,108(sp)
    7fe8:	d8002615 	stw	zero,152(sp)
    7fec:	d8002315 	stw	zero,140(sp)
    7ff0:	da802715 	stw	r10,156(sp)
    7ff4:	d811883a 	mov	r8,sp
    7ff8:	dd002115 	stw	r20,132(sp)
    7ffc:	e021883a 	mov	r16,fp
    8000:	80800007 	ldb	r2,0(r16)
    8004:	1003ea26 	beq	r2,zero,8fb0 <___vfiprintf_internal_r+0x1084>
    8008:	00c00944 	movi	r3,37
    800c:	8025883a 	mov	r18,r16
    8010:	10c0021e 	bne	r2,r3,801c <___vfiprintf_internal_r+0xf0>
    8014:	00001606 	br	8070 <___vfiprintf_internal_r+0x144>
    8018:	10c00326 	beq	r2,r3,8028 <___vfiprintf_internal_r+0xfc>
    801c:	94800044 	addi	r18,r18,1
    8020:	90800007 	ldb	r2,0(r18)
    8024:	103ffc1e 	bne	r2,zero,8018 <___vfiprintf_internal_r+0xec>
    8028:	9423c83a 	sub	r17,r18,r16
    802c:	88001026 	beq	r17,zero,8070 <___vfiprintf_internal_r+0x144>
    8030:	d8c01c17 	ldw	r3,112(sp)
    8034:	d8801b17 	ldw	r2,108(sp)
    8038:	44000015 	stw	r16,0(r8)
    803c:	88c7883a 	add	r3,r17,r3
    8040:	10800044 	addi	r2,r2,1
    8044:	44400115 	stw	r17,4(r8)
    8048:	d8c01c15 	stw	r3,112(sp)
    804c:	d8801b15 	stw	r2,108(sp)
    8050:	010001c4 	movi	r4,7
    8054:	2080760e 	bge	r4,r2,8230 <___vfiprintf_internal_r+0x304>
    8058:	1803821e 	bne	r3,zero,8e64 <___vfiprintf_internal_r+0xf38>
    805c:	da802317 	ldw	r10,140(sp)
    8060:	d8001b15 	stw	zero,108(sp)
    8064:	d811883a 	mov	r8,sp
    8068:	5455883a 	add	r10,r10,r17
    806c:	da802315 	stw	r10,140(sp)
    8070:	90800007 	ldb	r2,0(r18)
    8074:	10044626 	beq	r2,zero,9190 <___vfiprintf_internal_r+0x1264>
    8078:	90c00047 	ldb	r3,1(r18)
    807c:	94000044 	addi	r16,r18,1
    8080:	d8001d85 	stb	zero,118(sp)
    8084:	0009883a 	mov	r4,zero
    8088:	000f883a 	mov	r7,zero
    808c:	027fffc4 	movi	r9,-1
    8090:	0023883a 	mov	r17,zero
    8094:	0029883a 	mov	r20,zero
    8098:	01401604 	movi	r5,88
    809c:	01800244 	movi	r6,9
    80a0:	03400a84 	movi	r13,42
    80a4:	03001b04 	movi	r12,108
    80a8:	84000044 	addi	r16,r16,1
    80ac:	18bff804 	addi	r2,r3,-32
    80b0:	28827336 	bltu	r5,r2,8a80 <___vfiprintf_internal_r+0xb54>
    80b4:	100490ba 	slli	r2,r2,2
    80b8:	02800074 	movhi	r10,1
    80bc:	52a03304 	addi	r10,r10,-32564
    80c0:	1285883a 	add	r2,r2,r10
    80c4:	10800017 	ldw	r2,0(r2)
    80c8:	1000683a 	jmp	r2
    80cc:	000087b4 	movhi	zero,542
    80d0:	00008a80 	call	8a8 <strlen+0x28>
    80d4:	00008a80 	call	8a8 <strlen+0x28>
    80d8:	000087d4 	movui	zero,543
    80dc:	00008a80 	call	8a8 <strlen+0x28>
    80e0:	00008a80 	call	8a8 <strlen+0x28>
    80e4:	00008a80 	call	8a8 <strlen+0x28>
    80e8:	00008a80 	call	8a8 <strlen+0x28>
    80ec:	00008a80 	call	8a8 <strlen+0x28>
    80f0:	00008a80 	call	8a8 <strlen+0x28>
    80f4:	000089bc 	xorhi	zero,zero,550
    80f8:	000089d8 	cmpnei	zero,zero,551
    80fc:	00008a80 	call	8a8 <strlen+0x28>
    8100:	000082c0 	call	82c <_puts_r+0x80>
    8104:	000089e8 	cmpgeui	zero,zero,551
    8108:	00008a80 	call	8a8 <strlen+0x28>
    810c:	000087e0 	cmpeqi	zero,zero,543
    8110:	000087ec 	andhi	zero,zero,543
    8114:	000087ec 	andhi	zero,zero,543
    8118:	000087ec 	andhi	zero,zero,543
    811c:	000087ec 	andhi	zero,zero,543
    8120:	000087ec 	andhi	zero,zero,543
    8124:	000087ec 	andhi	zero,zero,543
    8128:	000087ec 	andhi	zero,zero,543
    812c:	000087ec 	andhi	zero,zero,543
    8130:	000087ec 	andhi	zero,zero,543
    8134:	00008a80 	call	8a8 <strlen+0x28>
    8138:	00008a80 	call	8a8 <strlen+0x28>
    813c:	00008a80 	call	8a8 <strlen+0x28>
    8140:	00008a80 	call	8a8 <strlen+0x28>
    8144:	00008a80 	call	8a8 <strlen+0x28>
    8148:	00008a80 	call	8a8 <strlen+0x28>
    814c:	00008a80 	call	8a8 <strlen+0x28>
    8150:	00008a80 	call	8a8 <strlen+0x28>
    8154:	00008a80 	call	8a8 <strlen+0x28>
    8158:	00008a80 	call	8a8 <strlen+0x28>
    815c:	00008818 	cmpnei	zero,zero,544
    8160:	00008a80 	call	8a8 <strlen+0x28>
    8164:	00008a80 	call	8a8 <strlen+0x28>
    8168:	00008a80 	call	8a8 <strlen+0x28>
    816c:	00008a80 	call	8a8 <strlen+0x28>
    8170:	00008a80 	call	8a8 <strlen+0x28>
    8174:	00008a80 	call	8a8 <strlen+0x28>
    8178:	00008a80 	call	8a8 <strlen+0x28>
    817c:	00008a80 	call	8a8 <strlen+0x28>
    8180:	00008a80 	call	8a8 <strlen+0x28>
    8184:	00008a80 	call	8a8 <strlen+0x28>
    8188:	00008850 	cmplti	zero,zero,545
    818c:	00008a80 	call	8a8 <strlen+0x28>
    8190:	00008a80 	call	8a8 <strlen+0x28>
    8194:	00008a80 	call	8a8 <strlen+0x28>
    8198:	00008a80 	call	8a8 <strlen+0x28>
    819c:	00008a80 	call	8a8 <strlen+0x28>
    81a0:	000088a8 	cmpgeui	zero,zero,546
    81a4:	00008a80 	call	8a8 <strlen+0x28>
    81a8:	00008a80 	call	8a8 <strlen+0x28>
    81ac:	00008918 	cmpnei	zero,zero,548
    81b0:	00008a80 	call	8a8 <strlen+0x28>
    81b4:	00008a80 	call	8a8 <strlen+0x28>
    81b8:	00008a80 	call	8a8 <strlen+0x28>
    81bc:	00008a80 	call	8a8 <strlen+0x28>
    81c0:	00008a80 	call	8a8 <strlen+0x28>
    81c4:	00008a80 	call	8a8 <strlen+0x28>
    81c8:	00008a80 	call	8a8 <strlen+0x28>
    81cc:	00008a80 	call	8a8 <strlen+0x28>
    81d0:	00008a80 	call	8a8 <strlen+0x28>
    81d4:	00008a80 	call	8a8 <strlen+0x28>
    81d8:	000086c4 	movi	zero,539
    81dc:	000086f0 	cmpltui	zero,zero,539
    81e0:	00008a80 	call	8a8 <strlen+0x28>
    81e4:	00008a80 	call	8a8 <strlen+0x28>
    81e8:	00008a80 	call	8a8 <strlen+0x28>
    81ec:	00008a28 	cmpgeui	zero,zero,552
    81f0:	000086f0 	cmpltui	zero,zero,539
    81f4:	00008a80 	call	8a8 <strlen+0x28>
    81f8:	00008a80 	call	8a8 <strlen+0x28>
    81fc:	00008584 	movi	zero,534
    8200:	00008a80 	call	8a8 <strlen+0x28>
    8204:	00008594 	movui	zero,534
    8208:	000085d0 	cmplti	zero,zero,535
    820c:	000082cc 	andi	zero,zero,523
    8210:	00008578 	rdprs	zero,zero,533
    8214:	00008a80 	call	8a8 <strlen+0x28>
    8218:	00008954 	movui	zero,549
    821c:	00008a80 	call	8a8 <strlen+0x28>
    8220:	000089ac 	andhi	zero,zero,550
    8224:	00008a80 	call	8a8 <strlen+0x28>
    8228:	00008a80 	call	8a8 <strlen+0x28>
    822c:	00008670 	cmpltui	zero,zero,537
    8230:	42000204 	addi	r8,r8,8
    8234:	da802317 	ldw	r10,140(sp)
    8238:	5455883a 	add	r10,r10,r17
    823c:	da802315 	stw	r10,140(sp)
    8240:	003f8b06 	br	8070 <___vfiprintf_internal_r+0x144>
    8244:	d9002017 	ldw	r4,128(sp)
    8248:	a00b883a 	mov	r5,r20
    824c:	0002be80 	call	2be8 <__swsetup_r>
    8250:	1003b11e 	bne	r2,zero,9118 <___vfiprintf_internal_r+0x11ec>
    8254:	a080030b 	ldhu	r2,12(r20)
    8258:	00c00284 	movi	r3,10
    825c:	1080068c 	andi	r2,r2,26
    8260:	10ff541e 	bne	r2,r3,7fb4 <___vfiprintf_internal_r+0x88>
    8264:	a080038f 	ldh	r2,14(r20)
    8268:	103f5216 	blt	r2,zero,7fb4 <___vfiprintf_internal_r+0x88>
    826c:	d9c02217 	ldw	r7,136(sp)
    8270:	d9002017 	ldw	r4,128(sp)
    8274:	e00d883a 	mov	r6,fp
    8278:	a00b883a 	mov	r5,r20
    827c:	00093a40 	call	93a4 <__sbprintf>
    8280:	dfc03617 	ldw	ra,216(sp)
    8284:	df003517 	ldw	fp,212(sp)
    8288:	ddc03417 	ldw	r23,208(sp)
    828c:	dd803317 	ldw	r22,204(sp)
    8290:	dd403217 	ldw	r21,200(sp)
    8294:	dd003117 	ldw	r20,196(sp)
    8298:	dcc03017 	ldw	r19,192(sp)
    829c:	dc802f17 	ldw	r18,188(sp)
    82a0:	dc402e17 	ldw	r17,184(sp)
    82a4:	dc002d17 	ldw	r16,180(sp)
    82a8:	dec03704 	addi	sp,sp,220
    82ac:	f800283a 	ret
    82b0:	0004bbc0 	call	4bbc <__sinit>
    82b4:	003f2f06 	br	7f74 <___vfiprintf_internal_r+0x48>
    82b8:	0463c83a 	sub	r17,zero,r17
    82bc:	d8802215 	stw	r2,136(sp)
    82c0:	a5000114 	ori	r20,r20,4
    82c4:	80c00007 	ldb	r3,0(r16)
    82c8:	003f7706 	br	80a8 <___vfiprintf_internal_r+0x17c>
    82cc:	00800c04 	movi	r2,48
    82d0:	da802217 	ldw	r10,136(sp)
    82d4:	d8801d05 	stb	r2,116(sp)
    82d8:	00801e04 	movi	r2,120
    82dc:	d8801d45 	stb	r2,117(sp)
    82e0:	d8001d85 	stb	zero,118(sp)
    82e4:	50c00104 	addi	r3,r10,4
    82e8:	54800017 	ldw	r18,0(r10)
    82ec:	0027883a 	mov	r19,zero
    82f0:	a0800094 	ori	r2,r20,2
    82f4:	48030b16 	blt	r9,zero,8f24 <___vfiprintf_internal_r+0xff8>
    82f8:	00bfdfc4 	movi	r2,-129
    82fc:	a096703a 	and	r11,r20,r2
    8300:	d8c02215 	stw	r3,136(sp)
    8304:	5d000094 	ori	r20,r11,2
    8308:	90032b1e 	bne	r18,zero,8fb8 <___vfiprintf_internal_r+0x108c>
    830c:	008000f4 	movhi	r2,3
    8310:	1092f204 	addi	r2,r2,19400
    8314:	d8802615 	stw	r2,152(sp)
    8318:	0039883a 	mov	fp,zero
    831c:	48017b1e 	bne	r9,zero,890c <___vfiprintf_internal_r+0x9e0>
    8320:	0013883a 	mov	r9,zero
    8324:	0027883a 	mov	r19,zero
    8328:	dd401a04 	addi	r21,sp,104
    832c:	4825883a 	mov	r18,r9
    8330:	4cc0010e 	bge	r9,r19,8338 <___vfiprintf_internal_r+0x40c>
    8334:	9825883a 	mov	r18,r19
    8338:	e7003fcc 	andi	fp,fp,255
    833c:	e700201c 	xori	fp,fp,128
    8340:	e73fe004 	addi	fp,fp,-128
    8344:	e0000126 	beq	fp,zero,834c <___vfiprintf_internal_r+0x420>
    8348:	94800044 	addi	r18,r18,1
    834c:	a380008c 	andi	r14,r20,2
    8350:	70000126 	beq	r14,zero,8358 <___vfiprintf_internal_r+0x42c>
    8354:	94800084 	addi	r18,r18,2
    8358:	a700210c 	andi	fp,r20,132
    835c:	e001df1e 	bne	fp,zero,8adc <___vfiprintf_internal_r+0xbb0>
    8360:	8c87c83a 	sub	r3,r17,r18
    8364:	00c1dd0e 	bge	zero,r3,8adc <___vfiprintf_internal_r+0xbb0>
    8368:	01c00404 	movi	r7,16
    836c:	d8801c17 	ldw	r2,112(sp)
    8370:	38c3ad0e 	bge	r7,r3,9228 <___vfiprintf_internal_r+0x12fc>
    8374:	028000f4 	movhi	r10,3
    8378:	52935704 	addi	r10,r10,19804
    837c:	dc002915 	stw	r16,164(sp)
    8380:	d9801b17 	ldw	r6,108(sp)
    8384:	da802415 	stw	r10,144(sp)
    8388:	03c001c4 	movi	r15,7
    838c:	da402515 	stw	r9,148(sp)
    8390:	db802815 	stw	r14,160(sp)
    8394:	1821883a 	mov	r16,r3
    8398:	00000506 	br	83b0 <___vfiprintf_internal_r+0x484>
    839c:	31400084 	addi	r5,r6,2
    83a0:	42000204 	addi	r8,r8,8
    83a4:	200d883a 	mov	r6,r4
    83a8:	843ffc04 	addi	r16,r16,-16
    83ac:	3c000d0e 	bge	r7,r16,83e4 <___vfiprintf_internal_r+0x4b8>
    83b0:	10800404 	addi	r2,r2,16
    83b4:	31000044 	addi	r4,r6,1
    83b8:	45800015 	stw	r22,0(r8)
    83bc:	41c00115 	stw	r7,4(r8)
    83c0:	d8801c15 	stw	r2,112(sp)
    83c4:	d9001b15 	stw	r4,108(sp)
    83c8:	793ff40e 	bge	r15,r4,839c <___vfiprintf_internal_r+0x470>
    83cc:	1001b51e 	bne	r2,zero,8aa4 <___vfiprintf_internal_r+0xb78>
    83d0:	843ffc04 	addi	r16,r16,-16
    83d4:	000d883a 	mov	r6,zero
    83d8:	01400044 	movi	r5,1
    83dc:	d811883a 	mov	r8,sp
    83e0:	3c3ff316 	blt	r7,r16,83b0 <___vfiprintf_internal_r+0x484>
    83e4:	8007883a 	mov	r3,r16
    83e8:	da402517 	ldw	r9,148(sp)
    83ec:	db802817 	ldw	r14,160(sp)
    83f0:	dc002917 	ldw	r16,164(sp)
    83f4:	da802417 	ldw	r10,144(sp)
    83f8:	1885883a 	add	r2,r3,r2
    83fc:	40c00115 	stw	r3,4(r8)
    8400:	42800015 	stw	r10,0(r8)
    8404:	d8801c15 	stw	r2,112(sp)
    8408:	d9401b15 	stw	r5,108(sp)
    840c:	00c001c4 	movi	r3,7
    8410:	19426016 	blt	r3,r5,8d94 <___vfiprintf_internal_r+0xe68>
    8414:	d8c01d87 	ldb	r3,118(sp)
    8418:	42000204 	addi	r8,r8,8
    841c:	29000044 	addi	r4,r5,1
    8420:	1801b31e 	bne	r3,zero,8af0 <___vfiprintf_internal_r+0xbc4>
    8424:	7001c026 	beq	r14,zero,8b28 <___vfiprintf_internal_r+0xbfc>
    8428:	d8c01d04 	addi	r3,sp,116
    842c:	10800084 	addi	r2,r2,2
    8430:	40c00015 	stw	r3,0(r8)
    8434:	00c00084 	movi	r3,2
    8438:	40c00115 	stw	r3,4(r8)
    843c:	d8801c15 	stw	r2,112(sp)
    8440:	d9001b15 	stw	r4,108(sp)
    8444:	00c001c4 	movi	r3,7
    8448:	1902650e 	bge	r3,r4,8de0 <___vfiprintf_internal_r+0xeb4>
    844c:	10029a1e 	bne	r2,zero,8eb8 <___vfiprintf_internal_r+0xf8c>
    8450:	00c02004 	movi	r3,128
    8454:	01000044 	movi	r4,1
    8458:	000b883a 	mov	r5,zero
    845c:	d811883a 	mov	r8,sp
    8460:	e0c1b31e 	bne	fp,r3,8b30 <___vfiprintf_internal_r+0xc04>
    8464:	8cb9c83a 	sub	fp,r17,r18
    8468:	0701b10e 	bge	zero,fp,8b30 <___vfiprintf_internal_r+0xc04>
    846c:	01c00404 	movi	r7,16
    8470:	3f03890e 	bge	r7,fp,9298 <___vfiprintf_internal_r+0x136c>
    8474:	00c000f4 	movhi	r3,3
    8478:	18d35304 	addi	r3,r3,19788
    847c:	d8c02415 	stw	r3,144(sp)
    8480:	8007883a 	mov	r3,r16
    8484:	034001c4 	movi	r13,7
    8488:	e021883a 	mov	r16,fp
    848c:	da402515 	stw	r9,148(sp)
    8490:	1839883a 	mov	fp,r3
    8494:	00000506 	br	84ac <___vfiprintf_internal_r+0x580>
    8498:	29800084 	addi	r6,r5,2
    849c:	42000204 	addi	r8,r8,8
    84a0:	180b883a 	mov	r5,r3
    84a4:	843ffc04 	addi	r16,r16,-16
    84a8:	3c000d0e 	bge	r7,r16,84e0 <___vfiprintf_internal_r+0x5b4>
    84ac:	10800404 	addi	r2,r2,16
    84b0:	28c00044 	addi	r3,r5,1
    84b4:	45c00015 	stw	r23,0(r8)
    84b8:	41c00115 	stw	r7,4(r8)
    84bc:	d8801c15 	stw	r2,112(sp)
    84c0:	d8c01b15 	stw	r3,108(sp)
    84c4:	68fff40e 	bge	r13,r3,8498 <___vfiprintf_internal_r+0x56c>
    84c8:	1002241e 	bne	r2,zero,8d5c <___vfiprintf_internal_r+0xe30>
    84cc:	843ffc04 	addi	r16,r16,-16
    84d0:	01800044 	movi	r6,1
    84d4:	000b883a 	mov	r5,zero
    84d8:	d811883a 	mov	r8,sp
    84dc:	3c3ff316 	blt	r7,r16,84ac <___vfiprintf_internal_r+0x580>
    84e0:	da402517 	ldw	r9,148(sp)
    84e4:	e007883a 	mov	r3,fp
    84e8:	8039883a 	mov	fp,r16
    84ec:	1821883a 	mov	r16,r3
    84f0:	d8c02417 	ldw	r3,144(sp)
    84f4:	1705883a 	add	r2,r2,fp
    84f8:	47000115 	stw	fp,4(r8)
    84fc:	40c00015 	stw	r3,0(r8)
    8500:	d8801c15 	stw	r2,112(sp)
    8504:	d9801b15 	stw	r6,108(sp)
    8508:	00c001c4 	movi	r3,7
    850c:	19827616 	blt	r3,r6,8ee8 <___vfiprintf_internal_r+0xfbc>
    8510:	4cf9c83a 	sub	fp,r9,r19
    8514:	42000204 	addi	r8,r8,8
    8518:	31000044 	addi	r4,r6,1
    851c:	300b883a 	mov	r5,r6
    8520:	07018516 	blt	zero,fp,8b38 <___vfiprintf_internal_r+0xc0c>
    8524:	9885883a 	add	r2,r19,r2
    8528:	45400015 	stw	r21,0(r8)
    852c:	44c00115 	stw	r19,4(r8)
    8530:	d8801c15 	stw	r2,112(sp)
    8534:	d9001b15 	stw	r4,108(sp)
    8538:	00c001c4 	movi	r3,7
    853c:	1901dd0e 	bge	r3,r4,8cb4 <___vfiprintf_internal_r+0xd88>
    8540:	1002401e 	bne	r2,zero,8e44 <___vfiprintf_internal_r+0xf18>
    8544:	d8001b15 	stw	zero,108(sp)
    8548:	a2c0010c 	andi	r11,r20,4
    854c:	58000226 	beq	r11,zero,8558 <___vfiprintf_internal_r+0x62c>
    8550:	8ca7c83a 	sub	r19,r17,r18
    8554:	04c2f216 	blt	zero,r19,9120 <___vfiprintf_internal_r+0x11f4>
    8558:	8c80010e 	bge	r17,r18,8560 <___vfiprintf_internal_r+0x634>
    855c:	9023883a 	mov	r17,r18
    8560:	da802317 	ldw	r10,140(sp)
    8564:	5455883a 	add	r10,r10,r17
    8568:	da802315 	stw	r10,140(sp)
    856c:	d8001b15 	stw	zero,108(sp)
    8570:	d811883a 	mov	r8,sp
    8574:	003ea206 	br	8000 <___vfiprintf_internal_r+0xd4>
    8578:	a5000814 	ori	r20,r20,32
    857c:	80c00007 	ldb	r3,0(r16)
    8580:	003ec906 	br	80a8 <___vfiprintf_internal_r+0x17c>
    8584:	80c00007 	ldb	r3,0(r16)
    8588:	1b030926 	beq	r3,r12,91b0 <___vfiprintf_internal_r+0x1284>
    858c:	a5000414 	ori	r20,r20,16
    8590:	003ec506 	br	80a8 <___vfiprintf_internal_r+0x17c>
    8594:	21003fcc 	andi	r4,r4,255
    8598:	20035e1e 	bne	r4,zero,9314 <___vfiprintf_internal_r+0x13e8>
    859c:	a080080c 	andi	r2,r20,32
    85a0:	1002a526 	beq	r2,zero,9038 <___vfiprintf_internal_r+0x110c>
    85a4:	da802217 	ldw	r10,136(sp)
    85a8:	50800017 	ldw	r2,0(r10)
    85ac:	da802317 	ldw	r10,140(sp)
    85b0:	5007d7fa 	srai	r3,r10,31
    85b4:	da802217 	ldw	r10,136(sp)
    85b8:	10c00115 	stw	r3,4(r2)
    85bc:	52800104 	addi	r10,r10,4
    85c0:	da802215 	stw	r10,136(sp)
    85c4:	da802317 	ldw	r10,140(sp)
    85c8:	12800015 	stw	r10,0(r2)
    85cc:	003e8c06 	br	8000 <___vfiprintf_internal_r+0xd4>
    85d0:	21003fcc 	andi	r4,r4,255
    85d4:	2003511e 	bne	r4,zero,931c <___vfiprintf_internal_r+0x13f0>
    85d8:	a080080c 	andi	r2,r20,32
    85dc:	1000a126 	beq	r2,zero,8864 <___vfiprintf_internal_r+0x938>
    85e0:	da802217 	ldw	r10,136(sp)
    85e4:	d8001d85 	stb	zero,118(sp)
    85e8:	50800204 	addi	r2,r10,8
    85ec:	54800017 	ldw	r18,0(r10)
    85f0:	54c00117 	ldw	r19,4(r10)
    85f4:	4802b416 	blt	r9,zero,90c8 <___vfiprintf_internal_r+0x119c>
    85f8:	013fdfc4 	movi	r4,-129
    85fc:	94c6b03a 	or	r3,r18,r19
    8600:	d8802215 	stw	r2,136(sp)
    8604:	a128703a 	and	r20,r20,r4
    8608:	1800a226 	beq	r3,zero,8894 <___vfiprintf_internal_r+0x968>
    860c:	0039883a 	mov	fp,zero
    8610:	dd401a04 	addi	r21,sp,104
    8614:	9006d0fa 	srli	r3,r18,3
    8618:	9808977a 	slli	r4,r19,29
    861c:	9826d0fa 	srli	r19,r19,3
    8620:	948001cc 	andi	r18,r18,7
    8624:	90800c04 	addi	r2,r18,48
    8628:	ad7fffc4 	addi	r21,r21,-1
    862c:	20e4b03a 	or	r18,r4,r3
    8630:	a8800005 	stb	r2,0(r21)
    8634:	94c6b03a 	or	r3,r18,r19
    8638:	183ff61e 	bne	r3,zero,8614 <___vfiprintf_internal_r+0x6e8>
    863c:	a0c0004c 	andi	r3,r20,1
    8640:	18005926 	beq	r3,zero,87a8 <___vfiprintf_internal_r+0x87c>
    8644:	10803fcc 	andi	r2,r2,255
    8648:	1080201c 	xori	r2,r2,128
    864c:	10bfe004 	addi	r2,r2,-128
    8650:	00c00c04 	movi	r3,48
    8654:	10c05426 	beq	r2,r3,87a8 <___vfiprintf_internal_r+0x87c>
    8658:	da801e17 	ldw	r10,120(sp)
    865c:	a8bfffc4 	addi	r2,r21,-1
    8660:	a8ffffc5 	stb	r3,-1(r21)
    8664:	50a7c83a 	sub	r19,r10,r2
    8668:	102b883a 	mov	r21,r2
    866c:	003f2f06 	br	832c <___vfiprintf_internal_r+0x400>
    8670:	21003fcc 	andi	r4,r4,255
    8674:	2003421e 	bne	r4,zero,9380 <___vfiprintf_internal_r+0x1454>
    8678:	008000f4 	movhi	r2,3
    867c:	1092f204 	addi	r2,r2,19400
    8680:	d8802615 	stw	r2,152(sp)
    8684:	a080080c 	andi	r2,r20,32
    8688:	1000aa26 	beq	r2,zero,8934 <___vfiprintf_internal_r+0xa08>
    868c:	da802217 	ldw	r10,136(sp)
    8690:	54800017 	ldw	r18,0(r10)
    8694:	54c00117 	ldw	r19,4(r10)
    8698:	52800204 	addi	r10,r10,8
    869c:	da802215 	stw	r10,136(sp)
    86a0:	a080004c 	andi	r2,r20,1
    86a4:	1001d226 	beq	r2,zero,8df0 <___vfiprintf_internal_r+0xec4>
    86a8:	94c4b03a 	or	r2,r18,r19
    86ac:	1002351e 	bne	r2,zero,8f84 <___vfiprintf_internal_r+0x1058>
    86b0:	d8001d85 	stb	zero,118(sp)
    86b4:	48022216 	blt	r9,zero,8f40 <___vfiprintf_internal_r+0x1014>
    86b8:	00bfdfc4 	movi	r2,-129
    86bc:	a0a8703a 	and	r20,r20,r2
    86c0:	003f1506 	br	8318 <___vfiprintf_internal_r+0x3ec>
    86c4:	da802217 	ldw	r10,136(sp)
    86c8:	04800044 	movi	r18,1
    86cc:	d8001d85 	stb	zero,118(sp)
    86d0:	50800017 	ldw	r2,0(r10)
    86d4:	52800104 	addi	r10,r10,4
    86d8:	da802215 	stw	r10,136(sp)
    86dc:	d8801005 	stb	r2,64(sp)
    86e0:	9027883a 	mov	r19,r18
    86e4:	dd401004 	addi	r21,sp,64
    86e8:	0013883a 	mov	r9,zero
    86ec:	003f1706 	br	834c <___vfiprintf_internal_r+0x420>
    86f0:	21003fcc 	andi	r4,r4,255
    86f4:	2003201e 	bne	r4,zero,9378 <___vfiprintf_internal_r+0x144c>
    86f8:	a080080c 	andi	r2,r20,32
    86fc:	10004b26 	beq	r2,zero,882c <___vfiprintf_internal_r+0x900>
    8700:	da802217 	ldw	r10,136(sp)
    8704:	50800117 	ldw	r2,4(r10)
    8708:	54800017 	ldw	r18,0(r10)
    870c:	52800204 	addi	r10,r10,8
    8710:	da802215 	stw	r10,136(sp)
    8714:	1027883a 	mov	r19,r2
    8718:	10022c16 	blt	r2,zero,8fcc <___vfiprintf_internal_r+0x10a0>
    871c:	df001d83 	ldbu	fp,118(sp)
    8720:	48007216 	blt	r9,zero,88ec <___vfiprintf_internal_r+0x9c0>
    8724:	00ffdfc4 	movi	r3,-129
    8728:	94c4b03a 	or	r2,r18,r19
    872c:	a0e8703a 	and	r20,r20,r3
    8730:	1000cc26 	beq	r2,zero,8a64 <___vfiprintf_internal_r+0xb38>
    8734:	98021026 	beq	r19,zero,8f78 <___vfiprintf_internal_r+0x104c>
    8738:	dc402415 	stw	r17,144(sp)
    873c:	dc002515 	stw	r16,148(sp)
    8740:	9823883a 	mov	r17,r19
    8744:	9021883a 	mov	r16,r18
    8748:	dd401a04 	addi	r21,sp,104
    874c:	4825883a 	mov	r18,r9
    8750:	4027883a 	mov	r19,r8
    8754:	8009883a 	mov	r4,r16
    8758:	880b883a 	mov	r5,r17
    875c:	01800284 	movi	r6,10
    8760:	000f883a 	mov	r7,zero
    8764:	000a30c0 	call	a30c <__umoddi3>
    8768:	10800c04 	addi	r2,r2,48
    876c:	ad7fffc4 	addi	r21,r21,-1
    8770:	8009883a 	mov	r4,r16
    8774:	880b883a 	mov	r5,r17
    8778:	a8800005 	stb	r2,0(r21)
    877c:	01800284 	movi	r6,10
    8780:	000f883a 	mov	r7,zero
    8784:	0009d940 	call	9d94 <__udivdi3>
    8788:	1021883a 	mov	r16,r2
    878c:	10c4b03a 	or	r2,r2,r3
    8790:	1823883a 	mov	r17,r3
    8794:	103fef1e 	bne	r2,zero,8754 <___vfiprintf_internal_r+0x828>
    8798:	dc402417 	ldw	r17,144(sp)
    879c:	dc002517 	ldw	r16,148(sp)
    87a0:	9013883a 	mov	r9,r18
    87a4:	9811883a 	mov	r8,r19
    87a8:	da801e17 	ldw	r10,120(sp)
    87ac:	5567c83a 	sub	r19,r10,r21
    87b0:	003ede06 	br	832c <___vfiprintf_internal_r+0x400>
    87b4:	38803fcc 	andi	r2,r7,255
    87b8:	1080201c 	xori	r2,r2,128
    87bc:	10bfe004 	addi	r2,r2,-128
    87c0:	1002371e 	bne	r2,zero,90a0 <___vfiprintf_internal_r+0x1174>
    87c4:	01000044 	movi	r4,1
    87c8:	01c00804 	movi	r7,32
    87cc:	80c00007 	ldb	r3,0(r16)
    87d0:	003e3506 	br	80a8 <___vfiprintf_internal_r+0x17c>
    87d4:	a5000054 	ori	r20,r20,1
    87d8:	80c00007 	ldb	r3,0(r16)
    87dc:	003e3206 	br	80a8 <___vfiprintf_internal_r+0x17c>
    87e0:	a5002014 	ori	r20,r20,128
    87e4:	80c00007 	ldb	r3,0(r16)
    87e8:	003e2f06 	br	80a8 <___vfiprintf_internal_r+0x17c>
    87ec:	8015883a 	mov	r10,r16
    87f0:	0023883a 	mov	r17,zero
    87f4:	18bff404 	addi	r2,r3,-48
    87f8:	50c00007 	ldb	r3,0(r10)
    87fc:	8c4002a4 	muli	r17,r17,10
    8800:	84000044 	addi	r16,r16,1
    8804:	8015883a 	mov	r10,r16
    8808:	1463883a 	add	r17,r2,r17
    880c:	18bff404 	addi	r2,r3,-48
    8810:	30bff92e 	bgeu	r6,r2,87f8 <___vfiprintf_internal_r+0x8cc>
    8814:	003e2506 	br	80ac <___vfiprintf_internal_r+0x180>
    8818:	21003fcc 	andi	r4,r4,255
    881c:	2002d41e 	bne	r4,zero,9370 <___vfiprintf_internal_r+0x1444>
    8820:	a5000414 	ori	r20,r20,16
    8824:	a080080c 	andi	r2,r20,32
    8828:	103fb51e 	bne	r2,zero,8700 <___vfiprintf_internal_r+0x7d4>
    882c:	a080040c 	andi	r2,r20,16
    8830:	1001f826 	beq	r2,zero,9014 <___vfiprintf_internal_r+0x10e8>
    8834:	da802217 	ldw	r10,136(sp)
    8838:	54800017 	ldw	r18,0(r10)
    883c:	52800104 	addi	r10,r10,4
    8840:	da802215 	stw	r10,136(sp)
    8844:	9027d7fa 	srai	r19,r18,31
    8848:	9805883a 	mov	r2,r19
    884c:	003fb206 	br	8718 <___vfiprintf_internal_r+0x7ec>
    8850:	21003fcc 	andi	r4,r4,255
    8854:	2002c41e 	bne	r4,zero,9368 <___vfiprintf_internal_r+0x143c>
    8858:	a5000414 	ori	r20,r20,16
    885c:	a080080c 	andi	r2,r20,32
    8860:	103f5f1e 	bne	r2,zero,85e0 <___vfiprintf_internal_r+0x6b4>
    8864:	a080040c 	andi	r2,r20,16
    8868:	10020f26 	beq	r2,zero,90a8 <___vfiprintf_internal_r+0x117c>
    886c:	da802217 	ldw	r10,136(sp)
    8870:	d8001d85 	stb	zero,118(sp)
    8874:	0027883a 	mov	r19,zero
    8878:	50800104 	addi	r2,r10,4
    887c:	54800017 	ldw	r18,0(r10)
    8880:	48021116 	blt	r9,zero,90c8 <___vfiprintf_internal_r+0x119c>
    8884:	00ffdfc4 	movi	r3,-129
    8888:	d8802215 	stw	r2,136(sp)
    888c:	a0e8703a 	and	r20,r20,r3
    8890:	903f5e1e 	bne	r18,zero,860c <___vfiprintf_internal_r+0x6e0>
    8894:	0039883a 	mov	fp,zero
    8898:	4802a626 	beq	r9,zero,9334 <___vfiprintf_internal_r+0x1408>
    889c:	0025883a 	mov	r18,zero
    88a0:	0027883a 	mov	r19,zero
    88a4:	003f5a06 	br	8610 <___vfiprintf_internal_r+0x6e4>
    88a8:	21003fcc 	andi	r4,r4,255
    88ac:	20029f1e 	bne	r4,zero,932c <___vfiprintf_internal_r+0x1400>
    88b0:	a5000414 	ori	r20,r20,16
    88b4:	a080080c 	andi	r2,r20,32
    88b8:	10005e1e 	bne	r2,zero,8a34 <___vfiprintf_internal_r+0xb08>
    88bc:	a080040c 	andi	r2,r20,16
    88c0:	1001a21e 	bne	r2,zero,8f4c <___vfiprintf_internal_r+0x1020>
    88c4:	a080100c 	andi	r2,r20,64
    88c8:	d8001d85 	stb	zero,118(sp)
    88cc:	da802217 	ldw	r10,136(sp)
    88d0:	1002231e 	bne	r2,zero,9160 <___vfiprintf_internal_r+0x1234>
    88d4:	50800104 	addi	r2,r10,4
    88d8:	54800017 	ldw	r18,0(r10)
    88dc:	0027883a 	mov	r19,zero
    88e0:	4801a00e 	bge	r9,zero,8f64 <___vfiprintf_internal_r+0x1038>
    88e4:	d8802215 	stw	r2,136(sp)
    88e8:	0039883a 	mov	fp,zero
    88ec:	94c4b03a 	or	r2,r18,r19
    88f0:	103f901e 	bne	r2,zero,8734 <___vfiprintf_internal_r+0x808>
    88f4:	00800044 	movi	r2,1
    88f8:	10803fcc 	andi	r2,r2,255
    88fc:	00c00044 	movi	r3,1
    8900:	10c05926 	beq	r2,r3,8a68 <___vfiprintf_internal_r+0xb3c>
    8904:	00c00084 	movi	r3,2
    8908:	10ffe41e 	bne	r2,r3,889c <___vfiprintf_internal_r+0x970>
    890c:	0025883a 	mov	r18,zero
    8910:	0027883a 	mov	r19,zero
    8914:	00013d06 	br	8e0c <___vfiprintf_internal_r+0xee0>
    8918:	21003fcc 	andi	r4,r4,255
    891c:	2002811e 	bne	r4,zero,9324 <___vfiprintf_internal_r+0x13f8>
    8920:	008000f4 	movhi	r2,3
    8924:	1092ed04 	addi	r2,r2,19380
    8928:	d8802615 	stw	r2,152(sp)
    892c:	a080080c 	andi	r2,r20,32
    8930:	103f561e 	bne	r2,zero,868c <___vfiprintf_internal_r+0x760>
    8934:	a080040c 	andi	r2,r20,16
    8938:	1001d126 	beq	r2,zero,9080 <___vfiprintf_internal_r+0x1154>
    893c:	da802217 	ldw	r10,136(sp)
    8940:	0027883a 	mov	r19,zero
    8944:	54800017 	ldw	r18,0(r10)
    8948:	52800104 	addi	r10,r10,4
    894c:	da802215 	stw	r10,136(sp)
    8950:	003f5306 	br	86a0 <___vfiprintf_internal_r+0x774>
    8954:	da802217 	ldw	r10,136(sp)
    8958:	d8001d85 	stb	zero,118(sp)
    895c:	55400017 	ldw	r21,0(r10)
    8960:	50c00104 	addi	r3,r10,4
    8964:	a8024226 	beq	r21,zero,9270 <___vfiprintf_internal_r+0x1344>
    8968:	48021816 	blt	r9,zero,91cc <___vfiprintf_internal_r+0x12a0>
    896c:	480d883a 	mov	r6,r9
    8970:	000b883a 	mov	r5,zero
    8974:	a809883a 	mov	r4,r21
    8978:	d8c02a15 	stw	r3,168(sp)
    897c:	da002b15 	stw	r8,172(sp)
    8980:	da402c15 	stw	r9,176(sp)
    8984:	00061280 	call	6128 <memchr>
    8988:	d8c02a17 	ldw	r3,168(sp)
    898c:	da002b17 	ldw	r8,172(sp)
    8990:	da402c17 	ldw	r9,176(sp)
    8994:	10024826 	beq	r2,zero,92b8 <___vfiprintf_internal_r+0x138c>
    8998:	1567c83a 	sub	r19,r2,r21
    899c:	df001d83 	ldbu	fp,118(sp)
    89a0:	d8c02215 	stw	r3,136(sp)
    89a4:	0013883a 	mov	r9,zero
    89a8:	003e6006 	br	832c <___vfiprintf_internal_r+0x400>
    89ac:	21003fcc 	andi	r4,r4,255
    89b0:	203fc026 	beq	r4,zero,88b4 <___vfiprintf_internal_r+0x988>
    89b4:	d9c01d85 	stb	r7,118(sp)
    89b8:	003fbe06 	br	88b4 <___vfiprintf_internal_r+0x988>
    89bc:	da802217 	ldw	r10,136(sp)
    89c0:	54400017 	ldw	r17,0(r10)
    89c4:	50800104 	addi	r2,r10,4
    89c8:	883e3b16 	blt	r17,zero,82b8 <___vfiprintf_internal_r+0x38c>
    89cc:	d8802215 	stw	r2,136(sp)
    89d0:	80c00007 	ldb	r3,0(r16)
    89d4:	003db406 	br	80a8 <___vfiprintf_internal_r+0x17c>
    89d8:	01000044 	movi	r4,1
    89dc:	01c00ac4 	movi	r7,43
    89e0:	80c00007 	ldb	r3,0(r16)
    89e4:	003db006 	br	80a8 <___vfiprintf_internal_r+0x17c>
    89e8:	80c00007 	ldb	r3,0(r16)
    89ec:	82800044 	addi	r10,r16,1
    89f0:	1b423c26 	beq	r3,r13,92e4 <___vfiprintf_internal_r+0x13b8>
    89f4:	18bff404 	addi	r2,r3,-48
    89f8:	0013883a 	mov	r9,zero
    89fc:	30822b36 	bltu	r6,r2,92ac <___vfiprintf_internal_r+0x1380>
    8a00:	50c00007 	ldb	r3,0(r10)
    8a04:	4a4002a4 	muli	r9,r9,10
    8a08:	54000044 	addi	r16,r10,1
    8a0c:	8015883a 	mov	r10,r16
    8a10:	4893883a 	add	r9,r9,r2
    8a14:	18bff404 	addi	r2,r3,-48
    8a18:	30bff92e 	bgeu	r6,r2,8a00 <___vfiprintf_internal_r+0xad4>
    8a1c:	483da30e 	bge	r9,zero,80ac <___vfiprintf_internal_r+0x180>
    8a20:	027fffc4 	movi	r9,-1
    8a24:	003da106 	br	80ac <___vfiprintf_internal_r+0x180>
    8a28:	a5001014 	ori	r20,r20,64
    8a2c:	80c00007 	ldb	r3,0(r16)
    8a30:	003d9d06 	br	80a8 <___vfiprintf_internal_r+0x17c>
    8a34:	da802217 	ldw	r10,136(sp)
    8a38:	d8001d85 	stb	zero,118(sp)
    8a3c:	50c00204 	addi	r3,r10,8
    8a40:	54800017 	ldw	r18,0(r10)
    8a44:	54c00117 	ldw	r19,4(r10)
    8a48:	4801ca16 	blt	r9,zero,9174 <___vfiprintf_internal_r+0x1248>
    8a4c:	013fdfc4 	movi	r4,-129
    8a50:	94c4b03a 	or	r2,r18,r19
    8a54:	d8c02215 	stw	r3,136(sp)
    8a58:	a128703a 	and	r20,r20,r4
    8a5c:	0039883a 	mov	fp,zero
    8a60:	103f341e 	bne	r2,zero,8734 <___vfiprintf_internal_r+0x808>
    8a64:	483e2e26 	beq	r9,zero,8320 <___vfiprintf_internal_r+0x3f4>
    8a68:	0025883a 	mov	r18,zero
    8a6c:	94800c04 	addi	r18,r18,48
    8a70:	dc8019c5 	stb	r18,103(sp)
    8a74:	dcc02717 	ldw	r19,156(sp)
    8a78:	dd4019c4 	addi	r21,sp,103
    8a7c:	003e2b06 	br	832c <___vfiprintf_internal_r+0x400>
    8a80:	21003fcc 	andi	r4,r4,255
    8a84:	2002361e 	bne	r4,zero,9360 <___vfiprintf_internal_r+0x1434>
    8a88:	1801c126 	beq	r3,zero,9190 <___vfiprintf_internal_r+0x1264>
    8a8c:	04800044 	movi	r18,1
    8a90:	d8c01005 	stb	r3,64(sp)
    8a94:	d8001d85 	stb	zero,118(sp)
    8a98:	9027883a 	mov	r19,r18
    8a9c:	dd401004 	addi	r21,sp,64
    8aa0:	003f1106 	br	86e8 <___vfiprintf_internal_r+0x7bc>
    8aa4:	d9402117 	ldw	r5,132(sp)
    8aa8:	d9002017 	ldw	r4,128(sp)
    8aac:	d9801a04 	addi	r6,sp,104
    8ab0:	d9c02b15 	stw	r7,172(sp)
    8ab4:	dbc02a15 	stw	r15,168(sp)
    8ab8:	0007e180 	call	7e18 <__sprint_r.part.0>
    8abc:	d9c02b17 	ldw	r7,172(sp)
    8ac0:	dbc02a17 	ldw	r15,168(sp)
    8ac4:	10006d1e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8ac8:	d9801b17 	ldw	r6,108(sp)
    8acc:	d8801c17 	ldw	r2,112(sp)
    8ad0:	d811883a 	mov	r8,sp
    8ad4:	31400044 	addi	r5,r6,1
    8ad8:	003e3306 	br	83a8 <___vfiprintf_internal_r+0x47c>
    8adc:	d9401b17 	ldw	r5,108(sp)
    8ae0:	d8801c17 	ldw	r2,112(sp)
    8ae4:	29000044 	addi	r4,r5,1
    8ae8:	d8c01d87 	ldb	r3,118(sp)
    8aec:	183e4d26 	beq	r3,zero,8424 <___vfiprintf_internal_r+0x4f8>
    8af0:	00c00044 	movi	r3,1
    8af4:	d9401d84 	addi	r5,sp,118
    8af8:	10c5883a 	add	r2,r2,r3
    8afc:	41400015 	stw	r5,0(r8)
    8b00:	40c00115 	stw	r3,4(r8)
    8b04:	d8801c15 	stw	r2,112(sp)
    8b08:	d9001b15 	stw	r4,108(sp)
    8b0c:	014001c4 	movi	r5,7
    8b10:	2900a90e 	bge	r5,r4,8db8 <___vfiprintf_internal_r+0xe8c>
    8b14:	1000da1e 	bne	r2,zero,8e80 <___vfiprintf_internal_r+0xf54>
    8b18:	7000ab1e 	bne	r14,zero,8dc8 <___vfiprintf_internal_r+0xe9c>
    8b1c:	000b883a 	mov	r5,zero
    8b20:	1809883a 	mov	r4,r3
    8b24:	d811883a 	mov	r8,sp
    8b28:	00c02004 	movi	r3,128
    8b2c:	e0fe4d26 	beq	fp,r3,8464 <___vfiprintf_internal_r+0x538>
    8b30:	4cf9c83a 	sub	fp,r9,r19
    8b34:	073e7b0e 	bge	zero,fp,8524 <___vfiprintf_internal_r+0x5f8>
    8b38:	01c00404 	movi	r7,16
    8b3c:	3f01900e 	bge	r7,fp,9180 <___vfiprintf_internal_r+0x1254>
    8b40:	00c000f4 	movhi	r3,3
    8b44:	18d35304 	addi	r3,r3,19788
    8b48:	d8c02415 	stw	r3,144(sp)
    8b4c:	034001c4 	movi	r13,7
    8b50:	00000506 	br	8b68 <___vfiprintf_internal_r+0xc3c>
    8b54:	29000084 	addi	r4,r5,2
    8b58:	42000204 	addi	r8,r8,8
    8b5c:	180b883a 	mov	r5,r3
    8b60:	e73ffc04 	addi	fp,fp,-16
    8b64:	3f000d0e 	bge	r7,fp,8b9c <___vfiprintf_internal_r+0xc70>
    8b68:	10800404 	addi	r2,r2,16
    8b6c:	28c00044 	addi	r3,r5,1
    8b70:	45c00015 	stw	r23,0(r8)
    8b74:	41c00115 	stw	r7,4(r8)
    8b78:	d8801c15 	stw	r2,112(sp)
    8b7c:	d8c01b15 	stw	r3,108(sp)
    8b80:	68fff40e 	bge	r13,r3,8b54 <___vfiprintf_internal_r+0xc28>
    8b84:	1000101e 	bne	r2,zero,8bc8 <___vfiprintf_internal_r+0xc9c>
    8b88:	e73ffc04 	addi	fp,fp,-16
    8b8c:	01000044 	movi	r4,1
    8b90:	000b883a 	mov	r5,zero
    8b94:	d811883a 	mov	r8,sp
    8b98:	3f3ff316 	blt	r7,fp,8b68 <___vfiprintf_internal_r+0xc3c>
    8b9c:	da802417 	ldw	r10,144(sp)
    8ba0:	1705883a 	add	r2,r2,fp
    8ba4:	47000115 	stw	fp,4(r8)
    8ba8:	42800015 	stw	r10,0(r8)
    8bac:	d8801c15 	stw	r2,112(sp)
    8bb0:	d9001b15 	stw	r4,108(sp)
    8bb4:	00c001c4 	movi	r3,7
    8bb8:	19003616 	blt	r3,r4,8c94 <___vfiprintf_internal_r+0xd68>
    8bbc:	42000204 	addi	r8,r8,8
    8bc0:	21000044 	addi	r4,r4,1
    8bc4:	003e5706 	br	8524 <___vfiprintf_internal_r+0x5f8>
    8bc8:	d9402117 	ldw	r5,132(sp)
    8bcc:	d9002017 	ldw	r4,128(sp)
    8bd0:	d9801a04 	addi	r6,sp,104
    8bd4:	d9c02b15 	stw	r7,172(sp)
    8bd8:	db402a15 	stw	r13,168(sp)
    8bdc:	0007e180 	call	7e18 <__sprint_r.part.0>
    8be0:	d9c02b17 	ldw	r7,172(sp)
    8be4:	db402a17 	ldw	r13,168(sp)
    8be8:	1000241e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8bec:	d9401b17 	ldw	r5,108(sp)
    8bf0:	d8801c17 	ldw	r2,112(sp)
    8bf4:	d811883a 	mov	r8,sp
    8bf8:	29000044 	addi	r4,r5,1
    8bfc:	003fd806 	br	8b60 <___vfiprintf_internal_r+0xc34>
    8c00:	d9401b17 	ldw	r5,108(sp)
    8c04:	00c000f4 	movhi	r3,3
    8c08:	18d35704 	addi	r3,r3,19804
    8c0c:	d8c02415 	stw	r3,144(sp)
    8c10:	29400044 	addi	r5,r5,1
    8c14:	d8c02417 	ldw	r3,144(sp)
    8c18:	14c5883a 	add	r2,r2,r19
    8c1c:	44c00115 	stw	r19,4(r8)
    8c20:	40c00015 	stw	r3,0(r8)
    8c24:	d8801c15 	stw	r2,112(sp)
    8c28:	d9401b15 	stw	r5,108(sp)
    8c2c:	00c001c4 	movi	r3,7
    8c30:	1940070e 	bge	r3,r5,8c50 <___vfiprintf_internal_r+0xd24>
    8c34:	103e4826 	beq	r2,zero,8558 <___vfiprintf_internal_r+0x62c>
    8c38:	d9402117 	ldw	r5,132(sp)
    8c3c:	d9002017 	ldw	r4,128(sp)
    8c40:	d9801a04 	addi	r6,sp,104
    8c44:	0007e180 	call	7e18 <__sprint_r.part.0>
    8c48:	10000c1e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8c4c:	d8801c17 	ldw	r2,112(sp)
    8c50:	8c80010e 	bge	r17,r18,8c58 <___vfiprintf_internal_r+0xd2c>
    8c54:	9023883a 	mov	r17,r18
    8c58:	da802317 	ldw	r10,140(sp)
    8c5c:	5455883a 	add	r10,r10,r17
    8c60:	da802315 	stw	r10,140(sp)
    8c64:	103e4126 	beq	r2,zero,856c <___vfiprintf_internal_r+0x640>
    8c68:	d9402117 	ldw	r5,132(sp)
    8c6c:	d9002017 	ldw	r4,128(sp)
    8c70:	d9801a04 	addi	r6,sp,104
    8c74:	0007e180 	call	7e18 <__sprint_r.part.0>
    8c78:	103e3c26 	beq	r2,zero,856c <___vfiprintf_internal_r+0x640>
    8c7c:	dd002117 	ldw	r20,132(sp)
    8c80:	a080030b 	ldhu	r2,12(r20)
    8c84:	1080100c 	andi	r2,r2,64
    8c88:	1001231e 	bne	r2,zero,9118 <___vfiprintf_internal_r+0x11ec>
    8c8c:	d8802317 	ldw	r2,140(sp)
    8c90:	003d7b06 	br	8280 <___vfiprintf_internal_r+0x354>
    8c94:	1000991e 	bne	r2,zero,8efc <___vfiprintf_internal_r+0xfd0>
    8c98:	00c00044 	movi	r3,1
    8c9c:	9805883a 	mov	r2,r19
    8ca0:	dd400015 	stw	r21,0(sp)
    8ca4:	dcc00115 	stw	r19,4(sp)
    8ca8:	dcc01c15 	stw	r19,112(sp)
    8cac:	d8c01b15 	stw	r3,108(sp)
    8cb0:	d811883a 	mov	r8,sp
    8cb4:	42000204 	addi	r8,r8,8
    8cb8:	a2c0010c 	andi	r11,r20,4
    8cbc:	583fe426 	beq	r11,zero,8c50 <___vfiprintf_internal_r+0xd24>
    8cc0:	8ca7c83a 	sub	r19,r17,r18
    8cc4:	04ffe20e 	bge	zero,r19,8c50 <___vfiprintf_internal_r+0xd24>
    8cc8:	01c00404 	movi	r7,16
    8ccc:	3cffcc0e 	bge	r7,r19,8c00 <___vfiprintf_internal_r+0xcd4>
    8cd0:	028000f4 	movhi	r10,3
    8cd4:	52935704 	addi	r10,r10,19804
    8cd8:	d9001b17 	ldw	r4,108(sp)
    8cdc:	da802415 	stw	r10,144(sp)
    8ce0:	382b883a 	mov	r21,r7
    8ce4:	050001c4 	movi	r20,7
    8ce8:	df002017 	ldw	fp,128(sp)
    8cec:	00000506 	br	8d04 <___vfiprintf_internal_r+0xdd8>
    8cf0:	21400084 	addi	r5,r4,2
    8cf4:	42000204 	addi	r8,r8,8
    8cf8:	1809883a 	mov	r4,r3
    8cfc:	9cfffc04 	addi	r19,r19,-16
    8d00:	acffc40e 	bge	r21,r19,8c14 <___vfiprintf_internal_r+0xce8>
    8d04:	10800404 	addi	r2,r2,16
    8d08:	20c00044 	addi	r3,r4,1
    8d0c:	45800015 	stw	r22,0(r8)
    8d10:	45400115 	stw	r21,4(r8)
    8d14:	d8801c15 	stw	r2,112(sp)
    8d18:	d8c01b15 	stw	r3,108(sp)
    8d1c:	a0fff40e 	bge	r20,r3,8cf0 <___vfiprintf_internal_r+0xdc4>
    8d20:	1000041e 	bne	r2,zero,8d34 <___vfiprintf_internal_r+0xe08>
    8d24:	01400044 	movi	r5,1
    8d28:	0009883a 	mov	r4,zero
    8d2c:	d811883a 	mov	r8,sp
    8d30:	003ff206 	br	8cfc <___vfiprintf_internal_r+0xdd0>
    8d34:	d9402117 	ldw	r5,132(sp)
    8d38:	d9801a04 	addi	r6,sp,104
    8d3c:	e009883a 	mov	r4,fp
    8d40:	0007e180 	call	7e18 <__sprint_r.part.0>
    8d44:	103fcd1e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8d48:	d9001b17 	ldw	r4,108(sp)
    8d4c:	d8801c17 	ldw	r2,112(sp)
    8d50:	d811883a 	mov	r8,sp
    8d54:	21400044 	addi	r5,r4,1
    8d58:	003fe806 	br	8cfc <___vfiprintf_internal_r+0xdd0>
    8d5c:	d9402117 	ldw	r5,132(sp)
    8d60:	d9002017 	ldw	r4,128(sp)
    8d64:	d9801a04 	addi	r6,sp,104
    8d68:	d9c02b15 	stw	r7,172(sp)
    8d6c:	db402a15 	stw	r13,168(sp)
    8d70:	0007e180 	call	7e18 <__sprint_r.part.0>
    8d74:	d9c02b17 	ldw	r7,172(sp)
    8d78:	db402a17 	ldw	r13,168(sp)
    8d7c:	103fbf1e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8d80:	d9401b17 	ldw	r5,108(sp)
    8d84:	d8801c17 	ldw	r2,112(sp)
    8d88:	d811883a 	mov	r8,sp
    8d8c:	29800044 	addi	r6,r5,1
    8d90:	003dc406 	br	84a4 <___vfiprintf_internal_r+0x578>
    8d94:	1000d21e 	bne	r2,zero,90e0 <___vfiprintf_internal_r+0x11b4>
    8d98:	d8c01d87 	ldb	r3,118(sp)
    8d9c:	18009526 	beq	r3,zero,8ff4 <___vfiprintf_internal_r+0x10c8>
    8da0:	00800044 	movi	r2,1
    8da4:	d8c01d84 	addi	r3,sp,118
    8da8:	1009883a 	mov	r4,r2
    8dac:	d8c00015 	stw	r3,0(sp)
    8db0:	d8800115 	stw	r2,4(sp)
    8db4:	d811883a 	mov	r8,sp
    8db8:	200b883a 	mov	r5,r4
    8dbc:	42000204 	addi	r8,r8,8
    8dc0:	21000044 	addi	r4,r4,1
    8dc4:	003d9706 	br	8424 <___vfiprintf_internal_r+0x4f8>
    8dc8:	d9001d04 	addi	r4,sp,116
    8dcc:	00800084 	movi	r2,2
    8dd0:	d9000015 	stw	r4,0(sp)
    8dd4:	d8800115 	stw	r2,4(sp)
    8dd8:	1809883a 	mov	r4,r3
    8ddc:	d811883a 	mov	r8,sp
    8de0:	200b883a 	mov	r5,r4
    8de4:	42000204 	addi	r8,r8,8
    8de8:	21000044 	addi	r4,r4,1
    8dec:	003f4e06 	br	8b28 <___vfiprintf_internal_r+0xbfc>
    8df0:	d8001d85 	stb	zero,118(sp)
    8df4:	48005016 	blt	r9,zero,8f38 <___vfiprintf_internal_r+0x100c>
    8df8:	00ffdfc4 	movi	r3,-129
    8dfc:	94c4b03a 	or	r2,r18,r19
    8e00:	a0e8703a 	and	r20,r20,r3
    8e04:	103d4426 	beq	r2,zero,8318 <___vfiprintf_internal_r+0x3ec>
    8e08:	0039883a 	mov	fp,zero
    8e0c:	d9002617 	ldw	r4,152(sp)
    8e10:	dd401a04 	addi	r21,sp,104
    8e14:	908003cc 	andi	r2,r18,15
    8e18:	9806973a 	slli	r3,r19,28
    8e1c:	2085883a 	add	r2,r4,r2
    8e20:	9024d13a 	srli	r18,r18,4
    8e24:	10800003 	ldbu	r2,0(r2)
    8e28:	9826d13a 	srli	r19,r19,4
    8e2c:	ad7fffc4 	addi	r21,r21,-1
    8e30:	1ca4b03a 	or	r18,r3,r18
    8e34:	a8800005 	stb	r2,0(r21)
    8e38:	94c4b03a 	or	r2,r18,r19
    8e3c:	103ff51e 	bne	r2,zero,8e14 <___vfiprintf_internal_r+0xee8>
    8e40:	003e5906 	br	87a8 <___vfiprintf_internal_r+0x87c>
    8e44:	d9402117 	ldw	r5,132(sp)
    8e48:	d9002017 	ldw	r4,128(sp)
    8e4c:	d9801a04 	addi	r6,sp,104
    8e50:	0007e180 	call	7e18 <__sprint_r.part.0>
    8e54:	103f891e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8e58:	d8801c17 	ldw	r2,112(sp)
    8e5c:	d811883a 	mov	r8,sp
    8e60:	003f9506 	br	8cb8 <___vfiprintf_internal_r+0xd8c>
    8e64:	d9402117 	ldw	r5,132(sp)
    8e68:	d9002017 	ldw	r4,128(sp)
    8e6c:	d9801a04 	addi	r6,sp,104
    8e70:	0007e180 	call	7e18 <__sprint_r.part.0>
    8e74:	103f811e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8e78:	d811883a 	mov	r8,sp
    8e7c:	003ced06 	br	8234 <___vfiprintf_internal_r+0x308>
    8e80:	d9402117 	ldw	r5,132(sp)
    8e84:	d9002017 	ldw	r4,128(sp)
    8e88:	d9801a04 	addi	r6,sp,104
    8e8c:	da402c15 	stw	r9,176(sp)
    8e90:	db802a15 	stw	r14,168(sp)
    8e94:	0007e180 	call	7e18 <__sprint_r.part.0>
    8e98:	da402c17 	ldw	r9,176(sp)
    8e9c:	db802a17 	ldw	r14,168(sp)
    8ea0:	103f761e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8ea4:	d9401b17 	ldw	r5,108(sp)
    8ea8:	d8801c17 	ldw	r2,112(sp)
    8eac:	d811883a 	mov	r8,sp
    8eb0:	29000044 	addi	r4,r5,1
    8eb4:	003d5b06 	br	8424 <___vfiprintf_internal_r+0x4f8>
    8eb8:	d9402117 	ldw	r5,132(sp)
    8ebc:	d9002017 	ldw	r4,128(sp)
    8ec0:	d9801a04 	addi	r6,sp,104
    8ec4:	da402c15 	stw	r9,176(sp)
    8ec8:	0007e180 	call	7e18 <__sprint_r.part.0>
    8ecc:	da402c17 	ldw	r9,176(sp)
    8ed0:	103f6a1e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8ed4:	d9401b17 	ldw	r5,108(sp)
    8ed8:	d8801c17 	ldw	r2,112(sp)
    8edc:	d811883a 	mov	r8,sp
    8ee0:	29000044 	addi	r4,r5,1
    8ee4:	003f1006 	br	8b28 <___vfiprintf_internal_r+0xbfc>
    8ee8:	1000c31e 	bne	r2,zero,91f8 <___vfiprintf_internal_r+0x12cc>
    8eec:	01000044 	movi	r4,1
    8ef0:	000b883a 	mov	r5,zero
    8ef4:	d811883a 	mov	r8,sp
    8ef8:	003f0d06 	br	8b30 <___vfiprintf_internal_r+0xc04>
    8efc:	d9402117 	ldw	r5,132(sp)
    8f00:	d9002017 	ldw	r4,128(sp)
    8f04:	d9801a04 	addi	r6,sp,104
    8f08:	0007e180 	call	7e18 <__sprint_r.part.0>
    8f0c:	103f5b1e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    8f10:	d9001b17 	ldw	r4,108(sp)
    8f14:	d8801c17 	ldw	r2,112(sp)
    8f18:	d811883a 	mov	r8,sp
    8f1c:	21000044 	addi	r4,r4,1
    8f20:	003d8006 	br	8524 <___vfiprintf_internal_r+0x5f8>
    8f24:	010000f4 	movhi	r4,3
    8f28:	2112f204 	addi	r4,r4,19400
    8f2c:	d9002615 	stw	r4,152(sp)
    8f30:	d8c02215 	stw	r3,136(sp)
    8f34:	1029883a 	mov	r20,r2
    8f38:	94c4b03a 	or	r2,r18,r19
    8f3c:	103fb21e 	bne	r2,zero,8e08 <___vfiprintf_internal_r+0xedc>
    8f40:	0039883a 	mov	fp,zero
    8f44:	00800084 	movi	r2,2
    8f48:	003e6b06 	br	88f8 <___vfiprintf_internal_r+0x9cc>
    8f4c:	da802217 	ldw	r10,136(sp)
    8f50:	d8001d85 	stb	zero,118(sp)
    8f54:	0027883a 	mov	r19,zero
    8f58:	50800104 	addi	r2,r10,4
    8f5c:	54800017 	ldw	r18,0(r10)
    8f60:	483e6016 	blt	r9,zero,88e4 <___vfiprintf_internal_r+0x9b8>
    8f64:	00ffdfc4 	movi	r3,-129
    8f68:	d8802215 	stw	r2,136(sp)
    8f6c:	a0e8703a 	and	r20,r20,r3
    8f70:	0039883a 	mov	fp,zero
    8f74:	903ebb26 	beq	r18,zero,8a64 <___vfiprintf_internal_r+0xb38>
    8f78:	00800244 	movi	r2,9
    8f7c:	14bdee36 	bltu	r2,r18,8738 <___vfiprintf_internal_r+0x80c>
    8f80:	003eba06 	br	8a6c <___vfiprintf_internal_r+0xb40>
    8f84:	00800c04 	movi	r2,48
    8f88:	d8c01d45 	stb	r3,117(sp)
    8f8c:	d8801d05 	stb	r2,116(sp)
    8f90:	d8001d85 	stb	zero,118(sp)
    8f94:	a0c00094 	ori	r3,r20,2
    8f98:	4800a916 	blt	r9,zero,9240 <___vfiprintf_internal_r+0x1314>
    8f9c:	00bfdfc4 	movi	r2,-129
    8fa0:	a096703a 	and	r11,r20,r2
    8fa4:	5d000094 	ori	r20,r11,2
    8fa8:	0039883a 	mov	fp,zero
    8fac:	003f9706 	br	8e0c <___vfiprintf_internal_r+0xee0>
    8fb0:	8025883a 	mov	r18,r16
    8fb4:	003c2e06 	br	8070 <___vfiprintf_internal_r+0x144>
    8fb8:	008000f4 	movhi	r2,3
    8fbc:	1092f204 	addi	r2,r2,19400
    8fc0:	0039883a 	mov	fp,zero
    8fc4:	d8802615 	stw	r2,152(sp)
    8fc8:	003f9006 	br	8e0c <___vfiprintf_internal_r+0xee0>
    8fcc:	04a5c83a 	sub	r18,zero,r18
    8fd0:	07000b44 	movi	fp,45
    8fd4:	9004c03a 	cmpne	r2,r18,zero
    8fd8:	04e7c83a 	sub	r19,zero,r19
    8fdc:	df001d85 	stb	fp,118(sp)
    8fe0:	98a7c83a 	sub	r19,r19,r2
    8fe4:	48009f16 	blt	r9,zero,9264 <___vfiprintf_internal_r+0x1338>
    8fe8:	00bfdfc4 	movi	r2,-129
    8fec:	a0a8703a 	and	r20,r20,r2
    8ff0:	003dd006 	br	8734 <___vfiprintf_internal_r+0x808>
    8ff4:	70004c26 	beq	r14,zero,9128 <___vfiprintf_internal_r+0x11fc>
    8ff8:	00800084 	movi	r2,2
    8ffc:	d8c01d04 	addi	r3,sp,116
    9000:	d8c00015 	stw	r3,0(sp)
    9004:	d8800115 	stw	r2,4(sp)
    9008:	01000044 	movi	r4,1
    900c:	d811883a 	mov	r8,sp
    9010:	003f7306 	br	8de0 <___vfiprintf_internal_r+0xeb4>
    9014:	a080100c 	andi	r2,r20,64
    9018:	da802217 	ldw	r10,136(sp)
    901c:	103e0626 	beq	r2,zero,8838 <___vfiprintf_internal_r+0x90c>
    9020:	5480000f 	ldh	r18,0(r10)
    9024:	52800104 	addi	r10,r10,4
    9028:	da802215 	stw	r10,136(sp)
    902c:	9027d7fa 	srai	r19,r18,31
    9030:	9805883a 	mov	r2,r19
    9034:	003db806 	br	8718 <___vfiprintf_internal_r+0x7ec>
    9038:	a080040c 	andi	r2,r20,16
    903c:	1000091e 	bne	r2,zero,9064 <___vfiprintf_internal_r+0x1138>
    9040:	a2c0100c 	andi	r11,r20,64
    9044:	58000726 	beq	r11,zero,9064 <___vfiprintf_internal_r+0x1138>
    9048:	da802217 	ldw	r10,136(sp)
    904c:	50800017 	ldw	r2,0(r10)
    9050:	52800104 	addi	r10,r10,4
    9054:	da802215 	stw	r10,136(sp)
    9058:	da802317 	ldw	r10,140(sp)
    905c:	1280000d 	sth	r10,0(r2)
    9060:	003be706 	br	8000 <___vfiprintf_internal_r+0xd4>
    9064:	da802217 	ldw	r10,136(sp)
    9068:	50800017 	ldw	r2,0(r10)
    906c:	52800104 	addi	r10,r10,4
    9070:	da802215 	stw	r10,136(sp)
    9074:	da802317 	ldw	r10,140(sp)
    9078:	12800015 	stw	r10,0(r2)
    907c:	003be006 	br	8000 <___vfiprintf_internal_r+0xd4>
    9080:	a080100c 	andi	r2,r20,64
    9084:	da802217 	ldw	r10,136(sp)
    9088:	10003026 	beq	r2,zero,914c <___vfiprintf_internal_r+0x1220>
    908c:	5480000b 	ldhu	r18,0(r10)
    9090:	52800104 	addi	r10,r10,4
    9094:	0027883a 	mov	r19,zero
    9098:	da802215 	stw	r10,136(sp)
    909c:	003d8006 	br	86a0 <___vfiprintf_internal_r+0x774>
    90a0:	80c00007 	ldb	r3,0(r16)
    90a4:	003c0006 	br	80a8 <___vfiprintf_internal_r+0x17c>
    90a8:	a080100c 	andi	r2,r20,64
    90ac:	d8001d85 	stb	zero,118(sp)
    90b0:	da802217 	ldw	r10,136(sp)
    90b4:	1000201e 	bne	r2,zero,9138 <___vfiprintf_internal_r+0x120c>
    90b8:	50800104 	addi	r2,r10,4
    90bc:	54800017 	ldw	r18,0(r10)
    90c0:	0027883a 	mov	r19,zero
    90c4:	483def0e 	bge	r9,zero,8884 <___vfiprintf_internal_r+0x958>
    90c8:	94c6b03a 	or	r3,r18,r19
    90cc:	d8802215 	stw	r2,136(sp)
    90d0:	183d4e1e 	bne	r3,zero,860c <___vfiprintf_internal_r+0x6e0>
    90d4:	0039883a 	mov	fp,zero
    90d8:	0005883a 	mov	r2,zero
    90dc:	003e0606 	br	88f8 <___vfiprintf_internal_r+0x9cc>
    90e0:	d9402117 	ldw	r5,132(sp)
    90e4:	d9002017 	ldw	r4,128(sp)
    90e8:	d9801a04 	addi	r6,sp,104
    90ec:	da402c15 	stw	r9,176(sp)
    90f0:	db802a15 	stw	r14,168(sp)
    90f4:	0007e180 	call	7e18 <__sprint_r.part.0>
    90f8:	da402c17 	ldw	r9,176(sp)
    90fc:	db802a17 	ldw	r14,168(sp)
    9100:	103ede1e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    9104:	d9401b17 	ldw	r5,108(sp)
    9108:	d8801c17 	ldw	r2,112(sp)
    910c:	d811883a 	mov	r8,sp
    9110:	29000044 	addi	r4,r5,1
    9114:	003e7406 	br	8ae8 <___vfiprintf_internal_r+0xbbc>
    9118:	00bfffc4 	movi	r2,-1
    911c:	003c5806 	br	8280 <___vfiprintf_internal_r+0x354>
    9120:	d811883a 	mov	r8,sp
    9124:	003ee806 	br	8cc8 <___vfiprintf_internal_r+0xd9c>
    9128:	000b883a 	mov	r5,zero
    912c:	01000044 	movi	r4,1
    9130:	d811883a 	mov	r8,sp
    9134:	003e7c06 	br	8b28 <___vfiprintf_internal_r+0xbfc>
    9138:	50800104 	addi	r2,r10,4
    913c:	5480000b 	ldhu	r18,0(r10)
    9140:	0027883a 	mov	r19,zero
    9144:	483dcf0e 	bge	r9,zero,8884 <___vfiprintf_internal_r+0x958>
    9148:	003fdf06 	br	90c8 <___vfiprintf_internal_r+0x119c>
    914c:	54800017 	ldw	r18,0(r10)
    9150:	52800104 	addi	r10,r10,4
    9154:	0027883a 	mov	r19,zero
    9158:	da802215 	stw	r10,136(sp)
    915c:	003d5006 	br	86a0 <___vfiprintf_internal_r+0x774>
    9160:	50800104 	addi	r2,r10,4
    9164:	5480000b 	ldhu	r18,0(r10)
    9168:	0027883a 	mov	r19,zero
    916c:	483f7d0e 	bge	r9,zero,8f64 <___vfiprintf_internal_r+0x1038>
    9170:	003ddc06 	br	88e4 <___vfiprintf_internal_r+0x9b8>
    9174:	d8c02215 	stw	r3,136(sp)
    9178:	0039883a 	mov	fp,zero
    917c:	003ddb06 	br	88ec <___vfiprintf_internal_r+0x9c0>
    9180:	028000f4 	movhi	r10,3
    9184:	52935304 	addi	r10,r10,19788
    9188:	da802415 	stw	r10,144(sp)
    918c:	003e8306 	br	8b9c <___vfiprintf_internal_r+0xc70>
    9190:	d8801c17 	ldw	r2,112(sp)
    9194:	dd002117 	ldw	r20,132(sp)
    9198:	103eb926 	beq	r2,zero,8c80 <___vfiprintf_internal_r+0xd54>
    919c:	d9002017 	ldw	r4,128(sp)
    91a0:	d9801a04 	addi	r6,sp,104
    91a4:	a00b883a 	mov	r5,r20
    91a8:	0007e180 	call	7e18 <__sprint_r.part.0>
    91ac:	003eb406 	br	8c80 <___vfiprintf_internal_r+0xd54>
    91b0:	80c00043 	ldbu	r3,1(r16)
    91b4:	a5000814 	ori	r20,r20,32
    91b8:	84000044 	addi	r16,r16,1
    91bc:	18c03fcc 	andi	r3,r3,255
    91c0:	18c0201c 	xori	r3,r3,128
    91c4:	18ffe004 	addi	r3,r3,-128
    91c8:	003bb706 	br	80a8 <___vfiprintf_internal_r+0x17c>
    91cc:	a809883a 	mov	r4,r21
    91d0:	d8c02a15 	stw	r3,168(sp)
    91d4:	da002b15 	stw	r8,172(sp)
    91d8:	00008800 	call	880 <strlen>
    91dc:	d8c02a17 	ldw	r3,168(sp)
    91e0:	1027883a 	mov	r19,r2
    91e4:	df001d83 	ldbu	fp,118(sp)
    91e8:	d8c02215 	stw	r3,136(sp)
    91ec:	0013883a 	mov	r9,zero
    91f0:	da002b17 	ldw	r8,172(sp)
    91f4:	003c4d06 	br	832c <___vfiprintf_internal_r+0x400>
    91f8:	d9402117 	ldw	r5,132(sp)
    91fc:	d9002017 	ldw	r4,128(sp)
    9200:	d9801a04 	addi	r6,sp,104
    9204:	da402c15 	stw	r9,176(sp)
    9208:	0007e180 	call	7e18 <__sprint_r.part.0>
    920c:	da402c17 	ldw	r9,176(sp)
    9210:	103e9a1e 	bne	r2,zero,8c7c <___vfiprintf_internal_r+0xd50>
    9214:	d9401b17 	ldw	r5,108(sp)
    9218:	d8801c17 	ldw	r2,112(sp)
    921c:	d811883a 	mov	r8,sp
    9220:	29000044 	addi	r4,r5,1
    9224:	003e4206 	br	8b30 <___vfiprintf_internal_r+0xc04>
    9228:	d9401b17 	ldw	r5,108(sp)
    922c:	010000f4 	movhi	r4,3
    9230:	21135704 	addi	r4,r4,19804
    9234:	d9002415 	stw	r4,144(sp)
    9238:	29400044 	addi	r5,r5,1
    923c:	003c6d06 	br	83f4 <___vfiprintf_internal_r+0x4c8>
    9240:	0039883a 	mov	fp,zero
    9244:	00800084 	movi	r2,2
    9248:	10803fcc 	andi	r2,r2,255
    924c:	01000044 	movi	r4,1
    9250:	11001e26 	beq	r2,r4,92cc <___vfiprintf_internal_r+0x13a0>
    9254:	01000084 	movi	r4,2
    9258:	11001e1e 	bne	r2,r4,92d4 <___vfiprintf_internal_r+0x13a8>
    925c:	1829883a 	mov	r20,r3
    9260:	003eea06 	br	8e0c <___vfiprintf_internal_r+0xee0>
    9264:	a007883a 	mov	r3,r20
    9268:	00800044 	movi	r2,1
    926c:	003ff606 	br	9248 <___vfiprintf_internal_r+0x131c>
    9270:	00800184 	movi	r2,6
    9274:	1240012e 	bgeu	r2,r9,927c <___vfiprintf_internal_r+0x1350>
    9278:	1013883a 	mov	r9,r2
    927c:	4827883a 	mov	r19,r9
    9280:	4825883a 	mov	r18,r9
    9284:	48001516 	blt	r9,zero,92dc <___vfiprintf_internal_r+0x13b0>
    9288:	054000f4 	movhi	r21,3
    928c:	d8c02215 	stw	r3,136(sp)
    9290:	ad52f704 	addi	r21,r21,19420
    9294:	003d1406 	br	86e8 <___vfiprintf_internal_r+0x7bc>
    9298:	028000f4 	movhi	r10,3
    929c:	52935304 	addi	r10,r10,19788
    92a0:	da802415 	stw	r10,144(sp)
    92a4:	200d883a 	mov	r6,r4
    92a8:	003c9106 	br	84f0 <___vfiprintf_internal_r+0x5c4>
    92ac:	5021883a 	mov	r16,r10
    92b0:	0013883a 	mov	r9,zero
    92b4:	003b7d06 	br	80ac <___vfiprintf_internal_r+0x180>
    92b8:	4827883a 	mov	r19,r9
    92bc:	df001d83 	ldbu	fp,118(sp)
    92c0:	d8c02215 	stw	r3,136(sp)
    92c4:	0013883a 	mov	r9,zero
    92c8:	003c1806 	br	832c <___vfiprintf_internal_r+0x400>
    92cc:	1829883a 	mov	r20,r3
    92d0:	003d1806 	br	8734 <___vfiprintf_internal_r+0x808>
    92d4:	1829883a 	mov	r20,r3
    92d8:	003ccd06 	br	8610 <___vfiprintf_internal_r+0x6e4>
    92dc:	0025883a 	mov	r18,zero
    92e0:	003fe906 	br	9288 <___vfiprintf_internal_r+0x135c>
    92e4:	d8802217 	ldw	r2,136(sp)
    92e8:	80c00043 	ldbu	r3,1(r16)
    92ec:	5021883a 	mov	r16,r10
    92f0:	12400017 	ldw	r9,0(r2)
    92f4:	10800104 	addi	r2,r2,4
    92f8:	d8802215 	stw	r2,136(sp)
    92fc:	483faf0e 	bge	r9,zero,91bc <___vfiprintf_internal_r+0x1290>
    9300:	18c03fcc 	andi	r3,r3,255
    9304:	18c0201c 	xori	r3,r3,128
    9308:	027fffc4 	movi	r9,-1
    930c:	18ffe004 	addi	r3,r3,-128
    9310:	003b6506 	br	80a8 <___vfiprintf_internal_r+0x17c>
    9314:	d9c01d85 	stb	r7,118(sp)
    9318:	003ca006 	br	859c <___vfiprintf_internal_r+0x670>
    931c:	d9c01d85 	stb	r7,118(sp)
    9320:	003cad06 	br	85d8 <___vfiprintf_internal_r+0x6ac>
    9324:	d9c01d85 	stb	r7,118(sp)
    9328:	003d7d06 	br	8920 <___vfiprintf_internal_r+0x9f4>
    932c:	d9c01d85 	stb	r7,118(sp)
    9330:	003d5f06 	br	88b0 <___vfiprintf_internal_r+0x984>
    9334:	a080004c 	andi	r2,r20,1
    9338:	0039883a 	mov	fp,zero
    933c:	10000526 	beq	r2,zero,9354 <___vfiprintf_internal_r+0x1428>
    9340:	00800c04 	movi	r2,48
    9344:	d88019c5 	stb	r2,103(sp)
    9348:	dcc02717 	ldw	r19,156(sp)
    934c:	dd4019c4 	addi	r21,sp,103
    9350:	003bf606 	br	832c <___vfiprintf_internal_r+0x400>
    9354:	0027883a 	mov	r19,zero
    9358:	dd401a04 	addi	r21,sp,104
    935c:	003bf306 	br	832c <___vfiprintf_internal_r+0x400>
    9360:	d9c01d85 	stb	r7,118(sp)
    9364:	003dc806 	br	8a88 <___vfiprintf_internal_r+0xb5c>
    9368:	d9c01d85 	stb	r7,118(sp)
    936c:	003d3a06 	br	8858 <___vfiprintf_internal_r+0x92c>
    9370:	d9c01d85 	stb	r7,118(sp)
    9374:	003d2a06 	br	8820 <___vfiprintf_internal_r+0x8f4>
    9378:	d9c01d85 	stb	r7,118(sp)
    937c:	003cde06 	br	86f8 <___vfiprintf_internal_r+0x7cc>
    9380:	d9c01d85 	stb	r7,118(sp)
    9384:	003cbc06 	br	8678 <___vfiprintf_internal_r+0x74c>

00009388 <__vfiprintf_internal>:
    9388:	008000f4 	movhi	r2,3
    938c:	109aa104 	addi	r2,r2,27268
    9390:	300f883a 	mov	r7,r6
    9394:	280d883a 	mov	r6,r5
    9398:	200b883a 	mov	r5,r4
    939c:	11000017 	ldw	r4,0(r2)
    93a0:	0007f2c1 	jmpi	7f2c <___vfiprintf_internal_r>

000093a4 <__sbprintf>:
    93a4:	2880030b 	ldhu	r2,12(r5)
    93a8:	2ac01917 	ldw	r11,100(r5)
    93ac:	2a80038b 	ldhu	r10,14(r5)
    93b0:	2a400717 	ldw	r9,28(r5)
    93b4:	2a000917 	ldw	r8,36(r5)
    93b8:	defee204 	addi	sp,sp,-1144
    93bc:	00c10004 	movi	r3,1024
    93c0:	dc011a15 	stw	r16,1128(sp)
    93c4:	10bfff4c 	andi	r2,r2,65533
    93c8:	2821883a 	mov	r16,r5
    93cc:	d8cb883a 	add	r5,sp,r3
    93d0:	dc811c15 	stw	r18,1136(sp)
    93d4:	dc411b15 	stw	r17,1132(sp)
    93d8:	dfc11d15 	stw	ra,1140(sp)
    93dc:	2025883a 	mov	r18,r4
    93e0:	d881030d 	sth	r2,1036(sp)
    93e4:	dac11915 	stw	r11,1124(sp)
    93e8:	da81038d 	sth	r10,1038(sp)
    93ec:	da410715 	stw	r9,1052(sp)
    93f0:	da010915 	stw	r8,1060(sp)
    93f4:	dec10015 	stw	sp,1024(sp)
    93f8:	dec10415 	stw	sp,1040(sp)
    93fc:	d8c10215 	stw	r3,1032(sp)
    9400:	d8c10515 	stw	r3,1044(sp)
    9404:	d8010615 	stw	zero,1048(sp)
    9408:	0007f2c0 	call	7f2c <___vfiprintf_internal_r>
    940c:	1023883a 	mov	r17,r2
    9410:	10000416 	blt	r2,zero,9424 <__sbprintf+0x80>
    9414:	d9410004 	addi	r5,sp,1024
    9418:	9009883a 	mov	r4,r18
    941c:	00047e00 	call	47e0 <_fflush_r>
    9420:	10000d1e 	bne	r2,zero,9458 <__sbprintf+0xb4>
    9424:	d881030b 	ldhu	r2,1036(sp)
    9428:	1080100c 	andi	r2,r2,64
    942c:	10000326 	beq	r2,zero,943c <__sbprintf+0x98>
    9430:	8080030b 	ldhu	r2,12(r16)
    9434:	10801014 	ori	r2,r2,64
    9438:	8080030d 	sth	r2,12(r16)
    943c:	8805883a 	mov	r2,r17
    9440:	dfc11d17 	ldw	ra,1140(sp)
    9444:	dc811c17 	ldw	r18,1136(sp)
    9448:	dc411b17 	ldw	r17,1132(sp)
    944c:	dc011a17 	ldw	r16,1128(sp)
    9450:	dec11e04 	addi	sp,sp,1144
    9454:	f800283a 	ret
    9458:	047fffc4 	movi	r17,-1
    945c:	003ff106 	br	9424 <__sbprintf+0x80>

00009460 <_write_r>:
    9460:	defffd04 	addi	sp,sp,-12
    9464:	2805883a 	mov	r2,r5
    9468:	dc000015 	stw	r16,0(sp)
    946c:	04000134 	movhi	r16,4
    9470:	dc400115 	stw	r17,4(sp)
    9474:	300b883a 	mov	r5,r6
    9478:	8421b504 	addi	r16,r16,-31020
    947c:	2023883a 	mov	r17,r4
    9480:	380d883a 	mov	r6,r7
    9484:	1009883a 	mov	r4,r2
    9488:	dfc00215 	stw	ra,8(sp)
    948c:	80000015 	stw	zero,0(r16)
    9490:	000d6f00 	call	d6f0 <write>
    9494:	00ffffc4 	movi	r3,-1
    9498:	10c00526 	beq	r2,r3,94b0 <_write_r+0x50>
    949c:	dfc00217 	ldw	ra,8(sp)
    94a0:	dc400117 	ldw	r17,4(sp)
    94a4:	dc000017 	ldw	r16,0(sp)
    94a8:	dec00304 	addi	sp,sp,12
    94ac:	f800283a 	ret
    94b0:	80c00017 	ldw	r3,0(r16)
    94b4:	183ff926 	beq	r3,zero,949c <_write_r+0x3c>
    94b8:	88c00015 	stw	r3,0(r17)
    94bc:	003ff706 	br	949c <_write_r+0x3c>

000094c0 <_close_r>:
    94c0:	defffd04 	addi	sp,sp,-12
    94c4:	dc000015 	stw	r16,0(sp)
    94c8:	04000134 	movhi	r16,4
    94cc:	dc400115 	stw	r17,4(sp)
    94d0:	8421b504 	addi	r16,r16,-31020
    94d4:	2023883a 	mov	r17,r4
    94d8:	2809883a 	mov	r4,r5
    94dc:	dfc00215 	stw	ra,8(sp)
    94e0:	80000015 	stw	zero,0(r16)
    94e4:	000cee80 	call	cee8 <close>
    94e8:	00ffffc4 	movi	r3,-1
    94ec:	10c00526 	beq	r2,r3,9504 <_close_r+0x44>
    94f0:	dfc00217 	ldw	ra,8(sp)
    94f4:	dc400117 	ldw	r17,4(sp)
    94f8:	dc000017 	ldw	r16,0(sp)
    94fc:	dec00304 	addi	sp,sp,12
    9500:	f800283a 	ret
    9504:	80c00017 	ldw	r3,0(r16)
    9508:	183ff926 	beq	r3,zero,94f0 <_close_r+0x30>
    950c:	88c00015 	stw	r3,0(r17)
    9510:	003ff706 	br	94f0 <_close_r+0x30>

00009514 <_calloc_r>:
    9514:	298b383a 	mul	r5,r5,r6
    9518:	defffe04 	addi	sp,sp,-8
    951c:	dfc00115 	stw	ra,4(sp)
    9520:	dc000015 	stw	r16,0(sp)
    9524:	000591c0 	call	591c <_malloc_r>
    9528:	10002926 	beq	r2,zero,95d0 <_calloc_r+0xbc>
    952c:	11bfff17 	ldw	r6,-4(r2)
    9530:	1021883a 	mov	r16,r2
    9534:	00bfff04 	movi	r2,-4
    9538:	308c703a 	and	r6,r6,r2
    953c:	00c00904 	movi	r3,36
    9540:	308d883a 	add	r6,r6,r2
    9544:	19801636 	bltu	r3,r6,95a0 <_calloc_r+0x8c>
    9548:	008004c4 	movi	r2,19
    954c:	11800b2e 	bgeu	r2,r6,957c <_calloc_r+0x68>
    9550:	80000015 	stw	zero,0(r16)
    9554:	80000115 	stw	zero,4(r16)
    9558:	008006c4 	movi	r2,27
    955c:	11801a2e 	bgeu	r2,r6,95c8 <_calloc_r+0xb4>
    9560:	80000215 	stw	zero,8(r16)
    9564:	80000315 	stw	zero,12(r16)
    9568:	30c0151e 	bne	r6,r3,95c0 <_calloc_r+0xac>
    956c:	80000415 	stw	zero,16(r16)
    9570:	80800604 	addi	r2,r16,24
    9574:	80000515 	stw	zero,20(r16)
    9578:	00000106 	br	9580 <_calloc_r+0x6c>
    957c:	8005883a 	mov	r2,r16
    9580:	10000015 	stw	zero,0(r2)
    9584:	10000115 	stw	zero,4(r2)
    9588:	10000215 	stw	zero,8(r2)
    958c:	8005883a 	mov	r2,r16
    9590:	dfc00117 	ldw	ra,4(sp)
    9594:	dc000017 	ldw	r16,0(sp)
    9598:	dec00204 	addi	sp,sp,8
    959c:	f800283a 	ret
    95a0:	000b883a 	mov	r5,zero
    95a4:	8009883a 	mov	r4,r16
    95a8:	00064b00 	call	64b0 <memset>
    95ac:	8005883a 	mov	r2,r16
    95b0:	dfc00117 	ldw	ra,4(sp)
    95b4:	dc000017 	ldw	r16,0(sp)
    95b8:	dec00204 	addi	sp,sp,8
    95bc:	f800283a 	ret
    95c0:	80800404 	addi	r2,r16,16
    95c4:	003fee06 	br	9580 <_calloc_r+0x6c>
    95c8:	80800204 	addi	r2,r16,8
    95cc:	003fec06 	br	9580 <_calloc_r+0x6c>
    95d0:	0005883a 	mov	r2,zero
    95d4:	003fee06 	br	9590 <_calloc_r+0x7c>

000095d8 <_fclose_r>:
    95d8:	28003926 	beq	r5,zero,96c0 <_fclose_r+0xe8>
    95dc:	defffc04 	addi	sp,sp,-16
    95e0:	dc400115 	stw	r17,4(sp)
    95e4:	dc000015 	stw	r16,0(sp)
    95e8:	dfc00315 	stw	ra,12(sp)
    95ec:	dc800215 	stw	r18,8(sp)
    95f0:	2023883a 	mov	r17,r4
    95f4:	2821883a 	mov	r16,r5
    95f8:	20000226 	beq	r4,zero,9604 <_fclose_r+0x2c>
    95fc:	20800e17 	ldw	r2,56(r4)
    9600:	10002726 	beq	r2,zero,96a0 <_fclose_r+0xc8>
    9604:	8080030f 	ldh	r2,12(r16)
    9608:	1000071e 	bne	r2,zero,9628 <_fclose_r+0x50>
    960c:	0005883a 	mov	r2,zero
    9610:	dfc00317 	ldw	ra,12(sp)
    9614:	dc800217 	ldw	r18,8(sp)
    9618:	dc400117 	ldw	r17,4(sp)
    961c:	dc000017 	ldw	r16,0(sp)
    9620:	dec00404 	addi	sp,sp,16
    9624:	f800283a 	ret
    9628:	800b883a 	mov	r5,r16
    962c:	8809883a 	mov	r4,r17
    9630:	00045c40 	call	45c4 <__sflush_r>
    9634:	1025883a 	mov	r18,r2
    9638:	80800b17 	ldw	r2,44(r16)
    963c:	10000426 	beq	r2,zero,9650 <_fclose_r+0x78>
    9640:	81400717 	ldw	r5,28(r16)
    9644:	8809883a 	mov	r4,r17
    9648:	103ee83a 	callr	r2
    964c:	10001616 	blt	r2,zero,96a8 <_fclose_r+0xd0>
    9650:	8080030b 	ldhu	r2,12(r16)
    9654:	1080200c 	andi	r2,r2,128
    9658:	1000151e 	bne	r2,zero,96b0 <_fclose_r+0xd8>
    965c:	81400c17 	ldw	r5,48(r16)
    9660:	28000526 	beq	r5,zero,9678 <_fclose_r+0xa0>
    9664:	80801004 	addi	r2,r16,64
    9668:	28800226 	beq	r5,r2,9674 <_fclose_r+0x9c>
    966c:	8809883a 	mov	r4,r17
    9670:	0004d300 	call	4d30 <_free_r>
    9674:	80000c15 	stw	zero,48(r16)
    9678:	81401117 	ldw	r5,68(r16)
    967c:	28000326 	beq	r5,zero,968c <_fclose_r+0xb4>
    9680:	8809883a 	mov	r4,r17
    9684:	0004d300 	call	4d30 <_free_r>
    9688:	80001115 	stw	zero,68(r16)
    968c:	0004bcc0 	call	4bcc <__sfp_lock_acquire>
    9690:	8000030d 	sth	zero,12(r16)
    9694:	0004bd00 	call	4bd0 <__sfp_lock_release>
    9698:	9005883a 	mov	r2,r18
    969c:	003fdc06 	br	9610 <_fclose_r+0x38>
    96a0:	0004bbc0 	call	4bbc <__sinit>
    96a4:	003fd706 	br	9604 <_fclose_r+0x2c>
    96a8:	04bfffc4 	movi	r18,-1
    96ac:	003fe806 	br	9650 <_fclose_r+0x78>
    96b0:	81400417 	ldw	r5,16(r16)
    96b4:	8809883a 	mov	r4,r17
    96b8:	0004d300 	call	4d30 <_free_r>
    96bc:	003fe706 	br	965c <_fclose_r+0x84>
    96c0:	0005883a 	mov	r2,zero
    96c4:	f800283a 	ret

000096c8 <fclose>:
    96c8:	008000f4 	movhi	r2,3
    96cc:	109aa104 	addi	r2,r2,27268
    96d0:	200b883a 	mov	r5,r4
    96d4:	11000017 	ldw	r4,0(r2)
    96d8:	00095d81 	jmpi	95d8 <_fclose_r>

000096dc <__fputwc>:
    96dc:	defff804 	addi	sp,sp,-32
    96e0:	dcc00415 	stw	r19,16(sp)
    96e4:	dc800315 	stw	r18,12(sp)
    96e8:	dc000115 	stw	r16,4(sp)
    96ec:	dfc00715 	stw	ra,28(sp)
    96f0:	dd400615 	stw	r21,24(sp)
    96f4:	dd000515 	stw	r20,20(sp)
    96f8:	dc400215 	stw	r17,8(sp)
    96fc:	2027883a 	mov	r19,r4
    9700:	2825883a 	mov	r18,r5
    9704:	3021883a 	mov	r16,r6
    9708:	000570c0 	call	570c <__locale_mb_cur_max>
    970c:	00c00044 	movi	r3,1
    9710:	10c03e26 	beq	r2,r3,980c <__fputwc+0x130>
    9714:	81c01704 	addi	r7,r16,92
    9718:	900d883a 	mov	r6,r18
    971c:	d80b883a 	mov	r5,sp
    9720:	9809883a 	mov	r4,r19
    9724:	0009bac0 	call	9bac <_wcrtomb_r>
    9728:	1029883a 	mov	r20,r2
    972c:	00bfffc4 	movi	r2,-1
    9730:	a0802026 	beq	r20,r2,97b4 <__fputwc+0xd8>
    9734:	d9400003 	ldbu	r5,0(sp)
    9738:	a0001c26 	beq	r20,zero,97ac <__fputwc+0xd0>
    973c:	0023883a 	mov	r17,zero
    9740:	05400284 	movi	r21,10
    9744:	00000906 	br	976c <__fputwc+0x90>
    9748:	80800017 	ldw	r2,0(r16)
    974c:	11400005 	stb	r5,0(r2)
    9750:	80c00017 	ldw	r3,0(r16)
    9754:	18c00044 	addi	r3,r3,1
    9758:	80c00015 	stw	r3,0(r16)
    975c:	8c400044 	addi	r17,r17,1
    9760:	dc45883a 	add	r2,sp,r17
    9764:	8d00112e 	bgeu	r17,r20,97ac <__fputwc+0xd0>
    9768:	11400003 	ldbu	r5,0(r2)
    976c:	80c00217 	ldw	r3,8(r16)
    9770:	18ffffc4 	addi	r3,r3,-1
    9774:	80c00215 	stw	r3,8(r16)
    9778:	183ff30e 	bge	r3,zero,9748 <__fputwc+0x6c>
    977c:	80800617 	ldw	r2,24(r16)
    9780:	18801916 	blt	r3,r2,97e8 <__fputwc+0x10c>
    9784:	80800017 	ldw	r2,0(r16)
    9788:	11400005 	stb	r5,0(r2)
    978c:	80800017 	ldw	r2,0(r16)
    9790:	10c00003 	ldbu	r3,0(r2)
    9794:	10800044 	addi	r2,r2,1
    9798:	1d402326 	beq	r3,r21,9828 <__fputwc+0x14c>
    979c:	80800015 	stw	r2,0(r16)
    97a0:	8c400044 	addi	r17,r17,1
    97a4:	dc45883a 	add	r2,sp,r17
    97a8:	8d3fef36 	bltu	r17,r20,9768 <__fputwc+0x8c>
    97ac:	9005883a 	mov	r2,r18
    97b0:	00000406 	br	97c4 <__fputwc+0xe8>
    97b4:	80c0030b 	ldhu	r3,12(r16)
    97b8:	a005883a 	mov	r2,r20
    97bc:	18c01014 	ori	r3,r3,64
    97c0:	80c0030d 	sth	r3,12(r16)
    97c4:	dfc00717 	ldw	ra,28(sp)
    97c8:	dd400617 	ldw	r21,24(sp)
    97cc:	dd000517 	ldw	r20,20(sp)
    97d0:	dcc00417 	ldw	r19,16(sp)
    97d4:	dc800317 	ldw	r18,12(sp)
    97d8:	dc400217 	ldw	r17,8(sp)
    97dc:	dc000117 	ldw	r16,4(sp)
    97e0:	dec00804 	addi	sp,sp,32
    97e4:	f800283a 	ret
    97e8:	800d883a 	mov	r6,r16
    97ec:	29403fcc 	andi	r5,r5,255
    97f0:	9809883a 	mov	r4,r19
    97f4:	0009a540 	call	9a54 <__swbuf_r>
    97f8:	10bfffe0 	cmpeqi	r2,r2,-1
    97fc:	10803fcc 	andi	r2,r2,255
    9800:	103fd626 	beq	r2,zero,975c <__fputwc+0x80>
    9804:	00bfffc4 	movi	r2,-1
    9808:	003fee06 	br	97c4 <__fputwc+0xe8>
    980c:	90ffffc4 	addi	r3,r18,-1
    9810:	01003f84 	movi	r4,254
    9814:	20ffbf36 	bltu	r4,r3,9714 <__fputwc+0x38>
    9818:	900b883a 	mov	r5,r18
    981c:	dc800005 	stb	r18,0(sp)
    9820:	1029883a 	mov	r20,r2
    9824:	003fc506 	br	973c <__fputwc+0x60>
    9828:	800d883a 	mov	r6,r16
    982c:	a80b883a 	mov	r5,r21
    9830:	9809883a 	mov	r4,r19
    9834:	0009a540 	call	9a54 <__swbuf_r>
    9838:	10bfffe0 	cmpeqi	r2,r2,-1
    983c:	003fef06 	br	97fc <__fputwc+0x120>

00009840 <_fputwc_r>:
    9840:	3080030b 	ldhu	r2,12(r6)
    9844:	10c8000c 	andi	r3,r2,8192
    9848:	1800051e 	bne	r3,zero,9860 <_fputwc_r+0x20>
    984c:	30c01917 	ldw	r3,100(r6)
    9850:	10880014 	ori	r2,r2,8192
    9854:	3080030d 	sth	r2,12(r6)
    9858:	18880014 	ori	r2,r3,8192
    985c:	30801915 	stw	r2,100(r6)
    9860:	00096dc1 	jmpi	96dc <__fputwc>

00009864 <fputwc>:
    9864:	008000f4 	movhi	r2,3
    9868:	defffc04 	addi	sp,sp,-16
    986c:	109aa104 	addi	r2,r2,27268
    9870:	dc000115 	stw	r16,4(sp)
    9874:	14000017 	ldw	r16,0(r2)
    9878:	dc400215 	stw	r17,8(sp)
    987c:	dfc00315 	stw	ra,12(sp)
    9880:	2023883a 	mov	r17,r4
    9884:	80000226 	beq	r16,zero,9890 <fputwc+0x2c>
    9888:	80800e17 	ldw	r2,56(r16)
    988c:	10001026 	beq	r2,zero,98d0 <fputwc+0x6c>
    9890:	2880030b 	ldhu	r2,12(r5)
    9894:	10c8000c 	andi	r3,r2,8192
    9898:	1800051e 	bne	r3,zero,98b0 <fputwc+0x4c>
    989c:	28c01917 	ldw	r3,100(r5)
    98a0:	10880014 	ori	r2,r2,8192
    98a4:	2880030d 	sth	r2,12(r5)
    98a8:	18880014 	ori	r2,r3,8192
    98ac:	28801915 	stw	r2,100(r5)
    98b0:	280d883a 	mov	r6,r5
    98b4:	8009883a 	mov	r4,r16
    98b8:	880b883a 	mov	r5,r17
    98bc:	dfc00317 	ldw	ra,12(sp)
    98c0:	dc400217 	ldw	r17,8(sp)
    98c4:	dc000117 	ldw	r16,4(sp)
    98c8:	dec00404 	addi	sp,sp,16
    98cc:	00096dc1 	jmpi	96dc <__fputwc>
    98d0:	8009883a 	mov	r4,r16
    98d4:	d9400015 	stw	r5,0(sp)
    98d8:	0004bbc0 	call	4bbc <__sinit>
    98dc:	d9400017 	ldw	r5,0(sp)
    98e0:	003feb06 	br	9890 <fputwc+0x2c>

000098e4 <_fstat_r>:
    98e4:	defffd04 	addi	sp,sp,-12
    98e8:	2805883a 	mov	r2,r5
    98ec:	dc000015 	stw	r16,0(sp)
    98f0:	04000134 	movhi	r16,4
    98f4:	dc400115 	stw	r17,4(sp)
    98f8:	8421b504 	addi	r16,r16,-31020
    98fc:	2023883a 	mov	r17,r4
    9900:	300b883a 	mov	r5,r6
    9904:	1009883a 	mov	r4,r2
    9908:	dfc00215 	stw	ra,8(sp)
    990c:	80000015 	stw	zero,0(r16)
    9910:	000d0200 	call	d020 <fstat>
    9914:	00ffffc4 	movi	r3,-1
    9918:	10c00526 	beq	r2,r3,9930 <_fstat_r+0x4c>
    991c:	dfc00217 	ldw	ra,8(sp)
    9920:	dc400117 	ldw	r17,4(sp)
    9924:	dc000017 	ldw	r16,0(sp)
    9928:	dec00304 	addi	sp,sp,12
    992c:	f800283a 	ret
    9930:	80c00017 	ldw	r3,0(r16)
    9934:	183ff926 	beq	r3,zero,991c <_fstat_r+0x38>
    9938:	88c00015 	stw	r3,0(r17)
    993c:	003ff706 	br	991c <_fstat_r+0x38>

00009940 <_isatty_r>:
    9940:	defffd04 	addi	sp,sp,-12
    9944:	dc000015 	stw	r16,0(sp)
    9948:	04000134 	movhi	r16,4
    994c:	dc400115 	stw	r17,4(sp)
    9950:	8421b504 	addi	r16,r16,-31020
    9954:	2023883a 	mov	r17,r4
    9958:	2809883a 	mov	r4,r5
    995c:	dfc00215 	stw	ra,8(sp)
    9960:	80000015 	stw	zero,0(r16)
    9964:	000d10c0 	call	d10c <isatty>
    9968:	00ffffc4 	movi	r3,-1
    996c:	10c00526 	beq	r2,r3,9984 <_isatty_r+0x44>
    9970:	dfc00217 	ldw	ra,8(sp)
    9974:	dc400117 	ldw	r17,4(sp)
    9978:	dc000017 	ldw	r16,0(sp)
    997c:	dec00304 	addi	sp,sp,12
    9980:	f800283a 	ret
    9984:	80c00017 	ldw	r3,0(r16)
    9988:	183ff926 	beq	r3,zero,9970 <_isatty_r+0x30>
    998c:	88c00015 	stw	r3,0(r17)
    9990:	003ff706 	br	9970 <_isatty_r+0x30>

00009994 <_lseek_r>:
    9994:	defffd04 	addi	sp,sp,-12
    9998:	2805883a 	mov	r2,r5
    999c:	dc000015 	stw	r16,0(sp)
    99a0:	04000134 	movhi	r16,4
    99a4:	dc400115 	stw	r17,4(sp)
    99a8:	300b883a 	mov	r5,r6
    99ac:	8421b504 	addi	r16,r16,-31020
    99b0:	2023883a 	mov	r17,r4
    99b4:	380d883a 	mov	r6,r7
    99b8:	1009883a 	mov	r4,r2
    99bc:	dfc00215 	stw	ra,8(sp)
    99c0:	80000015 	stw	zero,0(r16)
    99c4:	000d2d80 	call	d2d8 <lseek>
    99c8:	00ffffc4 	movi	r3,-1
    99cc:	10c00526 	beq	r2,r3,99e4 <_lseek_r+0x50>
    99d0:	dfc00217 	ldw	ra,8(sp)
    99d4:	dc400117 	ldw	r17,4(sp)
    99d8:	dc000017 	ldw	r16,0(sp)
    99dc:	dec00304 	addi	sp,sp,12
    99e0:	f800283a 	ret
    99e4:	80c00017 	ldw	r3,0(r16)
    99e8:	183ff926 	beq	r3,zero,99d0 <_lseek_r+0x3c>
    99ec:	88c00015 	stw	r3,0(r17)
    99f0:	003ff706 	br	99d0 <_lseek_r+0x3c>

000099f4 <_read_r>:
    99f4:	defffd04 	addi	sp,sp,-12
    99f8:	2805883a 	mov	r2,r5
    99fc:	dc000015 	stw	r16,0(sp)
    9a00:	04000134 	movhi	r16,4
    9a04:	dc400115 	stw	r17,4(sp)
    9a08:	300b883a 	mov	r5,r6
    9a0c:	8421b504 	addi	r16,r16,-31020
    9a10:	2023883a 	mov	r17,r4
    9a14:	380d883a 	mov	r6,r7
    9a18:	1009883a 	mov	r4,r2
    9a1c:	dfc00215 	stw	ra,8(sp)
    9a20:	80000015 	stw	zero,0(r16)
    9a24:	000d4a40 	call	d4a4 <read>
    9a28:	00ffffc4 	movi	r3,-1
    9a2c:	10c00526 	beq	r2,r3,9a44 <_read_r+0x50>
    9a30:	dfc00217 	ldw	ra,8(sp)
    9a34:	dc400117 	ldw	r17,4(sp)
    9a38:	dc000017 	ldw	r16,0(sp)
    9a3c:	dec00304 	addi	sp,sp,12
    9a40:	f800283a 	ret
    9a44:	80c00017 	ldw	r3,0(r16)
    9a48:	183ff926 	beq	r3,zero,9a30 <_read_r+0x3c>
    9a4c:	88c00015 	stw	r3,0(r17)
    9a50:	003ff706 	br	9a30 <_read_r+0x3c>

00009a54 <__swbuf_r>:
    9a54:	defffb04 	addi	sp,sp,-20
    9a58:	dcc00315 	stw	r19,12(sp)
    9a5c:	dc800215 	stw	r18,8(sp)
    9a60:	dc000015 	stw	r16,0(sp)
    9a64:	dfc00415 	stw	ra,16(sp)
    9a68:	dc400115 	stw	r17,4(sp)
    9a6c:	2025883a 	mov	r18,r4
    9a70:	2827883a 	mov	r19,r5
    9a74:	3021883a 	mov	r16,r6
    9a78:	20000226 	beq	r4,zero,9a84 <__swbuf_r+0x30>
    9a7c:	20800e17 	ldw	r2,56(r4)
    9a80:	10004226 	beq	r2,zero,9b8c <__swbuf_r+0x138>
    9a84:	80800617 	ldw	r2,24(r16)
    9a88:	8100030b 	ldhu	r4,12(r16)
    9a8c:	80800215 	stw	r2,8(r16)
    9a90:	2080020c 	andi	r2,r4,8
    9a94:	10003626 	beq	r2,zero,9b70 <__swbuf_r+0x11c>
    9a98:	80c00417 	ldw	r3,16(r16)
    9a9c:	18003426 	beq	r3,zero,9b70 <__swbuf_r+0x11c>
    9aa0:	2088000c 	andi	r2,r4,8192
    9aa4:	9c403fcc 	andi	r17,r19,255
    9aa8:	10001a26 	beq	r2,zero,9b14 <__swbuf_r+0xc0>
    9aac:	80800017 	ldw	r2,0(r16)
    9ab0:	81000517 	ldw	r4,20(r16)
    9ab4:	10c7c83a 	sub	r3,r2,r3
    9ab8:	1900200e 	bge	r3,r4,9b3c <__swbuf_r+0xe8>
    9abc:	18c00044 	addi	r3,r3,1
    9ac0:	81000217 	ldw	r4,8(r16)
    9ac4:	11400044 	addi	r5,r2,1
    9ac8:	81400015 	stw	r5,0(r16)
    9acc:	213fffc4 	addi	r4,r4,-1
    9ad0:	81000215 	stw	r4,8(r16)
    9ad4:	14c00005 	stb	r19,0(r2)
    9ad8:	80800517 	ldw	r2,20(r16)
    9adc:	10c01e26 	beq	r2,r3,9b58 <__swbuf_r+0x104>
    9ae0:	8080030b 	ldhu	r2,12(r16)
    9ae4:	1080004c 	andi	r2,r2,1
    9ae8:	10000226 	beq	r2,zero,9af4 <__swbuf_r+0xa0>
    9aec:	00800284 	movi	r2,10
    9af0:	88801926 	beq	r17,r2,9b58 <__swbuf_r+0x104>
    9af4:	8805883a 	mov	r2,r17
    9af8:	dfc00417 	ldw	ra,16(sp)
    9afc:	dcc00317 	ldw	r19,12(sp)
    9b00:	dc800217 	ldw	r18,8(sp)
    9b04:	dc400117 	ldw	r17,4(sp)
    9b08:	dc000017 	ldw	r16,0(sp)
    9b0c:	dec00504 	addi	sp,sp,20
    9b10:	f800283a 	ret
    9b14:	81401917 	ldw	r5,100(r16)
    9b18:	00b7ffc4 	movi	r2,-8193
    9b1c:	21080014 	ori	r4,r4,8192
    9b20:	2884703a 	and	r2,r5,r2
    9b24:	80801915 	stw	r2,100(r16)
    9b28:	80800017 	ldw	r2,0(r16)
    9b2c:	8100030d 	sth	r4,12(r16)
    9b30:	81000517 	ldw	r4,20(r16)
    9b34:	10c7c83a 	sub	r3,r2,r3
    9b38:	193fe016 	blt	r3,r4,9abc <__swbuf_r+0x68>
    9b3c:	800b883a 	mov	r5,r16
    9b40:	9009883a 	mov	r4,r18
    9b44:	00047e00 	call	47e0 <_fflush_r>
    9b48:	1000071e 	bne	r2,zero,9b68 <__swbuf_r+0x114>
    9b4c:	80800017 	ldw	r2,0(r16)
    9b50:	00c00044 	movi	r3,1
    9b54:	003fda06 	br	9ac0 <__swbuf_r+0x6c>
    9b58:	800b883a 	mov	r5,r16
    9b5c:	9009883a 	mov	r4,r18
    9b60:	00047e00 	call	47e0 <_fflush_r>
    9b64:	103fe326 	beq	r2,zero,9af4 <__swbuf_r+0xa0>
    9b68:	00bfffc4 	movi	r2,-1
    9b6c:	003fe206 	br	9af8 <__swbuf_r+0xa4>
    9b70:	800b883a 	mov	r5,r16
    9b74:	9009883a 	mov	r4,r18
    9b78:	0002be80 	call	2be8 <__swsetup_r>
    9b7c:	103ffa1e 	bne	r2,zero,9b68 <__swbuf_r+0x114>
    9b80:	8100030b 	ldhu	r4,12(r16)
    9b84:	80c00417 	ldw	r3,16(r16)
    9b88:	003fc506 	br	9aa0 <__swbuf_r+0x4c>
    9b8c:	0004bbc0 	call	4bbc <__sinit>
    9b90:	003fbc06 	br	9a84 <__swbuf_r+0x30>

00009b94 <__swbuf>:
    9b94:	008000f4 	movhi	r2,3
    9b98:	109aa104 	addi	r2,r2,27268
    9b9c:	280d883a 	mov	r6,r5
    9ba0:	200b883a 	mov	r5,r4
    9ba4:	11000017 	ldw	r4,0(r2)
    9ba8:	0009a541 	jmpi	9a54 <__swbuf_r>

00009bac <_wcrtomb_r>:
    9bac:	defff604 	addi	sp,sp,-40
    9bb0:	008000f4 	movhi	r2,3
    9bb4:	dc800815 	stw	r18,32(sp)
    9bb8:	dc400715 	stw	r17,28(sp)
    9bbc:	dc000615 	stw	r16,24(sp)
    9bc0:	109aa504 	addi	r2,r2,27284
    9bc4:	dfc00915 	stw	ra,36(sp)
    9bc8:	2021883a 	mov	r16,r4
    9bcc:	3823883a 	mov	r17,r7
    9bd0:	14800017 	ldw	r18,0(r2)
    9bd4:	28001426 	beq	r5,zero,9c28 <_wcrtomb_r+0x7c>
    9bd8:	d9400415 	stw	r5,16(sp)
    9bdc:	d9800515 	stw	r6,20(sp)
    9be0:	00057000 	call	5700 <__locale_charset>
    9be4:	d9800517 	ldw	r6,20(sp)
    9be8:	d9400417 	ldw	r5,16(sp)
    9bec:	100f883a 	mov	r7,r2
    9bf0:	dc400015 	stw	r17,0(sp)
    9bf4:	8009883a 	mov	r4,r16
    9bf8:	903ee83a 	callr	r18
    9bfc:	00ffffc4 	movi	r3,-1
    9c00:	10c0031e 	bne	r2,r3,9c10 <_wcrtomb_r+0x64>
    9c04:	88000015 	stw	zero,0(r17)
    9c08:	00c02284 	movi	r3,138
    9c0c:	80c00015 	stw	r3,0(r16)
    9c10:	dfc00917 	ldw	ra,36(sp)
    9c14:	dc800817 	ldw	r18,32(sp)
    9c18:	dc400717 	ldw	r17,28(sp)
    9c1c:	dc000617 	ldw	r16,24(sp)
    9c20:	dec00a04 	addi	sp,sp,40
    9c24:	f800283a 	ret
    9c28:	00057000 	call	5700 <__locale_charset>
    9c2c:	100f883a 	mov	r7,r2
    9c30:	dc400015 	stw	r17,0(sp)
    9c34:	000d883a 	mov	r6,zero
    9c38:	d9400104 	addi	r5,sp,4
    9c3c:	8009883a 	mov	r4,r16
    9c40:	903ee83a 	callr	r18
    9c44:	003fed06 	br	9bfc <_wcrtomb_r+0x50>

00009c48 <wcrtomb>:
    9c48:	defff604 	addi	sp,sp,-40
    9c4c:	008000f4 	movhi	r2,3
    9c50:	dc800615 	stw	r18,24(sp)
    9c54:	dc400515 	stw	r17,20(sp)
    9c58:	109aa104 	addi	r2,r2,27268
    9c5c:	dfc00915 	stw	ra,36(sp)
    9c60:	dd000815 	stw	r20,32(sp)
    9c64:	dcc00715 	stw	r19,28(sp)
    9c68:	dc000415 	stw	r16,16(sp)
    9c6c:	3025883a 	mov	r18,r6
    9c70:	14400017 	ldw	r17,0(r2)
    9c74:	20001926 	beq	r4,zero,9cdc <wcrtomb+0x94>
    9c78:	008000f4 	movhi	r2,3
    9c7c:	109aa504 	addi	r2,r2,27284
    9c80:	15000017 	ldw	r20,0(r2)
    9c84:	2021883a 	mov	r16,r4
    9c88:	2827883a 	mov	r19,r5
    9c8c:	00057000 	call	5700 <__locale_charset>
    9c90:	100f883a 	mov	r7,r2
    9c94:	dc800015 	stw	r18,0(sp)
    9c98:	980d883a 	mov	r6,r19
    9c9c:	800b883a 	mov	r5,r16
    9ca0:	8809883a 	mov	r4,r17
    9ca4:	a03ee83a 	callr	r20
    9ca8:	00ffffc4 	movi	r3,-1
    9cac:	10c0031e 	bne	r2,r3,9cbc <wcrtomb+0x74>
    9cb0:	90000015 	stw	zero,0(r18)
    9cb4:	00c02284 	movi	r3,138
    9cb8:	88c00015 	stw	r3,0(r17)
    9cbc:	dfc00917 	ldw	ra,36(sp)
    9cc0:	dd000817 	ldw	r20,32(sp)
    9cc4:	dcc00717 	ldw	r19,28(sp)
    9cc8:	dc800617 	ldw	r18,24(sp)
    9ccc:	dc400517 	ldw	r17,20(sp)
    9cd0:	dc000417 	ldw	r16,16(sp)
    9cd4:	dec00a04 	addi	sp,sp,40
    9cd8:	f800283a 	ret
    9cdc:	008000f4 	movhi	r2,3
    9ce0:	109aa504 	addi	r2,r2,27284
    9ce4:	14000017 	ldw	r16,0(r2)
    9ce8:	00057000 	call	5700 <__locale_charset>
    9cec:	100f883a 	mov	r7,r2
    9cf0:	dc800015 	stw	r18,0(sp)
    9cf4:	000d883a 	mov	r6,zero
    9cf8:	d9400104 	addi	r5,sp,4
    9cfc:	8809883a 	mov	r4,r17
    9d00:	803ee83a 	callr	r16
    9d04:	003fe806 	br	9ca8 <wcrtomb+0x60>

00009d08 <__ascii_wctomb>:
    9d08:	28000526 	beq	r5,zero,9d20 <__ascii_wctomb+0x18>
    9d0c:	00803fc4 	movi	r2,255
    9d10:	11800536 	bltu	r2,r6,9d28 <__ascii_wctomb+0x20>
    9d14:	29800005 	stb	r6,0(r5)
    9d18:	00800044 	movi	r2,1
    9d1c:	f800283a 	ret
    9d20:	0005883a 	mov	r2,zero
    9d24:	f800283a 	ret
    9d28:	00802284 	movi	r2,138
    9d2c:	20800015 	stw	r2,0(r4)
    9d30:	00bfffc4 	movi	r2,-1
    9d34:	f800283a 	ret

00009d38 <_wctomb_r>:
    9d38:	008000f4 	movhi	r2,3
    9d3c:	defff904 	addi	sp,sp,-28
    9d40:	109aa504 	addi	r2,r2,27284
    9d44:	dfc00615 	stw	ra,24(sp)
    9d48:	dc400515 	stw	r17,20(sp)
    9d4c:	dc000415 	stw	r16,16(sp)
    9d50:	3823883a 	mov	r17,r7
    9d54:	14000017 	ldw	r16,0(r2)
    9d58:	d9000115 	stw	r4,4(sp)
    9d5c:	d9400215 	stw	r5,8(sp)
    9d60:	d9800315 	stw	r6,12(sp)
    9d64:	00057000 	call	5700 <__locale_charset>
    9d68:	d9800317 	ldw	r6,12(sp)
    9d6c:	d9400217 	ldw	r5,8(sp)
    9d70:	d9000117 	ldw	r4,4(sp)
    9d74:	100f883a 	mov	r7,r2
    9d78:	dc400015 	stw	r17,0(sp)
    9d7c:	803ee83a 	callr	r16
    9d80:	dfc00617 	ldw	ra,24(sp)
    9d84:	dc400517 	ldw	r17,20(sp)
    9d88:	dc000417 	ldw	r16,16(sp)
    9d8c:	dec00704 	addi	sp,sp,28
    9d90:	f800283a 	ret

00009d94 <__udivdi3>:
    9d94:	defff504 	addi	sp,sp,-44
    9d98:	dcc00415 	stw	r19,16(sp)
    9d9c:	dc000115 	stw	r16,4(sp)
    9da0:	dfc00a15 	stw	ra,40(sp)
    9da4:	df000915 	stw	fp,36(sp)
    9da8:	ddc00815 	stw	r23,32(sp)
    9dac:	dd800715 	stw	r22,28(sp)
    9db0:	dd400615 	stw	r21,24(sp)
    9db4:	dd000515 	stw	r20,20(sp)
    9db8:	dc800315 	stw	r18,12(sp)
    9dbc:	dc400215 	stw	r17,8(sp)
    9dc0:	2027883a 	mov	r19,r4
    9dc4:	2821883a 	mov	r16,r5
    9dc8:	3800411e 	bne	r7,zero,9ed0 <__udivdi3+0x13c>
    9dcc:	3023883a 	mov	r17,r6
    9dd0:	2025883a 	mov	r18,r4
    9dd4:	2980522e 	bgeu	r5,r6,9f20 <__udivdi3+0x18c>
    9dd8:	00bfffd4 	movui	r2,65535
    9ddc:	282d883a 	mov	r22,r5
    9de0:	1180a836 	bltu	r2,r6,a084 <__udivdi3+0x2f0>
    9de4:	00803fc4 	movi	r2,255
    9de8:	1185803a 	cmpltu	r2,r2,r6
    9dec:	100490fa 	slli	r2,r2,3
    9df0:	3086d83a 	srl	r3,r6,r2
    9df4:	010000f4 	movhi	r4,3
    9df8:	21135b04 	addi	r4,r4,19820
    9dfc:	20c7883a 	add	r3,r4,r3
    9e00:	18c00003 	ldbu	r3,0(r3)
    9e04:	1885883a 	add	r2,r3,r2
    9e08:	00c00804 	movi	r3,32
    9e0c:	1887c83a 	sub	r3,r3,r2
    9e10:	18000526 	beq	r3,zero,9e28 <__udivdi3+0x94>
    9e14:	80e0983a 	sll	r16,r16,r3
    9e18:	9884d83a 	srl	r2,r19,r2
    9e1c:	30e2983a 	sll	r17,r6,r3
    9e20:	98e4983a 	sll	r18,r19,r3
    9e24:	142cb03a 	or	r22,r2,r16
    9e28:	882ad43a 	srli	r21,r17,16
    9e2c:	b009883a 	mov	r4,r22
    9e30:	8d3fffcc 	andi	r20,r17,65535
    9e34:	a80b883a 	mov	r5,r21
    9e38:	00006e80 	call	6e8 <__umodsi3>
    9e3c:	b009883a 	mov	r4,r22
    9e40:	a80b883a 	mov	r5,r21
    9e44:	1027883a 	mov	r19,r2
    9e48:	00006840 	call	684 <__udivsi3>
    9e4c:	102d883a 	mov	r22,r2
    9e50:	9826943a 	slli	r19,r19,16
    9e54:	9004d43a 	srli	r2,r18,16
    9e58:	a5a1383a 	mul	r16,r20,r22
    9e5c:	14c4b03a 	or	r2,r2,r19
    9e60:	1400052e 	bgeu	r2,r16,9e78 <__udivdi3+0xe4>
    9e64:	1445883a 	add	r2,r2,r17
    9e68:	b0ffffc4 	addi	r3,r22,-1
    9e6c:	14400136 	bltu	r2,r17,9e74 <__udivdi3+0xe0>
    9e70:	14012336 	bltu	r2,r16,a300 <__udivdi3+0x56c>
    9e74:	182d883a 	mov	r22,r3
    9e78:	1421c83a 	sub	r16,r2,r16
    9e7c:	a80b883a 	mov	r5,r21
    9e80:	8009883a 	mov	r4,r16
    9e84:	00006e80 	call	6e8 <__umodsi3>
    9e88:	1027883a 	mov	r19,r2
    9e8c:	a80b883a 	mov	r5,r21
    9e90:	8009883a 	mov	r4,r16
    9e94:	00006840 	call	684 <__udivsi3>
    9e98:	9826943a 	slli	r19,r19,16
    9e9c:	a0a9383a 	mul	r20,r20,r2
    9ea0:	94bfffcc 	andi	r18,r18,65535
    9ea4:	94e4b03a 	or	r18,r18,r19
    9ea8:	9500052e 	bgeu	r18,r20,9ec0 <__udivdi3+0x12c>
    9eac:	8ca5883a 	add	r18,r17,r18
    9eb0:	10ffffc4 	addi	r3,r2,-1
    9eb4:	9440f136 	bltu	r18,r17,a27c <__udivdi3+0x4e8>
    9eb8:	9500f02e 	bgeu	r18,r20,a27c <__udivdi3+0x4e8>
    9ebc:	10bfff84 	addi	r2,r2,-2
    9ec0:	b00c943a 	slli	r6,r22,16
    9ec4:	0007883a 	mov	r3,zero
    9ec8:	3084b03a 	or	r2,r6,r2
    9ecc:	00005906 	br	a034 <__udivdi3+0x2a0>
    9ed0:	29c05636 	bltu	r5,r7,a02c <__udivdi3+0x298>
    9ed4:	00bfffd4 	movui	r2,65535
    9ed8:	11c0622e 	bgeu	r2,r7,a064 <__udivdi3+0x2d0>
    9edc:	00804034 	movhi	r2,256
    9ee0:	10bfffc4 	addi	r2,r2,-1
    9ee4:	11c0ee36 	bltu	r2,r7,a2a0 <__udivdi3+0x50c>
    9ee8:	00800404 	movi	r2,16
    9eec:	3886d83a 	srl	r3,r7,r2
    9ef0:	010000f4 	movhi	r4,3
    9ef4:	21135b04 	addi	r4,r4,19820
    9ef8:	20c7883a 	add	r3,r4,r3
    9efc:	18c00003 	ldbu	r3,0(r3)
    9f00:	05400804 	movi	r21,32
    9f04:	1885883a 	add	r2,r3,r2
    9f08:	a8abc83a 	sub	r21,r21,r2
    9f0c:	a800621e 	bne	r21,zero,a098 <__udivdi3+0x304>
    9f10:	3c00e936 	bltu	r7,r16,a2b8 <__udivdi3+0x524>
    9f14:	9985403a 	cmpgeu	r2,r19,r6
    9f18:	0007883a 	mov	r3,zero
    9f1c:	00004506 	br	a034 <__udivdi3+0x2a0>
    9f20:	3000041e 	bne	r6,zero,9f34 <__udivdi3+0x1a0>
    9f24:	000b883a 	mov	r5,zero
    9f28:	01000044 	movi	r4,1
    9f2c:	00006840 	call	684 <__udivsi3>
    9f30:	1023883a 	mov	r17,r2
    9f34:	00bfffd4 	movui	r2,65535
    9f38:	14404e2e 	bgeu	r2,r17,a074 <__udivdi3+0x2e0>
    9f3c:	00804034 	movhi	r2,256
    9f40:	10bfffc4 	addi	r2,r2,-1
    9f44:	1440d836 	bltu	r2,r17,a2a8 <__udivdi3+0x514>
    9f48:	00800404 	movi	r2,16
    9f4c:	8886d83a 	srl	r3,r17,r2
    9f50:	010000f4 	movhi	r4,3
    9f54:	21135b04 	addi	r4,r4,19820
    9f58:	20c7883a 	add	r3,r4,r3
    9f5c:	18c00003 	ldbu	r3,0(r3)
    9f60:	1885883a 	add	r2,r3,r2
    9f64:	00c00804 	movi	r3,32
    9f68:	1887c83a 	sub	r3,r3,r2
    9f6c:	18008f1e 	bne	r3,zero,a1ac <__udivdi3+0x418>
    9f70:	882ad43a 	srli	r21,r17,16
    9f74:	8461c83a 	sub	r16,r16,r17
    9f78:	8d3fffcc 	andi	r20,r17,65535
    9f7c:	00c00044 	movi	r3,1
    9f80:	8009883a 	mov	r4,r16
    9f84:	a80b883a 	mov	r5,r21
    9f88:	d8c00015 	stw	r3,0(sp)
    9f8c:	00006e80 	call	6e8 <__umodsi3>
    9f90:	8009883a 	mov	r4,r16
    9f94:	a80b883a 	mov	r5,r21
    9f98:	1027883a 	mov	r19,r2
    9f9c:	00006840 	call	684 <__udivsi3>
    9fa0:	9826943a 	slli	r19,r19,16
    9fa4:	9008d43a 	srli	r4,r18,16
    9fa8:	1521383a 	mul	r16,r2,r20
    9fac:	102d883a 	mov	r22,r2
    9fb0:	24c8b03a 	or	r4,r4,r19
    9fb4:	d8c00017 	ldw	r3,0(sp)
    9fb8:	2400052e 	bgeu	r4,r16,9fd0 <__udivdi3+0x23c>
    9fbc:	2449883a 	add	r4,r4,r17
    9fc0:	b0bfffc4 	addi	r2,r22,-1
    9fc4:	24400136 	bltu	r4,r17,9fcc <__udivdi3+0x238>
    9fc8:	2400ca36 	bltu	r4,r16,a2f4 <__udivdi3+0x560>
    9fcc:	102d883a 	mov	r22,r2
    9fd0:	2421c83a 	sub	r16,r4,r16
    9fd4:	a80b883a 	mov	r5,r21
    9fd8:	8009883a 	mov	r4,r16
    9fdc:	d8c00015 	stw	r3,0(sp)
    9fe0:	00006e80 	call	6e8 <__umodsi3>
    9fe4:	1027883a 	mov	r19,r2
    9fe8:	a80b883a 	mov	r5,r21
    9fec:	8009883a 	mov	r4,r16
    9ff0:	00006840 	call	684 <__udivsi3>
    9ff4:	9826943a 	slli	r19,r19,16
    9ff8:	1529383a 	mul	r20,r2,r20
    9ffc:	94bfffcc 	andi	r18,r18,65535
    a000:	94e4b03a 	or	r18,r18,r19
    a004:	d8c00017 	ldw	r3,0(sp)
    a008:	9500052e 	bgeu	r18,r20,a020 <__udivdi3+0x28c>
    a00c:	8ca5883a 	add	r18,r17,r18
    a010:	113fffc4 	addi	r4,r2,-1
    a014:	94409736 	bltu	r18,r17,a274 <__udivdi3+0x4e0>
    a018:	9500962e 	bgeu	r18,r20,a274 <__udivdi3+0x4e0>
    a01c:	10bfff84 	addi	r2,r2,-2
    a020:	b00c943a 	slli	r6,r22,16
    a024:	3084b03a 	or	r2,r6,r2
    a028:	00000206 	br	a034 <__udivdi3+0x2a0>
    a02c:	0007883a 	mov	r3,zero
    a030:	0005883a 	mov	r2,zero
    a034:	dfc00a17 	ldw	ra,40(sp)
    a038:	df000917 	ldw	fp,36(sp)
    a03c:	ddc00817 	ldw	r23,32(sp)
    a040:	dd800717 	ldw	r22,28(sp)
    a044:	dd400617 	ldw	r21,24(sp)
    a048:	dd000517 	ldw	r20,20(sp)
    a04c:	dcc00417 	ldw	r19,16(sp)
    a050:	dc800317 	ldw	r18,12(sp)
    a054:	dc400217 	ldw	r17,8(sp)
    a058:	dc000117 	ldw	r16,4(sp)
    a05c:	dec00b04 	addi	sp,sp,44
    a060:	f800283a 	ret
    a064:	00803fc4 	movi	r2,255
    a068:	11c5803a 	cmpltu	r2,r2,r7
    a06c:	100490fa 	slli	r2,r2,3
    a070:	003f9e06 	br	9eec <__udivdi3+0x158>
    a074:	00803fc4 	movi	r2,255
    a078:	1445803a 	cmpltu	r2,r2,r17
    a07c:	100490fa 	slli	r2,r2,3
    a080:	003fb206 	br	9f4c <__udivdi3+0x1b8>
    a084:	00804034 	movhi	r2,256
    a088:	10bfffc4 	addi	r2,r2,-1
    a08c:	11808836 	bltu	r2,r6,a2b0 <__udivdi3+0x51c>
    a090:	00800404 	movi	r2,16
    a094:	003f5606 	br	9df0 <__udivdi3+0x5c>
    a098:	30aed83a 	srl	r23,r6,r2
    a09c:	3d4e983a 	sll	r7,r7,r21
    a0a0:	80acd83a 	srl	r22,r16,r2
    a0a4:	9884d83a 	srl	r2,r19,r2
    a0a8:	3deeb03a 	or	r23,r7,r23
    a0ac:	b824d43a 	srli	r18,r23,16
    a0b0:	8560983a 	sll	r16,r16,r21
    a0b4:	b009883a 	mov	r4,r22
    a0b8:	900b883a 	mov	r5,r18
    a0bc:	3568983a 	sll	r20,r6,r21
    a0c0:	1420b03a 	or	r16,r2,r16
    a0c4:	00006e80 	call	6e8 <__umodsi3>
    a0c8:	b009883a 	mov	r4,r22
    a0cc:	900b883a 	mov	r5,r18
    a0d0:	1023883a 	mov	r17,r2
    a0d4:	00006840 	call	684 <__udivsi3>
    a0d8:	8808943a 	slli	r4,r17,16
    a0dc:	bf3fffcc 	andi	fp,r23,65535
    a0e0:	8006d43a 	srli	r3,r16,16
    a0e4:	e0a3383a 	mul	r17,fp,r2
    a0e8:	100d883a 	mov	r6,r2
    a0ec:	1906b03a 	or	r3,r3,r4
    a0f0:	1c40042e 	bgeu	r3,r17,a104 <__udivdi3+0x370>
    a0f4:	1dc7883a 	add	r3,r3,r23
    a0f8:	10bfffc4 	addi	r2,r2,-1
    a0fc:	1dc0752e 	bgeu	r3,r23,a2d4 <__udivdi3+0x540>
    a100:	100d883a 	mov	r6,r2
    a104:	1c63c83a 	sub	r17,r3,r17
    a108:	900b883a 	mov	r5,r18
    a10c:	8809883a 	mov	r4,r17
    a110:	d9800015 	stw	r6,0(sp)
    a114:	00006e80 	call	6e8 <__umodsi3>
    a118:	102d883a 	mov	r22,r2
    a11c:	8809883a 	mov	r4,r17
    a120:	900b883a 	mov	r5,r18
    a124:	00006840 	call	684 <__udivsi3>
    a128:	b02c943a 	slli	r22,r22,16
    a12c:	e089383a 	mul	r4,fp,r2
    a130:	843fffcc 	andi	r16,r16,65535
    a134:	85a0b03a 	or	r16,r16,r22
    a138:	d9800017 	ldw	r6,0(sp)
    a13c:	8100042e 	bgeu	r16,r4,a150 <__udivdi3+0x3bc>
    a140:	85e1883a 	add	r16,r16,r23
    a144:	10ffffc4 	addi	r3,r2,-1
    a148:	85c05e2e 	bgeu	r16,r23,a2c4 <__udivdi3+0x530>
    a14c:	1805883a 	mov	r2,r3
    a150:	300c943a 	slli	r6,r6,16
    a154:	a17fffcc 	andi	r5,r20,65535
    a158:	a028d43a 	srli	r20,r20,16
    a15c:	3084b03a 	or	r2,r6,r2
    a160:	10ffffcc 	andi	r3,r2,65535
    a164:	100cd43a 	srli	r6,r2,16
    a168:	194f383a 	mul	r7,r3,r5
    a16c:	1d07383a 	mul	r3,r3,r20
    a170:	314b383a 	mul	r5,r6,r5
    a174:	3810d43a 	srli	r8,r7,16
    a178:	8121c83a 	sub	r16,r16,r4
    a17c:	1947883a 	add	r3,r3,r5
    a180:	40c7883a 	add	r3,r8,r3
    a184:	350d383a 	mul	r6,r6,r20
    a188:	1940022e 	bgeu	r3,r5,a194 <__udivdi3+0x400>
    a18c:	01000074 	movhi	r4,1
    a190:	310d883a 	add	r6,r6,r4
    a194:	1828d43a 	srli	r20,r3,16
    a198:	a18d883a 	add	r6,r20,r6
    a19c:	81803e36 	bltu	r16,r6,a298 <__udivdi3+0x504>
    a1a0:	81803826 	beq	r16,r6,a284 <__udivdi3+0x4f0>
    a1a4:	0007883a 	mov	r3,zero
    a1a8:	003fa206 	br	a034 <__udivdi3+0x2a0>
    a1ac:	88e2983a 	sll	r17,r17,r3
    a1b0:	80a8d83a 	srl	r20,r16,r2
    a1b4:	80e0983a 	sll	r16,r16,r3
    a1b8:	882ad43a 	srli	r21,r17,16
    a1bc:	9884d83a 	srl	r2,r19,r2
    a1c0:	a009883a 	mov	r4,r20
    a1c4:	a80b883a 	mov	r5,r21
    a1c8:	142eb03a 	or	r23,r2,r16
    a1cc:	98e4983a 	sll	r18,r19,r3
    a1d0:	00006e80 	call	6e8 <__umodsi3>
    a1d4:	a009883a 	mov	r4,r20
    a1d8:	a80b883a 	mov	r5,r21
    a1dc:	1021883a 	mov	r16,r2
    a1e0:	00006840 	call	684 <__udivsi3>
    a1e4:	1039883a 	mov	fp,r2
    a1e8:	8d3fffcc 	andi	r20,r17,65535
    a1ec:	8020943a 	slli	r16,r16,16
    a1f0:	b804d43a 	srli	r2,r23,16
    a1f4:	a72d383a 	mul	r22,r20,fp
    a1f8:	1404b03a 	or	r2,r2,r16
    a1fc:	1580062e 	bgeu	r2,r22,a218 <__udivdi3+0x484>
    a200:	1445883a 	add	r2,r2,r17
    a204:	e0ffffc4 	addi	r3,fp,-1
    a208:	14403836 	bltu	r2,r17,a2ec <__udivdi3+0x558>
    a20c:	1580372e 	bgeu	r2,r22,a2ec <__udivdi3+0x558>
    a210:	e73fff84 	addi	fp,fp,-2
    a214:	1445883a 	add	r2,r2,r17
    a218:	15adc83a 	sub	r22,r2,r22
    a21c:	a80b883a 	mov	r5,r21
    a220:	b009883a 	mov	r4,r22
    a224:	00006e80 	call	6e8 <__umodsi3>
    a228:	1027883a 	mov	r19,r2
    a22c:	b009883a 	mov	r4,r22
    a230:	a80b883a 	mov	r5,r21
    a234:	00006840 	call	684 <__udivsi3>
    a238:	9826943a 	slli	r19,r19,16
    a23c:	a0a1383a 	mul	r16,r20,r2
    a240:	b93fffcc 	andi	r4,r23,65535
    a244:	24c8b03a 	or	r4,r4,r19
    a248:	2400062e 	bgeu	r4,r16,a264 <__udivdi3+0x4d0>
    a24c:	2449883a 	add	r4,r4,r17
    a250:	10ffffc4 	addi	r3,r2,-1
    a254:	24402336 	bltu	r4,r17,a2e4 <__udivdi3+0x550>
    a258:	2400222e 	bgeu	r4,r16,a2e4 <__udivdi3+0x550>
    a25c:	10bfff84 	addi	r2,r2,-2
    a260:	2449883a 	add	r4,r4,r17
    a264:	e038943a 	slli	fp,fp,16
    a268:	2421c83a 	sub	r16,r4,r16
    a26c:	e086b03a 	or	r3,fp,r2
    a270:	003f4306 	br	9f80 <__udivdi3+0x1ec>
    a274:	2005883a 	mov	r2,r4
    a278:	003f6906 	br	a020 <__udivdi3+0x28c>
    a27c:	1805883a 	mov	r2,r3
    a280:	003f0f06 	br	9ec0 <__udivdi3+0x12c>
    a284:	1806943a 	slli	r3,r3,16
    a288:	9d66983a 	sll	r19,r19,r21
    a28c:	39ffffcc 	andi	r7,r7,65535
    a290:	19c7883a 	add	r3,r3,r7
    a294:	98ffc32e 	bgeu	r19,r3,a1a4 <__udivdi3+0x410>
    a298:	10bfffc4 	addi	r2,r2,-1
    a29c:	003fc106 	br	a1a4 <__udivdi3+0x410>
    a2a0:	00800604 	movi	r2,24
    a2a4:	003f1106 	br	9eec <__udivdi3+0x158>
    a2a8:	00800604 	movi	r2,24
    a2ac:	003f2706 	br	9f4c <__udivdi3+0x1b8>
    a2b0:	00800604 	movi	r2,24
    a2b4:	003ece06 	br	9df0 <__udivdi3+0x5c>
    a2b8:	0007883a 	mov	r3,zero
    a2bc:	00800044 	movi	r2,1
    a2c0:	003f5c06 	br	a034 <__udivdi3+0x2a0>
    a2c4:	813fa12e 	bgeu	r16,r4,a14c <__udivdi3+0x3b8>
    a2c8:	10bfff84 	addi	r2,r2,-2
    a2cc:	85e1883a 	add	r16,r16,r23
    a2d0:	003f9f06 	br	a150 <__udivdi3+0x3bc>
    a2d4:	1c7f8a2e 	bgeu	r3,r17,a100 <__udivdi3+0x36c>
    a2d8:	31bfff84 	addi	r6,r6,-2
    a2dc:	1dc7883a 	add	r3,r3,r23
    a2e0:	003f8806 	br	a104 <__udivdi3+0x370>
    a2e4:	1805883a 	mov	r2,r3
    a2e8:	003fde06 	br	a264 <__udivdi3+0x4d0>
    a2ec:	1839883a 	mov	fp,r3
    a2f0:	003fc906 	br	a218 <__udivdi3+0x484>
    a2f4:	b5bfff84 	addi	r22,r22,-2
    a2f8:	2449883a 	add	r4,r4,r17
    a2fc:	003f3406 	br	9fd0 <__udivdi3+0x23c>
    a300:	b5bfff84 	addi	r22,r22,-2
    a304:	1445883a 	add	r2,r2,r17
    a308:	003edb06 	br	9e78 <__udivdi3+0xe4>

0000a30c <__umoddi3>:
    a30c:	defff404 	addi	sp,sp,-48
    a310:	df000a15 	stw	fp,40(sp)
    a314:	dc400315 	stw	r17,12(sp)
    a318:	dc000215 	stw	r16,8(sp)
    a31c:	dfc00b15 	stw	ra,44(sp)
    a320:	ddc00915 	stw	r23,36(sp)
    a324:	dd800815 	stw	r22,32(sp)
    a328:	dd400715 	stw	r21,28(sp)
    a32c:	dd000615 	stw	r20,24(sp)
    a330:	dcc00515 	stw	r19,20(sp)
    a334:	dc800415 	stw	r18,16(sp)
    a338:	2021883a 	mov	r16,r4
    a33c:	2823883a 	mov	r17,r5
    a340:	2839883a 	mov	fp,r5
    a344:	38003c1e 	bne	r7,zero,a438 <__umoddi3+0x12c>
    a348:	3027883a 	mov	r19,r6
    a34c:	2029883a 	mov	r20,r4
    a350:	2980512e 	bgeu	r5,r6,a498 <__umoddi3+0x18c>
    a354:	00bfffd4 	movui	r2,65535
    a358:	11809a36 	bltu	r2,r6,a5c4 <__umoddi3+0x2b8>
    a35c:	01003fc4 	movi	r4,255
    a360:	2189803a 	cmpltu	r4,r4,r6
    a364:	200890fa 	slli	r4,r4,3
    a368:	3104d83a 	srl	r2,r6,r4
    a36c:	00c000f4 	movhi	r3,3
    a370:	18d35b04 	addi	r3,r3,19820
    a374:	1885883a 	add	r2,r3,r2
    a378:	10c00003 	ldbu	r3,0(r2)
    a37c:	00800804 	movi	r2,32
    a380:	1909883a 	add	r4,r3,r4
    a384:	1125c83a 	sub	r18,r2,r4
    a388:	90000526 	beq	r18,zero,a3a0 <__umoddi3+0x94>
    a38c:	8ca2983a 	sll	r17,r17,r18
    a390:	8108d83a 	srl	r4,r16,r4
    a394:	34a6983a 	sll	r19,r6,r18
    a398:	84a8983a 	sll	r20,r16,r18
    a39c:	2478b03a 	or	fp,r4,r17
    a3a0:	982ed43a 	srli	r23,r19,16
    a3a4:	e009883a 	mov	r4,fp
    a3a8:	9dbfffcc 	andi	r22,r19,65535
    a3ac:	b80b883a 	mov	r5,r23
    a3b0:	00006e80 	call	6e8 <__umodsi3>
    a3b4:	e009883a 	mov	r4,fp
    a3b8:	b80b883a 	mov	r5,r23
    a3bc:	102b883a 	mov	r21,r2
    a3c0:	00006840 	call	684 <__udivsi3>
    a3c4:	a806943a 	slli	r3,r21,16
    a3c8:	a008d43a 	srli	r4,r20,16
    a3cc:	b085383a 	mul	r2,r22,r2
    a3d0:	20c8b03a 	or	r4,r4,r3
    a3d4:	2080032e 	bgeu	r4,r2,a3e4 <__umoddi3+0xd8>
    a3d8:	24c9883a 	add	r4,r4,r19
    a3dc:	24c00136 	bltu	r4,r19,a3e4 <__umoddi3+0xd8>
    a3e0:	20811036 	bltu	r4,r2,a824 <__umoddi3+0x518>
    a3e4:	20abc83a 	sub	r21,r4,r2
    a3e8:	b80b883a 	mov	r5,r23
    a3ec:	a809883a 	mov	r4,r21
    a3f0:	00006e80 	call	6e8 <__umodsi3>
    a3f4:	1023883a 	mov	r17,r2
    a3f8:	b80b883a 	mov	r5,r23
    a3fc:	a809883a 	mov	r4,r21
    a400:	00006840 	call	684 <__udivsi3>
    a404:	8822943a 	slli	r17,r17,16
    a408:	b085383a 	mul	r2,r22,r2
    a40c:	a0ffffcc 	andi	r3,r20,65535
    a410:	1c46b03a 	or	r3,r3,r17
    a414:	1880042e 	bgeu	r3,r2,a428 <__umoddi3+0x11c>
    a418:	1cc7883a 	add	r3,r3,r19
    a41c:	1cc00236 	bltu	r3,r19,a428 <__umoddi3+0x11c>
    a420:	1880012e 	bgeu	r3,r2,a428 <__umoddi3+0x11c>
    a424:	1cc7883a 	add	r3,r3,r19
    a428:	1885c83a 	sub	r2,r3,r2
    a42c:	1484d83a 	srl	r2,r2,r18
    a430:	0007883a 	mov	r3,zero
    a434:	00004f06 	br	a574 <__umoddi3+0x268>
    a438:	29c04c36 	bltu	r5,r7,a56c <__umoddi3+0x260>
    a43c:	00bfffd4 	movui	r2,65535
    a440:	11c0582e 	bgeu	r2,r7,a5a4 <__umoddi3+0x298>
    a444:	00804034 	movhi	r2,256
    a448:	10bfffc4 	addi	r2,r2,-1
    a44c:	11c0e736 	bltu	r2,r7,a7ec <__umoddi3+0x4e0>
    a450:	01000404 	movi	r4,16
    a454:	3904d83a 	srl	r2,r7,r4
    a458:	00c000f4 	movhi	r3,3
    a45c:	18d35b04 	addi	r3,r3,19820
    a460:	1885883a 	add	r2,r3,r2
    a464:	14c00003 	ldbu	r19,0(r2)
    a468:	00c00804 	movi	r3,32
    a46c:	9927883a 	add	r19,r19,r4
    a470:	1ce9c83a 	sub	r20,r3,r19
    a474:	a000581e 	bne	r20,zero,a5d8 <__umoddi3+0x2cc>
    a478:	3c400136 	bltu	r7,r17,a480 <__umoddi3+0x174>
    a47c:	8180eb36 	bltu	r16,r6,a82c <__umoddi3+0x520>
    a480:	8185c83a 	sub	r2,r16,r6
    a484:	89e3c83a 	sub	r17,r17,r7
    a488:	8089803a 	cmpltu	r4,r16,r2
    a48c:	8939c83a 	sub	fp,r17,r4
    a490:	e007883a 	mov	r3,fp
    a494:	00003706 	br	a574 <__umoddi3+0x268>
    a498:	3000041e 	bne	r6,zero,a4ac <__umoddi3+0x1a0>
    a49c:	000b883a 	mov	r5,zero
    a4a0:	01000044 	movi	r4,1
    a4a4:	00006840 	call	684 <__udivsi3>
    a4a8:	1027883a 	mov	r19,r2
    a4ac:	00bfffd4 	movui	r2,65535
    a4b0:	14c0402e 	bgeu	r2,r19,a5b4 <__umoddi3+0x2a8>
    a4b4:	00804034 	movhi	r2,256
    a4b8:	10bfffc4 	addi	r2,r2,-1
    a4bc:	14c0cd36 	bltu	r2,r19,a7f4 <__umoddi3+0x4e8>
    a4c0:	00800404 	movi	r2,16
    a4c4:	9886d83a 	srl	r3,r19,r2
    a4c8:	010000f4 	movhi	r4,3
    a4cc:	21135b04 	addi	r4,r4,19820
    a4d0:	20c7883a 	add	r3,r4,r3
    a4d4:	18c00003 	ldbu	r3,0(r3)
    a4d8:	1887883a 	add	r3,r3,r2
    a4dc:	00800804 	movi	r2,32
    a4e0:	10e5c83a 	sub	r18,r2,r3
    a4e4:	9000901e 	bne	r18,zero,a728 <__umoddi3+0x41c>
    a4e8:	982cd43a 	srli	r22,r19,16
    a4ec:	8ce3c83a 	sub	r17,r17,r19
    a4f0:	9d7fffcc 	andi	r21,r19,65535
    a4f4:	b00b883a 	mov	r5,r22
    a4f8:	8809883a 	mov	r4,r17
    a4fc:	00006e80 	call	6e8 <__umodsi3>
    a500:	8809883a 	mov	r4,r17
    a504:	b00b883a 	mov	r5,r22
    a508:	1021883a 	mov	r16,r2
    a50c:	00006840 	call	684 <__udivsi3>
    a510:	8006943a 	slli	r3,r16,16
    a514:	a008d43a 	srli	r4,r20,16
    a518:	1545383a 	mul	r2,r2,r21
    a51c:	20c8b03a 	or	r4,r4,r3
    a520:	2080042e 	bgeu	r4,r2,a534 <__umoddi3+0x228>
    a524:	24c9883a 	add	r4,r4,r19
    a528:	24c00236 	bltu	r4,r19,a534 <__umoddi3+0x228>
    a52c:	2080012e 	bgeu	r4,r2,a534 <__umoddi3+0x228>
    a530:	24c9883a 	add	r4,r4,r19
    a534:	20a1c83a 	sub	r16,r4,r2
    a538:	b00b883a 	mov	r5,r22
    a53c:	8009883a 	mov	r4,r16
    a540:	00006e80 	call	6e8 <__umodsi3>
    a544:	1023883a 	mov	r17,r2
    a548:	b00b883a 	mov	r5,r22
    a54c:	8009883a 	mov	r4,r16
    a550:	00006840 	call	684 <__udivsi3>
    a554:	8822943a 	slli	r17,r17,16
    a558:	1545383a 	mul	r2,r2,r21
    a55c:	a53fffcc 	andi	r20,r20,65535
    a560:	a446b03a 	or	r3,r20,r17
    a564:	18bfb02e 	bgeu	r3,r2,a428 <__umoddi3+0x11c>
    a568:	003fab06 	br	a418 <__umoddi3+0x10c>
    a56c:	2005883a 	mov	r2,r4
    a570:	2807883a 	mov	r3,r5
    a574:	dfc00b17 	ldw	ra,44(sp)
    a578:	df000a17 	ldw	fp,40(sp)
    a57c:	ddc00917 	ldw	r23,36(sp)
    a580:	dd800817 	ldw	r22,32(sp)
    a584:	dd400717 	ldw	r21,28(sp)
    a588:	dd000617 	ldw	r20,24(sp)
    a58c:	dcc00517 	ldw	r19,20(sp)
    a590:	dc800417 	ldw	r18,16(sp)
    a594:	dc400317 	ldw	r17,12(sp)
    a598:	dc000217 	ldw	r16,8(sp)
    a59c:	dec00c04 	addi	sp,sp,48
    a5a0:	f800283a 	ret
    a5a4:	04c03fc4 	movi	r19,255
    a5a8:	99c9803a 	cmpltu	r4,r19,r7
    a5ac:	200890fa 	slli	r4,r4,3
    a5b0:	003fa806 	br	a454 <__umoddi3+0x148>
    a5b4:	00803fc4 	movi	r2,255
    a5b8:	14c5803a 	cmpltu	r2,r2,r19
    a5bc:	100490fa 	slli	r2,r2,3
    a5c0:	003fc006 	br	a4c4 <__umoddi3+0x1b8>
    a5c4:	00804034 	movhi	r2,256
    a5c8:	10bfffc4 	addi	r2,r2,-1
    a5cc:	11808b36 	bltu	r2,r6,a7fc <__umoddi3+0x4f0>
    a5d0:	01000404 	movi	r4,16
    a5d4:	003f6406 	br	a368 <__umoddi3+0x5c>
    a5d8:	34c4d83a 	srl	r2,r6,r19
    a5dc:	3d0e983a 	sll	r7,r7,r20
    a5e0:	8cf8d83a 	srl	fp,r17,r19
    a5e4:	8d10983a 	sll	r8,r17,r20
    a5e8:	38aab03a 	or	r21,r7,r2
    a5ec:	a82cd43a 	srli	r22,r21,16
    a5f0:	84e2d83a 	srl	r17,r16,r19
    a5f4:	e009883a 	mov	r4,fp
    a5f8:	b00b883a 	mov	r5,r22
    a5fc:	8a22b03a 	or	r17,r17,r8
    a600:	3524983a 	sll	r18,r6,r20
    a604:	00006e80 	call	6e8 <__umodsi3>
    a608:	e009883a 	mov	r4,fp
    a60c:	b00b883a 	mov	r5,r22
    a610:	102f883a 	mov	r23,r2
    a614:	00006840 	call	684 <__udivsi3>
    a618:	100d883a 	mov	r6,r2
    a61c:	b808943a 	slli	r4,r23,16
    a620:	aa3fffcc 	andi	r8,r21,65535
    a624:	8804d43a 	srli	r2,r17,16
    a628:	41af383a 	mul	r23,r8,r6
    a62c:	8520983a 	sll	r16,r16,r20
    a630:	1104b03a 	or	r2,r2,r4
    a634:	15c0042e 	bgeu	r2,r23,a648 <__umoddi3+0x33c>
    a638:	1545883a 	add	r2,r2,r21
    a63c:	30ffffc4 	addi	r3,r6,-1
    a640:	1540742e 	bgeu	r2,r21,a814 <__umoddi3+0x508>
    a644:	180d883a 	mov	r6,r3
    a648:	15efc83a 	sub	r23,r2,r23
    a64c:	b00b883a 	mov	r5,r22
    a650:	b809883a 	mov	r4,r23
    a654:	d9800115 	stw	r6,4(sp)
    a658:	da000015 	stw	r8,0(sp)
    a65c:	00006e80 	call	6e8 <__umodsi3>
    a660:	b00b883a 	mov	r5,r22
    a664:	b809883a 	mov	r4,r23
    a668:	1039883a 	mov	fp,r2
    a66c:	00006840 	call	684 <__udivsi3>
    a670:	da000017 	ldw	r8,0(sp)
    a674:	e038943a 	slli	fp,fp,16
    a678:	100b883a 	mov	r5,r2
    a67c:	4089383a 	mul	r4,r8,r2
    a680:	8a3fffcc 	andi	r8,r17,65535
    a684:	4710b03a 	or	r8,r8,fp
    a688:	d9800117 	ldw	r6,4(sp)
    a68c:	4100042e 	bgeu	r8,r4,a6a0 <__umoddi3+0x394>
    a690:	4551883a 	add	r8,r8,r21
    a694:	10bfffc4 	addi	r2,r2,-1
    a698:	45405a2e 	bgeu	r8,r21,a804 <__umoddi3+0x4f8>
    a69c:	100b883a 	mov	r5,r2
    a6a0:	300c943a 	slli	r6,r6,16
    a6a4:	91ffffcc 	andi	r7,r18,65535
    a6a8:	9004d43a 	srli	r2,r18,16
    a6ac:	314cb03a 	or	r6,r6,r5
    a6b0:	317fffcc 	andi	r5,r6,65535
    a6b4:	300cd43a 	srli	r6,r6,16
    a6b8:	29d3383a 	mul	r9,r5,r7
    a6bc:	288b383a 	mul	r5,r5,r2
    a6c0:	31cf383a 	mul	r7,r6,r7
    a6c4:	4806d43a 	srli	r3,r9,16
    a6c8:	4111c83a 	sub	r8,r8,r4
    a6cc:	29cb883a 	add	r5,r5,r7
    a6d0:	194b883a 	add	r5,r3,r5
    a6d4:	3085383a 	mul	r2,r6,r2
    a6d8:	29c0022e 	bgeu	r5,r7,a6e4 <__umoddi3+0x3d8>
    a6dc:	00c00074 	movhi	r3,1
    a6e0:	10c5883a 	add	r2,r2,r3
    a6e4:	2808d43a 	srli	r4,r5,16
    a6e8:	280a943a 	slli	r5,r5,16
    a6ec:	4a7fffcc 	andi	r9,r9,65535
    a6f0:	2085883a 	add	r2,r4,r2
    a6f4:	2a4b883a 	add	r5,r5,r9
    a6f8:	40803636 	bltu	r8,r2,a7d4 <__umoddi3+0x4c8>
    a6fc:	40804d26 	beq	r8,r2,a834 <__umoddi3+0x528>
    a700:	4089c83a 	sub	r4,r8,r2
    a704:	280f883a 	mov	r7,r5
    a708:	81cfc83a 	sub	r7,r16,r7
    a70c:	81c7803a 	cmpltu	r3,r16,r7
    a710:	20c7c83a 	sub	r3,r4,r3
    a714:	1cc4983a 	sll	r2,r3,r19
    a718:	3d0ed83a 	srl	r7,r7,r20
    a71c:	1d06d83a 	srl	r3,r3,r20
    a720:	11c4b03a 	or	r2,r2,r7
    a724:	003f9306 	br	a574 <__umoddi3+0x268>
    a728:	9ca6983a 	sll	r19,r19,r18
    a72c:	88e8d83a 	srl	r20,r17,r3
    a730:	80c4d83a 	srl	r2,r16,r3
    a734:	982cd43a 	srli	r22,r19,16
    a738:	8ca2983a 	sll	r17,r17,r18
    a73c:	a009883a 	mov	r4,r20
    a740:	b00b883a 	mov	r5,r22
    a744:	1478b03a 	or	fp,r2,r17
    a748:	00006e80 	call	6e8 <__umodsi3>
    a74c:	a009883a 	mov	r4,r20
    a750:	b00b883a 	mov	r5,r22
    a754:	1023883a 	mov	r17,r2
    a758:	00006840 	call	684 <__udivsi3>
    a75c:	9d7fffcc 	andi	r21,r19,65535
    a760:	880a943a 	slli	r5,r17,16
    a764:	e008d43a 	srli	r4,fp,16
    a768:	a885383a 	mul	r2,r21,r2
    a76c:	84a8983a 	sll	r20,r16,r18
    a770:	2148b03a 	or	r4,r4,r5
    a774:	2080042e 	bgeu	r4,r2,a788 <__umoddi3+0x47c>
    a778:	24c9883a 	add	r4,r4,r19
    a77c:	24c00236 	bltu	r4,r19,a788 <__umoddi3+0x47c>
    a780:	2080012e 	bgeu	r4,r2,a788 <__umoddi3+0x47c>
    a784:	24c9883a 	add	r4,r4,r19
    a788:	20a3c83a 	sub	r17,r4,r2
    a78c:	b00b883a 	mov	r5,r22
    a790:	8809883a 	mov	r4,r17
    a794:	00006e80 	call	6e8 <__umodsi3>
    a798:	102f883a 	mov	r23,r2
    a79c:	8809883a 	mov	r4,r17
    a7a0:	b00b883a 	mov	r5,r22
    a7a4:	00006840 	call	684 <__udivsi3>
    a7a8:	b82e943a 	slli	r23,r23,16
    a7ac:	a885383a 	mul	r2,r21,r2
    a7b0:	e13fffcc 	andi	r4,fp,65535
    a7b4:	25c8b03a 	or	r4,r4,r23
    a7b8:	2080042e 	bgeu	r4,r2,a7cc <__umoddi3+0x4c0>
    a7bc:	24c9883a 	add	r4,r4,r19
    a7c0:	24c00236 	bltu	r4,r19,a7cc <__umoddi3+0x4c0>
    a7c4:	2080012e 	bgeu	r4,r2,a7cc <__umoddi3+0x4c0>
    a7c8:	24c9883a 	add	r4,r4,r19
    a7cc:	20a3c83a 	sub	r17,r4,r2
    a7d0:	003f4806 	br	a4f4 <__umoddi3+0x1e8>
    a7d4:	2c8fc83a 	sub	r7,r5,r18
    a7d8:	1545c83a 	sub	r2,r2,r21
    a7dc:	29cb803a 	cmpltu	r5,r5,r7
    a7e0:	1145c83a 	sub	r2,r2,r5
    a7e4:	4089c83a 	sub	r4,r8,r2
    a7e8:	003fc706 	br	a708 <__umoddi3+0x3fc>
    a7ec:	01000604 	movi	r4,24
    a7f0:	003f1806 	br	a454 <__umoddi3+0x148>
    a7f4:	00800604 	movi	r2,24
    a7f8:	003f3206 	br	a4c4 <__umoddi3+0x1b8>
    a7fc:	01000604 	movi	r4,24
    a800:	003ed906 	br	a368 <__umoddi3+0x5c>
    a804:	413fa52e 	bgeu	r8,r4,a69c <__umoddi3+0x390>
    a808:	297fff84 	addi	r5,r5,-2
    a80c:	4551883a 	add	r8,r8,r21
    a810:	003fa306 	br	a6a0 <__umoddi3+0x394>
    a814:	15ff8b2e 	bgeu	r2,r23,a644 <__umoddi3+0x338>
    a818:	31bfff84 	addi	r6,r6,-2
    a81c:	1545883a 	add	r2,r2,r21
    a820:	003f8906 	br	a648 <__umoddi3+0x33c>
    a824:	24c9883a 	add	r4,r4,r19
    a828:	003eee06 	br	a3e4 <__umoddi3+0xd8>
    a82c:	8005883a 	mov	r2,r16
    a830:	003f1706 	br	a490 <__umoddi3+0x184>
    a834:	817fe736 	bltu	r16,r5,a7d4 <__umoddi3+0x4c8>
    a838:	280f883a 	mov	r7,r5
    a83c:	0009883a 	mov	r4,zero
    a840:	003fb106 	br	a708 <__umoddi3+0x3fc>

0000a844 <__adddf3>:
    a844:	02c00434 	movhi	r11,16
    a848:	5affffc4 	addi	r11,r11,-1
    a84c:	2806d7fa 	srli	r3,r5,31
    a850:	2ad4703a 	and	r10,r5,r11
    a854:	3ad2703a 	and	r9,r7,r11
    a858:	3804d53a 	srli	r2,r7,20
    a85c:	3018d77a 	srli	r12,r6,29
    a860:	280ad53a 	srli	r5,r5,20
    a864:	501490fa 	slli	r10,r10,3
    a868:	2010d77a 	srli	r8,r4,29
    a86c:	481290fa 	slli	r9,r9,3
    a870:	380ed7fa 	srli	r7,r7,31
    a874:	defffb04 	addi	sp,sp,-20
    a878:	dc800215 	stw	r18,8(sp)
    a87c:	dc400115 	stw	r17,4(sp)
    a880:	dc000015 	stw	r16,0(sp)
    a884:	dfc00415 	stw	ra,16(sp)
    a888:	dcc00315 	stw	r19,12(sp)
    a88c:	1c803fcc 	andi	r18,r3,255
    a890:	2c01ffcc 	andi	r16,r5,2047
    a894:	5210b03a 	or	r8,r10,r8
    a898:	202290fa 	slli	r17,r4,3
    a89c:	1081ffcc 	andi	r2,r2,2047
    a8a0:	4b12b03a 	or	r9,r9,r12
    a8a4:	300c90fa 	slli	r6,r6,3
    a8a8:	91c07526 	beq	r18,r7,aa80 <__adddf3+0x23c>
    a8ac:	8087c83a 	sub	r3,r16,r2
    a8b0:	00c0ab0e 	bge	zero,r3,ab60 <__adddf3+0x31c>
    a8b4:	10002a1e 	bne	r2,zero,a960 <__adddf3+0x11c>
    a8b8:	4984b03a 	or	r2,r9,r6
    a8bc:	1000961e 	bne	r2,zero,ab18 <__adddf3+0x2d4>
    a8c0:	888001cc 	andi	r2,r17,7
    a8c4:	10000726 	beq	r2,zero,a8e4 <__adddf3+0xa0>
    a8c8:	888003cc 	andi	r2,r17,15
    a8cc:	00c00104 	movi	r3,4
    a8d0:	10c00426 	beq	r2,r3,a8e4 <__adddf3+0xa0>
    a8d4:	88c7883a 	add	r3,r17,r3
    a8d8:	1c63803a 	cmpltu	r17,r3,r17
    a8dc:	4451883a 	add	r8,r8,r17
    a8e0:	1823883a 	mov	r17,r3
    a8e4:	4080202c 	andhi	r2,r8,128
    a8e8:	10005926 	beq	r2,zero,aa50 <__adddf3+0x20c>
    a8ec:	84000044 	addi	r16,r16,1
    a8f0:	0081ffc4 	movi	r2,2047
    a8f4:	8080ba26 	beq	r16,r2,abe0 <__adddf3+0x39c>
    a8f8:	00bfe034 	movhi	r2,65408
    a8fc:	10bfffc4 	addi	r2,r2,-1
    a900:	4090703a 	and	r8,r8,r2
    a904:	4004977a 	slli	r2,r8,29
    a908:	4010927a 	slli	r8,r8,9
    a90c:	8822d0fa 	srli	r17,r17,3
    a910:	8401ffcc 	andi	r16,r16,2047
    a914:	4010d33a 	srli	r8,r8,12
    a918:	9007883a 	mov	r3,r18
    a91c:	1444b03a 	or	r2,r2,r17
    a920:	8401ffcc 	andi	r16,r16,2047
    a924:	8020953a 	slli	r16,r16,20
    a928:	18c03fcc 	andi	r3,r3,255
    a92c:	01000434 	movhi	r4,16
    a930:	213fffc4 	addi	r4,r4,-1
    a934:	180697fa 	slli	r3,r3,31
    a938:	4110703a 	and	r8,r8,r4
    a93c:	4410b03a 	or	r8,r8,r16
    a940:	40c6b03a 	or	r3,r8,r3
    a944:	dfc00417 	ldw	ra,16(sp)
    a948:	dcc00317 	ldw	r19,12(sp)
    a94c:	dc800217 	ldw	r18,8(sp)
    a950:	dc400117 	ldw	r17,4(sp)
    a954:	dc000017 	ldw	r16,0(sp)
    a958:	dec00504 	addi	sp,sp,20
    a95c:	f800283a 	ret
    a960:	0081ffc4 	movi	r2,2047
    a964:	80bfd626 	beq	r16,r2,a8c0 <__adddf3+0x7c>
    a968:	4a402034 	orhi	r9,r9,128
    a96c:	00800e04 	movi	r2,56
    a970:	10c09f16 	blt	r2,r3,abf0 <__adddf3+0x3ac>
    a974:	008007c4 	movi	r2,31
    a978:	10c0c216 	blt	r2,r3,ac84 <__adddf3+0x440>
    a97c:	00800804 	movi	r2,32
    a980:	10c5c83a 	sub	r2,r2,r3
    a984:	488a983a 	sll	r5,r9,r2
    a988:	30c8d83a 	srl	r4,r6,r3
    a98c:	3084983a 	sll	r2,r6,r2
    a990:	48c6d83a 	srl	r3,r9,r3
    a994:	290cb03a 	or	r6,r5,r4
    a998:	1004c03a 	cmpne	r2,r2,zero
    a99c:	308cb03a 	or	r6,r6,r2
    a9a0:	898dc83a 	sub	r6,r17,r6
    a9a4:	89a3803a 	cmpltu	r17,r17,r6
    a9a8:	40d1c83a 	sub	r8,r8,r3
    a9ac:	4451c83a 	sub	r8,r8,r17
    a9b0:	3023883a 	mov	r17,r6
    a9b4:	4080202c 	andhi	r2,r8,128
    a9b8:	10002326 	beq	r2,zero,aa48 <__adddf3+0x204>
    a9bc:	04c02034 	movhi	r19,128
    a9c0:	9cffffc4 	addi	r19,r19,-1
    a9c4:	44e6703a 	and	r19,r8,r19
    a9c8:	98007626 	beq	r19,zero,aba4 <__adddf3+0x360>
    a9cc:	9809883a 	mov	r4,r19
    a9d0:	000ce480 	call	ce48 <__clzsi2>
    a9d4:	10fffe04 	addi	r3,r2,-8
    a9d8:	010007c4 	movi	r4,31
    a9dc:	20c07716 	blt	r4,r3,abbc <__adddf3+0x378>
    a9e0:	00800804 	movi	r2,32
    a9e4:	10c5c83a 	sub	r2,r2,r3
    a9e8:	8884d83a 	srl	r2,r17,r2
    a9ec:	98d0983a 	sll	r8,r19,r3
    a9f0:	88e2983a 	sll	r17,r17,r3
    a9f4:	1204b03a 	or	r2,r2,r8
    a9f8:	1c007416 	blt	r3,r16,abcc <__adddf3+0x388>
    a9fc:	1c21c83a 	sub	r16,r3,r16
    aa00:	82000044 	addi	r8,r16,1
    aa04:	00c007c4 	movi	r3,31
    aa08:	1a009116 	blt	r3,r8,ac50 <__adddf3+0x40c>
    aa0c:	00c00804 	movi	r3,32
    aa10:	1a07c83a 	sub	r3,r3,r8
    aa14:	8a08d83a 	srl	r4,r17,r8
    aa18:	88e2983a 	sll	r17,r17,r3
    aa1c:	10c6983a 	sll	r3,r2,r3
    aa20:	1210d83a 	srl	r8,r2,r8
    aa24:	8804c03a 	cmpne	r2,r17,zero
    aa28:	1906b03a 	or	r3,r3,r4
    aa2c:	18a2b03a 	or	r17,r3,r2
    aa30:	0021883a 	mov	r16,zero
    aa34:	003fa206 	br	a8c0 <__adddf3+0x7c>
    aa38:	1890b03a 	or	r8,r3,r2
    aa3c:	40017d26 	beq	r8,zero,b034 <__adddf3+0x7f0>
    aa40:	1011883a 	mov	r8,r2
    aa44:	1823883a 	mov	r17,r3
    aa48:	888001cc 	andi	r2,r17,7
    aa4c:	103f9e1e 	bne	r2,zero,a8c8 <__adddf3+0x84>
    aa50:	4004977a 	slli	r2,r8,29
    aa54:	8822d0fa 	srli	r17,r17,3
    aa58:	4010d0fa 	srli	r8,r8,3
    aa5c:	9007883a 	mov	r3,r18
    aa60:	1444b03a 	or	r2,r2,r17
    aa64:	0101ffc4 	movi	r4,2047
    aa68:	81002426 	beq	r16,r4,aafc <__adddf3+0x2b8>
    aa6c:	8120703a 	and	r16,r16,r4
    aa70:	01000434 	movhi	r4,16
    aa74:	213fffc4 	addi	r4,r4,-1
    aa78:	4110703a 	and	r8,r8,r4
    aa7c:	003fa806 	br	a920 <__adddf3+0xdc>
    aa80:	8089c83a 	sub	r4,r16,r2
    aa84:	01005e0e 	bge	zero,r4,ac00 <__adddf3+0x3bc>
    aa88:	10002b26 	beq	r2,zero,ab38 <__adddf3+0x2f4>
    aa8c:	0081ffc4 	movi	r2,2047
    aa90:	80bf8b26 	beq	r16,r2,a8c0 <__adddf3+0x7c>
    aa94:	4a402034 	orhi	r9,r9,128
    aa98:	00800e04 	movi	r2,56
    aa9c:	1100a40e 	bge	r2,r4,ad30 <__adddf3+0x4ec>
    aaa0:	498cb03a 	or	r6,r9,r6
    aaa4:	300ac03a 	cmpne	r5,r6,zero
    aaa8:	0013883a 	mov	r9,zero
    aaac:	2c4b883a 	add	r5,r5,r17
    aab0:	2c63803a 	cmpltu	r17,r5,r17
    aab4:	4a11883a 	add	r8,r9,r8
    aab8:	8a11883a 	add	r8,r17,r8
    aabc:	2823883a 	mov	r17,r5
    aac0:	4080202c 	andhi	r2,r8,128
    aac4:	103fe026 	beq	r2,zero,aa48 <__adddf3+0x204>
    aac8:	84000044 	addi	r16,r16,1
    aacc:	0081ffc4 	movi	r2,2047
    aad0:	8080d226 	beq	r16,r2,ae1c <__adddf3+0x5d8>
    aad4:	00bfe034 	movhi	r2,65408
    aad8:	10bfffc4 	addi	r2,r2,-1
    aadc:	4090703a 	and	r8,r8,r2
    aae0:	880ad07a 	srli	r5,r17,1
    aae4:	400897fa 	slli	r4,r8,31
    aae8:	88c0004c 	andi	r3,r17,1
    aaec:	28e2b03a 	or	r17,r5,r3
    aaf0:	4010d07a 	srli	r8,r8,1
    aaf4:	2462b03a 	or	r17,r4,r17
    aaf8:	003f7106 	br	a8c0 <__adddf3+0x7c>
    aafc:	4088b03a 	or	r4,r8,r2
    ab00:	20014526 	beq	r4,zero,b018 <__adddf3+0x7d4>
    ab04:	01000434 	movhi	r4,16
    ab08:	42000234 	orhi	r8,r8,8
    ab0c:	213fffc4 	addi	r4,r4,-1
    ab10:	4110703a 	and	r8,r8,r4
    ab14:	003f8206 	br	a920 <__adddf3+0xdc>
    ab18:	18ffffc4 	addi	r3,r3,-1
    ab1c:	1800491e 	bne	r3,zero,ac44 <__adddf3+0x400>
    ab20:	898bc83a 	sub	r5,r17,r6
    ab24:	8963803a 	cmpltu	r17,r17,r5
    ab28:	4251c83a 	sub	r8,r8,r9
    ab2c:	4451c83a 	sub	r8,r8,r17
    ab30:	2823883a 	mov	r17,r5
    ab34:	003f9f06 	br	a9b4 <__adddf3+0x170>
    ab38:	4984b03a 	or	r2,r9,r6
    ab3c:	103f6026 	beq	r2,zero,a8c0 <__adddf3+0x7c>
    ab40:	213fffc4 	addi	r4,r4,-1
    ab44:	2000931e 	bne	r4,zero,ad94 <__adddf3+0x550>
    ab48:	898d883a 	add	r6,r17,r6
    ab4c:	3463803a 	cmpltu	r17,r6,r17
    ab50:	4251883a 	add	r8,r8,r9
    ab54:	8a11883a 	add	r8,r17,r8
    ab58:	3023883a 	mov	r17,r6
    ab5c:	003fd806 	br	aac0 <__adddf3+0x27c>
    ab60:	1800541e 	bne	r3,zero,acb4 <__adddf3+0x470>
    ab64:	80800044 	addi	r2,r16,1
    ab68:	1081ffcc 	andi	r2,r2,2047
    ab6c:	00c00044 	movi	r3,1
    ab70:	1880a00e 	bge	r3,r2,adf4 <__adddf3+0x5b0>
    ab74:	8989c83a 	sub	r4,r17,r6
    ab78:	8905803a 	cmpltu	r2,r17,r4
    ab7c:	4267c83a 	sub	r19,r8,r9
    ab80:	98a7c83a 	sub	r19,r19,r2
    ab84:	9880202c 	andhi	r2,r19,128
    ab88:	10006326 	beq	r2,zero,ad18 <__adddf3+0x4d4>
    ab8c:	3463c83a 	sub	r17,r6,r17
    ab90:	4a07c83a 	sub	r3,r9,r8
    ab94:	344d803a 	cmpltu	r6,r6,r17
    ab98:	19a7c83a 	sub	r19,r3,r6
    ab9c:	3825883a 	mov	r18,r7
    aba0:	983f8a1e 	bne	r19,zero,a9cc <__adddf3+0x188>
    aba4:	8809883a 	mov	r4,r17
    aba8:	000ce480 	call	ce48 <__clzsi2>
    abac:	10800804 	addi	r2,r2,32
    abb0:	10fffe04 	addi	r3,r2,-8
    abb4:	010007c4 	movi	r4,31
    abb8:	20ff890e 	bge	r4,r3,a9e0 <__adddf3+0x19c>
    abbc:	10bff604 	addi	r2,r2,-40
    abc0:	8884983a 	sll	r2,r17,r2
    abc4:	0023883a 	mov	r17,zero
    abc8:	1c3f8c0e 	bge	r3,r16,a9fc <__adddf3+0x1b8>
    abcc:	023fe034 	movhi	r8,65408
    abd0:	423fffc4 	addi	r8,r8,-1
    abd4:	80e1c83a 	sub	r16,r16,r3
    abd8:	1210703a 	and	r8,r2,r8
    abdc:	003f3806 	br	a8c0 <__adddf3+0x7c>
    abe0:	9007883a 	mov	r3,r18
    abe4:	0011883a 	mov	r8,zero
    abe8:	0005883a 	mov	r2,zero
    abec:	003f4c06 	br	a920 <__adddf3+0xdc>
    abf0:	498cb03a 	or	r6,r9,r6
    abf4:	300cc03a 	cmpne	r6,r6,zero
    abf8:	0007883a 	mov	r3,zero
    abfc:	003f6806 	br	a9a0 <__adddf3+0x15c>
    ac00:	20009c1e 	bne	r4,zero,ae74 <__adddf3+0x630>
    ac04:	80800044 	addi	r2,r16,1
    ac08:	1141ffcc 	andi	r5,r2,2047
    ac0c:	01000044 	movi	r4,1
    ac10:	2140670e 	bge	r4,r5,adb0 <__adddf3+0x56c>
    ac14:	0101ffc4 	movi	r4,2047
    ac18:	11007f26 	beq	r2,r4,ae18 <__adddf3+0x5d4>
    ac1c:	898d883a 	add	r6,r17,r6
    ac20:	4247883a 	add	r3,r8,r9
    ac24:	3451803a 	cmpltu	r8,r6,r17
    ac28:	40d1883a 	add	r8,r8,r3
    ac2c:	402297fa 	slli	r17,r8,31
    ac30:	300cd07a 	srli	r6,r6,1
    ac34:	4010d07a 	srli	r8,r8,1
    ac38:	1021883a 	mov	r16,r2
    ac3c:	89a2b03a 	or	r17,r17,r6
    ac40:	003f1f06 	br	a8c0 <__adddf3+0x7c>
    ac44:	0081ffc4 	movi	r2,2047
    ac48:	80bf481e 	bne	r16,r2,a96c <__adddf3+0x128>
    ac4c:	003f1c06 	br	a8c0 <__adddf3+0x7c>
    ac50:	843ff844 	addi	r16,r16,-31
    ac54:	01000804 	movi	r4,32
    ac58:	1406d83a 	srl	r3,r2,r16
    ac5c:	41005026 	beq	r8,r4,ada0 <__adddf3+0x55c>
    ac60:	01001004 	movi	r4,64
    ac64:	2211c83a 	sub	r8,r4,r8
    ac68:	1204983a 	sll	r2,r2,r8
    ac6c:	88a2b03a 	or	r17,r17,r2
    ac70:	8822c03a 	cmpne	r17,r17,zero
    ac74:	1c62b03a 	or	r17,r3,r17
    ac78:	0011883a 	mov	r8,zero
    ac7c:	0021883a 	mov	r16,zero
    ac80:	003f7106 	br	aa48 <__adddf3+0x204>
    ac84:	193ff804 	addi	r4,r3,-32
    ac88:	00800804 	movi	r2,32
    ac8c:	4908d83a 	srl	r4,r9,r4
    ac90:	18804526 	beq	r3,r2,ada8 <__adddf3+0x564>
    ac94:	00801004 	movi	r2,64
    ac98:	10c5c83a 	sub	r2,r2,r3
    ac9c:	4886983a 	sll	r3,r9,r2
    aca0:	198cb03a 	or	r6,r3,r6
    aca4:	300cc03a 	cmpne	r6,r6,zero
    aca8:	218cb03a 	or	r6,r4,r6
    acac:	0007883a 	mov	r3,zero
    acb0:	003f3b06 	br	a9a0 <__adddf3+0x15c>
    acb4:	80002a26 	beq	r16,zero,ad60 <__adddf3+0x51c>
    acb8:	0101ffc4 	movi	r4,2047
    acbc:	11006826 	beq	r2,r4,ae60 <__adddf3+0x61c>
    acc0:	00c7c83a 	sub	r3,zero,r3
    acc4:	42002034 	orhi	r8,r8,128
    acc8:	01000e04 	movi	r4,56
    accc:	20c07c16 	blt	r4,r3,aec0 <__adddf3+0x67c>
    acd0:	010007c4 	movi	r4,31
    acd4:	20c0da16 	blt	r4,r3,b040 <__adddf3+0x7fc>
    acd8:	01000804 	movi	r4,32
    acdc:	20c9c83a 	sub	r4,r4,r3
    ace0:	4114983a 	sll	r10,r8,r4
    ace4:	88cad83a 	srl	r5,r17,r3
    ace8:	8908983a 	sll	r4,r17,r4
    acec:	40c6d83a 	srl	r3,r8,r3
    acf0:	5162b03a 	or	r17,r10,r5
    acf4:	2008c03a 	cmpne	r4,r4,zero
    acf8:	8922b03a 	or	r17,r17,r4
    acfc:	3463c83a 	sub	r17,r6,r17
    ad00:	48c7c83a 	sub	r3,r9,r3
    ad04:	344d803a 	cmpltu	r6,r6,r17
    ad08:	1991c83a 	sub	r8,r3,r6
    ad0c:	1021883a 	mov	r16,r2
    ad10:	3825883a 	mov	r18,r7
    ad14:	003f2706 	br	a9b4 <__adddf3+0x170>
    ad18:	24d0b03a 	or	r8,r4,r19
    ad1c:	40001b1e 	bne	r8,zero,ad8c <__adddf3+0x548>
    ad20:	0005883a 	mov	r2,zero
    ad24:	0007883a 	mov	r3,zero
    ad28:	0021883a 	mov	r16,zero
    ad2c:	003f4d06 	br	aa64 <__adddf3+0x220>
    ad30:	008007c4 	movi	r2,31
    ad34:	11003c16 	blt	r2,r4,ae28 <__adddf3+0x5e4>
    ad38:	00800804 	movi	r2,32
    ad3c:	1105c83a 	sub	r2,r2,r4
    ad40:	488e983a 	sll	r7,r9,r2
    ad44:	310ad83a 	srl	r5,r6,r4
    ad48:	3084983a 	sll	r2,r6,r2
    ad4c:	4912d83a 	srl	r9,r9,r4
    ad50:	394ab03a 	or	r5,r7,r5
    ad54:	1004c03a 	cmpne	r2,r2,zero
    ad58:	288ab03a 	or	r5,r5,r2
    ad5c:	003f5306 	br	aaac <__adddf3+0x268>
    ad60:	4448b03a 	or	r4,r8,r17
    ad64:	20003e26 	beq	r4,zero,ae60 <__adddf3+0x61c>
    ad68:	00c6303a 	nor	r3,zero,r3
    ad6c:	18003a1e 	bne	r3,zero,ae58 <__adddf3+0x614>
    ad70:	3463c83a 	sub	r17,r6,r17
    ad74:	4a07c83a 	sub	r3,r9,r8
    ad78:	344d803a 	cmpltu	r6,r6,r17
    ad7c:	1991c83a 	sub	r8,r3,r6
    ad80:	1021883a 	mov	r16,r2
    ad84:	3825883a 	mov	r18,r7
    ad88:	003f0a06 	br	a9b4 <__adddf3+0x170>
    ad8c:	2023883a 	mov	r17,r4
    ad90:	003f0d06 	br	a9c8 <__adddf3+0x184>
    ad94:	0081ffc4 	movi	r2,2047
    ad98:	80bf3f1e 	bne	r16,r2,aa98 <__adddf3+0x254>
    ad9c:	003ec806 	br	a8c0 <__adddf3+0x7c>
    ada0:	0005883a 	mov	r2,zero
    ada4:	003fb106 	br	ac6c <__adddf3+0x428>
    ada8:	0007883a 	mov	r3,zero
    adac:	003fbc06 	br	aca0 <__adddf3+0x45c>
    adb0:	4444b03a 	or	r2,r8,r17
    adb4:	8000871e 	bne	r16,zero,afd4 <__adddf3+0x790>
    adb8:	1000ba26 	beq	r2,zero,b0a4 <__adddf3+0x860>
    adbc:	4984b03a 	or	r2,r9,r6
    adc0:	103ebf26 	beq	r2,zero,a8c0 <__adddf3+0x7c>
    adc4:	8985883a 	add	r2,r17,r6
    adc8:	4247883a 	add	r3,r8,r9
    adcc:	1451803a 	cmpltu	r8,r2,r17
    add0:	40d1883a 	add	r8,r8,r3
    add4:	40c0202c 	andhi	r3,r8,128
    add8:	1023883a 	mov	r17,r2
    addc:	183f1a26 	beq	r3,zero,aa48 <__adddf3+0x204>
    ade0:	00bfe034 	movhi	r2,65408
    ade4:	10bfffc4 	addi	r2,r2,-1
    ade8:	2021883a 	mov	r16,r4
    adec:	4090703a 	and	r8,r8,r2
    adf0:	003eb306 	br	a8c0 <__adddf3+0x7c>
    adf4:	4444b03a 	or	r2,r8,r17
    adf8:	8000291e 	bne	r16,zero,aea0 <__adddf3+0x65c>
    adfc:	10004b1e 	bne	r2,zero,af2c <__adddf3+0x6e8>
    ae00:	4990b03a 	or	r8,r9,r6
    ae04:	40008b26 	beq	r8,zero,b034 <__adddf3+0x7f0>
    ae08:	4811883a 	mov	r8,r9
    ae0c:	3023883a 	mov	r17,r6
    ae10:	3825883a 	mov	r18,r7
    ae14:	003eaa06 	br	a8c0 <__adddf3+0x7c>
    ae18:	1021883a 	mov	r16,r2
    ae1c:	0011883a 	mov	r8,zero
    ae20:	0005883a 	mov	r2,zero
    ae24:	003f0f06 	br	aa64 <__adddf3+0x220>
    ae28:	217ff804 	addi	r5,r4,-32
    ae2c:	00800804 	movi	r2,32
    ae30:	494ad83a 	srl	r5,r9,r5
    ae34:	20807d26 	beq	r4,r2,b02c <__adddf3+0x7e8>
    ae38:	00801004 	movi	r2,64
    ae3c:	1109c83a 	sub	r4,r2,r4
    ae40:	4912983a 	sll	r9,r9,r4
    ae44:	498cb03a 	or	r6,r9,r6
    ae48:	300cc03a 	cmpne	r6,r6,zero
    ae4c:	298ab03a 	or	r5,r5,r6
    ae50:	0013883a 	mov	r9,zero
    ae54:	003f1506 	br	aaac <__adddf3+0x268>
    ae58:	0101ffc4 	movi	r4,2047
    ae5c:	113f9a1e 	bne	r2,r4,acc8 <__adddf3+0x484>
    ae60:	4811883a 	mov	r8,r9
    ae64:	3023883a 	mov	r17,r6
    ae68:	1021883a 	mov	r16,r2
    ae6c:	3825883a 	mov	r18,r7
    ae70:	003e9306 	br	a8c0 <__adddf3+0x7c>
    ae74:	8000161e 	bne	r16,zero,aed0 <__adddf3+0x68c>
    ae78:	444ab03a 	or	r5,r8,r17
    ae7c:	28005126 	beq	r5,zero,afc4 <__adddf3+0x780>
    ae80:	0108303a 	nor	r4,zero,r4
    ae84:	20004d1e 	bne	r4,zero,afbc <__adddf3+0x778>
    ae88:	89a3883a 	add	r17,r17,r6
    ae8c:	4253883a 	add	r9,r8,r9
    ae90:	898d803a 	cmpltu	r6,r17,r6
    ae94:	3251883a 	add	r8,r6,r9
    ae98:	1021883a 	mov	r16,r2
    ae9c:	003f0806 	br	aac0 <__adddf3+0x27c>
    aea0:	1000301e 	bne	r2,zero,af64 <__adddf3+0x720>
    aea4:	4984b03a 	or	r2,r9,r6
    aea8:	10007126 	beq	r2,zero,b070 <__adddf3+0x82c>
    aeac:	4811883a 	mov	r8,r9
    aeb0:	3023883a 	mov	r17,r6
    aeb4:	3825883a 	mov	r18,r7
    aeb8:	0401ffc4 	movi	r16,2047
    aebc:	003e8006 	br	a8c0 <__adddf3+0x7c>
    aec0:	4462b03a 	or	r17,r8,r17
    aec4:	8822c03a 	cmpne	r17,r17,zero
    aec8:	0007883a 	mov	r3,zero
    aecc:	003f8b06 	br	acfc <__adddf3+0x4b8>
    aed0:	0141ffc4 	movi	r5,2047
    aed4:	11403b26 	beq	r2,r5,afc4 <__adddf3+0x780>
    aed8:	0109c83a 	sub	r4,zero,r4
    aedc:	42002034 	orhi	r8,r8,128
    aee0:	01400e04 	movi	r5,56
    aee4:	29006716 	blt	r5,r4,b084 <__adddf3+0x840>
    aee8:	014007c4 	movi	r5,31
    aeec:	29007016 	blt	r5,r4,b0b0 <__adddf3+0x86c>
    aef0:	01400804 	movi	r5,32
    aef4:	290bc83a 	sub	r5,r5,r4
    aef8:	4154983a 	sll	r10,r8,r5
    aefc:	890ed83a 	srl	r7,r17,r4
    af00:	894a983a 	sll	r5,r17,r5
    af04:	4108d83a 	srl	r4,r8,r4
    af08:	51e2b03a 	or	r17,r10,r7
    af0c:	280ac03a 	cmpne	r5,r5,zero
    af10:	8962b03a 	or	r17,r17,r5
    af14:	89a3883a 	add	r17,r17,r6
    af18:	2253883a 	add	r9,r4,r9
    af1c:	898d803a 	cmpltu	r6,r17,r6
    af20:	3251883a 	add	r8,r6,r9
    af24:	1021883a 	mov	r16,r2
    af28:	003ee506 	br	aac0 <__adddf3+0x27c>
    af2c:	4984b03a 	or	r2,r9,r6
    af30:	103e6326 	beq	r2,zero,a8c0 <__adddf3+0x7c>
    af34:	8987c83a 	sub	r3,r17,r6
    af38:	88c9803a 	cmpltu	r4,r17,r3
    af3c:	4245c83a 	sub	r2,r8,r9
    af40:	1105c83a 	sub	r2,r2,r4
    af44:	1100202c 	andhi	r4,r2,128
    af48:	203ebb26 	beq	r4,zero,aa38 <__adddf3+0x1f4>
    af4c:	3463c83a 	sub	r17,r6,r17
    af50:	4a07c83a 	sub	r3,r9,r8
    af54:	344d803a 	cmpltu	r6,r6,r17
    af58:	1991c83a 	sub	r8,r3,r6
    af5c:	3825883a 	mov	r18,r7
    af60:	003e5706 	br	a8c0 <__adddf3+0x7c>
    af64:	4984b03a 	or	r2,r9,r6
    af68:	10002e26 	beq	r2,zero,b024 <__adddf3+0x7e0>
    af6c:	4004d0fa 	srli	r2,r8,3
    af70:	8822d0fa 	srli	r17,r17,3
    af74:	4010977a 	slli	r8,r8,29
    af78:	10c0022c 	andhi	r3,r2,8
    af7c:	4462b03a 	or	r17,r8,r17
    af80:	18000826 	beq	r3,zero,afa4 <__adddf3+0x760>
    af84:	4808d0fa 	srli	r4,r9,3
    af88:	20c0022c 	andhi	r3,r4,8
    af8c:	1800051e 	bne	r3,zero,afa4 <__adddf3+0x760>
    af90:	300cd0fa 	srli	r6,r6,3
    af94:	4806977a 	slli	r3,r9,29
    af98:	2005883a 	mov	r2,r4
    af9c:	3825883a 	mov	r18,r7
    afa0:	19a2b03a 	or	r17,r3,r6
    afa4:	8810d77a 	srli	r8,r17,29
    afa8:	100490fa 	slli	r2,r2,3
    afac:	882290fa 	slli	r17,r17,3
    afb0:	0401ffc4 	movi	r16,2047
    afb4:	4090b03a 	or	r8,r8,r2
    afb8:	003e4106 	br	a8c0 <__adddf3+0x7c>
    afbc:	0141ffc4 	movi	r5,2047
    afc0:	117fc71e 	bne	r2,r5,aee0 <__adddf3+0x69c>
    afc4:	4811883a 	mov	r8,r9
    afc8:	3023883a 	mov	r17,r6
    afcc:	1021883a 	mov	r16,r2
    afd0:	003e3b06 	br	a8c0 <__adddf3+0x7c>
    afd4:	10002f26 	beq	r2,zero,b094 <__adddf3+0x850>
    afd8:	4984b03a 	or	r2,r9,r6
    afdc:	10001126 	beq	r2,zero,b024 <__adddf3+0x7e0>
    afe0:	4004d0fa 	srli	r2,r8,3
    afe4:	8822d0fa 	srli	r17,r17,3
    afe8:	4010977a 	slli	r8,r8,29
    afec:	10c0022c 	andhi	r3,r2,8
    aff0:	4462b03a 	or	r17,r8,r17
    aff4:	183feb26 	beq	r3,zero,afa4 <__adddf3+0x760>
    aff8:	4808d0fa 	srli	r4,r9,3
    affc:	20c0022c 	andhi	r3,r4,8
    b000:	183fe81e 	bne	r3,zero,afa4 <__adddf3+0x760>
    b004:	300cd0fa 	srli	r6,r6,3
    b008:	4806977a 	slli	r3,r9,29
    b00c:	2005883a 	mov	r2,r4
    b010:	19a2b03a 	or	r17,r3,r6
    b014:	003fe306 	br	afa4 <__adddf3+0x760>
    b018:	0011883a 	mov	r8,zero
    b01c:	0005883a 	mov	r2,zero
    b020:	003e3f06 	br	a920 <__adddf3+0xdc>
    b024:	0401ffc4 	movi	r16,2047
    b028:	003e2506 	br	a8c0 <__adddf3+0x7c>
    b02c:	0013883a 	mov	r9,zero
    b030:	003f8406 	br	ae44 <__adddf3+0x600>
    b034:	0005883a 	mov	r2,zero
    b038:	0007883a 	mov	r3,zero
    b03c:	003e8906 	br	aa64 <__adddf3+0x220>
    b040:	197ff804 	addi	r5,r3,-32
    b044:	01000804 	movi	r4,32
    b048:	414ad83a 	srl	r5,r8,r5
    b04c:	19002426 	beq	r3,r4,b0e0 <__adddf3+0x89c>
    b050:	01001004 	movi	r4,64
    b054:	20c7c83a 	sub	r3,r4,r3
    b058:	40c6983a 	sll	r3,r8,r3
    b05c:	1c46b03a 	or	r3,r3,r17
    b060:	1806c03a 	cmpne	r3,r3,zero
    b064:	28e2b03a 	or	r17,r5,r3
    b068:	0007883a 	mov	r3,zero
    b06c:	003f2306 	br	acfc <__adddf3+0x4b8>
    b070:	0007883a 	mov	r3,zero
    b074:	5811883a 	mov	r8,r11
    b078:	00bfffc4 	movi	r2,-1
    b07c:	0401ffc4 	movi	r16,2047
    b080:	003e7806 	br	aa64 <__adddf3+0x220>
    b084:	4462b03a 	or	r17,r8,r17
    b088:	8822c03a 	cmpne	r17,r17,zero
    b08c:	0009883a 	mov	r4,zero
    b090:	003fa006 	br	af14 <__adddf3+0x6d0>
    b094:	4811883a 	mov	r8,r9
    b098:	3023883a 	mov	r17,r6
    b09c:	0401ffc4 	movi	r16,2047
    b0a0:	003e0706 	br	a8c0 <__adddf3+0x7c>
    b0a4:	4811883a 	mov	r8,r9
    b0a8:	3023883a 	mov	r17,r6
    b0ac:	003e0406 	br	a8c0 <__adddf3+0x7c>
    b0b0:	21fff804 	addi	r7,r4,-32
    b0b4:	01400804 	movi	r5,32
    b0b8:	41ced83a 	srl	r7,r8,r7
    b0bc:	21400a26 	beq	r4,r5,b0e8 <__adddf3+0x8a4>
    b0c0:	01401004 	movi	r5,64
    b0c4:	2909c83a 	sub	r4,r5,r4
    b0c8:	4108983a 	sll	r4,r8,r4
    b0cc:	2448b03a 	or	r4,r4,r17
    b0d0:	2008c03a 	cmpne	r4,r4,zero
    b0d4:	3922b03a 	or	r17,r7,r4
    b0d8:	0009883a 	mov	r4,zero
    b0dc:	003f8d06 	br	af14 <__adddf3+0x6d0>
    b0e0:	0007883a 	mov	r3,zero
    b0e4:	003fdd06 	br	b05c <__adddf3+0x818>
    b0e8:	0009883a 	mov	r4,zero
    b0ec:	003ff706 	br	b0cc <__adddf3+0x888>

0000b0f0 <__divdf3>:
    b0f0:	defff204 	addi	sp,sp,-56
    b0f4:	dd400915 	stw	r21,36(sp)
    b0f8:	282ad53a 	srli	r21,r5,20
    b0fc:	dd000815 	stw	r20,32(sp)
    b100:	2828d7fa 	srli	r20,r5,31
    b104:	dc000415 	stw	r16,16(sp)
    b108:	04000434 	movhi	r16,16
    b10c:	df000c15 	stw	fp,48(sp)
    b110:	843fffc4 	addi	r16,r16,-1
    b114:	dfc00d15 	stw	ra,52(sp)
    b118:	ddc00b15 	stw	r23,44(sp)
    b11c:	dd800a15 	stw	r22,40(sp)
    b120:	dcc00715 	stw	r19,28(sp)
    b124:	dc800615 	stw	r18,24(sp)
    b128:	dc400515 	stw	r17,20(sp)
    b12c:	ad41ffcc 	andi	r21,r21,2047
    b130:	2c20703a 	and	r16,r5,r16
    b134:	a7003fcc 	andi	fp,r20,255
    b138:	a8006126 	beq	r21,zero,b2c0 <__divdf3+0x1d0>
    b13c:	0081ffc4 	movi	r2,2047
    b140:	2025883a 	mov	r18,r4
    b144:	a8803726 	beq	r21,r2,b224 <__divdf3+0x134>
    b148:	80800434 	orhi	r2,r16,16
    b14c:	100490fa 	slli	r2,r2,3
    b150:	2020d77a 	srli	r16,r4,29
    b154:	202490fa 	slli	r18,r4,3
    b158:	ad7f0044 	addi	r21,r21,-1023
    b15c:	80a0b03a 	or	r16,r16,r2
    b160:	0027883a 	mov	r19,zero
    b164:	0013883a 	mov	r9,zero
    b168:	3804d53a 	srli	r2,r7,20
    b16c:	382cd7fa 	srli	r22,r7,31
    b170:	04400434 	movhi	r17,16
    b174:	8c7fffc4 	addi	r17,r17,-1
    b178:	1081ffcc 	andi	r2,r2,2047
    b17c:	3011883a 	mov	r8,r6
    b180:	3c62703a 	and	r17,r7,r17
    b184:	b5c03fcc 	andi	r23,r22,255
    b188:	10006c26 	beq	r2,zero,b33c <__divdf3+0x24c>
    b18c:	00c1ffc4 	movi	r3,2047
    b190:	10c06426 	beq	r2,r3,b324 <__divdf3+0x234>
    b194:	88c00434 	orhi	r3,r17,16
    b198:	180690fa 	slli	r3,r3,3
    b19c:	3022d77a 	srli	r17,r6,29
    b1a0:	301090fa 	slli	r8,r6,3
    b1a4:	10bf0044 	addi	r2,r2,-1023
    b1a8:	88e2b03a 	or	r17,r17,r3
    b1ac:	000f883a 	mov	r7,zero
    b1b0:	a58cf03a 	xor	r6,r20,r22
    b1b4:	3cc8b03a 	or	r4,r7,r19
    b1b8:	a8abc83a 	sub	r21,r21,r2
    b1bc:	008003c4 	movi	r2,15
    b1c0:	3007883a 	mov	r3,r6
    b1c4:	34c03fcc 	andi	r19,r6,255
    b1c8:	11009036 	bltu	r2,r4,b40c <__divdf3+0x31c>
    b1cc:	200890ba 	slli	r4,r4,2
    b1d0:	00800074 	movhi	r2,1
    b1d4:	10ac7904 	addi	r2,r2,-19996
    b1d8:	2089883a 	add	r4,r4,r2
    b1dc:	20800017 	ldw	r2,0(r4)
    b1e0:	1000683a 	jmp	r2
    b1e4:	0000b40c 	andi	zero,zero,720
    b1e8:	0000b25c 	xori	zero,zero,713
    b1ec:	0000b3fc 	xorhi	zero,zero,719
    b1f0:	0000b250 	cmplti	zero,zero,713
    b1f4:	0000b3fc 	xorhi	zero,zero,719
    b1f8:	0000b3d0 	cmplti	zero,zero,719
    b1fc:	0000b3fc 	xorhi	zero,zero,719
    b200:	0000b250 	cmplti	zero,zero,713
    b204:	0000b25c 	xori	zero,zero,713
    b208:	0000b25c 	xori	zero,zero,713
    b20c:	0000b3d0 	cmplti	zero,zero,719
    b210:	0000b250 	cmplti	zero,zero,713
    b214:	0000b240 	call	b24 <___vfprintf_internal_r+0x20c>
    b218:	0000b240 	call	b24 <___vfprintf_internal_r+0x20c>
    b21c:	0000b240 	call	b24 <___vfprintf_internal_r+0x20c>
    b220:	0000b6f0 	cmpltui	zero,zero,731
    b224:	2404b03a 	or	r2,r4,r16
    b228:	1000661e 	bne	r2,zero,b3c4 <__divdf3+0x2d4>
    b22c:	04c00204 	movi	r19,8
    b230:	0021883a 	mov	r16,zero
    b234:	0025883a 	mov	r18,zero
    b238:	02400084 	movi	r9,2
    b23c:	003fca06 	br	b168 <__divdf3+0x78>
    b240:	8023883a 	mov	r17,r16
    b244:	9011883a 	mov	r8,r18
    b248:	e02f883a 	mov	r23,fp
    b24c:	480f883a 	mov	r7,r9
    b250:	00800084 	movi	r2,2
    b254:	3881311e 	bne	r7,r2,b71c <__divdf3+0x62c>
    b258:	b827883a 	mov	r19,r23
    b25c:	98c0004c 	andi	r3,r19,1
    b260:	0081ffc4 	movi	r2,2047
    b264:	000b883a 	mov	r5,zero
    b268:	0025883a 	mov	r18,zero
    b26c:	1004953a 	slli	r2,r2,20
    b270:	18c03fcc 	andi	r3,r3,255
    b274:	04400434 	movhi	r17,16
    b278:	8c7fffc4 	addi	r17,r17,-1
    b27c:	180697fa 	slli	r3,r3,31
    b280:	2c4a703a 	and	r5,r5,r17
    b284:	288ab03a 	or	r5,r5,r2
    b288:	28c6b03a 	or	r3,r5,r3
    b28c:	9005883a 	mov	r2,r18
    b290:	dfc00d17 	ldw	ra,52(sp)
    b294:	df000c17 	ldw	fp,48(sp)
    b298:	ddc00b17 	ldw	r23,44(sp)
    b29c:	dd800a17 	ldw	r22,40(sp)
    b2a0:	dd400917 	ldw	r21,36(sp)
    b2a4:	dd000817 	ldw	r20,32(sp)
    b2a8:	dcc00717 	ldw	r19,28(sp)
    b2ac:	dc800617 	ldw	r18,24(sp)
    b2b0:	dc400517 	ldw	r17,20(sp)
    b2b4:	dc000417 	ldw	r16,16(sp)
    b2b8:	dec00e04 	addi	sp,sp,56
    b2bc:	f800283a 	ret
    b2c0:	2404b03a 	or	r2,r4,r16
    b2c4:	2027883a 	mov	r19,r4
    b2c8:	10003926 	beq	r2,zero,b3b0 <__divdf3+0x2c0>
    b2cc:	80012e26 	beq	r16,zero,b788 <__divdf3+0x698>
    b2d0:	8009883a 	mov	r4,r16
    b2d4:	d9800315 	stw	r6,12(sp)
    b2d8:	d9c00215 	stw	r7,8(sp)
    b2dc:	000ce480 	call	ce48 <__clzsi2>
    b2e0:	d9800317 	ldw	r6,12(sp)
    b2e4:	d9c00217 	ldw	r7,8(sp)
    b2e8:	113ffd44 	addi	r4,r2,-11
    b2ec:	00c00704 	movi	r3,28
    b2f0:	19012116 	blt	r3,r4,b778 <__divdf3+0x688>
    b2f4:	00c00744 	movi	r3,29
    b2f8:	147ffe04 	addi	r17,r2,-8
    b2fc:	1907c83a 	sub	r3,r3,r4
    b300:	8460983a 	sll	r16,r16,r17
    b304:	98c6d83a 	srl	r3,r19,r3
    b308:	9c64983a 	sll	r18,r19,r17
    b30c:	1c20b03a 	or	r16,r3,r16
    b310:	1080fcc4 	addi	r2,r2,1011
    b314:	00abc83a 	sub	r21,zero,r2
    b318:	0027883a 	mov	r19,zero
    b31c:	0013883a 	mov	r9,zero
    b320:	003f9106 	br	b168 <__divdf3+0x78>
    b324:	3446b03a 	or	r3,r6,r17
    b328:	18001f1e 	bne	r3,zero,b3a8 <__divdf3+0x2b8>
    b32c:	0023883a 	mov	r17,zero
    b330:	0011883a 	mov	r8,zero
    b334:	01c00084 	movi	r7,2
    b338:	003f9d06 	br	b1b0 <__divdf3+0xc0>
    b33c:	3446b03a 	or	r3,r6,r17
    b340:	18001526 	beq	r3,zero,b398 <__divdf3+0x2a8>
    b344:	88011b26 	beq	r17,zero,b7b4 <__divdf3+0x6c4>
    b348:	8809883a 	mov	r4,r17
    b34c:	d9800315 	stw	r6,12(sp)
    b350:	da400115 	stw	r9,4(sp)
    b354:	000ce480 	call	ce48 <__clzsi2>
    b358:	d9800317 	ldw	r6,12(sp)
    b35c:	da400117 	ldw	r9,4(sp)
    b360:	113ffd44 	addi	r4,r2,-11
    b364:	00c00704 	movi	r3,28
    b368:	19010e16 	blt	r3,r4,b7a4 <__divdf3+0x6b4>
    b36c:	00c00744 	movi	r3,29
    b370:	123ffe04 	addi	r8,r2,-8
    b374:	1907c83a 	sub	r3,r3,r4
    b378:	8a22983a 	sll	r17,r17,r8
    b37c:	30c6d83a 	srl	r3,r6,r3
    b380:	3210983a 	sll	r8,r6,r8
    b384:	1c62b03a 	or	r17,r3,r17
    b388:	1080fcc4 	addi	r2,r2,1011
    b38c:	0085c83a 	sub	r2,zero,r2
    b390:	000f883a 	mov	r7,zero
    b394:	003f8606 	br	b1b0 <__divdf3+0xc0>
    b398:	0023883a 	mov	r17,zero
    b39c:	0011883a 	mov	r8,zero
    b3a0:	01c00044 	movi	r7,1
    b3a4:	003f8206 	br	b1b0 <__divdf3+0xc0>
    b3a8:	01c000c4 	movi	r7,3
    b3ac:	003f8006 	br	b1b0 <__divdf3+0xc0>
    b3b0:	04c00104 	movi	r19,4
    b3b4:	0021883a 	mov	r16,zero
    b3b8:	0025883a 	mov	r18,zero
    b3bc:	02400044 	movi	r9,1
    b3c0:	003f6906 	br	b168 <__divdf3+0x78>
    b3c4:	04c00304 	movi	r19,12
    b3c8:	024000c4 	movi	r9,3
    b3cc:	003f6606 	br	b168 <__divdf3+0x78>
    b3d0:	01400434 	movhi	r5,16
    b3d4:	0007883a 	mov	r3,zero
    b3d8:	297fffc4 	addi	r5,r5,-1
    b3dc:	04bfffc4 	movi	r18,-1
    b3e0:	0081ffc4 	movi	r2,2047
    b3e4:	003fa106 	br	b26c <__divdf3+0x17c>
    b3e8:	00c00044 	movi	r3,1
    b3ec:	1887c83a 	sub	r3,r3,r2
    b3f0:	01000e04 	movi	r4,56
    b3f4:	20c1210e 	bge	r4,r3,b87c <__divdf3+0x78c>
    b3f8:	98c0004c 	andi	r3,r19,1
    b3fc:	0005883a 	mov	r2,zero
    b400:	000b883a 	mov	r5,zero
    b404:	0025883a 	mov	r18,zero
    b408:	003f9806 	br	b26c <__divdf3+0x17c>
    b40c:	8c00fd36 	bltu	r17,r16,b804 <__divdf3+0x714>
    b410:	8440fb26 	beq	r16,r17,b800 <__divdf3+0x710>
    b414:	8007883a 	mov	r3,r16
    b418:	ad7fffc4 	addi	r21,r21,-1
    b41c:	0021883a 	mov	r16,zero
    b420:	4004d63a 	srli	r2,r8,24
    b424:	8822923a 	slli	r17,r17,8
    b428:	1809883a 	mov	r4,r3
    b42c:	402c923a 	slli	r22,r8,8
    b430:	88b8b03a 	or	fp,r17,r2
    b434:	e028d43a 	srli	r20,fp,16
    b438:	d8c00015 	stw	r3,0(sp)
    b43c:	e5ffffcc 	andi	r23,fp,65535
    b440:	a00b883a 	mov	r5,r20
    b444:	00006840 	call	684 <__udivsi3>
    b448:	d8c00017 	ldw	r3,0(sp)
    b44c:	a00b883a 	mov	r5,r20
    b450:	d8800315 	stw	r2,12(sp)
    b454:	1809883a 	mov	r4,r3
    b458:	00006e80 	call	6e8 <__umodsi3>
    b45c:	d9800317 	ldw	r6,12(sp)
    b460:	1006943a 	slli	r3,r2,16
    b464:	9004d43a 	srli	r2,r18,16
    b468:	b9a3383a 	mul	r17,r23,r6
    b46c:	10c4b03a 	or	r2,r2,r3
    b470:	1440062e 	bgeu	r2,r17,b48c <__divdf3+0x39c>
    b474:	1705883a 	add	r2,r2,fp
    b478:	30ffffc4 	addi	r3,r6,-1
    b47c:	1700ee36 	bltu	r2,fp,b838 <__divdf3+0x748>
    b480:	1440ed2e 	bgeu	r2,r17,b838 <__divdf3+0x748>
    b484:	31bfff84 	addi	r6,r6,-2
    b488:	1705883a 	add	r2,r2,fp
    b48c:	1463c83a 	sub	r17,r2,r17
    b490:	a00b883a 	mov	r5,r20
    b494:	8809883a 	mov	r4,r17
    b498:	d9800315 	stw	r6,12(sp)
    b49c:	00006840 	call	684 <__udivsi3>
    b4a0:	a00b883a 	mov	r5,r20
    b4a4:	8809883a 	mov	r4,r17
    b4a8:	d8800215 	stw	r2,8(sp)
    b4ac:	00006e80 	call	6e8 <__umodsi3>
    b4b0:	d9c00217 	ldw	r7,8(sp)
    b4b4:	1004943a 	slli	r2,r2,16
    b4b8:	94bfffcc 	andi	r18,r18,65535
    b4bc:	b9d1383a 	mul	r8,r23,r7
    b4c0:	90a4b03a 	or	r18,r18,r2
    b4c4:	d9800317 	ldw	r6,12(sp)
    b4c8:	9200062e 	bgeu	r18,r8,b4e4 <__divdf3+0x3f4>
    b4cc:	9725883a 	add	r18,r18,fp
    b4d0:	38bfffc4 	addi	r2,r7,-1
    b4d4:	9700d636 	bltu	r18,fp,b830 <__divdf3+0x740>
    b4d8:	9200d52e 	bgeu	r18,r8,b830 <__divdf3+0x740>
    b4dc:	39ffff84 	addi	r7,r7,-2
    b4e0:	9725883a 	add	r18,r18,fp
    b4e4:	3004943a 	slli	r2,r6,16
    b4e8:	b012d43a 	srli	r9,r22,16
    b4ec:	b1bfffcc 	andi	r6,r22,65535
    b4f0:	11e2b03a 	or	r17,r2,r7
    b4f4:	8806d43a 	srli	r3,r17,16
    b4f8:	893fffcc 	andi	r4,r17,65535
    b4fc:	218b383a 	mul	r5,r4,r6
    b500:	30c5383a 	mul	r2,r6,r3
    b504:	2249383a 	mul	r4,r4,r9
    b508:	280ed43a 	srli	r7,r5,16
    b50c:	9225c83a 	sub	r18,r18,r8
    b510:	2089883a 	add	r4,r4,r2
    b514:	3909883a 	add	r4,r7,r4
    b518:	1a47383a 	mul	r3,r3,r9
    b51c:	2080022e 	bgeu	r4,r2,b528 <__divdf3+0x438>
    b520:	00800074 	movhi	r2,1
    b524:	1887883a 	add	r3,r3,r2
    b528:	2004d43a 	srli	r2,r4,16
    b52c:	2008943a 	slli	r4,r4,16
    b530:	297fffcc 	andi	r5,r5,65535
    b534:	10c7883a 	add	r3,r2,r3
    b538:	2149883a 	add	r4,r4,r5
    b53c:	90c0a536 	bltu	r18,r3,b7d4 <__divdf3+0x6e4>
    b540:	90c0bf26 	beq	r18,r3,b840 <__divdf3+0x750>
    b544:	90c7c83a 	sub	r3,r18,r3
    b548:	810fc83a 	sub	r7,r16,r4
    b54c:	81e5803a 	cmpltu	r18,r16,r7
    b550:	1ca5c83a 	sub	r18,r3,r18
    b554:	e480c126 	beq	fp,r18,b85c <__divdf3+0x76c>
    b558:	a00b883a 	mov	r5,r20
    b55c:	9009883a 	mov	r4,r18
    b560:	d9800315 	stw	r6,12(sp)
    b564:	d9c00215 	stw	r7,8(sp)
    b568:	da400115 	stw	r9,4(sp)
    b56c:	00006840 	call	684 <__udivsi3>
    b570:	a00b883a 	mov	r5,r20
    b574:	9009883a 	mov	r4,r18
    b578:	d8800015 	stw	r2,0(sp)
    b57c:	00006e80 	call	6e8 <__umodsi3>
    b580:	d9c00217 	ldw	r7,8(sp)
    b584:	da000017 	ldw	r8,0(sp)
    b588:	1006943a 	slli	r3,r2,16
    b58c:	3804d43a 	srli	r2,r7,16
    b590:	ba21383a 	mul	r16,r23,r8
    b594:	d9800317 	ldw	r6,12(sp)
    b598:	10c4b03a 	or	r2,r2,r3
    b59c:	da400117 	ldw	r9,4(sp)
    b5a0:	1400062e 	bgeu	r2,r16,b5bc <__divdf3+0x4cc>
    b5a4:	1705883a 	add	r2,r2,fp
    b5a8:	40ffffc4 	addi	r3,r8,-1
    b5ac:	1700ad36 	bltu	r2,fp,b864 <__divdf3+0x774>
    b5b0:	1400ac2e 	bgeu	r2,r16,b864 <__divdf3+0x774>
    b5b4:	423fff84 	addi	r8,r8,-2
    b5b8:	1705883a 	add	r2,r2,fp
    b5bc:	1421c83a 	sub	r16,r2,r16
    b5c0:	a00b883a 	mov	r5,r20
    b5c4:	8009883a 	mov	r4,r16
    b5c8:	d9800315 	stw	r6,12(sp)
    b5cc:	d9c00215 	stw	r7,8(sp)
    b5d0:	da000015 	stw	r8,0(sp)
    b5d4:	da400115 	stw	r9,4(sp)
    b5d8:	00006840 	call	684 <__udivsi3>
    b5dc:	8009883a 	mov	r4,r16
    b5e0:	a00b883a 	mov	r5,r20
    b5e4:	1025883a 	mov	r18,r2
    b5e8:	00006e80 	call	6e8 <__umodsi3>
    b5ec:	d9c00217 	ldw	r7,8(sp)
    b5f0:	1004943a 	slli	r2,r2,16
    b5f4:	bcaf383a 	mul	r23,r23,r18
    b5f8:	393fffcc 	andi	r4,r7,65535
    b5fc:	2088b03a 	or	r4,r4,r2
    b600:	d9800317 	ldw	r6,12(sp)
    b604:	da000017 	ldw	r8,0(sp)
    b608:	da400117 	ldw	r9,4(sp)
    b60c:	25c0062e 	bgeu	r4,r23,b628 <__divdf3+0x538>
    b610:	2709883a 	add	r4,r4,fp
    b614:	90bfffc4 	addi	r2,r18,-1
    b618:	27009436 	bltu	r4,fp,b86c <__divdf3+0x77c>
    b61c:	25c0932e 	bgeu	r4,r23,b86c <__divdf3+0x77c>
    b620:	94bfff84 	addi	r18,r18,-2
    b624:	2709883a 	add	r4,r4,fp
    b628:	4004943a 	slli	r2,r8,16
    b62c:	25efc83a 	sub	r23,r4,r23
    b630:	1490b03a 	or	r8,r2,r18
    b634:	4008d43a 	srli	r4,r8,16
    b638:	40ffffcc 	andi	r3,r8,65535
    b63c:	30c5383a 	mul	r2,r6,r3
    b640:	1a47383a 	mul	r3,r3,r9
    b644:	310d383a 	mul	r6,r6,r4
    b648:	100ad43a 	srli	r5,r2,16
    b64c:	4913383a 	mul	r9,r9,r4
    b650:	1987883a 	add	r3,r3,r6
    b654:	28c7883a 	add	r3,r5,r3
    b658:	1980022e 	bgeu	r3,r6,b664 <__divdf3+0x574>
    b65c:	01000074 	movhi	r4,1
    b660:	4913883a 	add	r9,r9,r4
    b664:	1808d43a 	srli	r4,r3,16
    b668:	1806943a 	slli	r3,r3,16
    b66c:	10bfffcc 	andi	r2,r2,65535
    b670:	2253883a 	add	r9,r4,r9
    b674:	1887883a 	add	r3,r3,r2
    b678:	ba403836 	bltu	r23,r9,b75c <__divdf3+0x66c>
    b67c:	ba403626 	beq	r23,r9,b758 <__divdf3+0x668>
    b680:	42000054 	ori	r8,r8,1
    b684:	a880ffc4 	addi	r2,r21,1023
    b688:	00bf570e 	bge	zero,r2,b3e8 <__divdf3+0x2f8>
    b68c:	40c001cc 	andi	r3,r8,7
    b690:	18000726 	beq	r3,zero,b6b0 <__divdf3+0x5c0>
    b694:	40c003cc 	andi	r3,r8,15
    b698:	01000104 	movi	r4,4
    b69c:	19000426 	beq	r3,r4,b6b0 <__divdf3+0x5c0>
    b6a0:	4107883a 	add	r3,r8,r4
    b6a4:	1a11803a 	cmpltu	r8,r3,r8
    b6a8:	8a23883a 	add	r17,r17,r8
    b6ac:	1811883a 	mov	r8,r3
    b6b0:	88c0402c 	andhi	r3,r17,256
    b6b4:	18000426 	beq	r3,zero,b6c8 <__divdf3+0x5d8>
    b6b8:	00ffc034 	movhi	r3,65280
    b6bc:	18ffffc4 	addi	r3,r3,-1
    b6c0:	a8810004 	addi	r2,r21,1024
    b6c4:	88e2703a 	and	r17,r17,r3
    b6c8:	00c1ff84 	movi	r3,2046
    b6cc:	18bee316 	blt	r3,r2,b25c <__divdf3+0x16c>
    b6d0:	8824977a 	slli	r18,r17,29
    b6d4:	4010d0fa 	srli	r8,r8,3
    b6d8:	8822927a 	slli	r17,r17,9
    b6dc:	1081ffcc 	andi	r2,r2,2047
    b6e0:	9224b03a 	or	r18,r18,r8
    b6e4:	880ad33a 	srli	r5,r17,12
    b6e8:	98c0004c 	andi	r3,r19,1
    b6ec:	003edf06 	br	b26c <__divdf3+0x17c>
    b6f0:	8080022c 	andhi	r2,r16,8
    b6f4:	10001226 	beq	r2,zero,b740 <__divdf3+0x650>
    b6f8:	8880022c 	andhi	r2,r17,8
    b6fc:	1000101e 	bne	r2,zero,b740 <__divdf3+0x650>
    b700:	00800434 	movhi	r2,16
    b704:	89400234 	orhi	r5,r17,8
    b708:	10bfffc4 	addi	r2,r2,-1
    b70c:	b007883a 	mov	r3,r22
    b710:	288a703a 	and	r5,r5,r2
    b714:	4025883a 	mov	r18,r8
    b718:	003f3106 	br	b3e0 <__divdf3+0x2f0>
    b71c:	008000c4 	movi	r2,3
    b720:	3880a626 	beq	r7,r2,b9bc <__divdf3+0x8cc>
    b724:	00800044 	movi	r2,1
    b728:	3880521e 	bne	r7,r2,b874 <__divdf3+0x784>
    b72c:	b807883a 	mov	r3,r23
    b730:	0005883a 	mov	r2,zero
    b734:	000b883a 	mov	r5,zero
    b738:	0025883a 	mov	r18,zero
    b73c:	003ecb06 	br	b26c <__divdf3+0x17c>
    b740:	00800434 	movhi	r2,16
    b744:	81400234 	orhi	r5,r16,8
    b748:	10bfffc4 	addi	r2,r2,-1
    b74c:	a007883a 	mov	r3,r20
    b750:	288a703a 	and	r5,r5,r2
    b754:	003f2206 	br	b3e0 <__divdf3+0x2f0>
    b758:	183fca26 	beq	r3,zero,b684 <__divdf3+0x594>
    b75c:	e5ef883a 	add	r23,fp,r23
    b760:	40bfffc4 	addi	r2,r8,-1
    b764:	bf00392e 	bgeu	r23,fp,b84c <__divdf3+0x75c>
    b768:	1011883a 	mov	r8,r2
    b76c:	ba7fc41e 	bne	r23,r9,b680 <__divdf3+0x590>
    b770:	b0ffc31e 	bne	r22,r3,b680 <__divdf3+0x590>
    b774:	003fc306 	br	b684 <__divdf3+0x594>
    b778:	143ff604 	addi	r16,r2,-40
    b77c:	9c20983a 	sll	r16,r19,r16
    b780:	0025883a 	mov	r18,zero
    b784:	003ee206 	br	b310 <__divdf3+0x220>
    b788:	d9800315 	stw	r6,12(sp)
    b78c:	d9c00215 	stw	r7,8(sp)
    b790:	000ce480 	call	ce48 <__clzsi2>
    b794:	10800804 	addi	r2,r2,32
    b798:	d9c00217 	ldw	r7,8(sp)
    b79c:	d9800317 	ldw	r6,12(sp)
    b7a0:	003ed106 	br	b2e8 <__divdf3+0x1f8>
    b7a4:	147ff604 	addi	r17,r2,-40
    b7a8:	3462983a 	sll	r17,r6,r17
    b7ac:	0011883a 	mov	r8,zero
    b7b0:	003ef506 	br	b388 <__divdf3+0x298>
    b7b4:	3009883a 	mov	r4,r6
    b7b8:	d9800315 	stw	r6,12(sp)
    b7bc:	da400115 	stw	r9,4(sp)
    b7c0:	000ce480 	call	ce48 <__clzsi2>
    b7c4:	10800804 	addi	r2,r2,32
    b7c8:	da400117 	ldw	r9,4(sp)
    b7cc:	d9800317 	ldw	r6,12(sp)
    b7d0:	003ee306 	br	b360 <__divdf3+0x270>
    b7d4:	85a1883a 	add	r16,r16,r22
    b7d8:	8585803a 	cmpltu	r2,r16,r22
    b7dc:	1705883a 	add	r2,r2,fp
    b7e0:	14a5883a 	add	r18,r2,r18
    b7e4:	88bfffc4 	addi	r2,r17,-1
    b7e8:	e4800c2e 	bgeu	fp,r18,b81c <__divdf3+0x72c>
    b7ec:	90c03e36 	bltu	r18,r3,b8e8 <__divdf3+0x7f8>
    b7f0:	1c806926 	beq	r3,r18,b998 <__divdf3+0x8a8>
    b7f4:	90c7c83a 	sub	r3,r18,r3
    b7f8:	1023883a 	mov	r17,r2
    b7fc:	003f5206 	br	b548 <__divdf3+0x458>
    b800:	923f0436 	bltu	r18,r8,b414 <__divdf3+0x324>
    b804:	800897fa 	slli	r4,r16,31
    b808:	9004d07a 	srli	r2,r18,1
    b80c:	8006d07a 	srli	r3,r16,1
    b810:	902097fa 	slli	r16,r18,31
    b814:	20a4b03a 	or	r18,r4,r2
    b818:	003f0106 	br	b420 <__divdf3+0x330>
    b81c:	e4bff51e 	bne	fp,r18,b7f4 <__divdf3+0x704>
    b820:	85bff22e 	bgeu	r16,r22,b7ec <__divdf3+0x6fc>
    b824:	e0c7c83a 	sub	r3,fp,r3
    b828:	1023883a 	mov	r17,r2
    b82c:	003f4606 	br	b548 <__divdf3+0x458>
    b830:	100f883a 	mov	r7,r2
    b834:	003f2b06 	br	b4e4 <__divdf3+0x3f4>
    b838:	180d883a 	mov	r6,r3
    b83c:	003f1306 	br	b48c <__divdf3+0x39c>
    b840:	813fe436 	bltu	r16,r4,b7d4 <__divdf3+0x6e4>
    b844:	0007883a 	mov	r3,zero
    b848:	003f3f06 	br	b548 <__divdf3+0x458>
    b84c:	ba402c36 	bltu	r23,r9,b900 <__divdf3+0x810>
    b850:	4dc05426 	beq	r9,r23,b9a4 <__divdf3+0x8b4>
    b854:	1011883a 	mov	r8,r2
    b858:	003f8906 	br	b680 <__divdf3+0x590>
    b85c:	023fffc4 	movi	r8,-1
    b860:	003f8806 	br	b684 <__divdf3+0x594>
    b864:	1811883a 	mov	r8,r3
    b868:	003f5406 	br	b5bc <__divdf3+0x4cc>
    b86c:	1025883a 	mov	r18,r2
    b870:	003f6d06 	br	b628 <__divdf3+0x538>
    b874:	b827883a 	mov	r19,r23
    b878:	003f8206 	br	b684 <__divdf3+0x594>
    b87c:	010007c4 	movi	r4,31
    b880:	20c02616 	blt	r4,r3,b91c <__divdf3+0x82c>
    b884:	00800804 	movi	r2,32
    b888:	10c5c83a 	sub	r2,r2,r3
    b88c:	888a983a 	sll	r5,r17,r2
    b890:	40c8d83a 	srl	r4,r8,r3
    b894:	4084983a 	sll	r2,r8,r2
    b898:	88e2d83a 	srl	r17,r17,r3
    b89c:	2906b03a 	or	r3,r5,r4
    b8a0:	1004c03a 	cmpne	r2,r2,zero
    b8a4:	1886b03a 	or	r3,r3,r2
    b8a8:	188001cc 	andi	r2,r3,7
    b8ac:	10000726 	beq	r2,zero,b8cc <__divdf3+0x7dc>
    b8b0:	188003cc 	andi	r2,r3,15
    b8b4:	01000104 	movi	r4,4
    b8b8:	11000426 	beq	r2,r4,b8cc <__divdf3+0x7dc>
    b8bc:	1805883a 	mov	r2,r3
    b8c0:	10c00104 	addi	r3,r2,4
    b8c4:	1885803a 	cmpltu	r2,r3,r2
    b8c8:	88a3883a 	add	r17,r17,r2
    b8cc:	8880202c 	andhi	r2,r17,128
    b8d0:	10002726 	beq	r2,zero,b970 <__divdf3+0x880>
    b8d4:	98c0004c 	andi	r3,r19,1
    b8d8:	00800044 	movi	r2,1
    b8dc:	000b883a 	mov	r5,zero
    b8e0:	0025883a 	mov	r18,zero
    b8e4:	003e6106 	br	b26c <__divdf3+0x17c>
    b8e8:	85a1883a 	add	r16,r16,r22
    b8ec:	8585803a 	cmpltu	r2,r16,r22
    b8f0:	1705883a 	add	r2,r2,fp
    b8f4:	14a5883a 	add	r18,r2,r18
    b8f8:	8c7fff84 	addi	r17,r17,-2
    b8fc:	003f1106 	br	b544 <__divdf3+0x454>
    b900:	b589883a 	add	r4,r22,r22
    b904:	25ad803a 	cmpltu	r22,r4,r22
    b908:	b739883a 	add	fp,r22,fp
    b90c:	40bfff84 	addi	r2,r8,-2
    b910:	bf2f883a 	add	r23,r23,fp
    b914:	202d883a 	mov	r22,r4
    b918:	003f9306 	br	b768 <__divdf3+0x678>
    b91c:	013ff844 	movi	r4,-31
    b920:	2085c83a 	sub	r2,r4,r2
    b924:	8888d83a 	srl	r4,r17,r2
    b928:	00800804 	movi	r2,32
    b92c:	18802126 	beq	r3,r2,b9b4 <__divdf3+0x8c4>
    b930:	00801004 	movi	r2,64
    b934:	10c5c83a 	sub	r2,r2,r3
    b938:	8884983a 	sll	r2,r17,r2
    b93c:	1204b03a 	or	r2,r2,r8
    b940:	1004c03a 	cmpne	r2,r2,zero
    b944:	2084b03a 	or	r2,r4,r2
    b948:	144001cc 	andi	r17,r2,7
    b94c:	88000d1e 	bne	r17,zero,b984 <__divdf3+0x894>
    b950:	000b883a 	mov	r5,zero
    b954:	1024d0fa 	srli	r18,r2,3
    b958:	98c0004c 	andi	r3,r19,1
    b95c:	0005883a 	mov	r2,zero
    b960:	9464b03a 	or	r18,r18,r17
    b964:	003e4106 	br	b26c <__divdf3+0x17c>
    b968:	1007883a 	mov	r3,r2
    b96c:	0023883a 	mov	r17,zero
    b970:	880a927a 	slli	r5,r17,9
    b974:	1805883a 	mov	r2,r3
    b978:	8822977a 	slli	r17,r17,29
    b97c:	280ad33a 	srli	r5,r5,12
    b980:	003ff406 	br	b954 <__divdf3+0x864>
    b984:	10c003cc 	andi	r3,r2,15
    b988:	01000104 	movi	r4,4
    b98c:	193ff626 	beq	r3,r4,b968 <__divdf3+0x878>
    b990:	0023883a 	mov	r17,zero
    b994:	003fca06 	br	b8c0 <__divdf3+0x7d0>
    b998:	813fd336 	bltu	r16,r4,b8e8 <__divdf3+0x7f8>
    b99c:	1023883a 	mov	r17,r2
    b9a0:	003fa806 	br	b844 <__divdf3+0x754>
    b9a4:	b0ffd636 	bltu	r22,r3,b900 <__divdf3+0x810>
    b9a8:	1011883a 	mov	r8,r2
    b9ac:	b0ff341e 	bne	r22,r3,b680 <__divdf3+0x590>
    b9b0:	003f3406 	br	b684 <__divdf3+0x594>
    b9b4:	0005883a 	mov	r2,zero
    b9b8:	003fe006 	br	b93c <__divdf3+0x84c>
    b9bc:	00800434 	movhi	r2,16
    b9c0:	89400234 	orhi	r5,r17,8
    b9c4:	10bfffc4 	addi	r2,r2,-1
    b9c8:	b807883a 	mov	r3,r23
    b9cc:	288a703a 	and	r5,r5,r2
    b9d0:	4025883a 	mov	r18,r8
    b9d4:	003e8206 	br	b3e0 <__divdf3+0x2f0>

0000b9d8 <__eqdf2>:
    b9d8:	2804d53a 	srli	r2,r5,20
    b9dc:	3806d53a 	srli	r3,r7,20
    b9e0:	02000434 	movhi	r8,16
    b9e4:	423fffc4 	addi	r8,r8,-1
    b9e8:	1081ffcc 	andi	r2,r2,2047
    b9ec:	0281ffc4 	movi	r10,2047
    b9f0:	2a12703a 	and	r9,r5,r8
    b9f4:	18c1ffcc 	andi	r3,r3,2047
    b9f8:	3a10703a 	and	r8,r7,r8
    b9fc:	280ad7fa 	srli	r5,r5,31
    ba00:	380ed7fa 	srli	r7,r7,31
    ba04:	12801026 	beq	r2,r10,ba48 <__eqdf2+0x70>
    ba08:	0281ffc4 	movi	r10,2047
    ba0c:	1a800a26 	beq	r3,r10,ba38 <__eqdf2+0x60>
    ba10:	10c00226 	beq	r2,r3,ba1c <__eqdf2+0x44>
    ba14:	00800044 	movi	r2,1
    ba18:	f800283a 	ret
    ba1c:	4a3ffd1e 	bne	r9,r8,ba14 <__eqdf2+0x3c>
    ba20:	21bffc1e 	bne	r4,r6,ba14 <__eqdf2+0x3c>
    ba24:	29c00c26 	beq	r5,r7,ba58 <__eqdf2+0x80>
    ba28:	103ffa1e 	bne	r2,zero,ba14 <__eqdf2+0x3c>
    ba2c:	2244b03a 	or	r2,r4,r9
    ba30:	1004c03a 	cmpne	r2,r2,zero
    ba34:	f800283a 	ret
    ba38:	3214b03a 	or	r10,r6,r8
    ba3c:	503ff426 	beq	r10,zero,ba10 <__eqdf2+0x38>
    ba40:	00800044 	movi	r2,1
    ba44:	f800283a 	ret
    ba48:	2254b03a 	or	r10,r4,r9
    ba4c:	503fee26 	beq	r10,zero,ba08 <__eqdf2+0x30>
    ba50:	00800044 	movi	r2,1
    ba54:	f800283a 	ret
    ba58:	0005883a 	mov	r2,zero
    ba5c:	f800283a 	ret

0000ba60 <__gedf2>:
    ba60:	2804d53a 	srli	r2,r5,20
    ba64:	3806d53a 	srli	r3,r7,20
    ba68:	02000434 	movhi	r8,16
    ba6c:	423fffc4 	addi	r8,r8,-1
    ba70:	1081ffcc 	andi	r2,r2,2047
    ba74:	0241ffc4 	movi	r9,2047
    ba78:	2a14703a 	and	r10,r5,r8
    ba7c:	18c1ffcc 	andi	r3,r3,2047
    ba80:	3a10703a 	and	r8,r7,r8
    ba84:	280ad7fa 	srli	r5,r5,31
    ba88:	380ed7fa 	srli	r7,r7,31
    ba8c:	12401d26 	beq	r2,r9,bb04 <__gedf2+0xa4>
    ba90:	0241ffc4 	movi	r9,2047
    ba94:	1a401226 	beq	r3,r9,bae0 <__gedf2+0x80>
    ba98:	1000081e 	bne	r2,zero,babc <__gedf2+0x5c>
    ba9c:	2296b03a 	or	r11,r4,r10
    baa0:	5813003a 	cmpeq	r9,r11,zero
    baa4:	1800091e 	bne	r3,zero,bacc <__gedf2+0x6c>
    baa8:	3218b03a 	or	r12,r6,r8
    baac:	6000071e 	bne	r12,zero,bacc <__gedf2+0x6c>
    bab0:	0005883a 	mov	r2,zero
    bab4:	5800101e 	bne	r11,zero,baf8 <__gedf2+0x98>
    bab8:	f800283a 	ret
    babc:	18000c1e 	bne	r3,zero,baf0 <__gedf2+0x90>
    bac0:	3212b03a 	or	r9,r6,r8
    bac4:	48000c26 	beq	r9,zero,baf8 <__gedf2+0x98>
    bac8:	0013883a 	mov	r9,zero
    bacc:	39c03fcc 	andi	r7,r7,255
    bad0:	48000826 	beq	r9,zero,baf4 <__gedf2+0x94>
    bad4:	38000926 	beq	r7,zero,bafc <__gedf2+0x9c>
    bad8:	00800044 	movi	r2,1
    badc:	f800283a 	ret
    bae0:	3212b03a 	or	r9,r6,r8
    bae4:	483fec26 	beq	r9,zero,ba98 <__gedf2+0x38>
    bae8:	00bfff84 	movi	r2,-2
    baec:	f800283a 	ret
    baf0:	39c03fcc 	andi	r7,r7,255
    baf4:	29c00626 	beq	r5,r7,bb10 <__gedf2+0xb0>
    baf8:	283ff726 	beq	r5,zero,bad8 <__gedf2+0x78>
    bafc:	00bfffc4 	movi	r2,-1
    bb00:	f800283a 	ret
    bb04:	2292b03a 	or	r9,r4,r10
    bb08:	483fe126 	beq	r9,zero,ba90 <__gedf2+0x30>
    bb0c:	003ff606 	br	bae8 <__gedf2+0x88>
    bb10:	18bff916 	blt	r3,r2,baf8 <__gedf2+0x98>
    bb14:	10c00316 	blt	r2,r3,bb24 <__gedf2+0xc4>
    bb18:	42bff736 	bltu	r8,r10,baf8 <__gedf2+0x98>
    bb1c:	52000326 	beq	r10,r8,bb2c <__gedf2+0xcc>
    bb20:	5200042e 	bgeu	r10,r8,bb34 <__gedf2+0xd4>
    bb24:	283fec1e 	bne	r5,zero,bad8 <__gedf2+0x78>
    bb28:	003ff406 	br	bafc <__gedf2+0x9c>
    bb2c:	313ff236 	bltu	r6,r4,baf8 <__gedf2+0x98>
    bb30:	21bffc36 	bltu	r4,r6,bb24 <__gedf2+0xc4>
    bb34:	0005883a 	mov	r2,zero
    bb38:	f800283a 	ret

0000bb3c <__ledf2>:
    bb3c:	2804d53a 	srli	r2,r5,20
    bb40:	3810d53a 	srli	r8,r7,20
    bb44:	00c00434 	movhi	r3,16
    bb48:	18ffffc4 	addi	r3,r3,-1
    bb4c:	1081ffcc 	andi	r2,r2,2047
    bb50:	0241ffc4 	movi	r9,2047
    bb54:	28d4703a 	and	r10,r5,r3
    bb58:	4201ffcc 	andi	r8,r8,2047
    bb5c:	38c6703a 	and	r3,r7,r3
    bb60:	280ad7fa 	srli	r5,r5,31
    bb64:	380ed7fa 	srli	r7,r7,31
    bb68:	12401f26 	beq	r2,r9,bbe8 <__ledf2+0xac>
    bb6c:	0241ffc4 	movi	r9,2047
    bb70:	42401426 	beq	r8,r9,bbc4 <__ledf2+0x88>
    bb74:	1000091e 	bne	r2,zero,bb9c <__ledf2+0x60>
    bb78:	2296b03a 	or	r11,r4,r10
    bb7c:	5813003a 	cmpeq	r9,r11,zero
    bb80:	29403fcc 	andi	r5,r5,255
    bb84:	40000a1e 	bne	r8,zero,bbb0 <__ledf2+0x74>
    bb88:	30d8b03a 	or	r12,r6,r3
    bb8c:	6000081e 	bne	r12,zero,bbb0 <__ledf2+0x74>
    bb90:	0005883a 	mov	r2,zero
    bb94:	5800111e 	bne	r11,zero,bbdc <__ledf2+0xa0>
    bb98:	f800283a 	ret
    bb9c:	29403fcc 	andi	r5,r5,255
    bba0:	40000c1e 	bne	r8,zero,bbd4 <__ledf2+0x98>
    bba4:	30d2b03a 	or	r9,r6,r3
    bba8:	48000c26 	beq	r9,zero,bbdc <__ledf2+0xa0>
    bbac:	0013883a 	mov	r9,zero
    bbb0:	39c03fcc 	andi	r7,r7,255
    bbb4:	48000826 	beq	r9,zero,bbd8 <__ledf2+0x9c>
    bbb8:	38001126 	beq	r7,zero,bc00 <__ledf2+0xc4>
    bbbc:	00800044 	movi	r2,1
    bbc0:	f800283a 	ret
    bbc4:	30d2b03a 	or	r9,r6,r3
    bbc8:	483fea26 	beq	r9,zero,bb74 <__ledf2+0x38>
    bbcc:	00800084 	movi	r2,2
    bbd0:	f800283a 	ret
    bbd4:	39c03fcc 	andi	r7,r7,255
    bbd8:	39400726 	beq	r7,r5,bbf8 <__ledf2+0xbc>
    bbdc:	2800081e 	bne	r5,zero,bc00 <__ledf2+0xc4>
    bbe0:	00800044 	movi	r2,1
    bbe4:	f800283a 	ret
    bbe8:	2292b03a 	or	r9,r4,r10
    bbec:	483fdf26 	beq	r9,zero,bb6c <__ledf2+0x30>
    bbf0:	00800084 	movi	r2,2
    bbf4:	f800283a 	ret
    bbf8:	4080030e 	bge	r8,r2,bc08 <__ledf2+0xcc>
    bbfc:	383fef26 	beq	r7,zero,bbbc <__ledf2+0x80>
    bc00:	00bfffc4 	movi	r2,-1
    bc04:	f800283a 	ret
    bc08:	123feb16 	blt	r2,r8,bbb8 <__ledf2+0x7c>
    bc0c:	1abff336 	bltu	r3,r10,bbdc <__ledf2+0xa0>
    bc10:	50c00326 	beq	r10,r3,bc20 <__ledf2+0xe4>
    bc14:	50c0042e 	bgeu	r10,r3,bc28 <__ledf2+0xec>
    bc18:	283fe81e 	bne	r5,zero,bbbc <__ledf2+0x80>
    bc1c:	003ff806 	br	bc00 <__ledf2+0xc4>
    bc20:	313fee36 	bltu	r6,r4,bbdc <__ledf2+0xa0>
    bc24:	21bffc36 	bltu	r4,r6,bc18 <__ledf2+0xdc>
    bc28:	0005883a 	mov	r2,zero
    bc2c:	f800283a 	ret

0000bc30 <__muldf3>:
    bc30:	defff304 	addi	sp,sp,-52
    bc34:	2804d53a 	srli	r2,r5,20
    bc38:	dd800915 	stw	r22,36(sp)
    bc3c:	282cd7fa 	srli	r22,r5,31
    bc40:	dc000315 	stw	r16,12(sp)
    bc44:	04000434 	movhi	r16,16
    bc48:	dd400815 	stw	r21,32(sp)
    bc4c:	dc800515 	stw	r18,20(sp)
    bc50:	843fffc4 	addi	r16,r16,-1
    bc54:	dfc00c15 	stw	ra,48(sp)
    bc58:	df000b15 	stw	fp,44(sp)
    bc5c:	ddc00a15 	stw	r23,40(sp)
    bc60:	dd000715 	stw	r20,28(sp)
    bc64:	dcc00615 	stw	r19,24(sp)
    bc68:	dc400415 	stw	r17,16(sp)
    bc6c:	1481ffcc 	andi	r18,r2,2047
    bc70:	2c20703a 	and	r16,r5,r16
    bc74:	b02b883a 	mov	r21,r22
    bc78:	b2403fcc 	andi	r9,r22,255
    bc7c:	90006026 	beq	r18,zero,be00 <__muldf3+0x1d0>
    bc80:	0081ffc4 	movi	r2,2047
    bc84:	2029883a 	mov	r20,r4
    bc88:	90803626 	beq	r18,r2,bd64 <__muldf3+0x134>
    bc8c:	80800434 	orhi	r2,r16,16
    bc90:	100490fa 	slli	r2,r2,3
    bc94:	2020d77a 	srli	r16,r4,29
    bc98:	202890fa 	slli	r20,r4,3
    bc9c:	94bf0044 	addi	r18,r18,-1023
    bca0:	80a0b03a 	or	r16,r16,r2
    bca4:	0027883a 	mov	r19,zero
    bca8:	0039883a 	mov	fp,zero
    bcac:	3804d53a 	srli	r2,r7,20
    bcb0:	382ed7fa 	srli	r23,r7,31
    bcb4:	04400434 	movhi	r17,16
    bcb8:	8c7fffc4 	addi	r17,r17,-1
    bcbc:	1081ffcc 	andi	r2,r2,2047
    bcc0:	3011883a 	mov	r8,r6
    bcc4:	3c62703a 	and	r17,r7,r17
    bcc8:	ba803fcc 	andi	r10,r23,255
    bccc:	10006d26 	beq	r2,zero,be84 <__muldf3+0x254>
    bcd0:	00c1ffc4 	movi	r3,2047
    bcd4:	10c06526 	beq	r2,r3,be6c <__muldf3+0x23c>
    bcd8:	88c00434 	orhi	r3,r17,16
    bcdc:	180690fa 	slli	r3,r3,3
    bce0:	3022d77a 	srli	r17,r6,29
    bce4:	301090fa 	slli	r8,r6,3
    bce8:	10bf0044 	addi	r2,r2,-1023
    bcec:	88e2b03a 	or	r17,r17,r3
    bcf0:	000b883a 	mov	r5,zero
    bcf4:	9085883a 	add	r2,r18,r2
    bcf8:	2cc8b03a 	or	r4,r5,r19
    bcfc:	00c003c4 	movi	r3,15
    bd00:	bdacf03a 	xor	r22,r23,r22
    bd04:	12c00044 	addi	r11,r2,1
    bd08:	19009936 	bltu	r3,r4,bf70 <__muldf3+0x340>
    bd0c:	200890ba 	slli	r4,r4,2
    bd10:	00c00074 	movhi	r3,1
    bd14:	18ef4904 	addi	r3,r3,-17116
    bd18:	20c9883a 	add	r4,r4,r3
    bd1c:	20c00017 	ldw	r3,0(r4)
    bd20:	1800683a 	jmp	r3
    bd24:	0000bf70 	cmpltui	zero,zero,765
    bd28:	0000bd84 	movi	zero,758
    bd2c:	0000bd84 	movi	zero,758
    bd30:	0000bd80 	call	bd8 <___vfprintf_internal_r+0x2c0>
    bd34:	0000bf4c 	andi	zero,zero,765
    bd38:	0000bf4c 	andi	zero,zero,765
    bd3c:	0000bf34 	movhi	zero,764
    bd40:	0000bd80 	call	bd8 <___vfprintf_internal_r+0x2c0>
    bd44:	0000bf4c 	andi	zero,zero,765
    bd48:	0000bf34 	movhi	zero,764
    bd4c:	0000bf4c 	andi	zero,zero,765
    bd50:	0000bd80 	call	bd8 <___vfprintf_internal_r+0x2c0>
    bd54:	0000bf5c 	xori	zero,zero,765
    bd58:	0000bf5c 	xori	zero,zero,765
    bd5c:	0000bf5c 	xori	zero,zero,765
    bd60:	0000c178 	rdprs	zero,zero,773
    bd64:	2404b03a 	or	r2,r4,r16
    bd68:	10006f1e 	bne	r2,zero,bf28 <__muldf3+0x2f8>
    bd6c:	04c00204 	movi	r19,8
    bd70:	0021883a 	mov	r16,zero
    bd74:	0029883a 	mov	r20,zero
    bd78:	07000084 	movi	fp,2
    bd7c:	003fcb06 	br	bcac <__muldf3+0x7c>
    bd80:	502d883a 	mov	r22,r10
    bd84:	00800084 	movi	r2,2
    bd88:	28805726 	beq	r5,r2,bee8 <__muldf3+0x2b8>
    bd8c:	008000c4 	movi	r2,3
    bd90:	28816626 	beq	r5,r2,c32c <__muldf3+0x6fc>
    bd94:	00800044 	movi	r2,1
    bd98:	2881411e 	bne	r5,r2,c2a0 <__muldf3+0x670>
    bd9c:	b02b883a 	mov	r21,r22
    bda0:	0005883a 	mov	r2,zero
    bda4:	000b883a 	mov	r5,zero
    bda8:	0029883a 	mov	r20,zero
    bdac:	1004953a 	slli	r2,r2,20
    bdb0:	a8c03fcc 	andi	r3,r21,255
    bdb4:	04400434 	movhi	r17,16
    bdb8:	8c7fffc4 	addi	r17,r17,-1
    bdbc:	180697fa 	slli	r3,r3,31
    bdc0:	2c4a703a 	and	r5,r5,r17
    bdc4:	288ab03a 	or	r5,r5,r2
    bdc8:	28c6b03a 	or	r3,r5,r3
    bdcc:	a005883a 	mov	r2,r20
    bdd0:	dfc00c17 	ldw	ra,48(sp)
    bdd4:	df000b17 	ldw	fp,44(sp)
    bdd8:	ddc00a17 	ldw	r23,40(sp)
    bddc:	dd800917 	ldw	r22,36(sp)
    bde0:	dd400817 	ldw	r21,32(sp)
    bde4:	dd000717 	ldw	r20,28(sp)
    bde8:	dcc00617 	ldw	r19,24(sp)
    bdec:	dc800517 	ldw	r18,20(sp)
    bdf0:	dc400417 	ldw	r17,16(sp)
    bdf4:	dc000317 	ldw	r16,12(sp)
    bdf8:	dec00d04 	addi	sp,sp,52
    bdfc:	f800283a 	ret
    be00:	2404b03a 	or	r2,r4,r16
    be04:	2027883a 	mov	r19,r4
    be08:	10004226 	beq	r2,zero,bf14 <__muldf3+0x2e4>
    be0c:	8000fc26 	beq	r16,zero,c200 <__muldf3+0x5d0>
    be10:	8009883a 	mov	r4,r16
    be14:	d9800215 	stw	r6,8(sp)
    be18:	d9c00015 	stw	r7,0(sp)
    be1c:	da400115 	stw	r9,4(sp)
    be20:	000ce480 	call	ce48 <__clzsi2>
    be24:	d9800217 	ldw	r6,8(sp)
    be28:	d9c00017 	ldw	r7,0(sp)
    be2c:	da400117 	ldw	r9,4(sp)
    be30:	113ffd44 	addi	r4,r2,-11
    be34:	00c00704 	movi	r3,28
    be38:	1900ed16 	blt	r3,r4,c1f0 <__muldf3+0x5c0>
    be3c:	00c00744 	movi	r3,29
    be40:	147ffe04 	addi	r17,r2,-8
    be44:	1907c83a 	sub	r3,r3,r4
    be48:	8460983a 	sll	r16,r16,r17
    be4c:	98c6d83a 	srl	r3,r19,r3
    be50:	9c68983a 	sll	r20,r19,r17
    be54:	1c20b03a 	or	r16,r3,r16
    be58:	1080fcc4 	addi	r2,r2,1011
    be5c:	00a5c83a 	sub	r18,zero,r2
    be60:	0027883a 	mov	r19,zero
    be64:	0039883a 	mov	fp,zero
    be68:	003f9006 	br	bcac <__muldf3+0x7c>
    be6c:	3446b03a 	or	r3,r6,r17
    be70:	1800261e 	bne	r3,zero,bf0c <__muldf3+0x2dc>
    be74:	0023883a 	mov	r17,zero
    be78:	0011883a 	mov	r8,zero
    be7c:	01400084 	movi	r5,2
    be80:	003f9c06 	br	bcf4 <__muldf3+0xc4>
    be84:	3446b03a 	or	r3,r6,r17
    be88:	18001c26 	beq	r3,zero,befc <__muldf3+0x2cc>
    be8c:	8800ce26 	beq	r17,zero,c1c8 <__muldf3+0x598>
    be90:	8809883a 	mov	r4,r17
    be94:	d9800215 	stw	r6,8(sp)
    be98:	da400115 	stw	r9,4(sp)
    be9c:	da800015 	stw	r10,0(sp)
    bea0:	000ce480 	call	ce48 <__clzsi2>
    bea4:	d9800217 	ldw	r6,8(sp)
    bea8:	da400117 	ldw	r9,4(sp)
    beac:	da800017 	ldw	r10,0(sp)
    beb0:	113ffd44 	addi	r4,r2,-11
    beb4:	00c00704 	movi	r3,28
    beb8:	1900bf16 	blt	r3,r4,c1b8 <__muldf3+0x588>
    bebc:	00c00744 	movi	r3,29
    bec0:	123ffe04 	addi	r8,r2,-8
    bec4:	1907c83a 	sub	r3,r3,r4
    bec8:	8a22983a 	sll	r17,r17,r8
    becc:	30c6d83a 	srl	r3,r6,r3
    bed0:	3210983a 	sll	r8,r6,r8
    bed4:	1c62b03a 	or	r17,r3,r17
    bed8:	1080fcc4 	addi	r2,r2,1011
    bedc:	0085c83a 	sub	r2,zero,r2
    bee0:	000b883a 	mov	r5,zero
    bee4:	003f8306 	br	bcf4 <__muldf3+0xc4>
    bee8:	b02b883a 	mov	r21,r22
    beec:	0081ffc4 	movi	r2,2047
    bef0:	000b883a 	mov	r5,zero
    bef4:	0029883a 	mov	r20,zero
    bef8:	003fac06 	br	bdac <__muldf3+0x17c>
    befc:	0023883a 	mov	r17,zero
    bf00:	0011883a 	mov	r8,zero
    bf04:	01400044 	movi	r5,1
    bf08:	003f7a06 	br	bcf4 <__muldf3+0xc4>
    bf0c:	014000c4 	movi	r5,3
    bf10:	003f7806 	br	bcf4 <__muldf3+0xc4>
    bf14:	04c00104 	movi	r19,4
    bf18:	0021883a 	mov	r16,zero
    bf1c:	0029883a 	mov	r20,zero
    bf20:	07000044 	movi	fp,1
    bf24:	003f6106 	br	bcac <__muldf3+0x7c>
    bf28:	04c00304 	movi	r19,12
    bf2c:	070000c4 	movi	fp,3
    bf30:	003f5e06 	br	bcac <__muldf3+0x7c>
    bf34:	01400434 	movhi	r5,16
    bf38:	002b883a 	mov	r21,zero
    bf3c:	297fffc4 	addi	r5,r5,-1
    bf40:	053fffc4 	movi	r20,-1
    bf44:	0081ffc4 	movi	r2,2047
    bf48:	003f9806 	br	bdac <__muldf3+0x17c>
    bf4c:	8023883a 	mov	r17,r16
    bf50:	a011883a 	mov	r8,r20
    bf54:	e00b883a 	mov	r5,fp
    bf58:	003f8a06 	br	bd84 <__muldf3+0x154>
    bf5c:	8023883a 	mov	r17,r16
    bf60:	a011883a 	mov	r8,r20
    bf64:	482d883a 	mov	r22,r9
    bf68:	e00b883a 	mov	r5,fp
    bf6c:	003f8506 	br	bd84 <__muldf3+0x154>
    bf70:	a00ad43a 	srli	r5,r20,16
    bf74:	401ad43a 	srli	r13,r8,16
    bf78:	a53fffcc 	andi	r20,r20,65535
    bf7c:	423fffcc 	andi	r8,r8,65535
    bf80:	4519383a 	mul	r12,r8,r20
    bf84:	4147383a 	mul	r3,r8,r5
    bf88:	6d09383a 	mul	r4,r13,r20
    bf8c:	600cd43a 	srli	r6,r12,16
    bf90:	2b5d383a 	mul	r14,r5,r13
    bf94:	20c9883a 	add	r4,r4,r3
    bf98:	310d883a 	add	r6,r6,r4
    bf9c:	30c0022e 	bgeu	r6,r3,bfa8 <__muldf3+0x378>
    bfa0:	00c00074 	movhi	r3,1
    bfa4:	70dd883a 	add	r14,r14,r3
    bfa8:	8826d43a 	srli	r19,r17,16
    bfac:	8bffffcc 	andi	r15,r17,65535
    bfb0:	7d23383a 	mul	r17,r15,r20
    bfb4:	7949383a 	mul	r4,r15,r5
    bfb8:	9d29383a 	mul	r20,r19,r20
    bfbc:	8814d43a 	srli	r10,r17,16
    bfc0:	3012943a 	slli	r9,r6,16
    bfc4:	a129883a 	add	r20,r20,r4
    bfc8:	633fffcc 	andi	r12,r12,65535
    bfcc:	5515883a 	add	r10,r10,r20
    bfd0:	3006d43a 	srli	r3,r6,16
    bfd4:	4b13883a 	add	r9,r9,r12
    bfd8:	2ccb383a 	mul	r5,r5,r19
    bfdc:	5100022e 	bgeu	r10,r4,bfe8 <__muldf3+0x3b8>
    bfe0:	01000074 	movhi	r4,1
    bfe4:	290b883a 	add	r5,r5,r4
    bfe8:	802ad43a 	srli	r21,r16,16
    bfec:	843fffcc 	andi	r16,r16,65535
    bff0:	440d383a 	mul	r6,r8,r16
    bff4:	4565383a 	mul	r18,r8,r21
    bff8:	8349383a 	mul	r4,r16,r13
    bffc:	500e943a 	slli	r7,r10,16
    c000:	3010d43a 	srli	r8,r6,16
    c004:	5028d43a 	srli	r20,r10,16
    c008:	2489883a 	add	r4,r4,r18
    c00c:	8abfffcc 	andi	r10,r17,65535
    c010:	3a95883a 	add	r10,r7,r10
    c014:	4119883a 	add	r12,r8,r4
    c018:	a169883a 	add	r20,r20,r5
    c01c:	1a87883a 	add	r3,r3,r10
    c020:	6d5b383a 	mul	r13,r13,r21
    c024:	6480022e 	bgeu	r12,r18,c030 <__muldf3+0x400>
    c028:	01000074 	movhi	r4,1
    c02c:	691b883a 	add	r13,r13,r4
    c030:	7c25383a 	mul	r18,r15,r16
    c034:	7d4b383a 	mul	r5,r15,r21
    c038:	84cf383a 	mul	r7,r16,r19
    c03c:	901ed43a 	srli	r15,r18,16
    c040:	6008d43a 	srli	r4,r12,16
    c044:	6010943a 	slli	r8,r12,16
    c048:	394f883a 	add	r7,r7,r5
    c04c:	333fffcc 	andi	r12,r6,65535
    c050:	79df883a 	add	r15,r15,r7
    c054:	235b883a 	add	r13,r4,r13
    c058:	9d63383a 	mul	r17,r19,r21
    c05c:	4309883a 	add	r4,r8,r12
    c060:	7940022e 	bgeu	r15,r5,c06c <__muldf3+0x43c>
    c064:	01400074 	movhi	r5,1
    c068:	8963883a 	add	r17,r17,r5
    c06c:	780a943a 	slli	r5,r15,16
    c070:	91bfffcc 	andi	r6,r18,65535
    c074:	70c7883a 	add	r3,r14,r3
    c078:	298d883a 	add	r6,r5,r6
    c07c:	1a8f803a 	cmpltu	r7,r3,r10
    c080:	350b883a 	add	r5,r6,r20
    c084:	20c7883a 	add	r3,r4,r3
    c088:	3955883a 	add	r10,r7,r5
    c08c:	1909803a 	cmpltu	r4,r3,r4
    c090:	6a91883a 	add	r8,r13,r10
    c094:	780cd43a 	srli	r6,r15,16
    c098:	2219883a 	add	r12,r4,r8
    c09c:	2d0b803a 	cmpltu	r5,r5,r20
    c0a0:	51cf803a 	cmpltu	r7,r10,r7
    c0a4:	29ceb03a 	or	r7,r5,r7
    c0a8:	4351803a 	cmpltu	r8,r8,r13
    c0ac:	610b803a 	cmpltu	r5,r12,r4
    c0b0:	4148b03a 	or	r4,r8,r5
    c0b4:	398f883a 	add	r7,r7,r6
    c0b8:	3909883a 	add	r4,r7,r4
    c0bc:	1810927a 	slli	r8,r3,9
    c0c0:	2449883a 	add	r4,r4,r17
    c0c4:	2008927a 	slli	r4,r4,9
    c0c8:	6022d5fa 	srli	r17,r12,23
    c0cc:	1806d5fa 	srli	r3,r3,23
    c0d0:	4252b03a 	or	r9,r8,r9
    c0d4:	600a927a 	slli	r5,r12,9
    c0d8:	4810c03a 	cmpne	r8,r9,zero
    c0dc:	2462b03a 	or	r17,r4,r17
    c0e0:	40c6b03a 	or	r3,r8,r3
    c0e4:	8900402c 	andhi	r4,r17,256
    c0e8:	1950b03a 	or	r8,r3,r5
    c0ec:	20000726 	beq	r4,zero,c10c <__muldf3+0x4dc>
    c0f0:	4006d07a 	srli	r3,r8,1
    c0f4:	880497fa 	slli	r2,r17,31
    c0f8:	4200004c 	andi	r8,r8,1
    c0fc:	8822d07a 	srli	r17,r17,1
    c100:	1a10b03a 	or	r8,r3,r8
    c104:	1210b03a 	or	r8,r2,r8
    c108:	5805883a 	mov	r2,r11
    c10c:	1140ffc4 	addi	r5,r2,1023
    c110:	0140440e 	bge	zero,r5,c224 <__muldf3+0x5f4>
    c114:	40c001cc 	andi	r3,r8,7
    c118:	18000726 	beq	r3,zero,c138 <__muldf3+0x508>
    c11c:	40c003cc 	andi	r3,r8,15
    c120:	01000104 	movi	r4,4
    c124:	19000426 	beq	r3,r4,c138 <__muldf3+0x508>
    c128:	4107883a 	add	r3,r8,r4
    c12c:	1a11803a 	cmpltu	r8,r3,r8
    c130:	8a23883a 	add	r17,r17,r8
    c134:	1811883a 	mov	r8,r3
    c138:	88c0402c 	andhi	r3,r17,256
    c13c:	18000426 	beq	r3,zero,c150 <__muldf3+0x520>
    c140:	11410004 	addi	r5,r2,1024
    c144:	00bfc034 	movhi	r2,65280
    c148:	10bfffc4 	addi	r2,r2,-1
    c14c:	88a2703a 	and	r17,r17,r2
    c150:	0081ff84 	movi	r2,2046
    c154:	117f6416 	blt	r2,r5,bee8 <__muldf3+0x2b8>
    c158:	8828977a 	slli	r20,r17,29
    c15c:	4010d0fa 	srli	r8,r8,3
    c160:	8822927a 	slli	r17,r17,9
    c164:	2881ffcc 	andi	r2,r5,2047
    c168:	a228b03a 	or	r20,r20,r8
    c16c:	880ad33a 	srli	r5,r17,12
    c170:	b02b883a 	mov	r21,r22
    c174:	003f0d06 	br	bdac <__muldf3+0x17c>
    c178:	8080022c 	andhi	r2,r16,8
    c17c:	10000926 	beq	r2,zero,c1a4 <__muldf3+0x574>
    c180:	8880022c 	andhi	r2,r17,8
    c184:	1000071e 	bne	r2,zero,c1a4 <__muldf3+0x574>
    c188:	00800434 	movhi	r2,16
    c18c:	89400234 	orhi	r5,r17,8
    c190:	10bfffc4 	addi	r2,r2,-1
    c194:	b82b883a 	mov	r21,r23
    c198:	288a703a 	and	r5,r5,r2
    c19c:	4029883a 	mov	r20,r8
    c1a0:	003f6806 	br	bf44 <__muldf3+0x314>
    c1a4:	00800434 	movhi	r2,16
    c1a8:	81400234 	orhi	r5,r16,8
    c1ac:	10bfffc4 	addi	r2,r2,-1
    c1b0:	288a703a 	and	r5,r5,r2
    c1b4:	003f6306 	br	bf44 <__muldf3+0x314>
    c1b8:	147ff604 	addi	r17,r2,-40
    c1bc:	3462983a 	sll	r17,r6,r17
    c1c0:	0011883a 	mov	r8,zero
    c1c4:	003f4406 	br	bed8 <__muldf3+0x2a8>
    c1c8:	3009883a 	mov	r4,r6
    c1cc:	d9800215 	stw	r6,8(sp)
    c1d0:	da400115 	stw	r9,4(sp)
    c1d4:	da800015 	stw	r10,0(sp)
    c1d8:	000ce480 	call	ce48 <__clzsi2>
    c1dc:	10800804 	addi	r2,r2,32
    c1e0:	da800017 	ldw	r10,0(sp)
    c1e4:	da400117 	ldw	r9,4(sp)
    c1e8:	d9800217 	ldw	r6,8(sp)
    c1ec:	003f3006 	br	beb0 <__muldf3+0x280>
    c1f0:	143ff604 	addi	r16,r2,-40
    c1f4:	9c20983a 	sll	r16,r19,r16
    c1f8:	0029883a 	mov	r20,zero
    c1fc:	003f1606 	br	be58 <__muldf3+0x228>
    c200:	d9800215 	stw	r6,8(sp)
    c204:	d9c00015 	stw	r7,0(sp)
    c208:	da400115 	stw	r9,4(sp)
    c20c:	000ce480 	call	ce48 <__clzsi2>
    c210:	10800804 	addi	r2,r2,32
    c214:	da400117 	ldw	r9,4(sp)
    c218:	d9c00017 	ldw	r7,0(sp)
    c21c:	d9800217 	ldw	r6,8(sp)
    c220:	003f0306 	br	be30 <__muldf3+0x200>
    c224:	00c00044 	movi	r3,1
    c228:	1947c83a 	sub	r3,r3,r5
    c22c:	00800e04 	movi	r2,56
    c230:	10feda16 	blt	r2,r3,bd9c <__muldf3+0x16c>
    c234:	008007c4 	movi	r2,31
    c238:	10c01b16 	blt	r2,r3,c2a8 <__muldf3+0x678>
    c23c:	00800804 	movi	r2,32
    c240:	10c5c83a 	sub	r2,r2,r3
    c244:	888a983a 	sll	r5,r17,r2
    c248:	40c8d83a 	srl	r4,r8,r3
    c24c:	4084983a 	sll	r2,r8,r2
    c250:	88e2d83a 	srl	r17,r17,r3
    c254:	2906b03a 	or	r3,r5,r4
    c258:	1004c03a 	cmpne	r2,r2,zero
    c25c:	1886b03a 	or	r3,r3,r2
    c260:	188001cc 	andi	r2,r3,7
    c264:	10000726 	beq	r2,zero,c284 <__muldf3+0x654>
    c268:	188003cc 	andi	r2,r3,15
    c26c:	01000104 	movi	r4,4
    c270:	11000426 	beq	r2,r4,c284 <__muldf3+0x654>
    c274:	1805883a 	mov	r2,r3
    c278:	10c00104 	addi	r3,r2,4
    c27c:	1885803a 	cmpltu	r2,r3,r2
    c280:	88a3883a 	add	r17,r17,r2
    c284:	8880202c 	andhi	r2,r17,128
    c288:	10001c26 	beq	r2,zero,c2fc <__muldf3+0x6cc>
    c28c:	b02b883a 	mov	r21,r22
    c290:	00800044 	movi	r2,1
    c294:	000b883a 	mov	r5,zero
    c298:	0029883a 	mov	r20,zero
    c29c:	003ec306 	br	bdac <__muldf3+0x17c>
    c2a0:	5805883a 	mov	r2,r11
    c2a4:	003f9906 	br	c10c <__muldf3+0x4dc>
    c2a8:	00bff844 	movi	r2,-31
    c2ac:	1145c83a 	sub	r2,r2,r5
    c2b0:	8888d83a 	srl	r4,r17,r2
    c2b4:	00800804 	movi	r2,32
    c2b8:	18801a26 	beq	r3,r2,c324 <__muldf3+0x6f4>
    c2bc:	00801004 	movi	r2,64
    c2c0:	10c5c83a 	sub	r2,r2,r3
    c2c4:	8884983a 	sll	r2,r17,r2
    c2c8:	1204b03a 	or	r2,r2,r8
    c2cc:	1004c03a 	cmpne	r2,r2,zero
    c2d0:	2084b03a 	or	r2,r4,r2
    c2d4:	144001cc 	andi	r17,r2,7
    c2d8:	88000d1e 	bne	r17,zero,c310 <__muldf3+0x6e0>
    c2dc:	000b883a 	mov	r5,zero
    c2e0:	1028d0fa 	srli	r20,r2,3
    c2e4:	b02b883a 	mov	r21,r22
    c2e8:	0005883a 	mov	r2,zero
    c2ec:	a468b03a 	or	r20,r20,r17
    c2f0:	003eae06 	br	bdac <__muldf3+0x17c>
    c2f4:	1007883a 	mov	r3,r2
    c2f8:	0023883a 	mov	r17,zero
    c2fc:	880a927a 	slli	r5,r17,9
    c300:	1805883a 	mov	r2,r3
    c304:	8822977a 	slli	r17,r17,29
    c308:	280ad33a 	srli	r5,r5,12
    c30c:	003ff406 	br	c2e0 <__muldf3+0x6b0>
    c310:	10c003cc 	andi	r3,r2,15
    c314:	01000104 	movi	r4,4
    c318:	193ff626 	beq	r3,r4,c2f4 <__muldf3+0x6c4>
    c31c:	0023883a 	mov	r17,zero
    c320:	003fd506 	br	c278 <__muldf3+0x648>
    c324:	0005883a 	mov	r2,zero
    c328:	003fe706 	br	c2c8 <__muldf3+0x698>
    c32c:	00800434 	movhi	r2,16
    c330:	89400234 	orhi	r5,r17,8
    c334:	10bfffc4 	addi	r2,r2,-1
    c338:	b02b883a 	mov	r21,r22
    c33c:	288a703a 	and	r5,r5,r2
    c340:	4029883a 	mov	r20,r8
    c344:	003eff06 	br	bf44 <__muldf3+0x314>

0000c348 <__subdf3>:
    c348:	02000434 	movhi	r8,16
    c34c:	423fffc4 	addi	r8,r8,-1
    c350:	defffb04 	addi	sp,sp,-20
    c354:	2a14703a 	and	r10,r5,r8
    c358:	3812d53a 	srli	r9,r7,20
    c35c:	3a10703a 	and	r8,r7,r8
    c360:	2006d77a 	srli	r3,r4,29
    c364:	3004d77a 	srli	r2,r6,29
    c368:	dc000015 	stw	r16,0(sp)
    c36c:	501490fa 	slli	r10,r10,3
    c370:	2820d53a 	srli	r16,r5,20
    c374:	401090fa 	slli	r8,r8,3
    c378:	dc800215 	stw	r18,8(sp)
    c37c:	dc400115 	stw	r17,4(sp)
    c380:	dfc00415 	stw	ra,16(sp)
    c384:	202290fa 	slli	r17,r4,3
    c388:	dcc00315 	stw	r19,12(sp)
    c38c:	4a41ffcc 	andi	r9,r9,2047
    c390:	0101ffc4 	movi	r4,2047
    c394:	2824d7fa 	srli	r18,r5,31
    c398:	8401ffcc 	andi	r16,r16,2047
    c39c:	50c6b03a 	or	r3,r10,r3
    c3a0:	380ed7fa 	srli	r7,r7,31
    c3a4:	408ab03a 	or	r5,r8,r2
    c3a8:	300c90fa 	slli	r6,r6,3
    c3ac:	49009626 	beq	r9,r4,c608 <__subdf3+0x2c0>
    c3b0:	39c0005c 	xori	r7,r7,1
    c3b4:	8245c83a 	sub	r2,r16,r9
    c3b8:	3c807426 	beq	r7,r18,c58c <__subdf3+0x244>
    c3bc:	0080af0e 	bge	zero,r2,c67c <__subdf3+0x334>
    c3c0:	48002a1e 	bne	r9,zero,c46c <__subdf3+0x124>
    c3c4:	2988b03a 	or	r4,r5,r6
    c3c8:	20009a1e 	bne	r4,zero,c634 <__subdf3+0x2ec>
    c3cc:	888001cc 	andi	r2,r17,7
    c3d0:	10000726 	beq	r2,zero,c3f0 <__subdf3+0xa8>
    c3d4:	888003cc 	andi	r2,r17,15
    c3d8:	01000104 	movi	r4,4
    c3dc:	11000426 	beq	r2,r4,c3f0 <__subdf3+0xa8>
    c3e0:	890b883a 	add	r5,r17,r4
    c3e4:	2c63803a 	cmpltu	r17,r5,r17
    c3e8:	1c47883a 	add	r3,r3,r17
    c3ec:	2823883a 	mov	r17,r5
    c3f0:	1880202c 	andhi	r2,r3,128
    c3f4:	10005926 	beq	r2,zero,c55c <__subdf3+0x214>
    c3f8:	84000044 	addi	r16,r16,1
    c3fc:	0081ffc4 	movi	r2,2047
    c400:	8080be26 	beq	r16,r2,c6fc <__subdf3+0x3b4>
    c404:	017fe034 	movhi	r5,65408
    c408:	297fffc4 	addi	r5,r5,-1
    c40c:	1946703a 	and	r3,r3,r5
    c410:	1804977a 	slli	r2,r3,29
    c414:	1806927a 	slli	r3,r3,9
    c418:	8822d0fa 	srli	r17,r17,3
    c41c:	8401ffcc 	andi	r16,r16,2047
    c420:	180ad33a 	srli	r5,r3,12
    c424:	9100004c 	andi	r4,r18,1
    c428:	1444b03a 	or	r2,r2,r17
    c42c:	80c1ffcc 	andi	r3,r16,2047
    c430:	1820953a 	slli	r16,r3,20
    c434:	20c03fcc 	andi	r3,r4,255
    c438:	180897fa 	slli	r4,r3,31
    c43c:	00c00434 	movhi	r3,16
    c440:	18ffffc4 	addi	r3,r3,-1
    c444:	28c6703a 	and	r3,r5,r3
    c448:	1c06b03a 	or	r3,r3,r16
    c44c:	1906b03a 	or	r3,r3,r4
    c450:	dfc00417 	ldw	ra,16(sp)
    c454:	dcc00317 	ldw	r19,12(sp)
    c458:	dc800217 	ldw	r18,8(sp)
    c45c:	dc400117 	ldw	r17,4(sp)
    c460:	dc000017 	ldw	r16,0(sp)
    c464:	dec00504 	addi	sp,sp,20
    c468:	f800283a 	ret
    c46c:	0101ffc4 	movi	r4,2047
    c470:	813fd626 	beq	r16,r4,c3cc <__subdf3+0x84>
    c474:	29402034 	orhi	r5,r5,128
    c478:	01000e04 	movi	r4,56
    c47c:	2080a316 	blt	r4,r2,c70c <__subdf3+0x3c4>
    c480:	010007c4 	movi	r4,31
    c484:	2080c616 	blt	r4,r2,c7a0 <__subdf3+0x458>
    c488:	01000804 	movi	r4,32
    c48c:	2089c83a 	sub	r4,r4,r2
    c490:	2910983a 	sll	r8,r5,r4
    c494:	308ed83a 	srl	r7,r6,r2
    c498:	3108983a 	sll	r4,r6,r4
    c49c:	2884d83a 	srl	r2,r5,r2
    c4a0:	41ccb03a 	or	r6,r8,r7
    c4a4:	2008c03a 	cmpne	r4,r4,zero
    c4a8:	310cb03a 	or	r6,r6,r4
    c4ac:	898dc83a 	sub	r6,r17,r6
    c4b0:	89a3803a 	cmpltu	r17,r17,r6
    c4b4:	1887c83a 	sub	r3,r3,r2
    c4b8:	1c47c83a 	sub	r3,r3,r17
    c4bc:	3023883a 	mov	r17,r6
    c4c0:	1880202c 	andhi	r2,r3,128
    c4c4:	10002326 	beq	r2,zero,c554 <__subdf3+0x20c>
    c4c8:	04c02034 	movhi	r19,128
    c4cc:	9cffffc4 	addi	r19,r19,-1
    c4d0:	1ce6703a 	and	r19,r3,r19
    c4d4:	98007a26 	beq	r19,zero,c6c0 <__subdf3+0x378>
    c4d8:	9809883a 	mov	r4,r19
    c4dc:	000ce480 	call	ce48 <__clzsi2>
    c4e0:	113ffe04 	addi	r4,r2,-8
    c4e4:	00c007c4 	movi	r3,31
    c4e8:	19007b16 	blt	r3,r4,c6d8 <__subdf3+0x390>
    c4ec:	00800804 	movi	r2,32
    c4f0:	1105c83a 	sub	r2,r2,r4
    c4f4:	8884d83a 	srl	r2,r17,r2
    c4f8:	9906983a 	sll	r3,r19,r4
    c4fc:	8922983a 	sll	r17,r17,r4
    c500:	10c4b03a 	or	r2,r2,r3
    c504:	24007816 	blt	r4,r16,c6e8 <__subdf3+0x3a0>
    c508:	2421c83a 	sub	r16,r4,r16
    c50c:	80c00044 	addi	r3,r16,1
    c510:	010007c4 	movi	r4,31
    c514:	20c09516 	blt	r4,r3,c76c <__subdf3+0x424>
    c518:	01400804 	movi	r5,32
    c51c:	28cbc83a 	sub	r5,r5,r3
    c520:	88c8d83a 	srl	r4,r17,r3
    c524:	8962983a 	sll	r17,r17,r5
    c528:	114a983a 	sll	r5,r2,r5
    c52c:	10c6d83a 	srl	r3,r2,r3
    c530:	8804c03a 	cmpne	r2,r17,zero
    c534:	290ab03a 	or	r5,r5,r4
    c538:	28a2b03a 	or	r17,r5,r2
    c53c:	0021883a 	mov	r16,zero
    c540:	003fa206 	br	c3cc <__subdf3+0x84>
    c544:	2090b03a 	or	r8,r4,r2
    c548:	40018e26 	beq	r8,zero,cb84 <__subdf3+0x83c>
    c54c:	1007883a 	mov	r3,r2
    c550:	2023883a 	mov	r17,r4
    c554:	888001cc 	andi	r2,r17,7
    c558:	103f9e1e 	bne	r2,zero,c3d4 <__subdf3+0x8c>
    c55c:	1804977a 	slli	r2,r3,29
    c560:	8822d0fa 	srli	r17,r17,3
    c564:	1810d0fa 	srli	r8,r3,3
    c568:	9100004c 	andi	r4,r18,1
    c56c:	1444b03a 	or	r2,r2,r17
    c570:	00c1ffc4 	movi	r3,2047
    c574:	80c02826 	beq	r16,r3,c618 <__subdf3+0x2d0>
    c578:	01400434 	movhi	r5,16
    c57c:	297fffc4 	addi	r5,r5,-1
    c580:	80e0703a 	and	r16,r16,r3
    c584:	414a703a 	and	r5,r8,r5
    c588:	003fa806 	br	c42c <__subdf3+0xe4>
    c58c:	0080630e 	bge	zero,r2,c71c <__subdf3+0x3d4>
    c590:	48003026 	beq	r9,zero,c654 <__subdf3+0x30c>
    c594:	0101ffc4 	movi	r4,2047
    c598:	813f8c26 	beq	r16,r4,c3cc <__subdf3+0x84>
    c59c:	29402034 	orhi	r5,r5,128
    c5a0:	01000e04 	movi	r4,56
    c5a4:	2080a90e 	bge	r4,r2,c84c <__subdf3+0x504>
    c5a8:	298cb03a 	or	r6,r5,r6
    c5ac:	3012c03a 	cmpne	r9,r6,zero
    c5b0:	0005883a 	mov	r2,zero
    c5b4:	4c53883a 	add	r9,r9,r17
    c5b8:	4c63803a 	cmpltu	r17,r9,r17
    c5bc:	10c7883a 	add	r3,r2,r3
    c5c0:	88c7883a 	add	r3,r17,r3
    c5c4:	4823883a 	mov	r17,r9
    c5c8:	1880202c 	andhi	r2,r3,128
    c5cc:	1000d026 	beq	r2,zero,c910 <__subdf3+0x5c8>
    c5d0:	84000044 	addi	r16,r16,1
    c5d4:	0081ffc4 	movi	r2,2047
    c5d8:	8080fe26 	beq	r16,r2,c9d4 <__subdf3+0x68c>
    c5dc:	00bfe034 	movhi	r2,65408
    c5e0:	10bfffc4 	addi	r2,r2,-1
    c5e4:	1886703a 	and	r3,r3,r2
    c5e8:	880ad07a 	srli	r5,r17,1
    c5ec:	180497fa 	slli	r2,r3,31
    c5f0:	8900004c 	andi	r4,r17,1
    c5f4:	2922b03a 	or	r17,r5,r4
    c5f8:	1806d07a 	srli	r3,r3,1
    c5fc:	1462b03a 	or	r17,r2,r17
    c600:	3825883a 	mov	r18,r7
    c604:	003f7106 	br	c3cc <__subdf3+0x84>
    c608:	2984b03a 	or	r2,r5,r6
    c60c:	103f6826 	beq	r2,zero,c3b0 <__subdf3+0x68>
    c610:	39c03fcc 	andi	r7,r7,255
    c614:	003f6706 	br	c3b4 <__subdf3+0x6c>
    c618:	4086b03a 	or	r3,r8,r2
    c61c:	18015226 	beq	r3,zero,cb68 <__subdf3+0x820>
    c620:	00c00434 	movhi	r3,16
    c624:	41400234 	orhi	r5,r8,8
    c628:	18ffffc4 	addi	r3,r3,-1
    c62c:	28ca703a 	and	r5,r5,r3
    c630:	003f7e06 	br	c42c <__subdf3+0xe4>
    c634:	10bfffc4 	addi	r2,r2,-1
    c638:	1000491e 	bne	r2,zero,c760 <__subdf3+0x418>
    c63c:	898fc83a 	sub	r7,r17,r6
    c640:	89e3803a 	cmpltu	r17,r17,r7
    c644:	1947c83a 	sub	r3,r3,r5
    c648:	1c47c83a 	sub	r3,r3,r17
    c64c:	3823883a 	mov	r17,r7
    c650:	003f9b06 	br	c4c0 <__subdf3+0x178>
    c654:	2988b03a 	or	r4,r5,r6
    c658:	203f5c26 	beq	r4,zero,c3cc <__subdf3+0x84>
    c65c:	10bfffc4 	addi	r2,r2,-1
    c660:	1000931e 	bne	r2,zero,c8b0 <__subdf3+0x568>
    c664:	898d883a 	add	r6,r17,r6
    c668:	3463803a 	cmpltu	r17,r6,r17
    c66c:	1947883a 	add	r3,r3,r5
    c670:	88c7883a 	add	r3,r17,r3
    c674:	3023883a 	mov	r17,r6
    c678:	003fd306 	br	c5c8 <__subdf3+0x280>
    c67c:	1000541e 	bne	r2,zero,c7d0 <__subdf3+0x488>
    c680:	80800044 	addi	r2,r16,1
    c684:	1081ffcc 	andi	r2,r2,2047
    c688:	01000044 	movi	r4,1
    c68c:	2080a20e 	bge	r4,r2,c918 <__subdf3+0x5d0>
    c690:	8989c83a 	sub	r4,r17,r6
    c694:	8905803a 	cmpltu	r2,r17,r4
    c698:	1967c83a 	sub	r19,r3,r5
    c69c:	98a7c83a 	sub	r19,r19,r2
    c6a0:	9880202c 	andhi	r2,r19,128
    c6a4:	10006326 	beq	r2,zero,c834 <__subdf3+0x4ec>
    c6a8:	3463c83a 	sub	r17,r6,r17
    c6ac:	28c7c83a 	sub	r3,r5,r3
    c6b0:	344d803a 	cmpltu	r6,r6,r17
    c6b4:	19a7c83a 	sub	r19,r3,r6
    c6b8:	3825883a 	mov	r18,r7
    c6bc:	983f861e 	bne	r19,zero,c4d8 <__subdf3+0x190>
    c6c0:	8809883a 	mov	r4,r17
    c6c4:	000ce480 	call	ce48 <__clzsi2>
    c6c8:	10800804 	addi	r2,r2,32
    c6cc:	113ffe04 	addi	r4,r2,-8
    c6d0:	00c007c4 	movi	r3,31
    c6d4:	193f850e 	bge	r3,r4,c4ec <__subdf3+0x1a4>
    c6d8:	10bff604 	addi	r2,r2,-40
    c6dc:	8884983a 	sll	r2,r17,r2
    c6e0:	0023883a 	mov	r17,zero
    c6e4:	243f880e 	bge	r4,r16,c508 <__subdf3+0x1c0>
    c6e8:	00ffe034 	movhi	r3,65408
    c6ec:	18ffffc4 	addi	r3,r3,-1
    c6f0:	8121c83a 	sub	r16,r16,r4
    c6f4:	10c6703a 	and	r3,r2,r3
    c6f8:	003f3406 	br	c3cc <__subdf3+0x84>
    c6fc:	9100004c 	andi	r4,r18,1
    c700:	000b883a 	mov	r5,zero
    c704:	0005883a 	mov	r2,zero
    c708:	003f4806 	br	c42c <__subdf3+0xe4>
    c70c:	298cb03a 	or	r6,r5,r6
    c710:	300cc03a 	cmpne	r6,r6,zero
    c714:	0005883a 	mov	r2,zero
    c718:	003f6406 	br	c4ac <__subdf3+0x164>
    c71c:	10009a1e 	bne	r2,zero,c988 <__subdf3+0x640>
    c720:	82400044 	addi	r9,r16,1
    c724:	4881ffcc 	andi	r2,r9,2047
    c728:	02800044 	movi	r10,1
    c72c:	5080670e 	bge	r10,r2,c8cc <__subdf3+0x584>
    c730:	0081ffc4 	movi	r2,2047
    c734:	4880af26 	beq	r9,r2,c9f4 <__subdf3+0x6ac>
    c738:	898d883a 	add	r6,r17,r6
    c73c:	1945883a 	add	r2,r3,r5
    c740:	3447803a 	cmpltu	r3,r6,r17
    c744:	1887883a 	add	r3,r3,r2
    c748:	182297fa 	slli	r17,r3,31
    c74c:	300cd07a 	srli	r6,r6,1
    c750:	1806d07a 	srli	r3,r3,1
    c754:	4821883a 	mov	r16,r9
    c758:	89a2b03a 	or	r17,r17,r6
    c75c:	003f1b06 	br	c3cc <__subdf3+0x84>
    c760:	0101ffc4 	movi	r4,2047
    c764:	813f441e 	bne	r16,r4,c478 <__subdf3+0x130>
    c768:	003f1806 	br	c3cc <__subdf3+0x84>
    c76c:	843ff844 	addi	r16,r16,-31
    c770:	01400804 	movi	r5,32
    c774:	1408d83a 	srl	r4,r2,r16
    c778:	19405026 	beq	r3,r5,c8bc <__subdf3+0x574>
    c77c:	01401004 	movi	r5,64
    c780:	28c7c83a 	sub	r3,r5,r3
    c784:	10c4983a 	sll	r2,r2,r3
    c788:	88a2b03a 	or	r17,r17,r2
    c78c:	8822c03a 	cmpne	r17,r17,zero
    c790:	2462b03a 	or	r17,r4,r17
    c794:	0007883a 	mov	r3,zero
    c798:	0021883a 	mov	r16,zero
    c79c:	003f6d06 	br	c554 <__subdf3+0x20c>
    c7a0:	11fff804 	addi	r7,r2,-32
    c7a4:	01000804 	movi	r4,32
    c7a8:	29ced83a 	srl	r7,r5,r7
    c7ac:	11004526 	beq	r2,r4,c8c4 <__subdf3+0x57c>
    c7b0:	01001004 	movi	r4,64
    c7b4:	2089c83a 	sub	r4,r4,r2
    c7b8:	2904983a 	sll	r2,r5,r4
    c7bc:	118cb03a 	or	r6,r2,r6
    c7c0:	300cc03a 	cmpne	r6,r6,zero
    c7c4:	398cb03a 	or	r6,r7,r6
    c7c8:	0005883a 	mov	r2,zero
    c7cc:	003f3706 	br	c4ac <__subdf3+0x164>
    c7d0:	80002a26 	beq	r16,zero,c87c <__subdf3+0x534>
    c7d4:	0101ffc4 	movi	r4,2047
    c7d8:	49006626 	beq	r9,r4,c974 <__subdf3+0x62c>
    c7dc:	0085c83a 	sub	r2,zero,r2
    c7e0:	18c02034 	orhi	r3,r3,128
    c7e4:	01000e04 	movi	r4,56
    c7e8:	20807e16 	blt	r4,r2,c9e4 <__subdf3+0x69c>
    c7ec:	010007c4 	movi	r4,31
    c7f0:	2080e716 	blt	r4,r2,cb90 <__subdf3+0x848>
    c7f4:	01000804 	movi	r4,32
    c7f8:	2089c83a 	sub	r4,r4,r2
    c7fc:	1914983a 	sll	r10,r3,r4
    c800:	8890d83a 	srl	r8,r17,r2
    c804:	8908983a 	sll	r4,r17,r4
    c808:	1884d83a 	srl	r2,r3,r2
    c80c:	5222b03a 	or	r17,r10,r8
    c810:	2006c03a 	cmpne	r3,r4,zero
    c814:	88e2b03a 	or	r17,r17,r3
    c818:	3463c83a 	sub	r17,r6,r17
    c81c:	2885c83a 	sub	r2,r5,r2
    c820:	344d803a 	cmpltu	r6,r6,r17
    c824:	1187c83a 	sub	r3,r2,r6
    c828:	4821883a 	mov	r16,r9
    c82c:	3825883a 	mov	r18,r7
    c830:	003f2306 	br	c4c0 <__subdf3+0x178>
    c834:	24d0b03a 	or	r8,r4,r19
    c838:	40001b1e 	bne	r8,zero,c8a8 <__subdf3+0x560>
    c83c:	0005883a 	mov	r2,zero
    c840:	0009883a 	mov	r4,zero
    c844:	0021883a 	mov	r16,zero
    c848:	003f4906 	br	c570 <__subdf3+0x228>
    c84c:	010007c4 	movi	r4,31
    c850:	20803a16 	blt	r4,r2,c93c <__subdf3+0x5f4>
    c854:	01000804 	movi	r4,32
    c858:	2089c83a 	sub	r4,r4,r2
    c85c:	2912983a 	sll	r9,r5,r4
    c860:	3090d83a 	srl	r8,r6,r2
    c864:	3108983a 	sll	r4,r6,r4
    c868:	2884d83a 	srl	r2,r5,r2
    c86c:	4a12b03a 	or	r9,r9,r8
    c870:	2008c03a 	cmpne	r4,r4,zero
    c874:	4912b03a 	or	r9,r9,r4
    c878:	003f4e06 	br	c5b4 <__subdf3+0x26c>
    c87c:	1c48b03a 	or	r4,r3,r17
    c880:	20003c26 	beq	r4,zero,c974 <__subdf3+0x62c>
    c884:	0084303a 	nor	r2,zero,r2
    c888:	1000381e 	bne	r2,zero,c96c <__subdf3+0x624>
    c88c:	3463c83a 	sub	r17,r6,r17
    c890:	28c5c83a 	sub	r2,r5,r3
    c894:	344d803a 	cmpltu	r6,r6,r17
    c898:	1187c83a 	sub	r3,r2,r6
    c89c:	4821883a 	mov	r16,r9
    c8a0:	3825883a 	mov	r18,r7
    c8a4:	003f0606 	br	c4c0 <__subdf3+0x178>
    c8a8:	2023883a 	mov	r17,r4
    c8ac:	003f0906 	br	c4d4 <__subdf3+0x18c>
    c8b0:	0101ffc4 	movi	r4,2047
    c8b4:	813f3a1e 	bne	r16,r4,c5a0 <__subdf3+0x258>
    c8b8:	003ec406 	br	c3cc <__subdf3+0x84>
    c8bc:	0005883a 	mov	r2,zero
    c8c0:	003fb106 	br	c788 <__subdf3+0x440>
    c8c4:	0005883a 	mov	r2,zero
    c8c8:	003fbc06 	br	c7bc <__subdf3+0x474>
    c8cc:	1c44b03a 	or	r2,r3,r17
    c8d0:	80008e1e 	bne	r16,zero,cb0c <__subdf3+0x7c4>
    c8d4:	1000c826 	beq	r2,zero,cbf8 <__subdf3+0x8b0>
    c8d8:	2984b03a 	or	r2,r5,r6
    c8dc:	103ebb26 	beq	r2,zero,c3cc <__subdf3+0x84>
    c8e0:	8989883a 	add	r4,r17,r6
    c8e4:	1945883a 	add	r2,r3,r5
    c8e8:	2447803a 	cmpltu	r3,r4,r17
    c8ec:	1887883a 	add	r3,r3,r2
    c8f0:	1880202c 	andhi	r2,r3,128
    c8f4:	2023883a 	mov	r17,r4
    c8f8:	103f1626 	beq	r2,zero,c554 <__subdf3+0x20c>
    c8fc:	00bfe034 	movhi	r2,65408
    c900:	10bfffc4 	addi	r2,r2,-1
    c904:	5021883a 	mov	r16,r10
    c908:	1886703a 	and	r3,r3,r2
    c90c:	003eaf06 	br	c3cc <__subdf3+0x84>
    c910:	3825883a 	mov	r18,r7
    c914:	003f0f06 	br	c554 <__subdf3+0x20c>
    c918:	1c44b03a 	or	r2,r3,r17
    c91c:	8000251e 	bne	r16,zero,c9b4 <__subdf3+0x66c>
    c920:	1000661e 	bne	r2,zero,cabc <__subdf3+0x774>
    c924:	2990b03a 	or	r8,r5,r6
    c928:	40009626 	beq	r8,zero,cb84 <__subdf3+0x83c>
    c92c:	2807883a 	mov	r3,r5
    c930:	3023883a 	mov	r17,r6
    c934:	3825883a 	mov	r18,r7
    c938:	003ea406 	br	c3cc <__subdf3+0x84>
    c93c:	127ff804 	addi	r9,r2,-32
    c940:	01000804 	movi	r4,32
    c944:	2a52d83a 	srl	r9,r5,r9
    c948:	11008c26 	beq	r2,r4,cb7c <__subdf3+0x834>
    c94c:	01001004 	movi	r4,64
    c950:	2085c83a 	sub	r2,r4,r2
    c954:	2884983a 	sll	r2,r5,r2
    c958:	118cb03a 	or	r6,r2,r6
    c95c:	300cc03a 	cmpne	r6,r6,zero
    c960:	4992b03a 	or	r9,r9,r6
    c964:	0005883a 	mov	r2,zero
    c968:	003f1206 	br	c5b4 <__subdf3+0x26c>
    c96c:	0101ffc4 	movi	r4,2047
    c970:	493f9c1e 	bne	r9,r4,c7e4 <__subdf3+0x49c>
    c974:	2807883a 	mov	r3,r5
    c978:	3023883a 	mov	r17,r6
    c97c:	4821883a 	mov	r16,r9
    c980:	3825883a 	mov	r18,r7
    c984:	003e9106 	br	c3cc <__subdf3+0x84>
    c988:	80001f1e 	bne	r16,zero,ca08 <__subdf3+0x6c0>
    c98c:	1c48b03a 	or	r4,r3,r17
    c990:	20005a26 	beq	r4,zero,cafc <__subdf3+0x7b4>
    c994:	0084303a 	nor	r2,zero,r2
    c998:	1000561e 	bne	r2,zero,caf4 <__subdf3+0x7ac>
    c99c:	89a3883a 	add	r17,r17,r6
    c9a0:	1945883a 	add	r2,r3,r5
    c9a4:	898d803a 	cmpltu	r6,r17,r6
    c9a8:	3087883a 	add	r3,r6,r2
    c9ac:	4821883a 	mov	r16,r9
    c9b0:	003f0506 	br	c5c8 <__subdf3+0x280>
    c9b4:	10002b1e 	bne	r2,zero,ca64 <__subdf3+0x71c>
    c9b8:	2984b03a 	or	r2,r5,r6
    c9bc:	10008026 	beq	r2,zero,cbc0 <__subdf3+0x878>
    c9c0:	2807883a 	mov	r3,r5
    c9c4:	3023883a 	mov	r17,r6
    c9c8:	3825883a 	mov	r18,r7
    c9cc:	0401ffc4 	movi	r16,2047
    c9d0:	003e7e06 	br	c3cc <__subdf3+0x84>
    c9d4:	3809883a 	mov	r4,r7
    c9d8:	0011883a 	mov	r8,zero
    c9dc:	0005883a 	mov	r2,zero
    c9e0:	003ee306 	br	c570 <__subdf3+0x228>
    c9e4:	1c62b03a 	or	r17,r3,r17
    c9e8:	8822c03a 	cmpne	r17,r17,zero
    c9ec:	0005883a 	mov	r2,zero
    c9f0:	003f8906 	br	c818 <__subdf3+0x4d0>
    c9f4:	3809883a 	mov	r4,r7
    c9f8:	4821883a 	mov	r16,r9
    c9fc:	0011883a 	mov	r8,zero
    ca00:	0005883a 	mov	r2,zero
    ca04:	003eda06 	br	c570 <__subdf3+0x228>
    ca08:	0101ffc4 	movi	r4,2047
    ca0c:	49003b26 	beq	r9,r4,cafc <__subdf3+0x7b4>
    ca10:	0085c83a 	sub	r2,zero,r2
    ca14:	18c02034 	orhi	r3,r3,128
    ca18:	01000e04 	movi	r4,56
    ca1c:	20806e16 	blt	r4,r2,cbd8 <__subdf3+0x890>
    ca20:	010007c4 	movi	r4,31
    ca24:	20807716 	blt	r4,r2,cc04 <__subdf3+0x8bc>
    ca28:	01000804 	movi	r4,32
    ca2c:	2089c83a 	sub	r4,r4,r2
    ca30:	1914983a 	sll	r10,r3,r4
    ca34:	8890d83a 	srl	r8,r17,r2
    ca38:	8908983a 	sll	r4,r17,r4
    ca3c:	1884d83a 	srl	r2,r3,r2
    ca40:	5222b03a 	or	r17,r10,r8
    ca44:	2006c03a 	cmpne	r3,r4,zero
    ca48:	88e2b03a 	or	r17,r17,r3
    ca4c:	89a3883a 	add	r17,r17,r6
    ca50:	1145883a 	add	r2,r2,r5
    ca54:	898d803a 	cmpltu	r6,r17,r6
    ca58:	3087883a 	add	r3,r6,r2
    ca5c:	4821883a 	mov	r16,r9
    ca60:	003ed906 	br	c5c8 <__subdf3+0x280>
    ca64:	2984b03a 	or	r2,r5,r6
    ca68:	10004226 	beq	r2,zero,cb74 <__subdf3+0x82c>
    ca6c:	1808d0fa 	srli	r4,r3,3
    ca70:	8822d0fa 	srli	r17,r17,3
    ca74:	1806977a 	slli	r3,r3,29
    ca78:	2080022c 	andhi	r2,r4,8
    ca7c:	1c62b03a 	or	r17,r3,r17
    ca80:	10000826 	beq	r2,zero,caa4 <__subdf3+0x75c>
    ca84:	2812d0fa 	srli	r9,r5,3
    ca88:	4880022c 	andhi	r2,r9,8
    ca8c:	1000051e 	bne	r2,zero,caa4 <__subdf3+0x75c>
    ca90:	300cd0fa 	srli	r6,r6,3
    ca94:	2804977a 	slli	r2,r5,29
    ca98:	4809883a 	mov	r4,r9
    ca9c:	3825883a 	mov	r18,r7
    caa0:	11a2b03a 	or	r17,r2,r6
    caa4:	8806d77a 	srli	r3,r17,29
    caa8:	200890fa 	slli	r4,r4,3
    caac:	882290fa 	slli	r17,r17,3
    cab0:	0401ffc4 	movi	r16,2047
    cab4:	1906b03a 	or	r3,r3,r4
    cab8:	003e4406 	br	c3cc <__subdf3+0x84>
    cabc:	2984b03a 	or	r2,r5,r6
    cac0:	103e4226 	beq	r2,zero,c3cc <__subdf3+0x84>
    cac4:	8989c83a 	sub	r4,r17,r6
    cac8:	8911803a 	cmpltu	r8,r17,r4
    cacc:	1945c83a 	sub	r2,r3,r5
    cad0:	1205c83a 	sub	r2,r2,r8
    cad4:	1200202c 	andhi	r8,r2,128
    cad8:	403e9a26 	beq	r8,zero,c544 <__subdf3+0x1fc>
    cadc:	3463c83a 	sub	r17,r6,r17
    cae0:	28c5c83a 	sub	r2,r5,r3
    cae4:	344d803a 	cmpltu	r6,r6,r17
    cae8:	1187c83a 	sub	r3,r2,r6
    caec:	3825883a 	mov	r18,r7
    caf0:	003e3606 	br	c3cc <__subdf3+0x84>
    caf4:	0101ffc4 	movi	r4,2047
    caf8:	493fc71e 	bne	r9,r4,ca18 <__subdf3+0x6d0>
    cafc:	2807883a 	mov	r3,r5
    cb00:	3023883a 	mov	r17,r6
    cb04:	4821883a 	mov	r16,r9
    cb08:	003e3006 	br	c3cc <__subdf3+0x84>
    cb0c:	10003626 	beq	r2,zero,cbe8 <__subdf3+0x8a0>
    cb10:	2984b03a 	or	r2,r5,r6
    cb14:	10001726 	beq	r2,zero,cb74 <__subdf3+0x82c>
    cb18:	1808d0fa 	srli	r4,r3,3
    cb1c:	8822d0fa 	srli	r17,r17,3
    cb20:	1806977a 	slli	r3,r3,29
    cb24:	2080022c 	andhi	r2,r4,8
    cb28:	1c62b03a 	or	r17,r3,r17
    cb2c:	10000726 	beq	r2,zero,cb4c <__subdf3+0x804>
    cb30:	2812d0fa 	srli	r9,r5,3
    cb34:	4880022c 	andhi	r2,r9,8
    cb38:	1000041e 	bne	r2,zero,cb4c <__subdf3+0x804>
    cb3c:	300cd0fa 	srli	r6,r6,3
    cb40:	2804977a 	slli	r2,r5,29
    cb44:	4809883a 	mov	r4,r9
    cb48:	11a2b03a 	or	r17,r2,r6
    cb4c:	8806d77a 	srli	r3,r17,29
    cb50:	200890fa 	slli	r4,r4,3
    cb54:	882290fa 	slli	r17,r17,3
    cb58:	3825883a 	mov	r18,r7
    cb5c:	1906b03a 	or	r3,r3,r4
    cb60:	0401ffc4 	movi	r16,2047
    cb64:	003e1906 	br	c3cc <__subdf3+0x84>
    cb68:	000b883a 	mov	r5,zero
    cb6c:	0005883a 	mov	r2,zero
    cb70:	003e2e06 	br	c42c <__subdf3+0xe4>
    cb74:	0401ffc4 	movi	r16,2047
    cb78:	003e1406 	br	c3cc <__subdf3+0x84>
    cb7c:	0005883a 	mov	r2,zero
    cb80:	003f7506 	br	c958 <__subdf3+0x610>
    cb84:	0005883a 	mov	r2,zero
    cb88:	0009883a 	mov	r4,zero
    cb8c:	003e7806 	br	c570 <__subdf3+0x228>
    cb90:	123ff804 	addi	r8,r2,-32
    cb94:	01000804 	movi	r4,32
    cb98:	1a10d83a 	srl	r8,r3,r8
    cb9c:	11002526 	beq	r2,r4,cc34 <__subdf3+0x8ec>
    cba0:	01001004 	movi	r4,64
    cba4:	2085c83a 	sub	r2,r4,r2
    cba8:	1884983a 	sll	r2,r3,r2
    cbac:	1444b03a 	or	r2,r2,r17
    cbb0:	1004c03a 	cmpne	r2,r2,zero
    cbb4:	40a2b03a 	or	r17,r8,r2
    cbb8:	0005883a 	mov	r2,zero
    cbbc:	003f1606 	br	c818 <__subdf3+0x4d0>
    cbc0:	02000434 	movhi	r8,16
    cbc4:	0009883a 	mov	r4,zero
    cbc8:	423fffc4 	addi	r8,r8,-1
    cbcc:	00bfffc4 	movi	r2,-1
    cbd0:	0401ffc4 	movi	r16,2047
    cbd4:	003e6606 	br	c570 <__subdf3+0x228>
    cbd8:	1c62b03a 	or	r17,r3,r17
    cbdc:	8822c03a 	cmpne	r17,r17,zero
    cbe0:	0005883a 	mov	r2,zero
    cbe4:	003f9906 	br	ca4c <__subdf3+0x704>
    cbe8:	2807883a 	mov	r3,r5
    cbec:	3023883a 	mov	r17,r6
    cbf0:	0401ffc4 	movi	r16,2047
    cbf4:	003df506 	br	c3cc <__subdf3+0x84>
    cbf8:	2807883a 	mov	r3,r5
    cbfc:	3023883a 	mov	r17,r6
    cc00:	003df206 	br	c3cc <__subdf3+0x84>
    cc04:	123ff804 	addi	r8,r2,-32
    cc08:	01000804 	movi	r4,32
    cc0c:	1a10d83a 	srl	r8,r3,r8
    cc10:	11000a26 	beq	r2,r4,cc3c <__subdf3+0x8f4>
    cc14:	01001004 	movi	r4,64
    cc18:	2085c83a 	sub	r2,r4,r2
    cc1c:	1884983a 	sll	r2,r3,r2
    cc20:	1444b03a 	or	r2,r2,r17
    cc24:	1004c03a 	cmpne	r2,r2,zero
    cc28:	40a2b03a 	or	r17,r8,r2
    cc2c:	0005883a 	mov	r2,zero
    cc30:	003f8606 	br	ca4c <__subdf3+0x704>
    cc34:	0005883a 	mov	r2,zero
    cc38:	003fdc06 	br	cbac <__subdf3+0x864>
    cc3c:	0005883a 	mov	r2,zero
    cc40:	003ff706 	br	cc20 <__subdf3+0x8d8>

0000cc44 <__fixdfsi>:
    cc44:	280cd53a 	srli	r6,r5,20
    cc48:	00c00434 	movhi	r3,16
    cc4c:	18ffffc4 	addi	r3,r3,-1
    cc50:	3181ffcc 	andi	r6,r6,2047
    cc54:	01c0ff84 	movi	r7,1022
    cc58:	28c6703a 	and	r3,r5,r3
    cc5c:	280ad7fa 	srli	r5,r5,31
    cc60:	3980120e 	bge	r7,r6,ccac <__fixdfsi+0x68>
    cc64:	00810744 	movi	r2,1053
    cc68:	11800c16 	blt	r2,r6,cc9c <__fixdfsi+0x58>
    cc6c:	00810cc4 	movi	r2,1075
    cc70:	1185c83a 	sub	r2,r2,r6
    cc74:	01c007c4 	movi	r7,31
    cc78:	18c00434 	orhi	r3,r3,16
    cc7c:	38800d16 	blt	r7,r2,ccb4 <__fixdfsi+0x70>
    cc80:	31befb44 	addi	r6,r6,-1043
    cc84:	2084d83a 	srl	r2,r4,r2
    cc88:	1986983a 	sll	r3,r3,r6
    cc8c:	1884b03a 	or	r2,r3,r2
    cc90:	28000726 	beq	r5,zero,ccb0 <__fixdfsi+0x6c>
    cc94:	0085c83a 	sub	r2,zero,r2
    cc98:	f800283a 	ret
    cc9c:	00a00034 	movhi	r2,32768
    cca0:	10bfffc4 	addi	r2,r2,-1
    cca4:	2885883a 	add	r2,r5,r2
    cca8:	f800283a 	ret
    ccac:	0005883a 	mov	r2,zero
    ccb0:	f800283a 	ret
    ccb4:	008104c4 	movi	r2,1043
    ccb8:	1185c83a 	sub	r2,r2,r6
    ccbc:	1884d83a 	srl	r2,r3,r2
    ccc0:	003ff306 	br	cc90 <__fixdfsi+0x4c>

0000ccc4 <__floatsidf>:
    ccc4:	defffd04 	addi	sp,sp,-12
    ccc8:	dfc00215 	stw	ra,8(sp)
    cccc:	dc400115 	stw	r17,4(sp)
    ccd0:	dc000015 	stw	r16,0(sp)
    ccd4:	20002b26 	beq	r4,zero,cd84 <__floatsidf+0xc0>
    ccd8:	2023883a 	mov	r17,r4
    ccdc:	2020d7fa 	srli	r16,r4,31
    cce0:	20002d16 	blt	r4,zero,cd98 <__floatsidf+0xd4>
    cce4:	8809883a 	mov	r4,r17
    cce8:	000ce480 	call	ce48 <__clzsi2>
    ccec:	01410784 	movi	r5,1054
    ccf0:	288bc83a 	sub	r5,r5,r2
    ccf4:	01010cc4 	movi	r4,1075
    ccf8:	2149c83a 	sub	r4,r4,r5
    ccfc:	00c007c4 	movi	r3,31
    cd00:	1900160e 	bge	r3,r4,cd5c <__floatsidf+0x98>
    cd04:	00c104c4 	movi	r3,1043
    cd08:	1947c83a 	sub	r3,r3,r5
    cd0c:	88c6983a 	sll	r3,r17,r3
    cd10:	00800434 	movhi	r2,16
    cd14:	10bfffc4 	addi	r2,r2,-1
    cd18:	1886703a 	and	r3,r3,r2
    cd1c:	2941ffcc 	andi	r5,r5,2047
    cd20:	800d883a 	mov	r6,r16
    cd24:	0005883a 	mov	r2,zero
    cd28:	280a953a 	slli	r5,r5,20
    cd2c:	31803fcc 	andi	r6,r6,255
    cd30:	01000434 	movhi	r4,16
    cd34:	300c97fa 	slli	r6,r6,31
    cd38:	213fffc4 	addi	r4,r4,-1
    cd3c:	1906703a 	and	r3,r3,r4
    cd40:	1946b03a 	or	r3,r3,r5
    cd44:	1986b03a 	or	r3,r3,r6
    cd48:	dfc00217 	ldw	ra,8(sp)
    cd4c:	dc400117 	ldw	r17,4(sp)
    cd50:	dc000017 	ldw	r16,0(sp)
    cd54:	dec00304 	addi	sp,sp,12
    cd58:	f800283a 	ret
    cd5c:	00c002c4 	movi	r3,11
    cd60:	1887c83a 	sub	r3,r3,r2
    cd64:	88c6d83a 	srl	r3,r17,r3
    cd68:	8904983a 	sll	r2,r17,r4
    cd6c:	01000434 	movhi	r4,16
    cd70:	213fffc4 	addi	r4,r4,-1
    cd74:	2941ffcc 	andi	r5,r5,2047
    cd78:	1906703a 	and	r3,r3,r4
    cd7c:	800d883a 	mov	r6,r16
    cd80:	003fe906 	br	cd28 <__floatsidf+0x64>
    cd84:	000d883a 	mov	r6,zero
    cd88:	000b883a 	mov	r5,zero
    cd8c:	0007883a 	mov	r3,zero
    cd90:	0005883a 	mov	r2,zero
    cd94:	003fe406 	br	cd28 <__floatsidf+0x64>
    cd98:	0123c83a 	sub	r17,zero,r4
    cd9c:	003fd106 	br	cce4 <__floatsidf+0x20>

0000cda0 <__floatunsidf>:
    cda0:	defffe04 	addi	sp,sp,-8
    cda4:	dc000015 	stw	r16,0(sp)
    cda8:	dfc00115 	stw	ra,4(sp)
    cdac:	2021883a 	mov	r16,r4
    cdb0:	20002226 	beq	r4,zero,ce3c <__floatunsidf+0x9c>
    cdb4:	000ce480 	call	ce48 <__clzsi2>
    cdb8:	01010784 	movi	r4,1054
    cdbc:	2089c83a 	sub	r4,r4,r2
    cdc0:	01810cc4 	movi	r6,1075
    cdc4:	310dc83a 	sub	r6,r6,r4
    cdc8:	00c007c4 	movi	r3,31
    cdcc:	1980120e 	bge	r3,r6,ce18 <__floatunsidf+0x78>
    cdd0:	00c104c4 	movi	r3,1043
    cdd4:	1907c83a 	sub	r3,r3,r4
    cdd8:	80ca983a 	sll	r5,r16,r3
    cddc:	00800434 	movhi	r2,16
    cde0:	10bfffc4 	addi	r2,r2,-1
    cde4:	2101ffcc 	andi	r4,r4,2047
    cde8:	0021883a 	mov	r16,zero
    cdec:	288a703a 	and	r5,r5,r2
    cdf0:	2008953a 	slli	r4,r4,20
    cdf4:	00c00434 	movhi	r3,16
    cdf8:	18ffffc4 	addi	r3,r3,-1
    cdfc:	28c6703a 	and	r3,r5,r3
    ce00:	8005883a 	mov	r2,r16
    ce04:	1906b03a 	or	r3,r3,r4
    ce08:	dfc00117 	ldw	ra,4(sp)
    ce0c:	dc000017 	ldw	r16,0(sp)
    ce10:	dec00204 	addi	sp,sp,8
    ce14:	f800283a 	ret
    ce18:	00c002c4 	movi	r3,11
    ce1c:	188bc83a 	sub	r5,r3,r2
    ce20:	814ad83a 	srl	r5,r16,r5
    ce24:	00c00434 	movhi	r3,16
    ce28:	18ffffc4 	addi	r3,r3,-1
    ce2c:	81a0983a 	sll	r16,r16,r6
    ce30:	2101ffcc 	andi	r4,r4,2047
    ce34:	28ca703a 	and	r5,r5,r3
    ce38:	003fed06 	br	cdf0 <__floatunsidf+0x50>
    ce3c:	0009883a 	mov	r4,zero
    ce40:	000b883a 	mov	r5,zero
    ce44:	003fea06 	br	cdf0 <__floatunsidf+0x50>

0000ce48 <__clzsi2>:
    ce48:	00bfffd4 	movui	r2,65535
    ce4c:	11000536 	bltu	r2,r4,ce64 <__clzsi2+0x1c>
    ce50:	00803fc4 	movi	r2,255
    ce54:	11000f36 	bltu	r2,r4,ce94 <__clzsi2+0x4c>
    ce58:	00800804 	movi	r2,32
    ce5c:	0007883a 	mov	r3,zero
    ce60:	00000506 	br	ce78 <__clzsi2+0x30>
    ce64:	00804034 	movhi	r2,256
    ce68:	10bfffc4 	addi	r2,r2,-1
    ce6c:	11000c2e 	bgeu	r2,r4,cea0 <__clzsi2+0x58>
    ce70:	00800204 	movi	r2,8
    ce74:	00c00604 	movi	r3,24
    ce78:	20c8d83a 	srl	r4,r4,r3
    ce7c:	00c000f4 	movhi	r3,3
    ce80:	18d35b04 	addi	r3,r3,19820
    ce84:	1909883a 	add	r4,r3,r4
    ce88:	20c00003 	ldbu	r3,0(r4)
    ce8c:	10c5c83a 	sub	r2,r2,r3
    ce90:	f800283a 	ret
    ce94:	00800604 	movi	r2,24
    ce98:	00c00204 	movi	r3,8
    ce9c:	003ff606 	br	ce78 <__clzsi2+0x30>
    cea0:	00800404 	movi	r2,16
    cea4:	1007883a 	mov	r3,r2
    cea8:	003ff306 	br	ce78 <__clzsi2+0x30>

0000ceac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ceac:	defffe04 	addi	sp,sp,-8
    ceb0:	dfc00115 	stw	ra,4(sp)
    ceb4:	df000015 	stw	fp,0(sp)
    ceb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cebc:	d0a00c17 	ldw	r2,-32720(gp)
    cec0:	10000326 	beq	r2,zero,ced0 <alt_get_errno+0x24>
    cec4:	d0a00c17 	ldw	r2,-32720(gp)
    cec8:	103ee83a 	callr	r2
    cecc:	00000106 	br	ced4 <alt_get_errno+0x28>
    ced0:	d0a71604 	addi	r2,gp,-25512
}
    ced4:	e037883a 	mov	sp,fp
    ced8:	dfc00117 	ldw	ra,4(sp)
    cedc:	df000017 	ldw	fp,0(sp)
    cee0:	dec00204 	addi	sp,sp,8
    cee4:	f800283a 	ret

0000cee8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cee8:	defffb04 	addi	sp,sp,-20
    ceec:	dfc00415 	stw	ra,16(sp)
    cef0:	df000315 	stw	fp,12(sp)
    cef4:	df000304 	addi	fp,sp,12
    cef8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cefc:	e0bfff17 	ldw	r2,-4(fp)
    cf00:	10000616 	blt	r2,zero,cf1c <close+0x34>
    cf04:	e0bfff17 	ldw	r2,-4(fp)
    cf08:	10c00324 	muli	r3,r2,12
    cf0c:	008000f4 	movhi	r2,3
    cf10:	10962404 	addi	r2,r2,22672
    cf14:	1885883a 	add	r2,r3,r2
    cf18:	00000106 	br	cf20 <close+0x38>
    cf1c:	0005883a 	mov	r2,zero
    cf20:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cf24:	e0bffd17 	ldw	r2,-12(fp)
    cf28:	10001926 	beq	r2,zero,cf90 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cf2c:	e0bffd17 	ldw	r2,-12(fp)
    cf30:	10800017 	ldw	r2,0(r2)
    cf34:	10800417 	ldw	r2,16(r2)
    cf38:	10000626 	beq	r2,zero,cf54 <close+0x6c>
    cf3c:	e0bffd17 	ldw	r2,-12(fp)
    cf40:	10800017 	ldw	r2,0(r2)
    cf44:	10800417 	ldw	r2,16(r2)
    cf48:	e13ffd17 	ldw	r4,-12(fp)
    cf4c:	103ee83a 	callr	r2
    cf50:	00000106 	br	cf58 <close+0x70>
    cf54:	0005883a 	mov	r2,zero
    cf58:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cf5c:	e13fff17 	ldw	r4,-4(fp)
    cf60:	000d5a00 	call	d5a0 <alt_release_fd>
    if (rval < 0)
    cf64:	e0bffe17 	ldw	r2,-8(fp)
    cf68:	1000070e 	bge	r2,zero,cf88 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cf6c:	000ceac0 	call	ceac <alt_get_errno>
    cf70:	1007883a 	mov	r3,r2
    cf74:	e0bffe17 	ldw	r2,-8(fp)
    cf78:	0085c83a 	sub	r2,zero,r2
    cf7c:	18800015 	stw	r2,0(r3)
      return -1;
    cf80:	00bfffc4 	movi	r2,-1
    cf84:	00000706 	br	cfa4 <close+0xbc>
    }
    return 0;
    cf88:	0005883a 	mov	r2,zero
    cf8c:	00000506 	br	cfa4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cf90:	000ceac0 	call	ceac <alt_get_errno>
    cf94:	1007883a 	mov	r3,r2
    cf98:	00801444 	movi	r2,81
    cf9c:	18800015 	stw	r2,0(r3)
    return -1;
    cfa0:	00bfffc4 	movi	r2,-1
  }
}
    cfa4:	e037883a 	mov	sp,fp
    cfa8:	dfc00117 	ldw	ra,4(sp)
    cfac:	df000017 	ldw	fp,0(sp)
    cfb0:	dec00204 	addi	sp,sp,8
    cfb4:	f800283a 	ret

0000cfb8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cfb8:	defffc04 	addi	sp,sp,-16
    cfbc:	df000315 	stw	fp,12(sp)
    cfc0:	df000304 	addi	fp,sp,12
    cfc4:	e13ffd15 	stw	r4,-12(fp)
    cfc8:	e17ffe15 	stw	r5,-8(fp)
    cfcc:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cfd0:	e0bfff17 	ldw	r2,-4(fp)
}
    cfd4:	e037883a 	mov	sp,fp
    cfd8:	df000017 	ldw	fp,0(sp)
    cfdc:	dec00104 	addi	sp,sp,4
    cfe0:	f800283a 	ret

0000cfe4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cfe4:	defffe04 	addi	sp,sp,-8
    cfe8:	dfc00115 	stw	ra,4(sp)
    cfec:	df000015 	stw	fp,0(sp)
    cff0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cff4:	d0a00c17 	ldw	r2,-32720(gp)
    cff8:	10000326 	beq	r2,zero,d008 <alt_get_errno+0x24>
    cffc:	d0a00c17 	ldw	r2,-32720(gp)
    d000:	103ee83a 	callr	r2
    d004:	00000106 	br	d00c <alt_get_errno+0x28>
    d008:	d0a71604 	addi	r2,gp,-25512
}
    d00c:	e037883a 	mov	sp,fp
    d010:	dfc00117 	ldw	ra,4(sp)
    d014:	df000017 	ldw	fp,0(sp)
    d018:	dec00204 	addi	sp,sp,8
    d01c:	f800283a 	ret

0000d020 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d020:	defffb04 	addi	sp,sp,-20
    d024:	dfc00415 	stw	ra,16(sp)
    d028:	df000315 	stw	fp,12(sp)
    d02c:	df000304 	addi	fp,sp,12
    d030:	e13ffe15 	stw	r4,-8(fp)
    d034:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d038:	e0bffe17 	ldw	r2,-8(fp)
    d03c:	10000616 	blt	r2,zero,d058 <fstat+0x38>
    d040:	e0bffe17 	ldw	r2,-8(fp)
    d044:	10c00324 	muli	r3,r2,12
    d048:	008000f4 	movhi	r2,3
    d04c:	10962404 	addi	r2,r2,22672
    d050:	1885883a 	add	r2,r3,r2
    d054:	00000106 	br	d05c <fstat+0x3c>
    d058:	0005883a 	mov	r2,zero
    d05c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d060:	e0bffd17 	ldw	r2,-12(fp)
    d064:	10001026 	beq	r2,zero,d0a8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d068:	e0bffd17 	ldw	r2,-12(fp)
    d06c:	10800017 	ldw	r2,0(r2)
    d070:	10800817 	ldw	r2,32(r2)
    d074:	10000726 	beq	r2,zero,d094 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d078:	e0bffd17 	ldw	r2,-12(fp)
    d07c:	10800017 	ldw	r2,0(r2)
    d080:	10800817 	ldw	r2,32(r2)
    d084:	e17fff17 	ldw	r5,-4(fp)
    d088:	e13ffd17 	ldw	r4,-12(fp)
    d08c:	103ee83a 	callr	r2
    d090:	00000a06 	br	d0bc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d094:	e0bfff17 	ldw	r2,-4(fp)
    d098:	00c80004 	movi	r3,8192
    d09c:	10c00115 	stw	r3,4(r2)
      return 0;
    d0a0:	0005883a 	mov	r2,zero
    d0a4:	00000506 	br	d0bc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d0a8:	000cfe40 	call	cfe4 <alt_get_errno>
    d0ac:	1007883a 	mov	r3,r2
    d0b0:	00801444 	movi	r2,81
    d0b4:	18800015 	stw	r2,0(r3)
    return -1;
    d0b8:	00bfffc4 	movi	r2,-1
  }
}
    d0bc:	e037883a 	mov	sp,fp
    d0c0:	dfc00117 	ldw	ra,4(sp)
    d0c4:	df000017 	ldw	fp,0(sp)
    d0c8:	dec00204 	addi	sp,sp,8
    d0cc:	f800283a 	ret

0000d0d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d0d0:	defffe04 	addi	sp,sp,-8
    d0d4:	dfc00115 	stw	ra,4(sp)
    d0d8:	df000015 	stw	fp,0(sp)
    d0dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0e0:	d0a00c17 	ldw	r2,-32720(gp)
    d0e4:	10000326 	beq	r2,zero,d0f4 <alt_get_errno+0x24>
    d0e8:	d0a00c17 	ldw	r2,-32720(gp)
    d0ec:	103ee83a 	callr	r2
    d0f0:	00000106 	br	d0f8 <alt_get_errno+0x28>
    d0f4:	d0a71604 	addi	r2,gp,-25512
}
    d0f8:	e037883a 	mov	sp,fp
    d0fc:	dfc00117 	ldw	ra,4(sp)
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00204 	addi	sp,sp,8
    d108:	f800283a 	ret

0000d10c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d10c:	deffed04 	addi	sp,sp,-76
    d110:	dfc01215 	stw	ra,72(sp)
    d114:	df001115 	stw	fp,68(sp)
    d118:	df001104 	addi	fp,sp,68
    d11c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d120:	e0bfff17 	ldw	r2,-4(fp)
    d124:	10000616 	blt	r2,zero,d140 <isatty+0x34>
    d128:	e0bfff17 	ldw	r2,-4(fp)
    d12c:	10c00324 	muli	r3,r2,12
    d130:	008000f4 	movhi	r2,3
    d134:	10962404 	addi	r2,r2,22672
    d138:	1885883a 	add	r2,r3,r2
    d13c:	00000106 	br	d144 <isatty+0x38>
    d140:	0005883a 	mov	r2,zero
    d144:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d148:	e0bfef17 	ldw	r2,-68(fp)
    d14c:	10000e26 	beq	r2,zero,d188 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d150:	e0bfef17 	ldw	r2,-68(fp)
    d154:	10800017 	ldw	r2,0(r2)
    d158:	10800817 	ldw	r2,32(r2)
    d15c:	1000021e 	bne	r2,zero,d168 <isatty+0x5c>
    {
      return 1;
    d160:	00800044 	movi	r2,1
    d164:	00000d06 	br	d19c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d168:	e0bff004 	addi	r2,fp,-64
    d16c:	100b883a 	mov	r5,r2
    d170:	e13fff17 	ldw	r4,-4(fp)
    d174:	000d0200 	call	d020 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d178:	e0bff117 	ldw	r2,-60(fp)
    d17c:	10880020 	cmpeqi	r2,r2,8192
    d180:	10803fcc 	andi	r2,r2,255
    d184:	00000506 	br	d19c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d188:	000d0d00 	call	d0d0 <alt_get_errno>
    d18c:	1007883a 	mov	r3,r2
    d190:	00801444 	movi	r2,81
    d194:	18800015 	stw	r2,0(r3)
    return 0;
    d198:	0005883a 	mov	r2,zero
  }
}
    d19c:	e037883a 	mov	sp,fp
    d1a0:	dfc00117 	ldw	ra,4(sp)
    d1a4:	df000017 	ldw	fp,0(sp)
    d1a8:	dec00204 	addi	sp,sp,8
    d1ac:	f800283a 	ret

0000d1b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d1b0:	defffc04 	addi	sp,sp,-16
    d1b4:	df000315 	stw	fp,12(sp)
    d1b8:	df000304 	addi	fp,sp,12
    d1bc:	e13ffd15 	stw	r4,-12(fp)
    d1c0:	e17ffe15 	stw	r5,-8(fp)
    d1c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d1c8:	e0fffe17 	ldw	r3,-8(fp)
    d1cc:	e0bffd17 	ldw	r2,-12(fp)
    d1d0:	18800c26 	beq	r3,r2,d204 <alt_load_section+0x54>
  {
    while( to != end )
    d1d4:	00000806 	br	d1f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d1d8:	e0bffe17 	ldw	r2,-8(fp)
    d1dc:	10c00104 	addi	r3,r2,4
    d1e0:	e0fffe15 	stw	r3,-8(fp)
    d1e4:	e0fffd17 	ldw	r3,-12(fp)
    d1e8:	19000104 	addi	r4,r3,4
    d1ec:	e13ffd15 	stw	r4,-12(fp)
    d1f0:	18c00017 	ldw	r3,0(r3)
    d1f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d1f8:	e0fffe17 	ldw	r3,-8(fp)
    d1fc:	e0bfff17 	ldw	r2,-4(fp)
    d200:	18bff51e 	bne	r3,r2,d1d8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    d204:	0001883a 	nop
    d208:	e037883a 	mov	sp,fp
    d20c:	df000017 	ldw	fp,0(sp)
    d210:	dec00104 	addi	sp,sp,4
    d214:	f800283a 	ret

0000d218 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d218:	defffe04 	addi	sp,sp,-8
    d21c:	dfc00115 	stw	ra,4(sp)
    d220:	df000015 	stw	fp,0(sp)
    d224:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d228:	018000f4 	movhi	r6,3
    d22c:	319acf04 	addi	r6,r6,27452
    d230:	014000f4 	movhi	r5,3
    d234:	2953f104 	addi	r5,r5,20420
    d238:	010000f4 	movhi	r4,3
    d23c:	211acf04 	addi	r4,r4,27452
    d240:	000d1b00 	call	d1b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d244:	01800034 	movhi	r6,0
    d248:	31809104 	addi	r6,r6,580
    d24c:	01400034 	movhi	r5,0
    d250:	29400804 	addi	r5,r5,32
    d254:	01000034 	movhi	r4,0
    d258:	21000804 	addi	r4,r4,32
    d25c:	000d1b00 	call	d1b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d260:	018000f4 	movhi	r6,3
    d264:	3193f104 	addi	r6,r6,20420
    d268:	01400074 	movhi	r5,1
    d26c:	295d9c04 	addi	r5,r5,30320
    d270:	01000074 	movhi	r4,1
    d274:	211d9c04 	addi	r4,r4,30320
    d278:	000d1b00 	call	d1b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d27c:	00161cc0 	call	161cc <alt_dcache_flush_all>
  alt_icache_flush_all();
    d280:	00163b40 	call	163b4 <alt_icache_flush_all>
}
    d284:	0001883a 	nop
    d288:	e037883a 	mov	sp,fp
    d28c:	dfc00117 	ldw	ra,4(sp)
    d290:	df000017 	ldw	fp,0(sp)
    d294:	dec00204 	addi	sp,sp,8
    d298:	f800283a 	ret

0000d29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d29c:	defffe04 	addi	sp,sp,-8
    d2a0:	dfc00115 	stw	ra,4(sp)
    d2a4:	df000015 	stw	fp,0(sp)
    d2a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d2ac:	d0a00c17 	ldw	r2,-32720(gp)
    d2b0:	10000326 	beq	r2,zero,d2c0 <alt_get_errno+0x24>
    d2b4:	d0a00c17 	ldw	r2,-32720(gp)
    d2b8:	103ee83a 	callr	r2
    d2bc:	00000106 	br	d2c4 <alt_get_errno+0x28>
    d2c0:	d0a71604 	addi	r2,gp,-25512
}
    d2c4:	e037883a 	mov	sp,fp
    d2c8:	dfc00117 	ldw	ra,4(sp)
    d2cc:	df000017 	ldw	fp,0(sp)
    d2d0:	dec00204 	addi	sp,sp,8
    d2d4:	f800283a 	ret

0000d2d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d2d8:	defff904 	addi	sp,sp,-28
    d2dc:	dfc00615 	stw	ra,24(sp)
    d2e0:	df000515 	stw	fp,20(sp)
    d2e4:	df000504 	addi	fp,sp,20
    d2e8:	e13ffd15 	stw	r4,-12(fp)
    d2ec:	e17ffe15 	stw	r5,-8(fp)
    d2f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d2f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d2f8:	e0bffd17 	ldw	r2,-12(fp)
    d2fc:	10000616 	blt	r2,zero,d318 <lseek+0x40>
    d300:	e0bffd17 	ldw	r2,-12(fp)
    d304:	10c00324 	muli	r3,r2,12
    d308:	008000f4 	movhi	r2,3
    d30c:	10962404 	addi	r2,r2,22672
    d310:	1885883a 	add	r2,r3,r2
    d314:	00000106 	br	d31c <lseek+0x44>
    d318:	0005883a 	mov	r2,zero
    d31c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d320:	e0bffc17 	ldw	r2,-16(fp)
    d324:	10001026 	beq	r2,zero,d368 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d328:	e0bffc17 	ldw	r2,-16(fp)
    d32c:	10800017 	ldw	r2,0(r2)
    d330:	10800717 	ldw	r2,28(r2)
    d334:	10000926 	beq	r2,zero,d35c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d338:	e0bffc17 	ldw	r2,-16(fp)
    d33c:	10800017 	ldw	r2,0(r2)
    d340:	10800717 	ldw	r2,28(r2)
    d344:	e1bfff17 	ldw	r6,-4(fp)
    d348:	e17ffe17 	ldw	r5,-8(fp)
    d34c:	e13ffc17 	ldw	r4,-16(fp)
    d350:	103ee83a 	callr	r2
    d354:	e0bffb15 	stw	r2,-20(fp)
    d358:	00000506 	br	d370 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d35c:	00bfde84 	movi	r2,-134
    d360:	e0bffb15 	stw	r2,-20(fp)
    d364:	00000206 	br	d370 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d368:	00bfebc4 	movi	r2,-81
    d36c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d370:	e0bffb17 	ldw	r2,-20(fp)
    d374:	1000070e 	bge	r2,zero,d394 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d378:	000d29c0 	call	d29c <alt_get_errno>
    d37c:	1007883a 	mov	r3,r2
    d380:	e0bffb17 	ldw	r2,-20(fp)
    d384:	0085c83a 	sub	r2,zero,r2
    d388:	18800015 	stw	r2,0(r3)
    rc = -1;
    d38c:	00bfffc4 	movi	r2,-1
    d390:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d394:	e0bffb17 	ldw	r2,-20(fp)
}
    d398:	e037883a 	mov	sp,fp
    d39c:	dfc00117 	ldw	ra,4(sp)
    d3a0:	df000017 	ldw	fp,0(sp)
    d3a4:	dec00204 	addi	sp,sp,8
    d3a8:	f800283a 	ret

0000d3ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d3ac:	defff904 	addi	sp,sp,-28
    d3b0:	dfc00615 	stw	ra,24(sp)
    d3b4:	df000515 	stw	fp,20(sp)
    d3b8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d3bc:	0009883a 	mov	r4,zero
    d3c0:	00152f00 	call	152f0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d3c4:	000e3680 	call	e368 <OSInit>
    d3c8:	01000044 	movi	r4,1
    d3cc:	0012cb80 	call	12cb8 <OSSemCreate>
    d3d0:	d0a71c15 	stw	r2,-25488(gp)
    d3d4:	01000044 	movi	r4,1
    d3d8:	0012cb80 	call	12cb8 <OSSemCreate>
    d3dc:	d0a71e15 	stw	r2,-25480(gp)
    d3e0:	d0a71704 	addi	r2,gp,-25508
    d3e4:	e0bffc15 	stw	r2,-16(fp)
    d3e8:	00800044 	movi	r2,1
    d3ec:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    d3f0:	e0bffd0b 	ldhu	r2,-12(fp)
    d3f4:	1009883a 	mov	r4,r2
    d3f8:	0012cb80 	call	12cb8 <OSSemCreate>
    d3fc:	1007883a 	mov	r3,r2
    d400:	e0bffc17 	ldw	r2,-16(fp)
    d404:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d408:	00153280 	call	15328 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d40c:	018000f4 	movhi	r6,3
    d410:	31939e04 	addi	r6,r6,20088
    d414:	014000f4 	movhi	r5,3
    d418:	29539e04 	addi	r5,r5,20088
    d41c:	010000f4 	movhi	r4,3
    d420:	21139e04 	addi	r4,r4,20088
    d424:	001674c0 	call	1674c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d428:	00162f40 	call	162f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d42c:	01000074 	movhi	r4,1
    d430:	2118d504 	addi	r4,r4,25428
    d434:	00172dc0 	call	172dc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d438:	d0a71817 	ldw	r2,-25504(gp)
    d43c:	d0e71917 	ldw	r3,-25500(gp)
    d440:	d1271a17 	ldw	r4,-25496(gp)
    d444:	200d883a 	mov	r6,r4
    d448:	180b883a 	mov	r5,r3
    d44c:	1009883a 	mov	r4,r2
    d450:	00004d40 	call	4d4 <main>
    d454:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    d458:	01000044 	movi	r4,1
    d45c:	000cee80 	call	cee8 <close>
  exit (result);
    d460:	e13ffb17 	ldw	r4,-20(fp)
    d464:	00172f00 	call	172f0 <exit>

0000d468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d468:	defffe04 	addi	sp,sp,-8
    d46c:	dfc00115 	stw	ra,4(sp)
    d470:	df000015 	stw	fp,0(sp)
    d474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d478:	d0a00c17 	ldw	r2,-32720(gp)
    d47c:	10000326 	beq	r2,zero,d48c <alt_get_errno+0x24>
    d480:	d0a00c17 	ldw	r2,-32720(gp)
    d484:	103ee83a 	callr	r2
    d488:	00000106 	br	d490 <alt_get_errno+0x28>
    d48c:	d0a71604 	addi	r2,gp,-25512
}
    d490:	e037883a 	mov	sp,fp
    d494:	dfc00117 	ldw	ra,4(sp)
    d498:	df000017 	ldw	fp,0(sp)
    d49c:	dec00204 	addi	sp,sp,8
    d4a0:	f800283a 	ret

0000d4a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d4a4:	defff904 	addi	sp,sp,-28
    d4a8:	dfc00615 	stw	ra,24(sp)
    d4ac:	df000515 	stw	fp,20(sp)
    d4b0:	df000504 	addi	fp,sp,20
    d4b4:	e13ffd15 	stw	r4,-12(fp)
    d4b8:	e17ffe15 	stw	r5,-8(fp)
    d4bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d4c0:	e0bffd17 	ldw	r2,-12(fp)
    d4c4:	10000616 	blt	r2,zero,d4e0 <read+0x3c>
    d4c8:	e0bffd17 	ldw	r2,-12(fp)
    d4cc:	10c00324 	muli	r3,r2,12
    d4d0:	008000f4 	movhi	r2,3
    d4d4:	10962404 	addi	r2,r2,22672
    d4d8:	1885883a 	add	r2,r3,r2
    d4dc:	00000106 	br	d4e4 <read+0x40>
    d4e0:	0005883a 	mov	r2,zero
    d4e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d4e8:	e0bffb17 	ldw	r2,-20(fp)
    d4ec:	10002226 	beq	r2,zero,d578 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d4f0:	e0bffb17 	ldw	r2,-20(fp)
    d4f4:	10800217 	ldw	r2,8(r2)
    d4f8:	108000cc 	andi	r2,r2,3
    d4fc:	10800060 	cmpeqi	r2,r2,1
    d500:	1000181e 	bne	r2,zero,d564 <read+0xc0>
        (fd->dev->read))
    d504:	e0bffb17 	ldw	r2,-20(fp)
    d508:	10800017 	ldw	r2,0(r2)
    d50c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d510:	10001426 	beq	r2,zero,d564 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d514:	e0bffb17 	ldw	r2,-20(fp)
    d518:	10800017 	ldw	r2,0(r2)
    d51c:	10800517 	ldw	r2,20(r2)
    d520:	e0ffff17 	ldw	r3,-4(fp)
    d524:	180d883a 	mov	r6,r3
    d528:	e17ffe17 	ldw	r5,-8(fp)
    d52c:	e13ffb17 	ldw	r4,-20(fp)
    d530:	103ee83a 	callr	r2
    d534:	e0bffc15 	stw	r2,-16(fp)
    d538:	e0bffc17 	ldw	r2,-16(fp)
    d53c:	1000070e 	bge	r2,zero,d55c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d540:	000d4680 	call	d468 <alt_get_errno>
    d544:	1007883a 	mov	r3,r2
    d548:	e0bffc17 	ldw	r2,-16(fp)
    d54c:	0085c83a 	sub	r2,zero,r2
    d550:	18800015 	stw	r2,0(r3)
          return -1;
    d554:	00bfffc4 	movi	r2,-1
    d558:	00000c06 	br	d58c <read+0xe8>
        }
        return rval;
    d55c:	e0bffc17 	ldw	r2,-16(fp)
    d560:	00000a06 	br	d58c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d564:	000d4680 	call	d468 <alt_get_errno>
    d568:	1007883a 	mov	r3,r2
    d56c:	00800344 	movi	r2,13
    d570:	18800015 	stw	r2,0(r3)
    d574:	00000406 	br	d588 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d578:	000d4680 	call	d468 <alt_get_errno>
    d57c:	1007883a 	mov	r3,r2
    d580:	00801444 	movi	r2,81
    d584:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d588:	00bfffc4 	movi	r2,-1
}
    d58c:	e037883a 	mov	sp,fp
    d590:	dfc00117 	ldw	ra,4(sp)
    d594:	df000017 	ldw	fp,0(sp)
    d598:	dec00204 	addi	sp,sp,8
    d59c:	f800283a 	ret

0000d5a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d5a0:	defffe04 	addi	sp,sp,-8
    d5a4:	df000115 	stw	fp,4(sp)
    d5a8:	df000104 	addi	fp,sp,4
    d5ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d5b0:	e0bfff17 	ldw	r2,-4(fp)
    d5b4:	108000d0 	cmplti	r2,r2,3
    d5b8:	10000d1e 	bne	r2,zero,d5f0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d5bc:	008000f4 	movhi	r2,3
    d5c0:	10962404 	addi	r2,r2,22672
    d5c4:	e0ffff17 	ldw	r3,-4(fp)
    d5c8:	18c00324 	muli	r3,r3,12
    d5cc:	10c5883a 	add	r2,r2,r3
    d5d0:	10800204 	addi	r2,r2,8
    d5d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d5d8:	008000f4 	movhi	r2,3
    d5dc:	10962404 	addi	r2,r2,22672
    d5e0:	e0ffff17 	ldw	r3,-4(fp)
    d5e4:	18c00324 	muli	r3,r3,12
    d5e8:	10c5883a 	add	r2,r2,r3
    d5ec:	10000015 	stw	zero,0(r2)
  }
}
    d5f0:	0001883a 	nop
    d5f4:	e037883a 	mov	sp,fp
    d5f8:	df000017 	ldw	fp,0(sp)
    d5fc:	dec00104 	addi	sp,sp,4
    d600:	f800283a 	ret

0000d604 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d604:	defff904 	addi	sp,sp,-28
    d608:	df000615 	stw	fp,24(sp)
    d60c:	df000604 	addi	fp,sp,24
    d610:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d614:	0005303a 	rdctl	r2,status
    d618:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d61c:	e0fffe17 	ldw	r3,-8(fp)
    d620:	00bfff84 	movi	r2,-2
    d624:	1884703a 	and	r2,r3,r2
    d628:	1001703a 	wrctl	status,r2
  
  return context;
    d62c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d630:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d634:	d0a00d17 	ldw	r2,-32716(gp)
    d638:	10c000c4 	addi	r3,r2,3
    d63c:	00bfff04 	movi	r2,-4
    d640:	1884703a 	and	r2,r3,r2
    d644:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d648:	d0e00d17 	ldw	r3,-32716(gp)
    d64c:	e0bfff17 	ldw	r2,-4(fp)
    d650:	1887883a 	add	r3,r3,r2
    d654:	00800134 	movhi	r2,4
    d658:	10b42404 	addi	r2,r2,-12144
    d65c:	10c0062e 	bgeu	r2,r3,d678 <sbrk+0x74>
    d660:	e0bffb17 	ldw	r2,-20(fp)
    d664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d668:	e0bffa17 	ldw	r2,-24(fp)
    d66c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d670:	00bfffc4 	movi	r2,-1
    d674:	00000b06 	br	d6a4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d678:	d0a00d17 	ldw	r2,-32716(gp)
    d67c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d680:	d0e00d17 	ldw	r3,-32716(gp)
    d684:	e0bfff17 	ldw	r2,-4(fp)
    d688:	1885883a 	add	r2,r3,r2
    d68c:	d0a00d15 	stw	r2,-32716(gp)
    d690:	e0bffb17 	ldw	r2,-20(fp)
    d694:	e0bffc15 	stw	r2,-16(fp)
    d698:	e0bffc17 	ldw	r2,-16(fp)
    d69c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d6a0:	e0bffd17 	ldw	r2,-12(fp)
} 
    d6a4:	e037883a 	mov	sp,fp
    d6a8:	df000017 	ldw	fp,0(sp)
    d6ac:	dec00104 	addi	sp,sp,4
    d6b0:	f800283a 	ret

0000d6b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d6b4:	defffe04 	addi	sp,sp,-8
    d6b8:	dfc00115 	stw	ra,4(sp)
    d6bc:	df000015 	stw	fp,0(sp)
    d6c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d6c4:	d0a00c17 	ldw	r2,-32720(gp)
    d6c8:	10000326 	beq	r2,zero,d6d8 <alt_get_errno+0x24>
    d6cc:	d0a00c17 	ldw	r2,-32720(gp)
    d6d0:	103ee83a 	callr	r2
    d6d4:	00000106 	br	d6dc <alt_get_errno+0x28>
    d6d8:	d0a71604 	addi	r2,gp,-25512
}
    d6dc:	e037883a 	mov	sp,fp
    d6e0:	dfc00117 	ldw	ra,4(sp)
    d6e4:	df000017 	ldw	fp,0(sp)
    d6e8:	dec00204 	addi	sp,sp,8
    d6ec:	f800283a 	ret

0000d6f0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d6f0:	defff904 	addi	sp,sp,-28
    d6f4:	dfc00615 	stw	ra,24(sp)
    d6f8:	df000515 	stw	fp,20(sp)
    d6fc:	df000504 	addi	fp,sp,20
    d700:	e13ffd15 	stw	r4,-12(fp)
    d704:	e17ffe15 	stw	r5,-8(fp)
    d708:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d70c:	e0bffd17 	ldw	r2,-12(fp)
    d710:	10000616 	blt	r2,zero,d72c <write+0x3c>
    d714:	e0bffd17 	ldw	r2,-12(fp)
    d718:	10c00324 	muli	r3,r2,12
    d71c:	008000f4 	movhi	r2,3
    d720:	10962404 	addi	r2,r2,22672
    d724:	1885883a 	add	r2,r3,r2
    d728:	00000106 	br	d730 <write+0x40>
    d72c:	0005883a 	mov	r2,zero
    d730:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d734:	e0bffb17 	ldw	r2,-20(fp)
    d738:	10002126 	beq	r2,zero,d7c0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d73c:	e0bffb17 	ldw	r2,-20(fp)
    d740:	10800217 	ldw	r2,8(r2)
    d744:	108000cc 	andi	r2,r2,3
    d748:	10001826 	beq	r2,zero,d7ac <write+0xbc>
    d74c:	e0bffb17 	ldw	r2,-20(fp)
    d750:	10800017 	ldw	r2,0(r2)
    d754:	10800617 	ldw	r2,24(r2)
    d758:	10001426 	beq	r2,zero,d7ac <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d75c:	e0bffb17 	ldw	r2,-20(fp)
    d760:	10800017 	ldw	r2,0(r2)
    d764:	10800617 	ldw	r2,24(r2)
    d768:	e0ffff17 	ldw	r3,-4(fp)
    d76c:	180d883a 	mov	r6,r3
    d770:	e17ffe17 	ldw	r5,-8(fp)
    d774:	e13ffb17 	ldw	r4,-20(fp)
    d778:	103ee83a 	callr	r2
    d77c:	e0bffc15 	stw	r2,-16(fp)
    d780:	e0bffc17 	ldw	r2,-16(fp)
    d784:	1000070e 	bge	r2,zero,d7a4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d788:	000d6b40 	call	d6b4 <alt_get_errno>
    d78c:	1007883a 	mov	r3,r2
    d790:	e0bffc17 	ldw	r2,-16(fp)
    d794:	0085c83a 	sub	r2,zero,r2
    d798:	18800015 	stw	r2,0(r3)
        return -1;
    d79c:	00bfffc4 	movi	r2,-1
    d7a0:	00000c06 	br	d7d4 <write+0xe4>
      }
      return rval;
    d7a4:	e0bffc17 	ldw	r2,-16(fp)
    d7a8:	00000a06 	br	d7d4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d7ac:	000d6b40 	call	d6b4 <alt_get_errno>
    d7b0:	1007883a 	mov	r3,r2
    d7b4:	00800344 	movi	r2,13
    d7b8:	18800015 	stw	r2,0(r3)
    d7bc:	00000406 	br	d7d0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d7c0:	000d6b40 	call	d6b4 <alt_get_errno>
    d7c4:	1007883a 	mov	r3,r2
    d7c8:	00801444 	movi	r2,81
    d7cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d7d0:	00bfffc4 	movi	r2,-1
}
    d7d4:	e037883a 	mov	sp,fp
    d7d8:	dfc00117 	ldw	ra,4(sp)
    d7dc:	df000017 	ldw	fp,0(sp)
    d7e0:	dec00204 	addi	sp,sp,8
    d7e4:	f800283a 	ret

0000d7e8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    d7e8:	deffdf04 	addi	sp,sp,-132
    d7ec:	dfc02015 	stw	ra,128(sp)
    d7f0:	df001f15 	stw	fp,124(sp)
    d7f4:	df001f04 	addi	fp,sp,124
    d7f8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d7fc:	e0bfe204 	addi	r2,fp,-120
    d800:	100b883a 	mov	r5,r2
    d804:	01003fc4 	movi	r4,255
    d808:	0014c400 	call	14c40 <OSTaskQuery>
    d80c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d810:	e0bffe83 	ldbu	r2,-6(fp)
    d814:	10803fcc 	andi	r2,r2,255
    d818:	10001e1e 	bne	r2,zero,d894 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    d81c:	e0bfee83 	ldbu	r2,-70(fp)
    d820:	10803fcc 	andi	r2,r2,255
    d824:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    d828:	d0a71c17 	ldw	r2,-25488(gp)
    d82c:	e0fffd04 	addi	r3,fp,-12
    d830:	180b883a 	mov	r5,r3
    d834:	1009883a 	mov	r4,r2
    d838:	00134580 	call	13458 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    d83c:	e0bffe43 	ldbu	r2,-7(fp)
    d840:	10803fcc 	andi	r2,r2,255
    d844:	10000726 	beq	r2,zero,d864 <__env_lock+0x7c>
    d848:	d0a00e17 	ldw	r2,-32712(gp)
    d84c:	e0ffe117 	ldw	r3,-124(fp)
    d850:	1880041e 	bne	r3,r2,d864 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    d854:	d0a71b17 	ldw	r2,-25492(gp)
    d858:	10800044 	addi	r2,r2,1
    d85c:	d0a71b15 	stw	r2,-25492(gp)
    d860:	00000a06 	br	d88c <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    d864:	d0a71c17 	ldw	r2,-25488(gp)
    d868:	e0fffe84 	addi	r3,fp,-6
    d86c:	180d883a 	mov	r6,r3
    d870:	000b883a 	mov	r5,zero
    d874:	1009883a 	mov	r4,r2
    d878:	0012fd00 	call	12fd0 <OSSemPend>
    locks  = 1;
    d87c:	00800044 	movi	r2,1
    d880:	d0a71b15 	stw	r2,-25492(gp)
    lockid = id;
    d884:	e0bfe117 	ldw	r2,-124(fp)
    d888:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    d88c:	0001883a 	nop
    d890:	00000106 	br	d898 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    d894:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    d898:	e037883a 	mov	sp,fp
    d89c:	dfc00117 	ldw	ra,4(sp)
    d8a0:	df000017 	ldw	fp,0(sp)
    d8a4:	dec00204 	addi	sp,sp,8
    d8a8:	f800283a 	ret

0000d8ac <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    d8ac:	defffd04 	addi	sp,sp,-12
    d8b0:	dfc00215 	stw	ra,8(sp)
    d8b4:	df000115 	stw	fp,4(sp)
    d8b8:	df000104 	addi	fp,sp,4
    d8bc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    d8c0:	d0a71b17 	ldw	r2,-25492(gp)
    d8c4:	10000b26 	beq	r2,zero,d8f4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    d8c8:	d0a71b17 	ldw	r2,-25492(gp)
    d8cc:	10bfffc4 	addi	r2,r2,-1
    d8d0:	d0a71b15 	stw	r2,-25492(gp)
    d8d4:	d0a71b17 	ldw	r2,-25492(gp)
    d8d8:	1000071e 	bne	r2,zero,d8f8 <__env_unlock+0x4c>
  {
    lockid = -1;
    d8dc:	00bfffc4 	movi	r2,-1
    d8e0:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
    d8e4:	d0a71c17 	ldw	r2,-25488(gp)
    d8e8:	1009883a 	mov	r4,r2
    d8ec:	00133480 	call	13348 <OSSemPost>
    d8f0:	00000106 	br	d8f8 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    d8f4:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    d8f8:	e037883a 	mov	sp,fp
    d8fc:	dfc00117 	ldw	ra,4(sp)
    d900:	df000017 	ldw	fp,0(sp)
    d904:	dec00204 	addi	sp,sp,8
    d908:	f800283a 	ret

0000d90c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    d90c:	deffdb04 	addi	sp,sp,-148
    d910:	dfc02415 	stw	ra,144(sp)
    d914:	df002315 	stw	fp,140(sp)
    d918:	df002304 	addi	fp,sp,140
    d91c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    d920:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    d924:	d0a71f43 	ldbu	r2,-25475(gp)
    d928:	10803fcc 	andi	r2,r2,255
    d92c:	10800060 	cmpeqi	r2,r2,1
    d930:	10003626 	beq	r2,zero,da0c <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d934:	e0bfe204 	addi	r2,fp,-120
    d938:	100b883a 	mov	r5,r2
    d93c:	01003fc4 	movi	r4,255
    d940:	0014c400 	call	14c40 <OSTaskQuery>
    d944:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d948:	e0bffe83 	ldbu	r2,-6(fp)
    d94c:	10803fcc 	andi	r2,r2,255
    d950:	1000301e 	bne	r2,zero,da14 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    d954:	e0bfee83 	ldbu	r2,-70(fp)
    d958:	10803fcc 	andi	r2,r2,255
    d95c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    d960:	d0a71e17 	ldw	r2,-25480(gp)
    d964:	e0fffd04 	addi	r3,fp,-12
    d968:	180b883a 	mov	r5,r3
    d96c:	1009883a 	mov	r4,r2
    d970:	00134580 	call	13458 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d974:	0005303a 	rdctl	r2,status
    d978:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d97c:	e0ffe117 	ldw	r3,-124(fp)
    d980:	00bfff84 	movi	r2,-2
    d984:	1884703a 	and	r2,r3,r2
    d988:	1001703a 	wrctl	status,r2
  
  return context;
    d98c:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    d990:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    d994:	e0bffd0b 	ldhu	r2,-12(fp)
    d998:	10bfffcc 	andi	r2,r2,65535
    d99c:	10000b1e 	bne	r2,zero,d9cc <__malloc_lock+0xc0>
    d9a0:	d0a00f17 	ldw	r2,-32708(gp)
    d9a4:	e0ffde17 	ldw	r3,-136(fp)
    d9a8:	1880081e 	bne	r3,r2,d9cc <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    d9ac:	d0a71d17 	ldw	r2,-25484(gp)
    d9b0:	10800044 	addi	r2,r2,1
    d9b4:	d0a71d15 	stw	r2,-25484(gp)
    d9b8:	e0bfdd17 	ldw	r2,-140(fp)
    d9bc:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d9c0:	e0bfdf17 	ldw	r2,-132(fp)
    d9c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    d9c8:	00000e06 	br	da04 <__malloc_lock+0xf8>
    d9cc:	e0bfdd17 	ldw	r2,-140(fp)
    d9d0:	e0bfe015 	stw	r2,-128(fp)
    d9d4:	e0bfe017 	ldw	r2,-128(fp)
    d9d8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    d9dc:	d0a71e17 	ldw	r2,-25480(gp)
    d9e0:	e0fffe84 	addi	r3,fp,-6
    d9e4:	180d883a 	mov	r6,r3
    d9e8:	000b883a 	mov	r5,zero
    d9ec:	1009883a 	mov	r4,r2
    d9f0:	0012fd00 	call	12fd0 <OSSemPend>
    locks  = 1;
    d9f4:	00800044 	movi	r2,1
    d9f8:	d0a71d15 	stw	r2,-25484(gp)
    lockid = id;
    d9fc:	e0bfde17 	ldw	r2,-136(fp)
    da00:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    da04:	0001883a 	nop
    da08:	00000306 	br	da18 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    da0c:	0001883a 	nop
    da10:	00000106 	br	da18 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    da14:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    da18:	e037883a 	mov	sp,fp
    da1c:	dfc00117 	ldw	ra,4(sp)
    da20:	df000017 	ldw	fp,0(sp)
    da24:	dec00204 	addi	sp,sp,8
    da28:	f800283a 	ret

0000da2c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    da2c:	defff804 	addi	sp,sp,-32
    da30:	dfc00715 	stw	ra,28(sp)
    da34:	df000615 	stw	fp,24(sp)
    da38:	df000604 	addi	fp,sp,24
    da3c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    da40:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    da44:	d0a71f43 	ldbu	r2,-25475(gp)
    da48:	10803fcc 	andi	r2,r2,255
    da4c:	10800060 	cmpeqi	r2,r2,1
    da50:	10002326 	beq	r2,zero,dae0 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da54:	0005303a 	rdctl	r2,status
    da58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da5c:	e0fffe17 	ldw	r3,-8(fp)
    da60:	00bfff84 	movi	r2,-2
    da64:	1884703a 	and	r2,r3,r2
    da68:	1001703a 	wrctl	status,r2
  
  return context;
    da6c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    da70:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    da74:	d0a71d17 	ldw	r2,-25484(gp)
    da78:	1000051e 	bne	r2,zero,da90 <__malloc_unlock+0x64>
    da7c:	e0bffa17 	ldw	r2,-24(fp)
    da80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da84:	e0bffb17 	ldw	r2,-20(fp)
    da88:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    da8c:	00001506 	br	dae4 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    da90:	d0a71d17 	ldw	r2,-25484(gp)
    da94:	10bfffc4 	addi	r2,r2,-1
    da98:	d0a71d15 	stw	r2,-25484(gp)
    da9c:	d0a71d17 	ldw	r2,-25484(gp)
    daa0:	10000a1e 	bne	r2,zero,dacc <__malloc_unlock+0xa0>
  {
    lockid = -1;
    daa4:	00bfffc4 	movi	r2,-1
    daa8:	d0a00f15 	stw	r2,-32708(gp)
    daac:	e0bffa17 	ldw	r2,-24(fp)
    dab0:	e0bffc15 	stw	r2,-16(fp)
    dab4:	e0bffc17 	ldw	r2,-16(fp)
    dab8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    dabc:	d0a71e17 	ldw	r2,-25480(gp)
    dac0:	1009883a 	mov	r4,r2
    dac4:	00133480 	call	13348 <OSSemPost>
    dac8:	00000606 	br	dae4 <__malloc_unlock+0xb8>
    dacc:	e0bffa17 	ldw	r2,-24(fp)
    dad0:	e0bffd15 	stw	r2,-12(fp)
    dad4:	e0bffd17 	ldw	r2,-12(fp)
    dad8:	1001703a 	wrctl	status,r2
    dadc:	00000106 	br	dae4 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    dae0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    dae4:	e037883a 	mov	sp,fp
    dae8:	dfc00117 	ldw	ra,4(sp)
    daec:	df000017 	ldw	fp,0(sp)
    daf0:	dec00204 	addi	sp,sp,8
    daf4:	f800283a 	ret

0000daf8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    daf8:	defff704 	addi	sp,sp,-36
    dafc:	dfc00815 	stw	ra,32(sp)
    db00:	df000715 	stw	fp,28(sp)
    db04:	df000704 	addi	fp,sp,28
    db08:	e13ffd15 	stw	r4,-12(fp)
    db0c:	e17ffe15 	stw	r5,-8(fp)
    db10:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    db14:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    db18:	e0bfff17 	ldw	r2,-4(fp)
    db1c:	1000021e 	bne	r2,zero,db28 <OSEventNameGet+0x30>
        return (0);
    db20:	0005883a 	mov	r2,zero
    db24:	00003706 	br	dc04 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    db28:	e0bffd17 	ldw	r2,-12(fp)
    db2c:	1000051e 	bne	r2,zero,db44 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    db30:	e0bfff17 	ldw	r2,-4(fp)
    db34:	00c00104 	movi	r3,4
    db38:	10c00005 	stb	r3,0(r2)
        return (0);
    db3c:	0005883a 	mov	r2,zero
    db40:	00003006 	br	dc04 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    db44:	e0bffe17 	ldw	r2,-8(fp)
    db48:	1000051e 	bne	r2,zero,db60 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    db4c:	e0bfff17 	ldw	r2,-4(fp)
    db50:	00c00304 	movi	r3,12
    db54:	10c00005 	stb	r3,0(r2)
        return (0);
    db58:	0005883a 	mov	r2,zero
    db5c:	00002906 	br	dc04 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    db60:	d0a72d03 	ldbu	r2,-25420(gp)
    db64:	10803fcc 	andi	r2,r2,255
    db68:	10000526 	beq	r2,zero,db80 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    db6c:	e0bfff17 	ldw	r2,-4(fp)
    db70:	00c00444 	movi	r3,17
    db74:	10c00005 	stb	r3,0(r2)
        return (0);
    db78:	0005883a 	mov	r2,zero
    db7c:	00002106 	br	dc04 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    db80:	e0bffd17 	ldw	r2,-12(fp)
    db84:	10800003 	ldbu	r2,0(r2)
    db88:	10803fcc 	andi	r2,r2,255
    db8c:	10bfffc4 	addi	r2,r2,-1
    db90:	10800128 	cmpgeui	r2,r2,4
    db94:	10000526 	beq	r2,zero,dbac <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    db98:	e0bfff17 	ldw	r2,-4(fp)
    db9c:	00c00044 	movi	r3,1
    dba0:	10c00005 	stb	r3,0(r2)
             return (0);
    dba4:	0005883a 	mov	r2,zero
    dba8:	00001606 	br	dc04 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    dbac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbb0:	0005303a 	rdctl	r2,status
    dbb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbb8:	e0fffb17 	ldw	r3,-20(fp)
    dbbc:	00bfff84 	movi	r2,-2
    dbc0:	1884703a 	and	r2,r3,r2
    dbc4:	1001703a 	wrctl	status,r2
  
  return context;
    dbc8:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    dbcc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    dbd0:	e0bffd17 	ldw	r2,-12(fp)
    dbd4:	10800384 	addi	r2,r2,14
    dbd8:	100b883a 	mov	r5,r2
    dbdc:	e13ffe17 	ldw	r4,-8(fp)
    dbe0:	000f57c0 	call	f57c <OS_StrCopy>
    dbe4:	e0bffa05 	stb	r2,-24(fp)
    dbe8:	e0bff917 	ldw	r2,-28(fp)
    dbec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dbf0:	e0bffc17 	ldw	r2,-16(fp)
    dbf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dbf8:	e0bfff17 	ldw	r2,-4(fp)
    dbfc:	10000005 	stb	zero,0(r2)
    return (len);
    dc00:	e0bffa03 	ldbu	r2,-24(fp)
}
    dc04:	e037883a 	mov	sp,fp
    dc08:	dfc00117 	ldw	ra,4(sp)
    dc0c:	df000017 	ldw	fp,0(sp)
    dc10:	dec00204 	addi	sp,sp,8
    dc14:	f800283a 	ret

0000dc18 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    dc18:	defff604 	addi	sp,sp,-40
    dc1c:	dfc00915 	stw	ra,36(sp)
    dc20:	df000815 	stw	fp,32(sp)
    dc24:	df000804 	addi	fp,sp,32
    dc28:	e13ffd15 	stw	r4,-12(fp)
    dc2c:	e17ffe15 	stw	r5,-8(fp)
    dc30:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dc34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    dc38:	e0bfff17 	ldw	r2,-4(fp)
    dc3c:	10004026 	beq	r2,zero,dd40 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    dc40:	e0bffd17 	ldw	r2,-12(fp)
    dc44:	1000041e 	bne	r2,zero,dc58 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    dc48:	e0bfff17 	ldw	r2,-4(fp)
    dc4c:	00c00104 	movi	r3,4
    dc50:	10c00005 	stb	r3,0(r2)
        return;
    dc54:	00003b06 	br	dd44 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    dc58:	e0bffe17 	ldw	r2,-8(fp)
    dc5c:	1000041e 	bne	r2,zero,dc70 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    dc60:	e0bfff17 	ldw	r2,-4(fp)
    dc64:	00c00304 	movi	r3,12
    dc68:	10c00005 	stb	r3,0(r2)
        return;
    dc6c:	00003506 	br	dd44 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    dc70:	d0a72d03 	ldbu	r2,-25420(gp)
    dc74:	10803fcc 	andi	r2,r2,255
    dc78:	10000426 	beq	r2,zero,dc8c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    dc7c:	e0bfff17 	ldw	r2,-4(fp)
    dc80:	00c00484 	movi	r3,18
    dc84:	10c00005 	stb	r3,0(r2)
        return;
    dc88:	00002e06 	br	dd44 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    dc8c:	e0bffd17 	ldw	r2,-12(fp)
    dc90:	10800003 	ldbu	r2,0(r2)
    dc94:	10803fcc 	andi	r2,r2,255
    dc98:	10bfffc4 	addi	r2,r2,-1
    dc9c:	10800128 	cmpgeui	r2,r2,4
    dca0:	10000426 	beq	r2,zero,dcb4 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    dca4:	e0bfff17 	ldw	r2,-4(fp)
    dca8:	00c00044 	movi	r3,1
    dcac:	10c00005 	stb	r3,0(r2)
             return;
    dcb0:	00002406 	br	dd44 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    dcb4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dcb8:	0005303a 	rdctl	r2,status
    dcbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dcc0:	e0fffc17 	ldw	r3,-16(fp)
    dcc4:	00bfff84 	movi	r2,-2
    dcc8:	1884703a 	and	r2,r3,r2
    dccc:	1001703a 	wrctl	status,r2
  
  return context;
    dcd0:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    dcd4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    dcd8:	e13ffe17 	ldw	r4,-8(fp)
    dcdc:	000f5f00 	call	f5f0 <OS_StrLen>
    dce0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    dce4:	e0bffa03 	ldbu	r2,-24(fp)
    dce8:	10800830 	cmpltui	r2,r2,32
    dcec:	1000081e 	bne	r2,zero,dd10 <OSEventNameSet+0xf8>
    dcf0:	e0bff817 	ldw	r2,-32(fp)
    dcf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dcf8:	e0bff917 	ldw	r2,-28(fp)
    dcfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    dd00:	e0bfff17 	ldw	r2,-4(fp)
    dd04:	00c002c4 	movi	r3,11
    dd08:	10c00005 	stb	r3,0(r2)
        return;
    dd0c:	00000d06 	br	dd44 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    dd10:	e0bffd17 	ldw	r2,-12(fp)
    dd14:	10800384 	addi	r2,r2,14
    dd18:	e17ffe17 	ldw	r5,-8(fp)
    dd1c:	1009883a 	mov	r4,r2
    dd20:	000f57c0 	call	f57c <OS_StrCopy>
    dd24:	e0bff817 	ldw	r2,-32(fp)
    dd28:	e0bffb15 	stw	r2,-20(fp)
    dd2c:	e0bffb17 	ldw	r2,-20(fp)
    dd30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dd34:	e0bfff17 	ldw	r2,-4(fp)
    dd38:	10000005 	stb	zero,0(r2)
    dd3c:	00000106 	br	dd44 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    dd40:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    dd44:	e037883a 	mov	sp,fp
    dd48:	dfc00117 	ldw	ra,4(sp)
    dd4c:	df000017 	ldw	fp,0(sp)
    dd50:	dec00204 	addi	sp,sp,8
    dd54:	f800283a 	ret

0000dd58 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    dd58:	deffed04 	addi	sp,sp,-76
    dd5c:	dfc01215 	stw	ra,72(sp)
    dd60:	df001115 	stw	fp,68(sp)
    dd64:	df001104 	addi	fp,sp,68
    dd68:	e13ffc15 	stw	r4,-16(fp)
    dd6c:	e17ffd15 	stw	r5,-12(fp)
    dd70:	e1bffe15 	stw	r6,-8(fp)
    dd74:	3805883a 	mov	r2,r7
    dd78:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    dd7c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    dd80:	e0800217 	ldw	r2,8(fp)
    dd84:	1000021e 	bne	r2,zero,dd90 <OSEventPendMulti+0x38>
        return (0);
    dd88:	0005883a 	mov	r2,zero
    dd8c:	00017106 	br	e354 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    dd90:	e0bffc17 	ldw	r2,-16(fp)
    dd94:	1000051e 	bne	r2,zero,ddac <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    dd98:	e0800217 	ldw	r2,8(fp)
    dd9c:	00c00104 	movi	r3,4
    dda0:	10c00005 	stb	r3,0(r2)
        return (0);
    dda4:	0005883a 	mov	r2,zero
    dda8:	00016a06 	br	e354 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    ddac:	e0bffd17 	ldw	r2,-12(fp)
    ddb0:	1000051e 	bne	r2,zero,ddc8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    ddb4:	e0800217 	ldw	r2,8(fp)
    ddb8:	00c00104 	movi	r3,4
    ddbc:	10c00005 	stb	r3,0(r2)
        return (0);
    ddc0:	0005883a 	mov	r2,zero
    ddc4:	00016306 	br	e354 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    ddc8:	e0bffe17 	ldw	r2,-8(fp)
    ddcc:	1000051e 	bne	r2,zero,dde4 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    ddd0:	e0800217 	ldw	r2,8(fp)
    ddd4:	00c00104 	movi	r3,4
    ddd8:	10c00005 	stb	r3,0(r2)
        return (0);
    dddc:	0005883a 	mov	r2,zero
    dde0:	00015c06 	br	e354 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    dde4:	e0bffd17 	ldw	r2,-12(fp)
    dde8:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    ddec:	e0bffc17 	ldw	r2,-16(fp)
    ddf0:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    ddf4:	e0bfef17 	ldw	r2,-68(fp)
    ddf8:	10800017 	ldw	r2,0(r2)
    ddfc:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    de00:	00001906 	br	de68 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    de04:	e0bff017 	ldw	r2,-64(fp)
    de08:	10800003 	ldbu	r2,0(r2)
    de0c:	10803fcc 	andi	r2,r2,255
    de10:	10c000a0 	cmpeqi	r3,r2,2
    de14:	1800091e 	bne	r3,zero,de3c <OSEventPendMulti+0xe4>
    de18:	10c000e0 	cmpeqi	r3,r2,3
    de1c:	1800091e 	bne	r3,zero,de44 <OSEventPendMulti+0xec>
    de20:	10800060 	cmpeqi	r2,r2,1
    de24:	1000091e 	bne	r2,zero,de4c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    de28:	e0800217 	ldw	r2,8(fp)
    de2c:	00c00044 	movi	r3,1
    de30:	10c00005 	stb	r3,0(r2)
                 return (0);
    de34:	0005883a 	mov	r2,zero
    de38:	00014606 	br	e354 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    de3c:	0001883a 	nop
    de40:	00000306 	br	de50 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    de44:	0001883a 	nop
    de48:	00000106 	br	de50 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    de4c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    de50:	e0bfef17 	ldw	r2,-68(fp)
    de54:	10800104 	addi	r2,r2,4
    de58:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    de5c:	e0bfef17 	ldw	r2,-68(fp)
    de60:	10800017 	ldw	r2,0(r2)
    de64:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    de68:	e0bff017 	ldw	r2,-64(fp)
    de6c:	103fe51e 	bne	r2,zero,de04 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    de70:	d0a72d03 	ldbu	r2,-25420(gp)
    de74:	10803fcc 	andi	r2,r2,255
    de78:	10000526 	beq	r2,zero,de90 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    de7c:	e0800217 	ldw	r2,8(fp)
    de80:	00c00084 	movi	r3,2
    de84:	10c00005 	stb	r3,0(r2)
        return (0);
    de88:	0005883a 	mov	r2,zero
    de8c:	00013106 	br	e354 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    de90:	d0a71f03 	ldbu	r2,-25476(gp)
    de94:	10803fcc 	andi	r2,r2,255
    de98:	10000526 	beq	r2,zero,deb0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    de9c:	e0800217 	ldw	r2,8(fp)
    dea0:	00c00344 	movi	r3,13
    dea4:	10c00005 	stb	r3,0(r2)
        return (0);
    dea8:	0005883a 	mov	r2,zero
    deac:	00012906 	br	e354 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    deb0:	0005303a 	rdctl	r2,status
    deb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    deb8:	e0fffb17 	ldw	r3,-20(fp)
    debc:	00bfff84 	movi	r2,-2
    dec0:	1884703a 	and	r2,r3,r2
    dec4:	1001703a 	wrctl	status,r2
  
  return context;
    dec8:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    decc:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    ded0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    ded4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    ded8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    dedc:	e0bffc17 	ldw	r2,-16(fp)
    dee0:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    dee4:	e0bfef17 	ldw	r2,-68(fp)
    dee8:	10800017 	ldw	r2,0(r2)
    deec:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    def0:	00008106 	br	e0f8 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    def4:	e0bff017 	ldw	r2,-64(fp)
    def8:	10800003 	ldbu	r2,0(r2)
    defc:	10803fcc 	andi	r2,r2,255
    df00:	10c000a0 	cmpeqi	r3,r2,2
    df04:	18003c1e 	bne	r3,zero,dff8 <OSEventPendMulti+0x2a0>
    df08:	10c000e0 	cmpeqi	r3,r2,3
    df0c:	1800031e 	bne	r3,zero,df1c <OSEventPendMulti+0x1c4>
    df10:	10800060 	cmpeqi	r2,r2,1
    df14:	10001e1e 	bne	r2,zero,df90 <OSEventPendMulti+0x238>
    df18:	00006606 	br	e0b4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    df1c:	e0bff017 	ldw	r2,-64(fp)
    df20:	1080020b 	ldhu	r2,8(r2)
    df24:	10bfffcc 	andi	r2,r2,65535
    df28:	10001526 	beq	r2,zero,df80 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    df2c:	e0bff017 	ldw	r2,-64(fp)
    df30:	1080020b 	ldhu	r2,8(r2)
    df34:	10bfffc4 	addi	r2,r2,-1
    df38:	1007883a 	mov	r3,r2
    df3c:	e0bff017 	ldw	r2,-64(fp)
    df40:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    df44:	e0bffd17 	ldw	r2,-12(fp)
    df48:	10c00104 	addi	r3,r2,4
    df4c:	e0fffd15 	stw	r3,-12(fp)
    df50:	e0fff017 	ldw	r3,-64(fp)
    df54:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    df58:	00800044 	movi	r2,1
    df5c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    df60:	e0bffe17 	ldw	r2,-8(fp)
    df64:	10c00104 	addi	r3,r2,4
    df68:	e0fffe15 	stw	r3,-8(fp)
    df6c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    df70:	e0bff18b 	ldhu	r2,-58(fp)
    df74:	10800044 	addi	r2,r2,1
    df78:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    df7c:	00005806 	br	e0e0 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    df80:	e0bff203 	ldbu	r2,-56(fp)
    df84:	10800054 	ori	r2,r2,1
    df88:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    df8c:	00005406 	br	e0e0 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    df90:	e0bff017 	ldw	r2,-64(fp)
    df94:	10800117 	ldw	r2,4(r2)
    df98:	10001326 	beq	r2,zero,dfe8 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    df9c:	e0bffe17 	ldw	r2,-8(fp)
    dfa0:	10c00104 	addi	r3,r2,4
    dfa4:	e0fffe15 	stw	r3,-8(fp)
    dfa8:	e0fff017 	ldw	r3,-64(fp)
    dfac:	18c00117 	ldw	r3,4(r3)
    dfb0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    dfb4:	e0bff017 	ldw	r2,-64(fp)
    dfb8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    dfbc:	e0bffd17 	ldw	r2,-12(fp)
    dfc0:	10c00104 	addi	r3,r2,4
    dfc4:	e0fffd15 	stw	r3,-12(fp)
    dfc8:	e0fff017 	ldw	r3,-64(fp)
    dfcc:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    dfd0:	00800044 	movi	r2,1
    dfd4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    dfd8:	e0bff18b 	ldhu	r2,-58(fp)
    dfdc:	10800044 	addi	r2,r2,1
    dfe0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    dfe4:	00003e06 	br	e0e0 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    dfe8:	e0bff203 	ldbu	r2,-56(fp)
    dfec:	10800094 	ori	r2,r2,2
    dff0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    dff4:	00003a06 	br	e0e0 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    dff8:	e0bff017 	ldw	r2,-64(fp)
    dffc:	10800117 	ldw	r2,4(r2)
    e000:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    e004:	e0bff517 	ldw	r2,-44(fp)
    e008:	1080058b 	ldhu	r2,22(r2)
    e00c:	10bfffcc 	andi	r2,r2,65535
    e010:	10002426 	beq	r2,zero,e0a4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    e014:	e0bffe17 	ldw	r2,-8(fp)
    e018:	10c00104 	addi	r3,r2,4
    e01c:	e0fffe15 	stw	r3,-8(fp)
    e020:	e0fff517 	ldw	r3,-44(fp)
    e024:	18c00417 	ldw	r3,16(r3)
    e028:	19400104 	addi	r5,r3,4
    e02c:	e13ff517 	ldw	r4,-44(fp)
    e030:	21400415 	stw	r5,16(r4)
    e034:	18c00017 	ldw	r3,0(r3)
    e038:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    e03c:	e0bff517 	ldw	r2,-44(fp)
    e040:	10c00417 	ldw	r3,16(r2)
    e044:	e0bff517 	ldw	r2,-44(fp)
    e048:	10800217 	ldw	r2,8(r2)
    e04c:	1880041e 	bne	r3,r2,e060 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    e050:	e0bff517 	ldw	r2,-44(fp)
    e054:	10c00117 	ldw	r3,4(r2)
    e058:	e0bff517 	ldw	r2,-44(fp)
    e05c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e060:	e0bff517 	ldw	r2,-44(fp)
    e064:	1080058b 	ldhu	r2,22(r2)
    e068:	10bfffc4 	addi	r2,r2,-1
    e06c:	1007883a 	mov	r3,r2
    e070:	e0bff517 	ldw	r2,-44(fp)
    e074:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e078:	e0bffd17 	ldw	r2,-12(fp)
    e07c:	10c00104 	addi	r3,r2,4
    e080:	e0fffd15 	stw	r3,-12(fp)
    e084:	e0fff017 	ldw	r3,-64(fp)
    e088:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e08c:	00800044 	movi	r2,1
    e090:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e094:	e0bff18b 	ldhu	r2,-58(fp)
    e098:	10800044 	addi	r2,r2,1
    e09c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e0a0:	00000f06 	br	e0e0 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e0a4:	e0bff203 	ldbu	r2,-56(fp)
    e0a8:	10800114 	ori	r2,r2,4
    e0ac:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e0b0:	00000b06 	br	e0e0 <OSEventPendMulti+0x388>
    e0b4:	e0bff317 	ldw	r2,-52(fp)
    e0b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0bc:	e0bff417 	ldw	r2,-48(fp)
    e0c0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e0c4:	e0bffd17 	ldw	r2,-12(fp)
    e0c8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e0cc:	e0800217 	ldw	r2,8(fp)
    e0d0:	00c00044 	movi	r3,1
    e0d4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e0d8:	e0bff18b 	ldhu	r2,-58(fp)
    e0dc:	00009d06 	br	e354 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e0e0:	e0bfef17 	ldw	r2,-68(fp)
    e0e4:	10800104 	addi	r2,r2,4
    e0e8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e0ec:	e0bfef17 	ldw	r2,-68(fp)
    e0f0:	10800017 	ldw	r2,0(r2)
    e0f4:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e0f8:	e0bff017 	ldw	r2,-64(fp)
    e0fc:	103f7d1e 	bne	r2,zero,def4 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e100:	e0bff103 	ldbu	r2,-60(fp)
    e104:	10800058 	cmpnei	r2,r2,1
    e108:	10000a1e 	bne	r2,zero,e134 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e10c:	e0bffd17 	ldw	r2,-12(fp)
    e110:	10000015 	stw	zero,0(r2)
    e114:	e0bff317 	ldw	r2,-52(fp)
    e118:	e0bff615 	stw	r2,-40(fp)
    e11c:	e0bff617 	ldw	r2,-40(fp)
    e120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e124:	e0800217 	ldw	r2,8(fp)
    e128:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e12c:	e0bff18b 	ldhu	r2,-58(fp)
    e130:	00008806 	br	e354 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e134:	d0a72e17 	ldw	r2,-25416(gp)
    e138:	d0e72e17 	ldw	r3,-25416(gp)
    e13c:	19000c03 	ldbu	r4,48(r3)
    e140:	e0fff203 	ldbu	r3,-56(fp)
    e144:	20c6b03a 	or	r3,r4,r3
    e148:	1809883a 	mov	r4,r3
    e14c:	00ffe004 	movi	r3,-128
    e150:	20c6b03a 	or	r3,r4,r3
    e154:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e158:	d0a72e17 	ldw	r2,-25416(gp)
    e15c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e160:	d0a72e17 	ldw	r2,-25416(gp)
    e164:	e0ffff0b 	ldhu	r3,-4(fp)
    e168:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e16c:	e13ffc17 	ldw	r4,-16(fp)
    e170:	000ec940 	call	ec94 <OS_EventTaskWaitMulti>
    e174:	e0bff317 	ldw	r2,-52(fp)
    e178:	e0bff915 	stw	r2,-28(fp)
    e17c:	e0bff917 	ldw	r2,-28(fp)
    e180:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e184:	000f4380 	call	f438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e188:	0005303a 	rdctl	r2,status
    e18c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e190:	e0fff717 	ldw	r3,-36(fp)
    e194:	00bfff84 	movi	r2,-2
    e198:	1884703a 	and	r2,r3,r2
    e19c:	1001703a 	wrctl	status,r2
  
  return context;
    e1a0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    e1a4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e1a8:	d0a72e17 	ldw	r2,-25416(gp)
    e1ac:	10800c43 	ldbu	r2,49(r2)
    e1b0:	10803fcc 	andi	r2,r2,255
    e1b4:	10000226 	beq	r2,zero,e1c0 <OSEventPendMulti+0x468>
    e1b8:	108000a0 	cmpeqi	r2,r2,2
    e1bc:	10001826 	beq	r2,zero,e220 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e1c0:	d0a72e17 	ldw	r2,-25416(gp)
    e1c4:	10800717 	ldw	r2,28(r2)
    e1c8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e1cc:	e0bff017 	ldw	r2,-64(fp)
    e1d0:	10000b26 	beq	r2,zero,e200 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e1d4:	e0bffd17 	ldw	r2,-12(fp)
    e1d8:	10c00104 	addi	r3,r2,4
    e1dc:	e0fffd15 	stw	r3,-12(fp)
    e1e0:	e0fff017 	ldw	r3,-64(fp)
    e1e4:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e1e8:	e0bffd17 	ldw	r2,-12(fp)
    e1ec:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e1f0:	e0bff18b 	ldhu	r2,-58(fp)
    e1f4:	10800044 	addi	r2,r2,1
    e1f8:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e1fc:	00000d06 	br	e234 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e200:	d0a72e17 	ldw	r2,-25416(gp)
    e204:	00c00044 	movi	r3,1
    e208:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e20c:	d0a72e17 	ldw	r2,-25416(gp)
    e210:	e17ffc17 	ldw	r5,-16(fp)
    e214:	1009883a 	mov	r4,r2
    e218:	000ee9c0 	call	ee9c <OS_EventTaskRemoveMulti>
             }
			 break;
    e21c:	00000506 	br	e234 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e220:	d0a72e17 	ldw	r2,-25416(gp)
    e224:	e17ffc17 	ldw	r5,-16(fp)
    e228:	1009883a 	mov	r4,r2
    e22c:	000ee9c0 	call	ee9c <OS_EventTaskRemoveMulti>
             break;
    e230:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e234:	d0a72e17 	ldw	r2,-25416(gp)
    e238:	10800c43 	ldbu	r2,49(r2)
    e23c:	10803fcc 	andi	r2,r2,255
    e240:	10000326 	beq	r2,zero,e250 <OSEventPendMulti+0x4f8>
    e244:	108000a0 	cmpeqi	r2,r2,2
    e248:	1000231e 	bne	r2,zero,e2d8 <OSEventPendMulti+0x580>
    e24c:	00002a06 	br	e2f8 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e250:	e0bff017 	ldw	r2,-64(fp)
    e254:	10800003 	ldbu	r2,0(r2)
    e258:	10803fcc 	andi	r2,r2,255
    e25c:	0080100e 	bge	zero,r2,e2a0 <OSEventPendMulti+0x548>
    e260:	10c000d0 	cmplti	r3,r2,3
    e264:	1800071e 	bne	r3,zero,e284 <OSEventPendMulti+0x52c>
    e268:	108000e0 	cmpeqi	r2,r2,3
    e26c:	10000c26 	beq	r2,zero,e2a0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e270:	e0bffe17 	ldw	r2,-8(fp)
    e274:	10c00104 	addi	r3,r2,4
    e278:	e0fffe15 	stw	r3,-8(fp)
    e27c:	10000015 	stw	zero,0(r2)
                      break;
    e280:	00001206 	br	e2cc <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e284:	e0bffe17 	ldw	r2,-8(fp)
    e288:	10c00104 	addi	r3,r2,4
    e28c:	e0fffe15 	stw	r3,-8(fp)
    e290:	d0e72e17 	ldw	r3,-25416(gp)
    e294:	18c00917 	ldw	r3,36(r3)
    e298:	10c00015 	stw	r3,0(r2)
                      break;
    e29c:	00000b06 	br	e2cc <OSEventPendMulti+0x574>
    e2a0:	e0bff317 	ldw	r2,-52(fp)
    e2a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e2a8:	e0bff817 	ldw	r2,-32(fp)
    e2ac:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e2b0:	e0bffd17 	ldw	r2,-12(fp)
    e2b4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e2b8:	e0800217 	ldw	r2,8(fp)
    e2bc:	00c00044 	movi	r3,1
    e2c0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e2c4:	e0bff18b 	ldhu	r2,-58(fp)
    e2c8:	00002206 	br	e354 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    e2cc:	e0800217 	ldw	r2,8(fp)
    e2d0:	10000005 	stb	zero,0(r2)
             break;
    e2d4:	00001006 	br	e318 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e2d8:	e0bffe17 	ldw	r2,-8(fp)
    e2dc:	10c00104 	addi	r3,r2,4
    e2e0:	e0fffe15 	stw	r3,-8(fp)
    e2e4:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e2e8:	e0800217 	ldw	r2,8(fp)
    e2ec:	00c00384 	movi	r3,14
    e2f0:	10c00005 	stb	r3,0(r2)
             break;
    e2f4:	00000806 	br	e318 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e2f8:	e0bffe17 	ldw	r2,-8(fp)
    e2fc:	10c00104 	addi	r3,r2,4
    e300:	e0fffe15 	stw	r3,-8(fp)
    e304:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e308:	e0800217 	ldw	r2,8(fp)
    e30c:	00c00284 	movi	r3,10
    e310:	10c00005 	stb	r3,0(r2)
             break;
    e314:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    e318:	d0a72e17 	ldw	r2,-25416(gp)
    e31c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    e320:	d0a72e17 	ldw	r2,-25416(gp)
    e324:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    e328:	d0a72e17 	ldw	r2,-25416(gp)
    e32c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    e330:	d0a72e17 	ldw	r2,-25416(gp)
    e334:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    e338:	d0a72e17 	ldw	r2,-25416(gp)
    e33c:	10000915 	stw	zero,36(r2)
    e340:	e0bff317 	ldw	r2,-52(fp)
    e344:	e0bffa15 	stw	r2,-24(fp)
    e348:	e0bffa17 	ldw	r2,-24(fp)
    e34c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    e350:	e0bff18b 	ldhu	r2,-58(fp)
}
    e354:	e037883a 	mov	sp,fp
    e358:	dfc00117 	ldw	ra,4(sp)
    e35c:	df000017 	ldw	fp,0(sp)
    e360:	dec00204 	addi	sp,sp,8
    e364:	f800283a 	ret

0000e368 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    e368:	defffe04 	addi	sp,sp,-8
    e36c:	dfc00115 	stw	ra,4(sp)
    e370:	df000015 	stw	fp,0(sp)
    e374:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    e378:	0016eb80 	call	16eb8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    e37c:	000f0e40 	call	f0e4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    e380:	000f12c0 	call	f12c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    e384:	000f2980 	call	f298 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    e388:	000f0040 	call	f004 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    e38c:	00111380 	call	11138 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    e390:	0011a380 	call	11a38 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    e394:	0012b600 	call	12b60 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    e398:	000f1980 	call	f198 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    e39c:	000f2180 	call	f218 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    e3a0:	0016ed80 	call	16ed8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    e3a4:	000fb0c0 	call	fb0c <OSDebugInit>
#endif
}
    e3a8:	0001883a 	nop
    e3ac:	e037883a 	mov	sp,fp
    e3b0:	dfc00117 	ldw	ra,4(sp)
    e3b4:	df000017 	ldw	fp,0(sp)
    e3b8:	dec00204 	addi	sp,sp,8
    e3bc:	f800283a 	ret

0000e3c0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    e3c0:	deffff04 	addi	sp,sp,-4
    e3c4:	df000015 	stw	fp,0(sp)
    e3c8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    e3cc:	d0a71f43 	ldbu	r2,-25475(gp)
    e3d0:	10803fcc 	andi	r2,r2,255
    e3d4:	10800058 	cmpnei	r2,r2,1
    e3d8:	1000071e 	bne	r2,zero,e3f8 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    e3dc:	d0a72d03 	ldbu	r2,-25420(gp)
    e3e0:	10803fcc 	andi	r2,r2,255
    e3e4:	10803fe0 	cmpeqi	r2,r2,255
    e3e8:	1000031e 	bne	r2,zero,e3f8 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    e3ec:	d0a72d03 	ldbu	r2,-25420(gp)
    e3f0:	10800044 	addi	r2,r2,1
    e3f4:	d0a72d05 	stb	r2,-25420(gp)
        }
    }
}
    e3f8:	0001883a 	nop
    e3fc:	e037883a 	mov	sp,fp
    e400:	df000017 	ldw	fp,0(sp)
    e404:	dec00104 	addi	sp,sp,4
    e408:	f800283a 	ret

0000e40c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    e40c:	defffb04 	addi	sp,sp,-20
    e410:	dfc00415 	stw	ra,16(sp)
    e414:	df000315 	stw	fp,12(sp)
    e418:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e41c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    e420:	d0a71f43 	ldbu	r2,-25475(gp)
    e424:	10803fcc 	andi	r2,r2,255
    e428:	10800058 	cmpnei	r2,r2,1
    e42c:	10002f1e 	bne	r2,zero,e4ec <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e430:	0005303a 	rdctl	r2,status
    e434:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e438:	e0ffff17 	ldw	r3,-4(fp)
    e43c:	00bfff84 	movi	r2,-2
    e440:	1884703a 	and	r2,r3,r2
    e444:	1001703a 	wrctl	status,r2
  
  return context;
    e448:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e44c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    e450:	d0a72d03 	ldbu	r2,-25420(gp)
    e454:	10803fcc 	andi	r2,r2,255
    e458:	10000326 	beq	r2,zero,e468 <OSIntExit+0x5c>
            OSIntNesting--;
    e45c:	d0a72d03 	ldbu	r2,-25420(gp)
    e460:	10bfffc4 	addi	r2,r2,-1
    e464:	d0a72d05 	stb	r2,-25420(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    e468:	d0a72d03 	ldbu	r2,-25420(gp)
    e46c:	10803fcc 	andi	r2,r2,255
    e470:	10001a1e 	bne	r2,zero,e4dc <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    e474:	d0a71f03 	ldbu	r2,-25476(gp)
    e478:	10803fcc 	andi	r2,r2,255
    e47c:	1000171e 	bne	r2,zero,e4dc <OSIntExit+0xd0>
                OS_SchedNew();
    e480:	000f5080 	call	f508 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    e484:	d0e72103 	ldbu	r3,-25468(gp)
    e488:	d0a72143 	ldbu	r2,-25467(gp)
    e48c:	18c03fcc 	andi	r3,r3,255
    e490:	10803fcc 	andi	r2,r2,255
    e494:	18801126 	beq	r3,r2,e4dc <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    e498:	d0a72103 	ldbu	r2,-25468(gp)
    e49c:	10c03fcc 	andi	r3,r2,255
    e4a0:	00800134 	movhi	r2,4
    e4a4:	10b25404 	addi	r2,r2,-14000
    e4a8:	18c7883a 	add	r3,r3,r3
    e4ac:	18c7883a 	add	r3,r3,r3
    e4b0:	10c5883a 	add	r2,r2,r3
    e4b4:	10800017 	ldw	r2,0(r2)
    e4b8:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    e4bc:	d0a72917 	ldw	r2,-25436(gp)
    e4c0:	10c00e17 	ldw	r3,56(r2)
    e4c4:	18c00044 	addi	r3,r3,1
    e4c8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    e4cc:	d0a72417 	ldw	r2,-25456(gp)
    e4d0:	10800044 	addi	r2,r2,1
    e4d4:	d0a72415 	stw	r2,-25456(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    e4d8:	0016be40 	call	16be4 <OSCtxSw>
    e4dc:	e0bffd17 	ldw	r2,-12(fp)
    e4e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e4e4:	e0bffe17 	ldw	r2,-8(fp)
    e4e8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e4ec:	0001883a 	nop
    e4f0:	e037883a 	mov	sp,fp
    e4f4:	dfc00117 	ldw	ra,4(sp)
    e4f8:	df000017 	ldw	fp,0(sp)
    e4fc:	dec00204 	addi	sp,sp,8
    e500:	f800283a 	ret

0000e504 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    e504:	defffc04 	addi	sp,sp,-16
    e508:	df000315 	stw	fp,12(sp)
    e50c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e510:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    e514:	d0a71f43 	ldbu	r2,-25475(gp)
    e518:	10803fcc 	andi	r2,r2,255
    e51c:	10800058 	cmpnei	r2,r2,1
    e520:	1000161e 	bne	r2,zero,e57c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e524:	0005303a 	rdctl	r2,status
    e528:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e52c:	e0ffff17 	ldw	r3,-4(fp)
    e530:	00bfff84 	movi	r2,-2
    e534:	1884703a 	and	r2,r3,r2
    e538:	1001703a 	wrctl	status,r2
  
  return context;
    e53c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e540:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    e544:	d0a72d03 	ldbu	r2,-25420(gp)
    e548:	10803fcc 	andi	r2,r2,255
    e54c:	1000071e 	bne	r2,zero,e56c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    e550:	d0a71f03 	ldbu	r2,-25476(gp)
    e554:	10803fcc 	andi	r2,r2,255
    e558:	10803fe0 	cmpeqi	r2,r2,255
    e55c:	1000031e 	bne	r2,zero,e56c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    e560:	d0a71f03 	ldbu	r2,-25476(gp)
    e564:	10800044 	addi	r2,r2,1
    e568:	d0a71f05 	stb	r2,-25476(gp)
    e56c:	e0bffd17 	ldw	r2,-12(fp)
    e570:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e574:	e0bffe17 	ldw	r2,-8(fp)
    e578:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e57c:	0001883a 	nop
    e580:	e037883a 	mov	sp,fp
    e584:	df000017 	ldw	fp,0(sp)
    e588:	dec00104 	addi	sp,sp,4
    e58c:	f800283a 	ret

0000e590 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    e590:	defff804 	addi	sp,sp,-32
    e594:	dfc00715 	stw	ra,28(sp)
    e598:	df000615 	stw	fp,24(sp)
    e59c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e5a0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    e5a4:	d0a71f43 	ldbu	r2,-25475(gp)
    e5a8:	10803fcc 	andi	r2,r2,255
    e5ac:	10800058 	cmpnei	r2,r2,1
    e5b0:	1000281e 	bne	r2,zero,e654 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e5b4:	0005303a 	rdctl	r2,status
    e5b8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e5bc:	e0ffff17 	ldw	r3,-4(fp)
    e5c0:	00bfff84 	movi	r2,-2
    e5c4:	1884703a 	and	r2,r3,r2
    e5c8:	1001703a 	wrctl	status,r2
  
  return context;
    e5cc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e5d0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    e5d4:	d0a71f03 	ldbu	r2,-25476(gp)
    e5d8:	10803fcc 	andi	r2,r2,255
    e5dc:	10001926 	beq	r2,zero,e644 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    e5e0:	d0a71f03 	ldbu	r2,-25476(gp)
    e5e4:	10bfffc4 	addi	r2,r2,-1
    e5e8:	d0a71f05 	stb	r2,-25476(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    e5ec:	d0a71f03 	ldbu	r2,-25476(gp)
    e5f0:	10803fcc 	andi	r2,r2,255
    e5f4:	10000e1e 	bne	r2,zero,e630 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    e5f8:	d0a72d03 	ldbu	r2,-25420(gp)
    e5fc:	10803fcc 	andi	r2,r2,255
    e600:	1000061e 	bne	r2,zero,e61c <OSSchedUnlock+0x8c>
    e604:	e0bffa17 	ldw	r2,-24(fp)
    e608:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e60c:	e0bffb17 	ldw	r2,-20(fp)
    e610:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    e614:	000f4380 	call	f438 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    e618:	00000e06 	br	e654 <OSSchedUnlock+0xc4>
    e61c:	e0bffa17 	ldw	r2,-24(fp)
    e620:	e0bffc15 	stw	r2,-16(fp)
    e624:	e0bffc17 	ldw	r2,-16(fp)
    e628:	1001703a 	wrctl	status,r2
    e62c:	00000906 	br	e654 <OSSchedUnlock+0xc4>
    e630:	e0bffa17 	ldw	r2,-24(fp)
    e634:	e0bffd15 	stw	r2,-12(fp)
    e638:	e0bffd17 	ldw	r2,-12(fp)
    e63c:	1001703a 	wrctl	status,r2
    e640:	00000406 	br	e654 <OSSchedUnlock+0xc4>
    e644:	e0bffa17 	ldw	r2,-24(fp)
    e648:	e0bffe15 	stw	r2,-8(fp)
    e64c:	e0bffe17 	ldw	r2,-8(fp)
    e650:	1001703a 	wrctl	status,r2
    e654:	0001883a 	nop
    e658:	e037883a 	mov	sp,fp
    e65c:	dfc00117 	ldw	ra,4(sp)
    e660:	df000017 	ldw	fp,0(sp)
    e664:	dec00204 	addi	sp,sp,8
    e668:	f800283a 	ret

0000e66c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    e66c:	defffe04 	addi	sp,sp,-8
    e670:	dfc00115 	stw	ra,4(sp)
    e674:	df000015 	stw	fp,0(sp)
    e678:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    e67c:	d0a71f43 	ldbu	r2,-25475(gp)
    e680:	10803fcc 	andi	r2,r2,255
    e684:	10000f1e 	bne	r2,zero,e6c4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    e688:	000f5080 	call	f508 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    e68c:	d0a72103 	ldbu	r2,-25468(gp)
    e690:	d0a72145 	stb	r2,-25467(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    e694:	d0a72103 	ldbu	r2,-25468(gp)
    e698:	10c03fcc 	andi	r3,r2,255
    e69c:	00800134 	movhi	r2,4
    e6a0:	10b25404 	addi	r2,r2,-14000
    e6a4:	18c7883a 	add	r3,r3,r3
    e6a8:	18c7883a 	add	r3,r3,r3
    e6ac:	10c5883a 	add	r2,r2,r3
    e6b0:	10800017 	ldw	r2,0(r2)
    e6b4:	d0a72915 	stw	r2,-25436(gp)
        OSTCBCur      = OSTCBHighRdy;
    e6b8:	d0a72917 	ldw	r2,-25436(gp)
    e6bc:	d0a72e15 	stw	r2,-25416(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    e6c0:	0016c700 	call	16c70 <OSStartHighRdy>
    }
}
    e6c4:	0001883a 	nop
    e6c8:	e037883a 	mov	sp,fp
    e6cc:	dfc00117 	ldw	ra,4(sp)
    e6d0:	df000017 	ldw	fp,0(sp)
    e6d4:	dec00204 	addi	sp,sp,8
    e6d8:	f800283a 	ret

0000e6dc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    e6dc:	defff904 	addi	sp,sp,-28
    e6e0:	dfc00615 	stw	ra,24(sp)
    e6e4:	df000515 	stw	fp,20(sp)
    e6e8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e6ec:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    e6f0:	01000084 	movi	r4,2
    e6f4:	0014dd40 	call	14dd4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6f8:	0005303a 	rdctl	r2,status
    e6fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e700:	e0fffc17 	ldw	r3,-16(fp)
    e704:	00bfff84 	movi	r2,-2
    e708:	1884703a 	and	r2,r3,r2
    e70c:	1001703a 	wrctl	status,r2
  
  return context;
    e710:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    e714:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    e718:	d0272015 	stw	zero,-25472(gp)
    e71c:	e0bffb17 	ldw	r2,-20(fp)
    e720:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e724:	e0bffd17 	ldw	r2,-12(fp)
    e728:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    e72c:	0100fa04 	movi	r4,1000
    e730:	0014dd40 	call	14dd4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e734:	0005303a 	rdctl	r2,status
    e738:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e73c:	e0fffe17 	ldw	r3,-8(fp)
    e740:	00bfff84 	movi	r2,-2
    e744:	1884703a 	and	r2,r3,r2
    e748:	1001703a 	wrctl	status,r2
  
  return context;
    e74c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    e750:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    e754:	d0a72017 	ldw	r2,-25472(gp)
    e758:	d0a72515 	stw	r2,-25452(gp)
    OSStatRdy    = OS_TRUE;
    e75c:	00800044 	movi	r2,1
    e760:	d0a73105 	stb	r2,-25404(gp)
    e764:	e0bffb17 	ldw	r2,-20(fp)
    e768:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e76c:	e0bfff17 	ldw	r2,-4(fp)
    e770:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    e774:	0001883a 	nop
    e778:	e037883a 	mov	sp,fp
    e77c:	dfc00117 	ldw	ra,4(sp)
    e780:	df000017 	ldw	fp,0(sp)
    e784:	dec00204 	addi	sp,sp,8
    e788:	f800283a 	ret

0000e78c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    e78c:	defff704 	addi	sp,sp,-36
    e790:	dfc00815 	stw	ra,32(sp)
    e794:	df000715 	stw	fp,28(sp)
    e798:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e79c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    e7a0:	0016e980 	call	16e98 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e7a4:	0005303a 	rdctl	r2,status
    e7a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e7ac:	e0fffd17 	ldw	r3,-12(fp)
    e7b0:	00bfff84 	movi	r2,-2
    e7b4:	1884703a 	and	r2,r3,r2
    e7b8:	1001703a 	wrctl	status,r2
  
  return context;
    e7bc:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    e7c0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    e7c4:	d0a72f17 	ldw	r2,-25412(gp)
    e7c8:	10800044 	addi	r2,r2,1
    e7cc:	d0a72f15 	stw	r2,-25412(gp)
    e7d0:	e0bffb17 	ldw	r2,-20(fp)
    e7d4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e7d8:	e0bfff17 	ldw	r2,-4(fp)
    e7dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    e7e0:	d0a71f43 	ldbu	r2,-25475(gp)
    e7e4:	10803fcc 	andi	r2,r2,255
    e7e8:	10800058 	cmpnei	r2,r2,1
    e7ec:	10006a1e 	bne	r2,zero,e998 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    e7f0:	d0a72303 	ldbu	r2,-25460(gp)
    e7f4:	10803fcc 	andi	r2,r2,255
    e7f8:	10c00060 	cmpeqi	r3,r2,1
    e7fc:	1800061e 	bne	r3,zero,e818 <OSTimeTick+0x8c>
    e800:	10c000a0 	cmpeqi	r3,r2,2
    e804:	1800061e 	bne	r3,zero,e820 <OSTimeTick+0x94>
    e808:	10000a1e 	bne	r2,zero,e834 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    e80c:	00800044 	movi	r2,1
    e810:	e0bffa05 	stb	r2,-24(fp)
                 break;
    e814:	00000b06 	br	e844 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    e818:	e03ffa05 	stb	zero,-24(fp)
                 break;
    e81c:	00000906 	br	e844 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    e820:	00800044 	movi	r2,1
    e824:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    e828:	00800044 	movi	r2,1
    e82c:	d0a72305 	stb	r2,-25460(gp)
                 break;
    e830:	00000406 	br	e844 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    e834:	00800044 	movi	r2,1
    e838:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    e83c:	d0272305 	stb	zero,-25460(gp)
                 break;
    e840:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    e844:	e0bffa03 	ldbu	r2,-24(fp)
    e848:	10005226 	beq	r2,zero,e994 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    e84c:	d0a72217 	ldw	r2,-25464(gp)
    e850:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e854:	00004906 	br	e97c <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e858:	0005303a 	rdctl	r2,status
    e85c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e860:	e0fffc17 	ldw	r3,-16(fp)
    e864:	00bfff84 	movi	r2,-2
    e868:	1884703a 	and	r2,r3,r2
    e86c:	1001703a 	wrctl	status,r2
  
  return context;
    e870:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    e874:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    e878:	e0bff917 	ldw	r2,-28(fp)
    e87c:	10800b8b 	ldhu	r2,46(r2)
    e880:	10bfffcc 	andi	r2,r2,65535
    e884:	10003626 	beq	r2,zero,e960 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    e888:	e0bff917 	ldw	r2,-28(fp)
    e88c:	10800b8b 	ldhu	r2,46(r2)
    e890:	10bfffc4 	addi	r2,r2,-1
    e894:	1007883a 	mov	r3,r2
    e898:	e0bff917 	ldw	r2,-28(fp)
    e89c:	10c00b8d 	sth	r3,46(r2)
    e8a0:	e0bff917 	ldw	r2,-28(fp)
    e8a4:	10800b8b 	ldhu	r2,46(r2)
    e8a8:	10bfffcc 	andi	r2,r2,65535
    e8ac:	10002c1e 	bne	r2,zero,e960 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    e8b0:	e0bff917 	ldw	r2,-28(fp)
    e8b4:	10800c03 	ldbu	r2,48(r2)
    e8b8:	10803fcc 	andi	r2,r2,255
    e8bc:	10800dcc 	andi	r2,r2,55
    e8c0:	10000b26 	beq	r2,zero,e8f0 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    e8c4:	e0bff917 	ldw	r2,-28(fp)
    e8c8:	10c00c03 	ldbu	r3,48(r2)
    e8cc:	00bff204 	movi	r2,-56
    e8d0:	1884703a 	and	r2,r3,r2
    e8d4:	1007883a 	mov	r3,r2
    e8d8:	e0bff917 	ldw	r2,-28(fp)
    e8dc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    e8e0:	e0bff917 	ldw	r2,-28(fp)
    e8e4:	00c00044 	movi	r3,1
    e8e8:	10c00c45 	stb	r3,49(r2)
    e8ec:	00000206 	br	e8f8 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    e8f0:	e0bff917 	ldw	r2,-28(fp)
    e8f4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    e8f8:	e0bff917 	ldw	r2,-28(fp)
    e8fc:	10800c03 	ldbu	r2,48(r2)
    e900:	10803fcc 	andi	r2,r2,255
    e904:	1080020c 	andi	r2,r2,8
    e908:	1000151e 	bne	r2,zero,e960 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    e90c:	e0bff917 	ldw	r2,-28(fp)
    e910:	10c00d83 	ldbu	r3,54(r2)
    e914:	d0a72b03 	ldbu	r2,-25428(gp)
    e918:	1884b03a 	or	r2,r3,r2
    e91c:	d0a72b05 	stb	r2,-25428(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    e920:	e0bff917 	ldw	r2,-28(fp)
    e924:	10800d03 	ldbu	r2,52(r2)
    e928:	10c03fcc 	andi	r3,r2,255
    e92c:	e0bff917 	ldw	r2,-28(fp)
    e930:	10800d03 	ldbu	r2,52(r2)
    e934:	11003fcc 	andi	r4,r2,255
    e938:	d0a72b44 	addi	r2,gp,-25427
    e93c:	2085883a 	add	r2,r4,r2
    e940:	11000003 	ldbu	r4,0(r2)
    e944:	e0bff917 	ldw	r2,-28(fp)
    e948:	10800d43 	ldbu	r2,53(r2)
    e94c:	2084b03a 	or	r2,r4,r2
    e950:	1009883a 	mov	r4,r2
    e954:	d0a72b44 	addi	r2,gp,-25427
    e958:	1885883a 	add	r2,r3,r2
    e95c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    e960:	e0bff917 	ldw	r2,-28(fp)
    e964:	10800517 	ldw	r2,20(r2)
    e968:	e0bff915 	stw	r2,-28(fp)
    e96c:	e0bffb17 	ldw	r2,-20(fp)
    e970:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e974:	e0bffe17 	ldw	r2,-8(fp)
    e978:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e97c:	e0bff917 	ldw	r2,-28(fp)
    e980:	10800c83 	ldbu	r2,50(r2)
    e984:	10803fcc 	andi	r2,r2,255
    e988:	10800518 	cmpnei	r2,r2,20
    e98c:	103fb21e 	bne	r2,zero,e858 <OSTimeTick+0xcc>
    e990:	00000106 	br	e998 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    e994:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    e998:	e037883a 	mov	sp,fp
    e99c:	dfc00117 	ldw	ra,4(sp)
    e9a0:	df000017 	ldw	fp,0(sp)
    e9a4:	dec00204 	addi	sp,sp,8
    e9a8:	f800283a 	ret

0000e9ac <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    e9ac:	deffff04 	addi	sp,sp,-4
    e9b0:	df000015 	stw	fp,0(sp)
    e9b4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    e9b8:	00804784 	movi	r2,286
}
    e9bc:	e037883a 	mov	sp,fp
    e9c0:	df000017 	ldw	fp,0(sp)
    e9c4:	dec00104 	addi	sp,sp,4
    e9c8:	f800283a 	ret

0000e9cc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    e9cc:	deffff04 	addi	sp,sp,-4
    e9d0:	df000015 	stw	fp,0(sp)
    e9d4:	d839883a 	mov	fp,sp
}
    e9d8:	0001883a 	nop
    e9dc:	e037883a 	mov	sp,fp
    e9e0:	df000017 	ldw	fp,0(sp)
    e9e4:	dec00104 	addi	sp,sp,4
    e9e8:	f800283a 	ret

0000e9ec <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    e9ec:	defff804 	addi	sp,sp,-32
    e9f0:	dfc00715 	stw	ra,28(sp)
    e9f4:	df000615 	stw	fp,24(sp)
    e9f8:	df000604 	addi	fp,sp,24
    e9fc:	e13ffc15 	stw	r4,-16(fp)
    ea00:	e17ffd15 	stw	r5,-12(fp)
    ea04:	3007883a 	mov	r3,r6
    ea08:	3805883a 	mov	r2,r7
    ea0c:	e0fffe05 	stb	r3,-8(fp)
    ea10:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    ea14:	e0bffc17 	ldw	r2,-16(fp)
    ea18:	10800283 	ldbu	r2,10(r2)
    ea1c:	10c03fcc 	andi	r3,r2,255
    ea20:	008000f4 	movhi	r2,3
    ea24:	1093a304 	addi	r2,r2,20108
    ea28:	10c5883a 	add	r2,r2,r3
    ea2c:	10800003 	ldbu	r2,0(r2)
    ea30:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    ea34:	e0bffa03 	ldbu	r2,-24(fp)
    ea38:	e0fffc17 	ldw	r3,-16(fp)
    ea3c:	1885883a 	add	r2,r3,r2
    ea40:	108002c4 	addi	r2,r2,11
    ea44:	10800003 	ldbu	r2,0(r2)
    ea48:	10c03fcc 	andi	r3,r2,255
    ea4c:	008000f4 	movhi	r2,3
    ea50:	1093a304 	addi	r2,r2,20108
    ea54:	10c5883a 	add	r2,r2,r3
    ea58:	10800003 	ldbu	r2,0(r2)
    ea5c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    ea60:	e0bffa03 	ldbu	r2,-24(fp)
    ea64:	100490fa 	slli	r2,r2,3
    ea68:	1007883a 	mov	r3,r2
    ea6c:	e0bffa43 	ldbu	r2,-23(fp)
    ea70:	1885883a 	add	r2,r3,r2
    ea74:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ea78:	e0fffa83 	ldbu	r3,-22(fp)
    ea7c:	00800134 	movhi	r2,4
    ea80:	10b25404 	addi	r2,r2,-14000
    ea84:	18c7883a 	add	r3,r3,r3
    ea88:	18c7883a 	add	r3,r3,r3
    ea8c:	10c5883a 	add	r2,r2,r3
    ea90:	10800017 	ldw	r2,0(r2)
    ea94:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    ea98:	e0bffb17 	ldw	r2,-20(fp)
    ea9c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    eaa0:	e0bffb17 	ldw	r2,-20(fp)
    eaa4:	e0fffd17 	ldw	r3,-12(fp)
    eaa8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    eaac:	e0bffb17 	ldw	r2,-20(fp)
    eab0:	10800c03 	ldbu	r2,48(r2)
    eab4:	1007883a 	mov	r3,r2
    eab8:	e0bffe03 	ldbu	r2,-8(fp)
    eabc:	0084303a 	nor	r2,zero,r2
    eac0:	1884703a 	and	r2,r3,r2
    eac4:	1007883a 	mov	r3,r2
    eac8:	e0bffb17 	ldw	r2,-20(fp)
    eacc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    ead0:	e0bffb17 	ldw	r2,-20(fp)
    ead4:	e0ffff03 	ldbu	r3,-4(fp)
    ead8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    eadc:	e0bffb17 	ldw	r2,-20(fp)
    eae0:	10800c03 	ldbu	r2,48(r2)
    eae4:	10803fcc 	andi	r2,r2,255
    eae8:	1080020c 	andi	r2,r2,8
    eaec:	1000111e 	bne	r2,zero,eb34 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    eaf0:	e0bffb17 	ldw	r2,-20(fp)
    eaf4:	10c00d83 	ldbu	r3,54(r2)
    eaf8:	d0a72b03 	ldbu	r2,-25428(gp)
    eafc:	1884b03a 	or	r2,r3,r2
    eb00:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    eb04:	e0fffa03 	ldbu	r3,-24(fp)
    eb08:	e13ffa03 	ldbu	r4,-24(fp)
    eb0c:	d0a72b44 	addi	r2,gp,-25427
    eb10:	2085883a 	add	r2,r4,r2
    eb14:	11000003 	ldbu	r4,0(r2)
    eb18:	e0bffb17 	ldw	r2,-20(fp)
    eb1c:	10800d43 	ldbu	r2,53(r2)
    eb20:	2084b03a 	or	r2,r4,r2
    eb24:	1009883a 	mov	r4,r2
    eb28:	d0a72b44 	addi	r2,gp,-25427
    eb2c:	1885883a 	add	r2,r3,r2
    eb30:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    eb34:	e17ffc17 	ldw	r5,-16(fp)
    eb38:	e13ffb17 	ldw	r4,-20(fp)
    eb3c:	000ede40 	call	ede4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    eb40:	e0bffb17 	ldw	r2,-20(fp)
    eb44:	10800817 	ldw	r2,32(r2)
    eb48:	10000826 	beq	r2,zero,eb6c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    eb4c:	e0bffb17 	ldw	r2,-20(fp)
    eb50:	10800817 	ldw	r2,32(r2)
    eb54:	100b883a 	mov	r5,r2
    eb58:	e13ffb17 	ldw	r4,-20(fp)
    eb5c:	000ee9c0 	call	ee9c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    eb60:	e0bffb17 	ldw	r2,-20(fp)
    eb64:	e0fffc17 	ldw	r3,-16(fp)
    eb68:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    eb6c:	e0bffa83 	ldbu	r2,-22(fp)
}
    eb70:	e037883a 	mov	sp,fp
    eb74:	dfc00117 	ldw	ra,4(sp)
    eb78:	df000017 	ldw	fp,0(sp)
    eb7c:	dec00204 	addi	sp,sp,8
    eb80:	f800283a 	ret

0000eb84 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    eb84:	defffd04 	addi	sp,sp,-12
    eb88:	df000215 	stw	fp,8(sp)
    eb8c:	df000204 	addi	fp,sp,8
    eb90:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    eb94:	d0a72e17 	ldw	r2,-25416(gp)
    eb98:	e0ffff17 	ldw	r3,-4(fp)
    eb9c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    eba0:	d0a72e17 	ldw	r2,-25416(gp)
    eba4:	10800d03 	ldbu	r2,52(r2)
    eba8:	10803fcc 	andi	r2,r2,255
    ebac:	d0e72e17 	ldw	r3,-25416(gp)
    ebb0:	18c00d03 	ldbu	r3,52(r3)
    ebb4:	18c03fcc 	andi	r3,r3,255
    ebb8:	e13fff17 	ldw	r4,-4(fp)
    ebbc:	20c7883a 	add	r3,r4,r3
    ebc0:	18c002c4 	addi	r3,r3,11
    ebc4:	19000003 	ldbu	r4,0(r3)
    ebc8:	d0e72e17 	ldw	r3,-25416(gp)
    ebcc:	18c00d43 	ldbu	r3,53(r3)
    ebd0:	20c6b03a 	or	r3,r4,r3
    ebd4:	1809883a 	mov	r4,r3
    ebd8:	e0ffff17 	ldw	r3,-4(fp)
    ebdc:	1885883a 	add	r2,r3,r2
    ebe0:	108002c4 	addi	r2,r2,11
    ebe4:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ebe8:	e0bfff17 	ldw	r2,-4(fp)
    ebec:	10c00283 	ldbu	r3,10(r2)
    ebf0:	d0a72e17 	ldw	r2,-25416(gp)
    ebf4:	10800d83 	ldbu	r2,54(r2)
    ebf8:	1884b03a 	or	r2,r3,r2
    ebfc:	1007883a 	mov	r3,r2
    ec00:	e0bfff17 	ldw	r2,-4(fp)
    ec04:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ec08:	d0a72e17 	ldw	r2,-25416(gp)
    ec0c:	10800d03 	ldbu	r2,52(r2)
    ec10:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ec14:	e0fffe03 	ldbu	r3,-8(fp)
    ec18:	e13ffe03 	ldbu	r4,-8(fp)
    ec1c:	d0a72b44 	addi	r2,gp,-25427
    ec20:	2085883a 	add	r2,r4,r2
    ec24:	10800003 	ldbu	r2,0(r2)
    ec28:	1009883a 	mov	r4,r2
    ec2c:	d0a72e17 	ldw	r2,-25416(gp)
    ec30:	10800d43 	ldbu	r2,53(r2)
    ec34:	0084303a 	nor	r2,zero,r2
    ec38:	2084703a 	and	r2,r4,r2
    ec3c:	1009883a 	mov	r4,r2
    ec40:	d0a72b44 	addi	r2,gp,-25427
    ec44:	1885883a 	add	r2,r3,r2
    ec48:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ec4c:	e0fffe03 	ldbu	r3,-8(fp)
    ec50:	d0a72b44 	addi	r2,gp,-25427
    ec54:	1885883a 	add	r2,r3,r2
    ec58:	10800003 	ldbu	r2,0(r2)
    ec5c:	10803fcc 	andi	r2,r2,255
    ec60:	1000071e 	bne	r2,zero,ec80 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ec64:	d0a72e17 	ldw	r2,-25416(gp)
    ec68:	10800d83 	ldbu	r2,54(r2)
    ec6c:	0084303a 	nor	r2,zero,r2
    ec70:	1007883a 	mov	r3,r2
    ec74:	d0a72b03 	ldbu	r2,-25428(gp)
    ec78:	1884703a 	and	r2,r3,r2
    ec7c:	d0a72b05 	stb	r2,-25428(gp)
    }
}
    ec80:	0001883a 	nop
    ec84:	e037883a 	mov	sp,fp
    ec88:	df000017 	ldw	fp,0(sp)
    ec8c:	dec00104 	addi	sp,sp,4
    ec90:	f800283a 	ret

0000ec94 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    ec94:	defffb04 	addi	sp,sp,-20
    ec98:	df000415 	stw	fp,16(sp)
    ec9c:	df000404 	addi	fp,sp,16
    eca0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    eca4:	d0a72e17 	ldw	r2,-25416(gp)
    eca8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    ecac:	d0a72e17 	ldw	r2,-25416(gp)
    ecb0:	e0ffff17 	ldw	r3,-4(fp)
    ecb4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    ecb8:	e0bfff17 	ldw	r2,-4(fp)
    ecbc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    ecc0:	e0bffc17 	ldw	r2,-16(fp)
    ecc4:	10800017 	ldw	r2,0(r2)
    ecc8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    eccc:	00002006 	br	ed50 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    ecd0:	d0a72e17 	ldw	r2,-25416(gp)
    ecd4:	10800d03 	ldbu	r2,52(r2)
    ecd8:	10803fcc 	andi	r2,r2,255
    ecdc:	d0e72e17 	ldw	r3,-25416(gp)
    ece0:	18c00d03 	ldbu	r3,52(r3)
    ece4:	18c03fcc 	andi	r3,r3,255
    ece8:	e13ffd17 	ldw	r4,-12(fp)
    ecec:	20c7883a 	add	r3,r4,r3
    ecf0:	18c002c4 	addi	r3,r3,11
    ecf4:	19000003 	ldbu	r4,0(r3)
    ecf8:	d0e72e17 	ldw	r3,-25416(gp)
    ecfc:	18c00d43 	ldbu	r3,53(r3)
    ed00:	20c6b03a 	or	r3,r4,r3
    ed04:	1809883a 	mov	r4,r3
    ed08:	e0fffd17 	ldw	r3,-12(fp)
    ed0c:	1885883a 	add	r2,r3,r2
    ed10:	108002c4 	addi	r2,r2,11
    ed14:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ed18:	e0bffd17 	ldw	r2,-12(fp)
    ed1c:	10c00283 	ldbu	r3,10(r2)
    ed20:	d0a72e17 	ldw	r2,-25416(gp)
    ed24:	10800d83 	ldbu	r2,54(r2)
    ed28:	1884b03a 	or	r2,r3,r2
    ed2c:	1007883a 	mov	r3,r2
    ed30:	e0bffd17 	ldw	r2,-12(fp)
    ed34:	10c00285 	stb	r3,10(r2)
        pevents++;
    ed38:	e0bffc17 	ldw	r2,-16(fp)
    ed3c:	10800104 	addi	r2,r2,4
    ed40:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    ed44:	e0bffc17 	ldw	r2,-16(fp)
    ed48:	10800017 	ldw	r2,0(r2)
    ed4c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ed50:	e0bffd17 	ldw	r2,-12(fp)
    ed54:	103fde1e 	bne	r2,zero,ecd0 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ed58:	d0a72e17 	ldw	r2,-25416(gp)
    ed5c:	10800d03 	ldbu	r2,52(r2)
    ed60:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ed64:	e0fffe03 	ldbu	r3,-8(fp)
    ed68:	e13ffe03 	ldbu	r4,-8(fp)
    ed6c:	d0a72b44 	addi	r2,gp,-25427
    ed70:	2085883a 	add	r2,r4,r2
    ed74:	10800003 	ldbu	r2,0(r2)
    ed78:	1009883a 	mov	r4,r2
    ed7c:	d0a72e17 	ldw	r2,-25416(gp)
    ed80:	10800d43 	ldbu	r2,53(r2)
    ed84:	0084303a 	nor	r2,zero,r2
    ed88:	2084703a 	and	r2,r4,r2
    ed8c:	1009883a 	mov	r4,r2
    ed90:	d0a72b44 	addi	r2,gp,-25427
    ed94:	1885883a 	add	r2,r3,r2
    ed98:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ed9c:	e0fffe03 	ldbu	r3,-8(fp)
    eda0:	d0a72b44 	addi	r2,gp,-25427
    eda4:	1885883a 	add	r2,r3,r2
    eda8:	10800003 	ldbu	r2,0(r2)
    edac:	10803fcc 	andi	r2,r2,255
    edb0:	1000071e 	bne	r2,zero,edd0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    edb4:	d0a72e17 	ldw	r2,-25416(gp)
    edb8:	10800d83 	ldbu	r2,54(r2)
    edbc:	0084303a 	nor	r2,zero,r2
    edc0:	1007883a 	mov	r3,r2
    edc4:	d0a72b03 	ldbu	r2,-25428(gp)
    edc8:	1884703a 	and	r2,r3,r2
    edcc:	d0a72b05 	stb	r2,-25428(gp)
    }
}
    edd0:	0001883a 	nop
    edd4:	e037883a 	mov	sp,fp
    edd8:	df000017 	ldw	fp,0(sp)
    eddc:	dec00104 	addi	sp,sp,4
    ede0:	f800283a 	ret

0000ede4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    ede4:	defffc04 	addi	sp,sp,-16
    ede8:	df000315 	stw	fp,12(sp)
    edec:	df000304 	addi	fp,sp,12
    edf0:	e13ffe15 	stw	r4,-8(fp)
    edf4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    edf8:	e0bffe17 	ldw	r2,-8(fp)
    edfc:	10800d03 	ldbu	r2,52(r2)
    ee00:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    ee04:	e0bffd03 	ldbu	r2,-12(fp)
    ee08:	e0fffd03 	ldbu	r3,-12(fp)
    ee0c:	e13fff17 	ldw	r4,-4(fp)
    ee10:	20c7883a 	add	r3,r4,r3
    ee14:	18c002c4 	addi	r3,r3,11
    ee18:	18c00003 	ldbu	r3,0(r3)
    ee1c:	1809883a 	mov	r4,r3
    ee20:	e0fffe17 	ldw	r3,-8(fp)
    ee24:	18c00d43 	ldbu	r3,53(r3)
    ee28:	00c6303a 	nor	r3,zero,r3
    ee2c:	20c6703a 	and	r3,r4,r3
    ee30:	1809883a 	mov	r4,r3
    ee34:	e0ffff17 	ldw	r3,-4(fp)
    ee38:	1885883a 	add	r2,r3,r2
    ee3c:	108002c4 	addi	r2,r2,11
    ee40:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    ee44:	e0bffd03 	ldbu	r2,-12(fp)
    ee48:	e0ffff17 	ldw	r3,-4(fp)
    ee4c:	1885883a 	add	r2,r3,r2
    ee50:	108002c4 	addi	r2,r2,11
    ee54:	10800003 	ldbu	r2,0(r2)
    ee58:	10803fcc 	andi	r2,r2,255
    ee5c:	10000a1e 	bne	r2,zero,ee88 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    ee60:	e0bfff17 	ldw	r2,-4(fp)
    ee64:	10800283 	ldbu	r2,10(r2)
    ee68:	1007883a 	mov	r3,r2
    ee6c:	e0bffe17 	ldw	r2,-8(fp)
    ee70:	10800d83 	ldbu	r2,54(r2)
    ee74:	0084303a 	nor	r2,zero,r2
    ee78:	1884703a 	and	r2,r3,r2
    ee7c:	1007883a 	mov	r3,r2
    ee80:	e0bfff17 	ldw	r2,-4(fp)
    ee84:	10c00285 	stb	r3,10(r2)
    }
}
    ee88:	0001883a 	nop
    ee8c:	e037883a 	mov	sp,fp
    ee90:	df000017 	ldw	fp,0(sp)
    ee94:	dec00104 	addi	sp,sp,4
    ee98:	f800283a 	ret

0000ee9c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    ee9c:	defffa04 	addi	sp,sp,-24
    eea0:	df000515 	stw	fp,20(sp)
    eea4:	df000504 	addi	fp,sp,20
    eea8:	e13ffe15 	stw	r4,-8(fp)
    eeac:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    eeb0:	e0bffe17 	ldw	r2,-8(fp)
    eeb4:	10800d03 	ldbu	r2,52(r2)
    eeb8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    eebc:	e0bffe17 	ldw	r2,-8(fp)
    eec0:	10800d83 	ldbu	r2,54(r2)
    eec4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    eec8:	e0bffe17 	ldw	r2,-8(fp)
    eecc:	10800d43 	ldbu	r2,53(r2)
    eed0:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    eed4:	e0bfff17 	ldw	r2,-4(fp)
    eed8:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    eedc:	e0bffb17 	ldw	r2,-20(fp)
    eee0:	10800017 	ldw	r2,0(r2)
    eee4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    eee8:	00002506 	br	ef80 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    eeec:	e0bffd03 	ldbu	r2,-12(fp)
    eef0:	e0fffd03 	ldbu	r3,-12(fp)
    eef4:	e13ffc17 	ldw	r4,-16(fp)
    eef8:	20c7883a 	add	r3,r4,r3
    eefc:	18c002c4 	addi	r3,r3,11
    ef00:	18c00003 	ldbu	r3,0(r3)
    ef04:	1809883a 	mov	r4,r3
    ef08:	e0fffd83 	ldbu	r3,-10(fp)
    ef0c:	00c6303a 	nor	r3,zero,r3
    ef10:	20c6703a 	and	r3,r4,r3
    ef14:	1809883a 	mov	r4,r3
    ef18:	e0fffc17 	ldw	r3,-16(fp)
    ef1c:	1885883a 	add	r2,r3,r2
    ef20:	108002c4 	addi	r2,r2,11
    ef24:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    ef28:	e0bffd03 	ldbu	r2,-12(fp)
    ef2c:	e0fffc17 	ldw	r3,-16(fp)
    ef30:	1885883a 	add	r2,r3,r2
    ef34:	108002c4 	addi	r2,r2,11
    ef38:	10800003 	ldbu	r2,0(r2)
    ef3c:	10803fcc 	andi	r2,r2,255
    ef40:	1000091e 	bne	r2,zero,ef68 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    ef44:	e0bffc17 	ldw	r2,-16(fp)
    ef48:	10800283 	ldbu	r2,10(r2)
    ef4c:	1007883a 	mov	r3,r2
    ef50:	e0bffd43 	ldbu	r2,-11(fp)
    ef54:	0084303a 	nor	r2,zero,r2
    ef58:	1884703a 	and	r2,r3,r2
    ef5c:	1007883a 	mov	r3,r2
    ef60:	e0bffc17 	ldw	r2,-16(fp)
    ef64:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    ef68:	e0bffb17 	ldw	r2,-20(fp)
    ef6c:	10800104 	addi	r2,r2,4
    ef70:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    ef74:	e0bffb17 	ldw	r2,-20(fp)
    ef78:	10800017 	ldw	r2,0(r2)
    ef7c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    ef80:	e0bffc17 	ldw	r2,-16(fp)
    ef84:	103fd91e 	bne	r2,zero,eeec <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    ef88:	0001883a 	nop
    ef8c:	e037883a 	mov	sp,fp
    ef90:	df000017 	ldw	fp,0(sp)
    ef94:	dec00104 	addi	sp,sp,4
    ef98:	f800283a 	ret

0000ef9c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    ef9c:	defffc04 	addi	sp,sp,-16
    efa0:	df000315 	stw	fp,12(sp)
    efa4:	df000304 	addi	fp,sp,12
    efa8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    efac:	e0bfff17 	ldw	r2,-4(fp)
    efb0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    efb4:	e0bfff17 	ldw	r2,-4(fp)
    efb8:	108002c4 	addi	r2,r2,11
    efbc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    efc0:	e03ffe05 	stb	zero,-8(fp)
    efc4:	00000706 	br	efe4 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    efc8:	e0bffd17 	ldw	r2,-12(fp)
    efcc:	10c00044 	addi	r3,r2,1
    efd0:	e0fffd15 	stw	r3,-12(fp)
    efd4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    efd8:	e0bffe03 	ldbu	r2,-8(fp)
    efdc:	10800044 	addi	r2,r2,1
    efe0:	e0bffe05 	stb	r2,-8(fp)
    efe4:	e0bffe03 	ldbu	r2,-8(fp)
    efe8:	108000f0 	cmpltui	r2,r2,3
    efec:	103ff61e 	bne	r2,zero,efc8 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
    eff0:	0001883a 	nop
    eff4:	e037883a 	mov	sp,fp
    eff8:	df000017 	ldw	fp,0(sp)
    effc:	dec00104 	addi	sp,sp,4
    f000:	f800283a 	ret

0000f004 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f004:	defffb04 	addi	sp,sp,-20
    f008:	dfc00415 	stw	ra,16(sp)
    f00c:	df000315 	stw	fp,12(sp)
    f010:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f014:	0142d004 	movi	r5,2880
    f018:	01000134 	movhi	r4,4
    f01c:	212e4004 	addi	r4,r4,-18176
    f020:	000f37c0 	call	f37c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f024:	00800134 	movhi	r2,4
    f028:	10ae4004 	addi	r2,r2,-18176
    f02c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f030:	00800134 	movhi	r2,4
    f034:	10ae4c04 	addi	r2,r2,-18128
    f038:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f03c:	e03ffd0d 	sth	zero,-12(fp)
    f040:	00001306 	br	f090 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f044:	e0bffe17 	ldw	r2,-8(fp)
    f048:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f04c:	e0bffe17 	ldw	r2,-8(fp)
    f050:	e0ffff17 	ldw	r3,-4(fp)
    f054:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f058:	e0bffe17 	ldw	r2,-8(fp)
    f05c:	00c00fc4 	movi	r3,63
    f060:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f064:	e0bffe17 	ldw	r2,-8(fp)
    f068:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f06c:	e0bffe17 	ldw	r2,-8(fp)
    f070:	10800c04 	addi	r2,r2,48
    f074:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f078:	e0bfff17 	ldw	r2,-4(fp)
    f07c:	10800c04 	addi	r2,r2,48
    f080:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f084:	e0bffd0b 	ldhu	r2,-12(fp)
    f088:	10800044 	addi	r2,r2,1
    f08c:	e0bffd0d 	sth	r2,-12(fp)
    f090:	e0bffd0b 	ldhu	r2,-12(fp)
    f094:	10800ef0 	cmpltui	r2,r2,59
    f098:	103fea1e 	bne	r2,zero,f044 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f09c:	e0bffe17 	ldw	r2,-8(fp)
    f0a0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f0a4:	e0bffe17 	ldw	r2,-8(fp)
    f0a8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f0ac:	e0bffe17 	ldw	r2,-8(fp)
    f0b0:	00c00fc4 	movi	r3,63
    f0b4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f0b8:	e0bffe17 	ldw	r2,-8(fp)
    f0bc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f0c0:	00800134 	movhi	r2,4
    f0c4:	10ae4004 	addi	r2,r2,-18176
    f0c8:	d0a72c15 	stw	r2,-25424(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f0cc:	0001883a 	nop
    f0d0:	e037883a 	mov	sp,fp
    f0d4:	dfc00117 	ldw	ra,4(sp)
    f0d8:	df000017 	ldw	fp,0(sp)
    f0dc:	dec00204 	addi	sp,sp,8
    f0e0:	f800283a 	ret

0000f0e4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f0e4:	deffff04 	addi	sp,sp,-4
    f0e8:	df000015 	stw	fp,0(sp)
    f0ec:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f0f0:	d0272f15 	stw	zero,-25412(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f0f4:	d0272d05 	stb	zero,-25420(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f0f8:	d0271f05 	stb	zero,-25476(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f0fc:	d0272745 	stb	zero,-25443(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f100:	d0271f45 	stb	zero,-25475(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f104:	d0272415 	stw	zero,-25456(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f108:	d0272015 	stw	zero,-25472(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f10c:	d0273215 	stw	zero,-25400(gp)
    OSIdleCtrMax  = 0L;
    f110:	d0272515 	stw	zero,-25452(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f114:	d0273105 	stb	zero,-25404(gp)
#endif
}
    f118:	0001883a 	nop
    f11c:	e037883a 	mov	sp,fp
    f120:	df000017 	ldw	fp,0(sp)
    f124:	dec00104 	addi	sp,sp,4
    f128:	f800283a 	ret

0000f12c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f12c:	defffd04 	addi	sp,sp,-12
    f130:	df000215 	stw	fp,8(sp)
    f134:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f138:	d0272b05 	stb	zero,-25428(gp)
    prdytbl       = &OSRdyTbl[0];
    f13c:	d0a72b44 	addi	r2,gp,-25427
    f140:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f144:	e03ffe05 	stb	zero,-8(fp)
    f148:	00000706 	br	f168 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f14c:	e0bfff17 	ldw	r2,-4(fp)
    f150:	10c00044 	addi	r3,r2,1
    f154:	e0ffff15 	stw	r3,-4(fp)
    f158:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f15c:	e0bffe03 	ldbu	r2,-8(fp)
    f160:	10800044 	addi	r2,r2,1
    f164:	e0bffe05 	stb	r2,-8(fp)
    f168:	e0bffe03 	ldbu	r2,-8(fp)
    f16c:	108000f0 	cmpltui	r2,r2,3
    f170:	103ff61e 	bne	r2,zero,f14c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f174:	d0272145 	stb	zero,-25467(gp)
    OSPrioHighRdy = 0;
    f178:	d0272105 	stb	zero,-25468(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f17c:	d0272915 	stw	zero,-25436(gp)
    OSTCBCur      = (OS_TCB *)0;
    f180:	d0272e15 	stw	zero,-25416(gp)
}
    f184:	0001883a 	nop
    f188:	e037883a 	mov	sp,fp
    f18c:	df000017 	ldw	fp,0(sp)
    f190:	dec00104 	addi	sp,sp,4
    f194:	f800283a 	ret

0000f198 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f198:	defff804 	addi	sp,sp,-32
    f19c:	dfc00715 	stw	ra,28(sp)
    f1a0:	df000615 	stw	fp,24(sp)
    f1a4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f1a8:	008000c4 	movi	r2,3
    f1ac:	d8800415 	stw	r2,16(sp)
    f1b0:	d8000315 	stw	zero,12(sp)
    f1b4:	00808004 	movi	r2,512
    f1b8:	d8800215 	stw	r2,8(sp)
    f1bc:	00800134 	movhi	r2,4
    f1c0:	10ac4004 	addi	r2,r2,-20224
    f1c4:	d8800115 	stw	r2,4(sp)
    f1c8:	00bfffd4 	movui	r2,65535
    f1cc:	d8800015 	stw	r2,0(sp)
    f1d0:	01c00504 	movi	r7,20
    f1d4:	01800134 	movhi	r6,4
    f1d8:	31ae3f04 	addi	r6,r6,-18180
    f1dc:	000b883a 	mov	r5,zero
    f1e0:	01000074 	movhi	r4,1
    f1e4:	213d9104 	addi	r4,r4,-2492
    f1e8:	0013d040 	call	13d04 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f1ec:	e1bfff04 	addi	r6,fp,-4
    f1f0:	014000f4 	movhi	r5,3
    f1f4:	2953e304 	addi	r5,r5,20364
    f1f8:	01000504 	movi	r4,20
    f1fc:	00145140 	call	14514 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f200:	0001883a 	nop
    f204:	e037883a 	mov	sp,fp
    f208:	dfc00117 	ldw	ra,4(sp)
    f20c:	df000017 	ldw	fp,0(sp)
    f210:	dec00204 	addi	sp,sp,8
    f214:	f800283a 	ret

0000f218 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f218:	defff804 	addi	sp,sp,-32
    f21c:	dfc00715 	stw	ra,28(sp)
    f220:	df000615 	stw	fp,24(sp)
    f224:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f228:	008000c4 	movi	r2,3
    f22c:	d8800415 	stw	r2,16(sp)
    f230:	d8000315 	stw	zero,12(sp)
    f234:	00808004 	movi	r2,512
    f238:	d8800215 	stw	r2,8(sp)
    f23c:	00800134 	movhi	r2,4
    f240:	10a9c804 	addi	r2,r2,-22752
    f244:	d8800115 	stw	r2,4(sp)
    f248:	00bfff94 	movui	r2,65534
    f24c:	d8800015 	stw	r2,0(sp)
    f250:	01c004c4 	movi	r7,19
    f254:	01800134 	movhi	r6,4
    f258:	31abc704 	addi	r6,r6,-20708
    f25c:	000b883a 	mov	r5,zero
    f260:	01000074 	movhi	r4,1
    f264:	213da804 	addi	r4,r4,-2400
    f268:	0013d040 	call	13d04 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f26c:	e1bfff04 	addi	r6,fp,-4
    f270:	014000f4 	movhi	r5,3
    f274:	2953e704 	addi	r5,r5,20380
    f278:	010004c4 	movi	r4,19
    f27c:	00145140 	call	14514 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f280:	0001883a 	nop
    f284:	e037883a 	mov	sp,fp
    f288:	dfc00117 	ldw	ra,4(sp)
    f28c:	df000017 	ldw	fp,0(sp)
    f290:	dec00204 	addi	sp,sp,8
    f294:	f800283a 	ret

0000f298 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f298:	defffb04 	addi	sp,sp,-20
    f29c:	dfc00415 	stw	ra,16(sp)
    f2a0:	df000315 	stw	fp,12(sp)
    f2a4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f2a8:	01414404 	movi	r5,1296
    f2ac:	01000134 	movhi	r4,4
    f2b0:	21311004 	addi	r4,r4,-15296
    f2b4:	000f37c0 	call	f37c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f2b8:	01401504 	movi	r5,84
    f2bc:	01000134 	movhi	r4,4
    f2c0:	21325404 	addi	r4,r4,-14000
    f2c4:	000f37c0 	call	f37c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f2c8:	00800134 	movhi	r2,4
    f2cc:	10b11004 	addi	r2,r2,-15296
    f2d0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f2d4:	00800134 	movhi	r2,4
    f2d8:	10b12b04 	addi	r2,r2,-15188
    f2dc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f2e0:	e03ffd05 	stb	zero,-12(fp)
    f2e4:	00001106 	br	f32c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f2e8:	e0bffe17 	ldw	r2,-8(fp)
    f2ec:	e0ffff17 	ldw	r3,-4(fp)
    f2f0:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f2f4:	e0bffe17 	ldw	r2,-8(fp)
    f2f8:	00c00fc4 	movi	r3,63
    f2fc:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f300:	e0bffe17 	ldw	r2,-8(fp)
    f304:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    f308:	e0bffe17 	ldw	r2,-8(fp)
    f30c:	10801b04 	addi	r2,r2,108
    f310:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    f314:	e0bfff17 	ldw	r2,-4(fp)
    f318:	10801b04 	addi	r2,r2,108
    f31c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f320:	e0bffd03 	ldbu	r2,-12(fp)
    f324:	10800044 	addi	r2,r2,1
    f328:	e0bffd05 	stb	r2,-12(fp)
    f32c:	e0bffd03 	ldbu	r2,-12(fp)
    f330:	108002f0 	cmpltui	r2,r2,11
    f334:	103fec1e 	bne	r2,zero,f2e8 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    f338:	e0bffe17 	ldw	r2,-8(fp)
    f33c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    f340:	e0bffe17 	ldw	r2,-8(fp)
    f344:	00c00fc4 	movi	r3,63
    f348:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f34c:	e0bffe17 	ldw	r2,-8(fp)
    f350:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    f354:	d0272215 	stw	zero,-25464(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    f358:	00800134 	movhi	r2,4
    f35c:	10b11004 	addi	r2,r2,-15296
    f360:	d0a72615 	stw	r2,-25448(gp)
}
    f364:	0001883a 	nop
    f368:	e037883a 	mov	sp,fp
    f36c:	dfc00117 	ldw	ra,4(sp)
    f370:	df000017 	ldw	fp,0(sp)
    f374:	dec00204 	addi	sp,sp,8
    f378:	f800283a 	ret

0000f37c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    f37c:	defffd04 	addi	sp,sp,-12
    f380:	df000215 	stw	fp,8(sp)
    f384:	df000204 	addi	fp,sp,8
    f388:	e13ffe15 	stw	r4,-8(fp)
    f38c:	2805883a 	mov	r2,r5
    f390:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f394:	00000706 	br	f3b4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    f398:	e0bffe17 	ldw	r2,-8(fp)
    f39c:	10c00044 	addi	r3,r2,1
    f3a0:	e0fffe15 	stw	r3,-8(fp)
    f3a4:	10000005 	stb	zero,0(r2)
        size--;
    f3a8:	e0bfff0b 	ldhu	r2,-4(fp)
    f3ac:	10bfffc4 	addi	r2,r2,-1
    f3b0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    f3b4:	e0bfff0b 	ldhu	r2,-4(fp)
    f3b8:	103ff71e 	bne	r2,zero,f398 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    f3bc:	0001883a 	nop
    f3c0:	e037883a 	mov	sp,fp
    f3c4:	df000017 	ldw	fp,0(sp)
    f3c8:	dec00104 	addi	sp,sp,4
    f3cc:	f800283a 	ret

0000f3d0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    f3d0:	defffc04 	addi	sp,sp,-16
    f3d4:	df000315 	stw	fp,12(sp)
    f3d8:	df000304 	addi	fp,sp,12
    f3dc:	e13ffd15 	stw	r4,-12(fp)
    f3e0:	e17ffe15 	stw	r5,-8(fp)
    f3e4:	3005883a 	mov	r2,r6
    f3e8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f3ec:	00000b06 	br	f41c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    f3f0:	e0bffd17 	ldw	r2,-12(fp)
    f3f4:	10c00044 	addi	r3,r2,1
    f3f8:	e0fffd15 	stw	r3,-12(fp)
    f3fc:	e0fffe17 	ldw	r3,-8(fp)
    f400:	19000044 	addi	r4,r3,1
    f404:	e13ffe15 	stw	r4,-8(fp)
    f408:	18c00003 	ldbu	r3,0(r3)
    f40c:	10c00005 	stb	r3,0(r2)
        size--;
    f410:	e0bfff0b 	ldhu	r2,-4(fp)
    f414:	10bfffc4 	addi	r2,r2,-1
    f418:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    f41c:	e0bfff0b 	ldhu	r2,-4(fp)
    f420:	103ff31e 	bne	r2,zero,f3f0 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
    f424:	0001883a 	nop
    f428:	e037883a 	mov	sp,fp
    f42c:	df000017 	ldw	fp,0(sp)
    f430:	dec00104 	addi	sp,sp,4
    f434:	f800283a 	ret

0000f438 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    f438:	defffb04 	addi	sp,sp,-20
    f43c:	dfc00415 	stw	ra,16(sp)
    f440:	df000315 	stw	fp,12(sp)
    f444:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f448:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f44c:	0005303a 	rdctl	r2,status
    f450:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f454:	e0ffff17 	ldw	r3,-4(fp)
    f458:	00bfff84 	movi	r2,-2
    f45c:	1884703a 	and	r2,r3,r2
    f460:	1001703a 	wrctl	status,r2
  
  return context;
    f464:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    f468:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    f46c:	d0a72d03 	ldbu	r2,-25420(gp)
    f470:	10803fcc 	andi	r2,r2,255
    f474:	10001a1e 	bne	r2,zero,f4e0 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    f478:	d0a71f03 	ldbu	r2,-25476(gp)
    f47c:	10803fcc 	andi	r2,r2,255
    f480:	1000171e 	bne	r2,zero,f4e0 <OS_Sched+0xa8>
            OS_SchedNew();
    f484:	000f5080 	call	f508 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    f488:	d0e72103 	ldbu	r3,-25468(gp)
    f48c:	d0a72143 	ldbu	r2,-25467(gp)
    f490:	18c03fcc 	andi	r3,r3,255
    f494:	10803fcc 	andi	r2,r2,255
    f498:	18801126 	beq	r3,r2,f4e0 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    f49c:	d0a72103 	ldbu	r2,-25468(gp)
    f4a0:	10c03fcc 	andi	r3,r2,255
    f4a4:	00800134 	movhi	r2,4
    f4a8:	10b25404 	addi	r2,r2,-14000
    f4ac:	18c7883a 	add	r3,r3,r3
    f4b0:	18c7883a 	add	r3,r3,r3
    f4b4:	10c5883a 	add	r2,r2,r3
    f4b8:	10800017 	ldw	r2,0(r2)
    f4bc:	d0a72915 	stw	r2,-25436(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    f4c0:	d0a72917 	ldw	r2,-25436(gp)
    f4c4:	10c00e17 	ldw	r3,56(r2)
    f4c8:	18c00044 	addi	r3,r3,1
    f4cc:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    f4d0:	d0a72417 	ldw	r2,-25456(gp)
    f4d4:	10800044 	addi	r2,r2,1
    f4d8:	d0a72415 	stw	r2,-25456(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    f4dc:	0016be40 	call	16be4 <OSCtxSw>
    f4e0:	e0bffd17 	ldw	r2,-12(fp)
    f4e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4e8:	e0bffe17 	ldw	r2,-8(fp)
    f4ec:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    f4f0:	0001883a 	nop
    f4f4:	e037883a 	mov	sp,fp
    f4f8:	dfc00117 	ldw	ra,4(sp)
    f4fc:	df000017 	ldw	fp,0(sp)
    f500:	dec00204 	addi	sp,sp,8
    f504:	f800283a 	ret

0000f508 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    f508:	defffe04 	addi	sp,sp,-8
    f50c:	df000115 	stw	fp,4(sp)
    f510:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    f514:	d0a72b03 	ldbu	r2,-25428(gp)
    f518:	10c03fcc 	andi	r3,r2,255
    f51c:	008000f4 	movhi	r2,3
    f520:	1093a304 	addi	r2,r2,20108
    f524:	10c5883a 	add	r2,r2,r3
    f528:	10800003 	ldbu	r2,0(r2)
    f52c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    f530:	e0bfff03 	ldbu	r2,-4(fp)
    f534:	100490fa 	slli	r2,r2,3
    f538:	1009883a 	mov	r4,r2
    f53c:	e0ffff03 	ldbu	r3,-4(fp)
    f540:	d0a72b44 	addi	r2,gp,-25427
    f544:	1885883a 	add	r2,r3,r2
    f548:	10800003 	ldbu	r2,0(r2)
    f54c:	10c03fcc 	andi	r3,r2,255
    f550:	008000f4 	movhi	r2,3
    f554:	1093a304 	addi	r2,r2,20108
    f558:	10c5883a 	add	r2,r2,r3
    f55c:	10800003 	ldbu	r2,0(r2)
    f560:	2085883a 	add	r2,r4,r2
    f564:	d0a72105 	stb	r2,-25468(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    f568:	0001883a 	nop
    f56c:	e037883a 	mov	sp,fp
    f570:	df000017 	ldw	fp,0(sp)
    f574:	dec00104 	addi	sp,sp,4
    f578:	f800283a 	ret

0000f57c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    f57c:	defffc04 	addi	sp,sp,-16
    f580:	df000315 	stw	fp,12(sp)
    f584:	df000304 	addi	fp,sp,12
    f588:	e13ffe15 	stw	r4,-8(fp)
    f58c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    f590:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    f594:	00000b06 	br	f5c4 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    f598:	e0bffe17 	ldw	r2,-8(fp)
    f59c:	10c00044 	addi	r3,r2,1
    f5a0:	e0fffe15 	stw	r3,-8(fp)
    f5a4:	e0ffff17 	ldw	r3,-4(fp)
    f5a8:	19000044 	addi	r4,r3,1
    f5ac:	e13fff15 	stw	r4,-4(fp)
    f5b0:	18c00003 	ldbu	r3,0(r3)
    f5b4:	10c00005 	stb	r3,0(r2)
        len++;
    f5b8:	e0bffd03 	ldbu	r2,-12(fp)
    f5bc:	10800044 	addi	r2,r2,1
    f5c0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f5c4:	e0bfff17 	ldw	r2,-4(fp)
    f5c8:	10800003 	ldbu	r2,0(r2)
    f5cc:	10803fcc 	andi	r2,r2,255
    f5d0:	103ff11e 	bne	r2,zero,f598 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    f5d4:	e0bffe17 	ldw	r2,-8(fp)
    f5d8:	10000005 	stb	zero,0(r2)
    return (len);
    f5dc:	e0bffd03 	ldbu	r2,-12(fp)
}
    f5e0:	e037883a 	mov	sp,fp
    f5e4:	df000017 	ldw	fp,0(sp)
    f5e8:	dec00104 	addi	sp,sp,4
    f5ec:	f800283a 	ret

0000f5f0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    f5f0:	defffd04 	addi	sp,sp,-12
    f5f4:	df000215 	stw	fp,8(sp)
    f5f8:	df000204 	addi	fp,sp,8
    f5fc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    f600:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    f604:	00000606 	br	f620 <OS_StrLen+0x30>
        psrc++;
    f608:	e0bfff17 	ldw	r2,-4(fp)
    f60c:	10800044 	addi	r2,r2,1
    f610:	e0bfff15 	stw	r2,-4(fp)
        len++;
    f614:	e0bffe03 	ldbu	r2,-8(fp)
    f618:	10800044 	addi	r2,r2,1
    f61c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f620:	e0bfff17 	ldw	r2,-4(fp)
    f624:	10800003 	ldbu	r2,0(r2)
    f628:	10803fcc 	andi	r2,r2,255
    f62c:	103ff61e 	bne	r2,zero,f608 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
    f630:	e0bffe03 	ldbu	r2,-8(fp)
}
    f634:	e037883a 	mov	sp,fp
    f638:	df000017 	ldw	fp,0(sp)
    f63c:	dec00104 	addi	sp,sp,4
    f640:	f800283a 	ret

0000f644 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    f644:	defffa04 	addi	sp,sp,-24
    f648:	dfc00515 	stw	ra,20(sp)
    f64c:	df000415 	stw	fp,16(sp)
    f650:	df000404 	addi	fp,sp,16
    f654:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f658:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f65c:	0005303a 	rdctl	r2,status
    f660:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f664:	e0fffd17 	ldw	r3,-12(fp)
    f668:	00bfff84 	movi	r2,-2
    f66c:	1884703a 	and	r2,r3,r2
    f670:	1001703a 	wrctl	status,r2
  
  return context;
    f674:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    f678:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    f67c:	d0a72017 	ldw	r2,-25472(gp)
    f680:	10800044 	addi	r2,r2,1
    f684:	d0a72015 	stw	r2,-25472(gp)
    f688:	e0bffc17 	ldw	r2,-16(fp)
    f68c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f690:	e0bffe17 	ldw	r2,-8(fp)
    f694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    f698:	0016ef80 	call	16ef8 <OSTaskIdleHook>
    }
    f69c:	003fef06 	br	f65c <OS_TaskIdle+0x18>

0000f6a0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    f6a0:	defffa04 	addi	sp,sp,-24
    f6a4:	dfc00515 	stw	ra,20(sp)
    f6a8:	df000415 	stw	fp,16(sp)
    f6ac:	df000404 	addi	fp,sp,16
    f6b0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f6b4:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f6b8:	00000206 	br	f6c4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    f6bc:	0101f404 	movi	r4,2000
    f6c0:	0014dd40 	call	14dd4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f6c4:	d0a73103 	ldbu	r2,-25404(gp)
    f6c8:	10803fcc 	andi	r2,r2,255
    f6cc:	103ffb26 	beq	r2,zero,f6bc <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    f6d0:	d0a72517 	ldw	r2,-25452(gp)
    f6d4:	01401904 	movi	r5,100
    f6d8:	1009883a 	mov	r4,r2
    f6dc:	00006840 	call	684 <__udivsi3>
    f6e0:	d0a72515 	stw	r2,-25452(gp)
    if (OSIdleCtrMax == 0L) {
    f6e4:	d0a72517 	ldw	r2,-25452(gp)
    f6e8:	1000031e 	bne	r2,zero,f6f8 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    f6ec:	d0272705 	stb	zero,-25444(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    f6f0:	01003fc4 	movi	r4,255
    f6f4:	0014a5c0 	call	14a5c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6f8:	0005303a 	rdctl	r2,status
    f6fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f700:	e0fffd17 	ldw	r3,-12(fp)
    f704:	00bfff84 	movi	r2,-2
    f708:	1884703a 	and	r2,r3,r2
    f70c:	1001703a 	wrctl	status,r2
  
  return context;
    f710:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    f714:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    f718:	d0a72017 	ldw	r2,-25472(gp)
    f71c:	d0a73215 	stw	r2,-25400(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    f720:	d0272015 	stw	zero,-25472(gp)
    f724:	e0bffc17 	ldw	r2,-16(fp)
    f728:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f72c:	e0bffe17 	ldw	r2,-8(fp)
    f730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    f734:	d0a73217 	ldw	r2,-25400(gp)
    f738:	d0e72517 	ldw	r3,-25452(gp)
    f73c:	180b883a 	mov	r5,r3
    f740:	1009883a 	mov	r4,r2
    f744:	00006840 	call	684 <__udivsi3>
    f748:	1007883a 	mov	r3,r2
    f74c:	00801904 	movi	r2,100
    f750:	10c5c83a 	sub	r2,r2,r3
    f754:	d0a72705 	stb	r2,-25444(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    f758:	0016e780 	call	16e78 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    f75c:	000f76c0 	call	f76c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    f760:	0100fa04 	movi	r4,1000
    f764:	0014dd40 	call	14dd4 <OSTimeDly>
    }
    f768:	003fe306 	br	f6f8 <OS_TaskStat+0x58>

0000f76c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    f76c:	defffa04 	addi	sp,sp,-24
    f770:	dfc00515 	stw	ra,20(sp)
    f774:	df000415 	stw	fp,16(sp)
    f778:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f77c:	e03ffc05 	stb	zero,-16(fp)
    f780:	00002406 	br	f814 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    f784:	e0bffc03 	ldbu	r2,-16(fp)
    f788:	e0fffe04 	addi	r3,fp,-8
    f78c:	180b883a 	mov	r5,r3
    f790:	1009883a 	mov	r4,r2
    f794:	001489c0 	call	1489c <OSTaskStkChk>
    f798:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    f79c:	e0bffc43 	ldbu	r2,-15(fp)
    f7a0:	1000191e 	bne	r2,zero,f808 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    f7a4:	e0fffc03 	ldbu	r3,-16(fp)
    f7a8:	00800134 	movhi	r2,4
    f7ac:	10b25404 	addi	r2,r2,-14000
    f7b0:	18c7883a 	add	r3,r3,r3
    f7b4:	18c7883a 	add	r3,r3,r3
    f7b8:	10c5883a 	add	r2,r2,r3
    f7bc:	10800017 	ldw	r2,0(r2)
    f7c0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    f7c4:	e0bffd17 	ldw	r2,-12(fp)
    f7c8:	10000f26 	beq	r2,zero,f808 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    f7cc:	e0bffd17 	ldw	r2,-12(fp)
    f7d0:	10800060 	cmpeqi	r2,r2,1
    f7d4:	10000c1e 	bne	r2,zero,f808 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    f7d8:	e0bffd17 	ldw	r2,-12(fp)
    f7dc:	10c00217 	ldw	r3,8(r2)
    f7e0:	e0bffd17 	ldw	r2,-12(fp)
    f7e4:	10800317 	ldw	r2,12(r2)
    f7e8:	1085883a 	add	r2,r2,r2
    f7ec:	1085883a 	add	r2,r2,r2
    f7f0:	1887883a 	add	r3,r3,r2
    f7f4:	e0bffd17 	ldw	r2,-12(fp)
    f7f8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    f7fc:	e0ffff17 	ldw	r3,-4(fp)
    f800:	e0bffd17 	ldw	r2,-12(fp)
    f804:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f808:	e0bffc03 	ldbu	r2,-16(fp)
    f80c:	10800044 	addi	r2,r2,1
    f810:	e0bffc05 	stb	r2,-16(fp)
    f814:	e0bffc03 	ldbu	r2,-16(fp)
    f818:	10800570 	cmpltui	r2,r2,21
    f81c:	103fd91e 	bne	r2,zero,f784 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
    f820:	0001883a 	nop
    f824:	e037883a 	mov	sp,fp
    f828:	dfc00117 	ldw	ra,4(sp)
    f82c:	df000017 	ldw	fp,0(sp)
    f830:	dec00204 	addi	sp,sp,8
    f834:	f800283a 	ret

0000f838 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    f838:	defff204 	addi	sp,sp,-56
    f83c:	dfc00d15 	stw	ra,52(sp)
    f840:	df000c15 	stw	fp,48(sp)
    f844:	df000c04 	addi	fp,sp,48
    f848:	e17ffc15 	stw	r5,-16(fp)
    f84c:	e1bffd15 	stw	r6,-12(fp)
    f850:	3807883a 	mov	r3,r7
    f854:	e0800417 	ldw	r2,16(fp)
    f858:	e13ffb05 	stb	r4,-20(fp)
    f85c:	e0fffe0d 	sth	r3,-8(fp)
    f860:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f864:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f868:	0005303a 	rdctl	r2,status
    f86c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f870:	e0fffa17 	ldw	r3,-24(fp)
    f874:	00bfff84 	movi	r2,-2
    f878:	1884703a 	and	r2,r3,r2
    f87c:	1001703a 	wrctl	status,r2
  
  return context;
    f880:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    f884:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    f888:	d0a72617 	ldw	r2,-25448(gp)
    f88c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    f890:	e0bff617 	ldw	r2,-40(fp)
    f894:	10009326 	beq	r2,zero,fae4 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    f898:	e0bff617 	ldw	r2,-40(fp)
    f89c:	10800517 	ldw	r2,20(r2)
    f8a0:	d0a72615 	stw	r2,-25448(gp)
    f8a4:	e0bff417 	ldw	r2,-48(fp)
    f8a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f8ac:	e0bff817 	ldw	r2,-32(fp)
    f8b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    f8b4:	e0bff617 	ldw	r2,-40(fp)
    f8b8:	e0fffc17 	ldw	r3,-16(fp)
    f8bc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    f8c0:	e0bff617 	ldw	r2,-40(fp)
    f8c4:	e0fffb03 	ldbu	r3,-20(fp)
    f8c8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    f8cc:	e0bff617 	ldw	r2,-40(fp)
    f8d0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    f8d4:	e0bff617 	ldw	r2,-40(fp)
    f8d8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    f8dc:	e0bff617 	ldw	r2,-40(fp)
    f8e0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    f8e4:	e0bff617 	ldw	r2,-40(fp)
    f8e8:	e0c00317 	ldw	r3,12(fp)
    f8ec:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    f8f0:	e0bff617 	ldw	r2,-40(fp)
    f8f4:	e0c00217 	ldw	r3,8(fp)
    f8f8:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    f8fc:	e0bff617 	ldw	r2,-40(fp)
    f900:	e0fffd17 	ldw	r3,-12(fp)
    f904:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    f908:	e0bff617 	ldw	r2,-40(fp)
    f90c:	e0ffff0b 	ldhu	r3,-4(fp)
    f910:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    f914:	e0bff617 	ldw	r2,-40(fp)
    f918:	e0fffe0b 	ldhu	r3,-8(fp)
    f91c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    f920:	e0bff617 	ldw	r2,-40(fp)
    f924:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    f928:	e0bffb03 	ldbu	r2,-20(fp)
    f92c:	1004d0fa 	srli	r2,r2,3
    f930:	1007883a 	mov	r3,r2
    f934:	e0bff617 	ldw	r2,-40(fp)
    f938:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    f93c:	e0bffb03 	ldbu	r2,-20(fp)
    f940:	108001cc 	andi	r2,r2,7
    f944:	1007883a 	mov	r3,r2
    f948:	e0bff617 	ldw	r2,-40(fp)
    f94c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    f950:	e0bff617 	ldw	r2,-40(fp)
    f954:	10800d03 	ldbu	r2,52(r2)
    f958:	10803fcc 	andi	r2,r2,255
    f95c:	00c00044 	movi	r3,1
    f960:	1884983a 	sll	r2,r3,r2
    f964:	1007883a 	mov	r3,r2
    f968:	e0bff617 	ldw	r2,-40(fp)
    f96c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    f970:	e0bff617 	ldw	r2,-40(fp)
    f974:	10800cc3 	ldbu	r2,51(r2)
    f978:	10803fcc 	andi	r2,r2,255
    f97c:	00c00044 	movi	r3,1
    f980:	1884983a 	sll	r2,r3,r2
    f984:	1007883a 	mov	r3,r2
    f988:	e0bff617 	ldw	r2,-40(fp)
    f98c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    f990:	e0bff617 	ldw	r2,-40(fp)
    f994:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    f998:	e0bff617 	ldw	r2,-40(fp)
    f99c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    f9a0:	e0bff617 	ldw	r2,-40(fp)
    f9a4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    f9a8:	e0bff617 	ldw	r2,-40(fp)
    f9ac:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    f9b0:	e0bff617 	ldw	r2,-40(fp)
    f9b4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    f9b8:	e0bff617 	ldw	r2,-40(fp)
    f9bc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    f9c0:	e0bff617 	ldw	r2,-40(fp)
    f9c4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    f9c8:	e0bff617 	ldw	r2,-40(fp)
    f9cc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    f9d0:	e0bff617 	ldw	r2,-40(fp)
    f9d4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    f9d8:	e0bff617 	ldw	r2,-40(fp)
    f9dc:	00c00fc4 	movi	r3,63
    f9e0:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    f9e4:	e0bff617 	ldw	r2,-40(fp)
    f9e8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    f9ec:	e13ff617 	ldw	r4,-40(fp)
    f9f0:	0016f180 	call	16f18 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    f9f4:	e13ff617 	ldw	r4,-40(fp)
    f9f8:	0016e100 	call	16e10 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9fc:	0005303a 	rdctl	r2,status
    fa00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa04:	e0fff517 	ldw	r3,-44(fp)
    fa08:	00bfff84 	movi	r2,-2
    fa0c:	1884703a 	and	r2,r3,r2
    fa10:	1001703a 	wrctl	status,r2
  
  return context;
    fa14:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    fa18:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    fa1c:	e0fffb03 	ldbu	r3,-20(fp)
    fa20:	00800134 	movhi	r2,4
    fa24:	10b25404 	addi	r2,r2,-14000
    fa28:	18c7883a 	add	r3,r3,r3
    fa2c:	18c7883a 	add	r3,r3,r3
    fa30:	10c5883a 	add	r2,r2,r3
    fa34:	e0fff617 	ldw	r3,-40(fp)
    fa38:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    fa3c:	d0e72217 	ldw	r3,-25464(gp)
    fa40:	e0bff617 	ldw	r2,-40(fp)
    fa44:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    fa48:	e0bff617 	ldw	r2,-40(fp)
    fa4c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    fa50:	d0a72217 	ldw	r2,-25464(gp)
    fa54:	10000326 	beq	r2,zero,fa64 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    fa58:	d0a72217 	ldw	r2,-25464(gp)
    fa5c:	e0fff617 	ldw	r3,-40(fp)
    fa60:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    fa64:	e0bff617 	ldw	r2,-40(fp)
    fa68:	d0a72215 	stw	r2,-25464(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    fa6c:	e0bff617 	ldw	r2,-40(fp)
    fa70:	10c00d83 	ldbu	r3,54(r2)
    fa74:	d0a72b03 	ldbu	r2,-25428(gp)
    fa78:	1884b03a 	or	r2,r3,r2
    fa7c:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    fa80:	e0bff617 	ldw	r2,-40(fp)
    fa84:	10800d03 	ldbu	r2,52(r2)
    fa88:	10c03fcc 	andi	r3,r2,255
    fa8c:	e0bff617 	ldw	r2,-40(fp)
    fa90:	10800d03 	ldbu	r2,52(r2)
    fa94:	11003fcc 	andi	r4,r2,255
    fa98:	d0a72b44 	addi	r2,gp,-25427
    fa9c:	2085883a 	add	r2,r4,r2
    faa0:	11000003 	ldbu	r4,0(r2)
    faa4:	e0bff617 	ldw	r2,-40(fp)
    faa8:	10800d43 	ldbu	r2,53(r2)
    faac:	2084b03a 	or	r2,r4,r2
    fab0:	1009883a 	mov	r4,r2
    fab4:	d0a72b44 	addi	r2,gp,-25427
    fab8:	1885883a 	add	r2,r3,r2
    fabc:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    fac0:	d0a72743 	ldbu	r2,-25443(gp)
    fac4:	10800044 	addi	r2,r2,1
    fac8:	d0a72745 	stb	r2,-25443(gp)
    facc:	e0bff417 	ldw	r2,-48(fp)
    fad0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fad4:	e0bff717 	ldw	r2,-36(fp)
    fad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    fadc:	0005883a 	mov	r2,zero
    fae0:	00000506 	br	faf8 <OS_TCBInit+0x2c0>
    fae4:	e0bff417 	ldw	r2,-48(fp)
    fae8:	e0bff915 	stw	r2,-28(fp)
    faec:	e0bff917 	ldw	r2,-28(fp)
    faf0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    faf4:	00801084 	movi	r2,66
}
    faf8:	e037883a 	mov	sp,fp
    fafc:	dfc00117 	ldw	ra,4(sp)
    fb00:	df000017 	ldw	fp,0(sp)
    fb04:	dec00204 	addi	sp,sp,8
    fb08:	f800283a 	ret

0000fb0c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    fb0c:	defffe04 	addi	sp,sp,-8
    fb10:	df000115 	stw	fp,4(sp)
    fb14:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    fb18:	d0a01004 	addi	r2,gp,-32704
    fb1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    fb20:	d0a01104 	addi	r2,gp,-32700
    fb24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    fb28:	d0a01284 	addi	r2,gp,-32694
    fb2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    fb30:	d0a01304 	addi	r2,gp,-32692
    fb34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    fb38:	d0a01204 	addi	r2,gp,-32696
    fb3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    fb40:	d0a01384 	addi	r2,gp,-32690
    fb44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    fb48:	d0a01404 	addi	r2,gp,-32688
    fb4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    fb50:	d0a01484 	addi	r2,gp,-32686
    fb54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    fb58:	d0a01504 	addi	r2,gp,-32684
    fb5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    fb60:	d0a01584 	addi	r2,gp,-32682
    fb64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    fb68:	d0a01604 	addi	r2,gp,-32680
    fb6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    fb70:	d0a01684 	addi	r2,gp,-32678
    fb74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    fb78:	d0a01704 	addi	r2,gp,-32676
    fb7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    fb80:	d0a01784 	addi	r2,gp,-32674
    fb84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    fb88:	d0a01804 	addi	r2,gp,-32672
    fb8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    fb90:	d0a01884 	addi	r2,gp,-32670
    fb94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    fb98:	d0a01904 	addi	r2,gp,-32668
    fb9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    fba0:	d0a01984 	addi	r2,gp,-32666
    fba4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    fba8:	d0a01a04 	addi	r2,gp,-32664
    fbac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    fbb0:	d0a01a84 	addi	r2,gp,-32662
    fbb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    fbb8:	d0a01b04 	addi	r2,gp,-32660
    fbbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    fbc0:	d0a01b84 	addi	r2,gp,-32658
    fbc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    fbc8:	d0a01c04 	addi	r2,gp,-32656
    fbcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    fbd0:	d0a01c84 	addi	r2,gp,-32654
    fbd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    fbd8:	d0a01d04 	addi	r2,gp,-32652
    fbdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    fbe0:	d0a01d84 	addi	r2,gp,-32650
    fbe4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    fbe8:	d0a01e04 	addi	r2,gp,-32648
    fbec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    fbf0:	d0a01e84 	addi	r2,gp,-32646
    fbf4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    fbf8:	d0a01f04 	addi	r2,gp,-32644
    fbfc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    fc00:	d0a01f84 	addi	r2,gp,-32642
    fc04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    fc08:	d0a02004 	addi	r2,gp,-32640
    fc0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    fc10:	d0a02084 	addi	r2,gp,-32638
    fc14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    fc18:	d0a02104 	addi	r2,gp,-32636
    fc1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    fc20:	d0a02184 	addi	r2,gp,-32634
    fc24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    fc28:	d0a02204 	addi	r2,gp,-32632
    fc2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    fc30:	d0a02284 	addi	r2,gp,-32630
    fc34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    fc38:	d0a02304 	addi	r2,gp,-32628
    fc3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    fc40:	d0a02384 	addi	r2,gp,-32626
    fc44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    fc48:	d0a02404 	addi	r2,gp,-32624
    fc4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    fc50:	d0a02484 	addi	r2,gp,-32622
    fc54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    fc58:	d0a02504 	addi	r2,gp,-32620
    fc5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    fc60:	d0a02584 	addi	r2,gp,-32618
    fc64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    fc68:	d0a02604 	addi	r2,gp,-32616
    fc6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    fc70:	d0a02684 	addi	r2,gp,-32614
    fc74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    fc78:	d0a02704 	addi	r2,gp,-32612
    fc7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    fc80:	d0a02c04 	addi	r2,gp,-32592
    fc84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    fc88:	0001883a 	nop
    fc8c:	e037883a 	mov	sp,fp
    fc90:	df000017 	ldw	fp,0(sp)
    fc94:	dec00104 	addi	sp,sp,4
    fc98:	f800283a 	ret

0000fc9c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    fc9c:	defff204 	addi	sp,sp,-56
    fca0:	df000d15 	stw	fp,52(sp)
    fca4:	df000d04 	addi	fp,sp,52
    fca8:	e13ffc15 	stw	r4,-16(fp)
    fcac:	2807883a 	mov	r3,r5
    fcb0:	3005883a 	mov	r2,r6
    fcb4:	e1ffff15 	stw	r7,-4(fp)
    fcb8:	e0fffd0d 	sth	r3,-12(fp)
    fcbc:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    fcc0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    fcc4:	e0bfff17 	ldw	r2,-4(fp)
    fcc8:	1000021e 	bne	r2,zero,fcd4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    fccc:	0005883a 	mov	r2,zero
    fcd0:	0000b006 	br	ff94 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    fcd4:	e0bffc17 	ldw	r2,-16(fp)
    fcd8:	1000051e 	bne	r2,zero,fcf0 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fcdc:	e0bfff17 	ldw	r2,-4(fp)
    fce0:	00c01b84 	movi	r3,110
    fce4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fce8:	0005883a 	mov	r2,zero
    fcec:	0000a906 	br	ff94 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    fcf0:	e0bffc17 	ldw	r2,-16(fp)
    fcf4:	10800003 	ldbu	r2,0(r2)
    fcf8:	10803fcc 	andi	r2,r2,255
    fcfc:	10800160 	cmpeqi	r2,r2,5
    fd00:	1000051e 	bne	r2,zero,fd18 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    fd04:	e0bfff17 	ldw	r2,-4(fp)
    fd08:	00c00044 	movi	r3,1
    fd0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fd10:	0005883a 	mov	r2,zero
    fd14:	00009f06 	br	ff94 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    fd18:	e0fffe03 	ldbu	r3,-8(fp)
    fd1c:	00bfe004 	movi	r2,-128
    fd20:	1884703a 	and	r2,r3,r2
    fd24:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    fd28:	e0bff503 	ldbu	r2,-44(fp)
    fd2c:	10000626 	beq	r2,zero,fd48 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    fd30:	e0bffe03 	ldbu	r2,-8(fp)
    fd34:	10801fcc 	andi	r2,r2,127
    fd38:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    fd3c:	00800044 	movi	r2,1
    fd40:	e0bff385 	stb	r2,-50(fp)
    fd44:	00000106 	br	fd4c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    fd48:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    fd4c:	e0bfff17 	ldw	r2,-4(fp)
    fd50:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fd54:	0005303a 	rdctl	r2,status
    fd58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fd5c:	e0fffb17 	ldw	r3,-20(fp)
    fd60:	00bfff84 	movi	r2,-2
    fd64:	1884703a 	and	r2,r3,r2
    fd68:	1001703a 	wrctl	status,r2
  
  return context;
    fd6c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    fd70:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    fd74:	e0bffe03 	ldbu	r2,-8(fp)
    fd78:	10c00060 	cmpeqi	r3,r2,1
    fd7c:	18005f1e 	bne	r3,zero,fefc <OSFlagAccept+0x260>
    fd80:	10c00088 	cmpgei	r3,r2,2
    fd84:	1800021e 	bne	r3,zero,fd90 <OSFlagAccept+0xf4>
    fd88:	10003f26 	beq	r2,zero,fe88 <OSFlagAccept+0x1ec>
    fd8c:	00007706 	br	ff6c <OSFlagAccept+0x2d0>
    fd90:	10c000a0 	cmpeqi	r3,r2,2
    fd94:	1800031e 	bne	r3,zero,fda4 <OSFlagAccept+0x108>
    fd98:	108000e0 	cmpeqi	r2,r2,3
    fd9c:	10001e1e 	bne	r2,zero,fe18 <OSFlagAccept+0x17c>
    fda0:	00007206 	br	ff6c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    fda4:	e0bffc17 	ldw	r2,-16(fp)
    fda8:	10c0020b 	ldhu	r3,8(r2)
    fdac:	e0bffd0b 	ldhu	r2,-12(fp)
    fdb0:	1884703a 	and	r2,r3,r2
    fdb4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    fdb8:	e0fff30b 	ldhu	r3,-52(fp)
    fdbc:	e0bffd0b 	ldhu	r2,-12(fp)
    fdc0:	18800d1e 	bne	r3,r2,fdf8 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fdc4:	e0bff383 	ldbu	r2,-50(fp)
    fdc8:	10800058 	cmpnei	r2,r2,1
    fdcc:	10000d1e 	bne	r2,zero,fe04 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    fdd0:	e0bffc17 	ldw	r2,-16(fp)
    fdd4:	1080020b 	ldhu	r2,8(r2)
    fdd8:	1007883a 	mov	r3,r2
    fddc:	e0bff30b 	ldhu	r2,-52(fp)
    fde0:	0084303a 	nor	r2,zero,r2
    fde4:	1884703a 	and	r2,r3,r2
    fde8:	1007883a 	mov	r3,r2
    fdec:	e0bffc17 	ldw	r2,-16(fp)
    fdf0:	10c0020d 	sth	r3,8(r2)
    fdf4:	00000306 	br	fe04 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    fdf8:	e0bfff17 	ldw	r2,-4(fp)
    fdfc:	00c01c04 	movi	r3,112
    fe00:	10c00005 	stb	r3,0(r2)
    fe04:	e0bff417 	ldw	r2,-48(fp)
    fe08:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe0c:	e0bff617 	ldw	r2,-40(fp)
    fe10:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fe14:	00005e06 	br	ff90 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    fe18:	e0bffc17 	ldw	r2,-16(fp)
    fe1c:	10c0020b 	ldhu	r3,8(r2)
    fe20:	e0bffd0b 	ldhu	r2,-12(fp)
    fe24:	1884703a 	and	r2,r3,r2
    fe28:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    fe2c:	e0bff30b 	ldhu	r2,-52(fp)
    fe30:	10000d26 	beq	r2,zero,fe68 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    fe34:	e0bff383 	ldbu	r2,-50(fp)
    fe38:	10800058 	cmpnei	r2,r2,1
    fe3c:	10000d1e 	bne	r2,zero,fe74 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    fe40:	e0bffc17 	ldw	r2,-16(fp)
    fe44:	1080020b 	ldhu	r2,8(r2)
    fe48:	1007883a 	mov	r3,r2
    fe4c:	e0bff30b 	ldhu	r2,-52(fp)
    fe50:	0084303a 	nor	r2,zero,r2
    fe54:	1884703a 	and	r2,r3,r2
    fe58:	1007883a 	mov	r3,r2
    fe5c:	e0bffc17 	ldw	r2,-16(fp)
    fe60:	10c0020d 	sth	r3,8(r2)
    fe64:	00000306 	br	fe74 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    fe68:	e0bfff17 	ldw	r2,-4(fp)
    fe6c:	00c01c04 	movi	r3,112
    fe70:	10c00005 	stb	r3,0(r2)
    fe74:	e0bff417 	ldw	r2,-48(fp)
    fe78:	e0bff715 	stw	r2,-36(fp)
    fe7c:	e0bff717 	ldw	r2,-36(fp)
    fe80:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fe84:	00004206 	br	ff90 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    fe88:	e0bffc17 	ldw	r2,-16(fp)
    fe8c:	1080020b 	ldhu	r2,8(r2)
    fe90:	0084303a 	nor	r2,zero,r2
    fe94:	1007883a 	mov	r3,r2
    fe98:	e0bffd0b 	ldhu	r2,-12(fp)
    fe9c:	1884703a 	and	r2,r3,r2
    fea0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    fea4:	e0fff30b 	ldhu	r3,-52(fp)
    fea8:	e0bffd0b 	ldhu	r2,-12(fp)
    feac:	18800b1e 	bne	r3,r2,fedc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    feb0:	e0bff383 	ldbu	r2,-50(fp)
    feb4:	10800058 	cmpnei	r2,r2,1
    feb8:	10000b1e 	bne	r2,zero,fee8 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    febc:	e0bffc17 	ldw	r2,-16(fp)
    fec0:	10c0020b 	ldhu	r3,8(r2)
    fec4:	e0bff30b 	ldhu	r2,-52(fp)
    fec8:	1884b03a 	or	r2,r3,r2
    fecc:	1007883a 	mov	r3,r2
    fed0:	e0bffc17 	ldw	r2,-16(fp)
    fed4:	10c0020d 	sth	r3,8(r2)
    fed8:	00000306 	br	fee8 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    fedc:	e0bfff17 	ldw	r2,-4(fp)
    fee0:	00c01c04 	movi	r3,112
    fee4:	10c00005 	stb	r3,0(r2)
    fee8:	e0bff417 	ldw	r2,-48(fp)
    feec:	e0bff815 	stw	r2,-32(fp)
    fef0:	e0bff817 	ldw	r2,-32(fp)
    fef4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    fef8:	00002506 	br	ff90 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    fefc:	e0bffc17 	ldw	r2,-16(fp)
    ff00:	1080020b 	ldhu	r2,8(r2)
    ff04:	0084303a 	nor	r2,zero,r2
    ff08:	1007883a 	mov	r3,r2
    ff0c:	e0bffd0b 	ldhu	r2,-12(fp)
    ff10:	1884703a 	and	r2,r3,r2
    ff14:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    ff18:	e0bff30b 	ldhu	r2,-52(fp)
    ff1c:	10000b26 	beq	r2,zero,ff4c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ff20:	e0bff383 	ldbu	r2,-50(fp)
    ff24:	10800058 	cmpnei	r2,r2,1
    ff28:	10000b1e 	bne	r2,zero,ff58 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    ff2c:	e0bffc17 	ldw	r2,-16(fp)
    ff30:	10c0020b 	ldhu	r3,8(r2)
    ff34:	e0bff30b 	ldhu	r2,-52(fp)
    ff38:	1884b03a 	or	r2,r3,r2
    ff3c:	1007883a 	mov	r3,r2
    ff40:	e0bffc17 	ldw	r2,-16(fp)
    ff44:	10c0020d 	sth	r3,8(r2)
    ff48:	00000306 	br	ff58 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    ff4c:	e0bfff17 	ldw	r2,-4(fp)
    ff50:	00c01c04 	movi	r3,112
    ff54:	10c00005 	stb	r3,0(r2)
    ff58:	e0bff417 	ldw	r2,-48(fp)
    ff5c:	e0bff915 	stw	r2,-28(fp)
    ff60:	e0bff917 	ldw	r2,-28(fp)
    ff64:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    ff68:	00000906 	br	ff90 <OSFlagAccept+0x2f4>
    ff6c:	e0bff417 	ldw	r2,-48(fp)
    ff70:	e0bffa15 	stw	r2,-24(fp)
    ff74:	e0bffa17 	ldw	r2,-24(fp)
    ff78:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    ff7c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    ff80:	e0bfff17 	ldw	r2,-4(fp)
    ff84:	00c01bc4 	movi	r3,111
    ff88:	10c00005 	stb	r3,0(r2)
             break;
    ff8c:	0001883a 	nop
    }
    return (flags_rdy);
    ff90:	e0bff30b 	ldhu	r2,-52(fp)
}
    ff94:	e037883a 	mov	sp,fp
    ff98:	df000017 	ldw	fp,0(sp)
    ff9c:	dec00104 	addi	sp,sp,4
    ffa0:	f800283a 	ret

0000ffa4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    ffa4:	defff804 	addi	sp,sp,-32
    ffa8:	df000715 	stw	fp,28(sp)
    ffac:	df000704 	addi	fp,sp,28
    ffb0:	2005883a 	mov	r2,r4
    ffb4:	e17fff15 	stw	r5,-4(fp)
    ffb8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    ffbc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    ffc0:	e0bfff17 	ldw	r2,-4(fp)
    ffc4:	1000021e 	bne	r2,zero,ffd0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    ffc8:	0005883a 	mov	r2,zero
    ffcc:	00003306 	br	1009c <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    ffd0:	d0a72d03 	ldbu	r2,-25420(gp)
    ffd4:	10803fcc 	andi	r2,r2,255
    ffd8:	10000526 	beq	r2,zero,fff0 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    ffdc:	e0bfff17 	ldw	r2,-4(fp)
    ffe0:	00c00404 	movi	r3,16
    ffe4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    ffe8:	0005883a 	mov	r2,zero
    ffec:	00002b06 	br	1009c <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fff0:	0005303a 	rdctl	r2,status
    fff4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fff8:	e0fffd17 	ldw	r3,-12(fp)
    fffc:	00bfff84 	movi	r2,-2
   10000:	1884703a 	and	r2,r3,r2
   10004:	1001703a 	wrctl	status,r2
  
  return context;
   10008:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1000c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   10010:	d0a73017 	ldw	r2,-25408(gp)
   10014:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   10018:	e0bffb17 	ldw	r2,-20(fp)
   1001c:	10001726 	beq	r2,zero,1007c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   10020:	d0a73017 	ldw	r2,-25408(gp)
   10024:	10800117 	ldw	r2,4(r2)
   10028:	d0a73015 	stw	r2,-25408(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1002c:	e0bffb17 	ldw	r2,-20(fp)
   10030:	00c00144 	movi	r3,5
   10034:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   10038:	e0bffb17 	ldw	r2,-20(fp)
   1003c:	e0fffe0b 	ldhu	r3,-8(fp)
   10040:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   10044:	e0bffb17 	ldw	r2,-20(fp)
   10048:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   1004c:	e0bffb17 	ldw	r2,-20(fp)
   10050:	00c00fc4 	movi	r3,63
   10054:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10058:	e0bffb17 	ldw	r2,-20(fp)
   1005c:	100002c5 	stb	zero,11(r2)
   10060:	e0bff917 	ldw	r2,-28(fp)
   10064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10068:	e0bffa17 	ldw	r2,-24(fp)
   1006c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   10070:	e0bfff17 	ldw	r2,-4(fp)
   10074:	10000005 	stb	zero,0(r2)
   10078:	00000706 	br	10098 <OSFlagCreate+0xf4>
   1007c:	e0bff917 	ldw	r2,-28(fp)
   10080:	e0bffc15 	stw	r2,-16(fp)
   10084:	e0bffc17 	ldw	r2,-16(fp)
   10088:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1008c:	e0bfff17 	ldw	r2,-4(fp)
   10090:	00c01c84 	movi	r3,114
   10094:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10098:	e0bffb17 	ldw	r2,-20(fp)
}
   1009c:	e037883a 	mov	sp,fp
   100a0:	df000017 	ldw	fp,0(sp)
   100a4:	dec00104 	addi	sp,sp,4
   100a8:	f800283a 	ret

000100ac <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   100ac:	defff204 	addi	sp,sp,-56
   100b0:	dfc00d15 	stw	ra,52(sp)
   100b4:	df000c15 	stw	fp,48(sp)
   100b8:	df000c04 	addi	fp,sp,48
   100bc:	e13ffd15 	stw	r4,-12(fp)
   100c0:	2805883a 	mov	r2,r5
   100c4:	e1bfff15 	stw	r6,-4(fp)
   100c8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   100cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   100d0:	e0bfff17 	ldw	r2,-4(fp)
   100d4:	1000021e 	bne	r2,zero,100e0 <OSFlagDel+0x34>
        return (pgrp);
   100d8:	e0bffd17 	ldw	r2,-12(fp)
   100dc:	00008006 	br	102e0 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   100e0:	e0bffd17 	ldw	r2,-12(fp)
   100e4:	1000051e 	bne	r2,zero,100fc <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   100e8:	e0bfff17 	ldw	r2,-4(fp)
   100ec:	00c01b84 	movi	r3,110
   100f0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   100f4:	e0bffd17 	ldw	r2,-12(fp)
   100f8:	00007906 	br	102e0 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   100fc:	d0a72d03 	ldbu	r2,-25420(gp)
   10100:	10803fcc 	andi	r2,r2,255
   10104:	10000526 	beq	r2,zero,1011c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10108:	e0bfff17 	ldw	r2,-4(fp)
   1010c:	00c003c4 	movi	r3,15
   10110:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10114:	e0bffd17 	ldw	r2,-12(fp)
   10118:	00007106 	br	102e0 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1011c:	e0bffd17 	ldw	r2,-12(fp)
   10120:	10800003 	ldbu	r2,0(r2)
   10124:	10803fcc 	andi	r2,r2,255
   10128:	10800160 	cmpeqi	r2,r2,5
   1012c:	1000051e 	bne	r2,zero,10144 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   10130:	e0bfff17 	ldw	r2,-4(fp)
   10134:	00c00044 	movi	r3,1
   10138:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1013c:	e0bffd17 	ldw	r2,-12(fp)
   10140:	00006706 	br	102e0 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10144:	0005303a 	rdctl	r2,status
   10148:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1014c:	e0fffc17 	ldw	r3,-16(fp)
   10150:	00bfff84 	movi	r2,-2
   10154:	1884703a 	and	r2,r3,r2
   10158:	1001703a 	wrctl	status,r2
  
  return context;
   1015c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10160:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   10164:	e0bffd17 	ldw	r2,-12(fp)
   10168:	10800117 	ldw	r2,4(r2)
   1016c:	10000326 	beq	r2,zero,1017c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   10170:	00800044 	movi	r2,1
   10174:	e0bff405 	stb	r2,-48(fp)
   10178:	00000106 	br	10180 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1017c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   10180:	e0bffe03 	ldbu	r2,-8(fp)
   10184:	10000326 	beq	r2,zero,10194 <OSFlagDel+0xe8>
   10188:	10800060 	cmpeqi	r2,r2,1
   1018c:	1000231e 	bne	r2,zero,1021c <OSFlagDel+0x170>
   10190:	00004806 	br	102b4 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   10194:	e0bff403 	ldbu	r2,-48(fp)
   10198:	1000161e 	bne	r2,zero,101f4 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	00c00fc4 	movi	r3,63
   101a4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   101a8:	e0bffd17 	ldw	r2,-12(fp)
   101ac:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   101b0:	e0bffd17 	ldw	r2,-12(fp)
   101b4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   101b8:	d0e73017 	ldw	r3,-25408(gp)
   101bc:	e0bffd17 	ldw	r2,-12(fp)
   101c0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   101c4:	e0bffd17 	ldw	r2,-12(fp)
   101c8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   101cc:	e0bffd17 	ldw	r2,-12(fp)
   101d0:	d0a73015 	stw	r2,-25408(gp)
   101d4:	e0bff717 	ldw	r2,-36(fp)
   101d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101dc:	e0bff817 	ldw	r2,-32(fp)
   101e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   101e4:	e0bfff17 	ldw	r2,-4(fp)
   101e8:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   101ec:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   101f0:	00003a06 	br	102dc <OSFlagDel+0x230>
   101f4:	e0bff717 	ldw	r2,-36(fp)
   101f8:	e0bff915 	stw	r2,-28(fp)
   101fc:	e0bff917 	ldw	r2,-28(fp)
   10200:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10204:	e0bfff17 	ldw	r2,-4(fp)
   10208:	00c01244 	movi	r3,73
   1020c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   10210:	e0bffd17 	ldw	r2,-12(fp)
   10214:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10218:	00003006 	br	102dc <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1021c:	e0bffd17 	ldw	r2,-12(fp)
   10220:	10800117 	ldw	r2,4(r2)
   10224:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10228:	00000606 	br	10244 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   1022c:	000b883a 	mov	r5,zero
   10230:	e13ff517 	ldw	r4,-44(fp)
   10234:	00112180 	call	11218 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10238:	e0bff517 	ldw	r2,-44(fp)
   1023c:	10800017 	ldw	r2,0(r2)
   10240:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10244:	e0bff517 	ldw	r2,-44(fp)
   10248:	103ff81e 	bne	r2,zero,1022c <OSFlagDel+0x180>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1024c:	e0bffd17 	ldw	r2,-12(fp)
   10250:	00c00fc4 	movi	r3,63
   10254:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10258:	e0bffd17 	ldw	r2,-12(fp)
   1025c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10260:	e0bffd17 	ldw	r2,-12(fp)
   10264:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10268:	d0e73017 	ldw	r3,-25408(gp)
   1026c:	e0bffd17 	ldw	r2,-12(fp)
   10270:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10274:	e0bffd17 	ldw	r2,-12(fp)
   10278:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1027c:	e0bffd17 	ldw	r2,-12(fp)
   10280:	d0a73015 	stw	r2,-25408(gp)
   10284:	e0bff717 	ldw	r2,-36(fp)
   10288:	e0bffa15 	stw	r2,-24(fp)
   1028c:	e0bffa17 	ldw	r2,-24(fp)
   10290:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10294:	e0bff403 	ldbu	r2,-48(fp)
   10298:	10800058 	cmpnei	r2,r2,1
   1029c:	1000011e 	bne	r2,zero,102a4 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   102a0:	000f4380 	call	f438 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   102a4:	e0bfff17 	ldw	r2,-4(fp)
   102a8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   102ac:	e03ff615 	stw	zero,-40(fp)
             break;
   102b0:	00000a06 	br	102dc <OSFlagDel+0x230>
   102b4:	e0bff717 	ldw	r2,-36(fp)
   102b8:	e0bffb15 	stw	r2,-20(fp)
   102bc:	e0bffb17 	ldw	r2,-20(fp)
   102c0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   102c4:	e0bfff17 	ldw	r2,-4(fp)
   102c8:	00c001c4 	movi	r3,7
   102cc:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   102d0:	e0bffd17 	ldw	r2,-12(fp)
   102d4:	e0bff615 	stw	r2,-40(fp)
             break;
   102d8:	0001883a 	nop
    }
    return (pgrp_return);
   102dc:	e0bff617 	ldw	r2,-40(fp)
}
   102e0:	e037883a 	mov	sp,fp
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	df000017 	ldw	fp,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   102f4:	defff604 	addi	sp,sp,-40
   102f8:	dfc00915 	stw	ra,36(sp)
   102fc:	df000815 	stw	fp,32(sp)
   10300:	df000804 	addi	fp,sp,32
   10304:	e13ffd15 	stw	r4,-12(fp)
   10308:	e17ffe15 	stw	r5,-8(fp)
   1030c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10310:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10314:	e0bfff17 	ldw	r2,-4(fp)
   10318:	1000021e 	bne	r2,zero,10324 <OSFlagNameGet+0x30>
        return (0);
   1031c:	0005883a 	mov	r2,zero
   10320:	00003906 	br	10408 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10324:	e0bffd17 	ldw	r2,-12(fp)
   10328:	1000051e 	bne	r2,zero,10340 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1032c:	e0bfff17 	ldw	r2,-4(fp)
   10330:	00c01b84 	movi	r3,110
   10334:	10c00005 	stb	r3,0(r2)
        return (0);
   10338:	0005883a 	mov	r2,zero
   1033c:	00003206 	br	10408 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10340:	e0bffe17 	ldw	r2,-8(fp)
   10344:	1000051e 	bne	r2,zero,1035c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10348:	e0bfff17 	ldw	r2,-4(fp)
   1034c:	00c00304 	movi	r3,12
   10350:	10c00005 	stb	r3,0(r2)
        return (0);
   10354:	0005883a 	mov	r2,zero
   10358:	00002b06 	br	10408 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1035c:	d0a72d03 	ldbu	r2,-25420(gp)
   10360:	10803fcc 	andi	r2,r2,255
   10364:	10000526 	beq	r2,zero,1037c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   10368:	e0bfff17 	ldw	r2,-4(fp)
   1036c:	00c00444 	movi	r3,17
   10370:	10c00005 	stb	r3,0(r2)
        return (0);
   10374:	0005883a 	mov	r2,zero
   10378:	00002306 	br	10408 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1037c:	0005303a 	rdctl	r2,status
   10380:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10384:	e0fffc17 	ldw	r3,-16(fp)
   10388:	00bfff84 	movi	r2,-2
   1038c:	1884703a 	and	r2,r3,r2
   10390:	1001703a 	wrctl	status,r2
  
  return context;
   10394:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10398:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1039c:	e0bffd17 	ldw	r2,-12(fp)
   103a0:	10800003 	ldbu	r2,0(r2)
   103a4:	10803fcc 	andi	r2,r2,255
   103a8:	10800160 	cmpeqi	r2,r2,5
   103ac:	1000091e 	bne	r2,zero,103d4 <OSFlagNameGet+0xe0>
   103b0:	e0bff817 	ldw	r2,-32(fp)
   103b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103b8:	e0bff917 	ldw	r2,-28(fp)
   103bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   103c0:	e0bfff17 	ldw	r2,-4(fp)
   103c4:	00c00044 	movi	r3,1
   103c8:	10c00005 	stb	r3,0(r2)
        return (0);
   103cc:	0005883a 	mov	r2,zero
   103d0:	00000d06 	br	10408 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   103d4:	e0bffd17 	ldw	r2,-12(fp)
   103d8:	10800284 	addi	r2,r2,10
   103dc:	100b883a 	mov	r5,r2
   103e0:	e13ffe17 	ldw	r4,-8(fp)
   103e4:	000f57c0 	call	f57c <OS_StrCopy>
   103e8:	e0bffb05 	stb	r2,-20(fp)
   103ec:	e0bff817 	ldw	r2,-32(fp)
   103f0:	e0bffa15 	stw	r2,-24(fp)
   103f4:	e0bffa17 	ldw	r2,-24(fp)
   103f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   103fc:	e0bfff17 	ldw	r2,-4(fp)
   10400:	10000005 	stb	zero,0(r2)
    return (len);
   10404:	e0bffb03 	ldbu	r2,-20(fp)
}
   10408:	e037883a 	mov	sp,fp
   1040c:	dfc00117 	ldw	ra,4(sp)
   10410:	df000017 	ldw	fp,0(sp)
   10414:	dec00204 	addi	sp,sp,8
   10418:	f800283a 	ret

0001041c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1041c:	defff504 	addi	sp,sp,-44
   10420:	dfc00a15 	stw	ra,40(sp)
   10424:	df000915 	stw	fp,36(sp)
   10428:	df000904 	addi	fp,sp,36
   1042c:	e13ffd15 	stw	r4,-12(fp)
   10430:	e17ffe15 	stw	r5,-8(fp)
   10434:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10438:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1043c:	e0bfff17 	ldw	r2,-4(fp)
   10440:	10004326 	beq	r2,zero,10550 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10444:	e0bffd17 	ldw	r2,-12(fp)
   10448:	1000041e 	bne	r2,zero,1045c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1044c:	e0bfff17 	ldw	r2,-4(fp)
   10450:	00c01b84 	movi	r3,110
   10454:	10c00005 	stb	r3,0(r2)
        return;
   10458:	00003e06 	br	10554 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1045c:	e0bffe17 	ldw	r2,-8(fp)
   10460:	1000041e 	bne	r2,zero,10474 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10464:	e0bfff17 	ldw	r2,-4(fp)
   10468:	00c00304 	movi	r3,12
   1046c:	10c00005 	stb	r3,0(r2)
        return;
   10470:	00003806 	br	10554 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10474:	d0a72d03 	ldbu	r2,-25420(gp)
   10478:	10803fcc 	andi	r2,r2,255
   1047c:	10000426 	beq	r2,zero,10490 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   10480:	e0bfff17 	ldw	r2,-4(fp)
   10484:	00c00484 	movi	r3,18
   10488:	10c00005 	stb	r3,0(r2)
        return;
   1048c:	00003106 	br	10554 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10490:	0005303a 	rdctl	r2,status
   10494:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10498:	e0fffc17 	ldw	r3,-16(fp)
   1049c:	00bfff84 	movi	r2,-2
   104a0:	1884703a 	and	r2,r3,r2
   104a4:	1001703a 	wrctl	status,r2
  
  return context;
   104a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   104ac:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   104b0:	e0bffd17 	ldw	r2,-12(fp)
   104b4:	10800003 	ldbu	r2,0(r2)
   104b8:	10803fcc 	andi	r2,r2,255
   104bc:	10800160 	cmpeqi	r2,r2,5
   104c0:	1000081e 	bne	r2,zero,104e4 <OSFlagNameSet+0xc8>
   104c4:	e0bff717 	ldw	r2,-36(fp)
   104c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   104cc:	e0bff817 	ldw	r2,-32(fp)
   104d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   104d4:	e0bfff17 	ldw	r2,-4(fp)
   104d8:	00c00044 	movi	r3,1
   104dc:	10c00005 	stb	r3,0(r2)
        return;
   104e0:	00001c06 	br	10554 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   104e4:	e13ffe17 	ldw	r4,-8(fp)
   104e8:	000f5f00 	call	f5f0 <OS_StrLen>
   104ec:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   104f0:	e0bffa03 	ldbu	r2,-24(fp)
   104f4:	10800830 	cmpltui	r2,r2,32
   104f8:	1000081e 	bne	r2,zero,1051c <OSFlagNameSet+0x100>
   104fc:	e0bff717 	ldw	r2,-36(fp)
   10500:	e0bff915 	stw	r2,-28(fp)
   10504:	e0bff917 	ldw	r2,-28(fp)
   10508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1050c:	e0bfff17 	ldw	r2,-4(fp)
   10510:	00c01cc4 	movi	r3,115
   10514:	10c00005 	stb	r3,0(r2)
        return;
   10518:	00000e06 	br	10554 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1051c:	e0bffd17 	ldw	r2,-12(fp)
   10520:	10800284 	addi	r2,r2,10
   10524:	e17ffe17 	ldw	r5,-8(fp)
   10528:	1009883a 	mov	r4,r2
   1052c:	000f57c0 	call	f57c <OS_StrCopy>
   10530:	e0bff717 	ldw	r2,-36(fp)
   10534:	e0bffb15 	stw	r2,-20(fp)
   10538:	e0bffb17 	ldw	r2,-20(fp)
   1053c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10540:	e0bfff17 	ldw	r2,-4(fp)
   10544:	10000005 	stb	zero,0(r2)
    return;
   10548:	0001883a 	nop
   1054c:	00000106 	br	10554 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10550:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   10554:	e037883a 	mov	sp,fp
   10558:	dfc00117 	ldw	ra,4(sp)
   1055c:	df000017 	ldw	fp,0(sp)
   10560:	dec00204 	addi	sp,sp,8
   10564:	f800283a 	ret

00010568 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   10568:	deffe104 	addi	sp,sp,-124
   1056c:	dfc01e15 	stw	ra,120(sp)
   10570:	df001d15 	stw	fp,116(sp)
   10574:	df001d04 	addi	fp,sp,116
   10578:	e13ffc15 	stw	r4,-16(fp)
   1057c:	2809883a 	mov	r4,r5
   10580:	3007883a 	mov	r3,r6
   10584:	3805883a 	mov	r2,r7
   10588:	e13ffd0d 	sth	r4,-12(fp)
   1058c:	e0fffe05 	stb	r3,-8(fp)
   10590:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10594:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10598:	e0800217 	ldw	r2,8(fp)
   1059c:	1000021e 	bne	r2,zero,105a8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   105a0:	0005883a 	mov	r2,zero
   105a4:	00015906 	br	10b0c <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   105a8:	e0bffc17 	ldw	r2,-16(fp)
   105ac:	1000051e 	bne	r2,zero,105c4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   105b0:	e0800217 	ldw	r2,8(fp)
   105b4:	00c01b84 	movi	r3,110
   105b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   105bc:	0005883a 	mov	r2,zero
   105c0:	00015206 	br	10b0c <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   105c4:	d0a72d03 	ldbu	r2,-25420(gp)
   105c8:	10803fcc 	andi	r2,r2,255
   105cc:	10000526 	beq	r2,zero,105e4 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   105d0:	e0800217 	ldw	r2,8(fp)
   105d4:	00c00084 	movi	r3,2
   105d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   105dc:	0005883a 	mov	r2,zero
   105e0:	00014a06 	br	10b0c <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   105e4:	d0a71f03 	ldbu	r2,-25476(gp)
   105e8:	10803fcc 	andi	r2,r2,255
   105ec:	10000526 	beq	r2,zero,10604 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   105f0:	e0800217 	ldw	r2,8(fp)
   105f4:	00c00344 	movi	r3,13
   105f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   105fc:	0005883a 	mov	r2,zero
   10600:	00014206 	br	10b0c <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10604:	e0bffc17 	ldw	r2,-16(fp)
   10608:	10800003 	ldbu	r2,0(r2)
   1060c:	10803fcc 	andi	r2,r2,255
   10610:	10800160 	cmpeqi	r2,r2,5
   10614:	1000051e 	bne	r2,zero,1062c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   10618:	e0800217 	ldw	r2,8(fp)
   1061c:	00c00044 	movi	r3,1
   10620:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10624:	0005883a 	mov	r2,zero
   10628:	00013806 	br	10b0c <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1062c:	e0fffe03 	ldbu	r3,-8(fp)
   10630:	00bfe004 	movi	r2,-128
   10634:	1884703a 	and	r2,r3,r2
   10638:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   1063c:	e0bfe603 	ldbu	r2,-104(fp)
   10640:	10000626 	beq	r2,zero,1065c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   10644:	e0bffe03 	ldbu	r2,-8(fp)
   10648:	10801fcc 	andi	r2,r2,127
   1064c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10650:	00800044 	movi	r2,1
   10654:	e0bfe405 	stb	r2,-112(fp)
   10658:	00000106 	br	10660 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   1065c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10660:	0005303a 	rdctl	r2,status
   10664:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10668:	e0fff617 	ldw	r3,-40(fp)
   1066c:	00bfff84 	movi	r2,-2
   10670:	1884703a 	and	r2,r3,r2
   10674:	1001703a 	wrctl	status,r2
  
  return context;
   10678:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1067c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   10680:	e0bffe03 	ldbu	r2,-8(fp)
   10684:	10c00060 	cmpeqi	r3,r2,1
   10688:	1800921e 	bne	r3,zero,108d4 <OSFlagPend+0x36c>
   1068c:	10c00088 	cmpgei	r3,r2,2
   10690:	1800021e 	bne	r3,zero,1069c <OSFlagPend+0x134>
   10694:	10006126 	beq	r2,zero,1081c <OSFlagPend+0x2b4>
   10698:	0000bb06 	br	10988 <OSFlagPend+0x420>
   1069c:	10c000a0 	cmpeqi	r3,r2,2
   106a0:	1800031e 	bne	r3,zero,106b0 <OSFlagPend+0x148>
   106a4:	108000e0 	cmpeqi	r2,r2,3
   106a8:	10002f1e 	bne	r2,zero,10768 <OSFlagPend+0x200>
   106ac:	0000b606 	br	10988 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   106b0:	e0bffc17 	ldw	r2,-16(fp)
   106b4:	10c0020b 	ldhu	r3,8(r2)
   106b8:	e0bffd0b 	ldhu	r2,-12(fp)
   106bc:	1884703a 	and	r2,r3,r2
   106c0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   106c4:	e0ffe80b 	ldhu	r3,-96(fp)
   106c8:	e0bffd0b 	ldhu	r2,-12(fp)
   106cc:	1880171e 	bne	r3,r2,1072c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   106d0:	e0bfe403 	ldbu	r2,-112(fp)
   106d4:	10800058 	cmpnei	r2,r2,1
   106d8:	1000091e 	bne	r2,zero,10700 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   106dc:	e0bffc17 	ldw	r2,-16(fp)
   106e0:	1080020b 	ldhu	r2,8(r2)
   106e4:	1007883a 	mov	r3,r2
   106e8:	e0bfe80b 	ldhu	r2,-96(fp)
   106ec:	0084303a 	nor	r2,zero,r2
   106f0:	1884703a 	and	r2,r3,r2
   106f4:	1007883a 	mov	r3,r2
   106f8:	e0bffc17 	ldw	r2,-16(fp)
   106fc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10700:	d0a72e17 	ldw	r2,-25416(gp)
   10704:	e0ffe80b 	ldhu	r3,-96(fp)
   10708:	10c00b0d 	sth	r3,44(r2)
   1070c:	e0bfe517 	ldw	r2,-108(fp)
   10710:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10714:	e0bfe717 	ldw	r2,-100(fp)
   10718:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1071c:	e0800217 	ldw	r2,8(fp)
   10720:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10724:	e0bfe80b 	ldhu	r2,-96(fp)
   10728:	0000f806 	br	10b0c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1072c:	e13ffd0b 	ldhu	r4,-12(fp)
   10730:	e17ffe03 	ldbu	r5,-8(fp)
   10734:	e0bfff0b 	ldhu	r2,-4(fp)
   10738:	e0fff704 	addi	r3,fp,-36
   1073c:	d8800015 	stw	r2,0(sp)
   10740:	280f883a 	mov	r7,r5
   10744:	200d883a 	mov	r6,r4
   10748:	180b883a 	mov	r5,r3
   1074c:	e13ffc17 	ldw	r4,-16(fp)
   10750:	0010fd80 	call	10fd8 <OS_FlagBlock>
   10754:	e0bfe517 	ldw	r2,-108(fp)
   10758:	e0bfe915 	stw	r2,-92(fp)
   1075c:	e0bfe917 	ldw	r2,-92(fp)
   10760:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10764:	00009206 	br	109b0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   10768:	e0bffc17 	ldw	r2,-16(fp)
   1076c:	10c0020b 	ldhu	r3,8(r2)
   10770:	e0bffd0b 	ldhu	r2,-12(fp)
   10774:	1884703a 	and	r2,r3,r2
   10778:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1077c:	e0bfe80b 	ldhu	r2,-96(fp)
   10780:	10001726 	beq	r2,zero,107e0 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10784:	e0bfe403 	ldbu	r2,-112(fp)
   10788:	10800058 	cmpnei	r2,r2,1
   1078c:	1000091e 	bne	r2,zero,107b4 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10790:	e0bffc17 	ldw	r2,-16(fp)
   10794:	1080020b 	ldhu	r2,8(r2)
   10798:	1007883a 	mov	r3,r2
   1079c:	e0bfe80b 	ldhu	r2,-96(fp)
   107a0:	0084303a 	nor	r2,zero,r2
   107a4:	1884703a 	and	r2,r3,r2
   107a8:	1007883a 	mov	r3,r2
   107ac:	e0bffc17 	ldw	r2,-16(fp)
   107b0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   107b4:	d0a72e17 	ldw	r2,-25416(gp)
   107b8:	e0ffe80b 	ldhu	r3,-96(fp)
   107bc:	10c00b0d 	sth	r3,44(r2)
   107c0:	e0bfe517 	ldw	r2,-108(fp)
   107c4:	e0bfea15 	stw	r2,-88(fp)
   107c8:	e0bfea17 	ldw	r2,-88(fp)
   107cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   107d0:	e0800217 	ldw	r2,8(fp)
   107d4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   107d8:	e0bfe80b 	ldhu	r2,-96(fp)
   107dc:	0000cb06 	br	10b0c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   107e0:	e13ffd0b 	ldhu	r4,-12(fp)
   107e4:	e17ffe03 	ldbu	r5,-8(fp)
   107e8:	e0bfff0b 	ldhu	r2,-4(fp)
   107ec:	e0fff704 	addi	r3,fp,-36
   107f0:	d8800015 	stw	r2,0(sp)
   107f4:	280f883a 	mov	r7,r5
   107f8:	200d883a 	mov	r6,r4
   107fc:	180b883a 	mov	r5,r3
   10800:	e13ffc17 	ldw	r4,-16(fp)
   10804:	0010fd80 	call	10fd8 <OS_FlagBlock>
   10808:	e0bfe517 	ldw	r2,-108(fp)
   1080c:	e0bfeb15 	stw	r2,-84(fp)
   10810:	e0bfeb17 	ldw	r2,-84(fp)
   10814:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10818:	00006506 	br	109b0 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1081c:	e0bffc17 	ldw	r2,-16(fp)
   10820:	1080020b 	ldhu	r2,8(r2)
   10824:	0084303a 	nor	r2,zero,r2
   10828:	1007883a 	mov	r3,r2
   1082c:	e0bffd0b 	ldhu	r2,-12(fp)
   10830:	1884703a 	and	r2,r3,r2
   10834:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10838:	e0ffe80b 	ldhu	r3,-96(fp)
   1083c:	e0bffd0b 	ldhu	r2,-12(fp)
   10840:	1880151e 	bne	r3,r2,10898 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10844:	e0bfe403 	ldbu	r2,-112(fp)
   10848:	10800058 	cmpnei	r2,r2,1
   1084c:	1000071e 	bne	r2,zero,1086c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10850:	e0bffc17 	ldw	r2,-16(fp)
   10854:	10c0020b 	ldhu	r3,8(r2)
   10858:	e0bfe80b 	ldhu	r2,-96(fp)
   1085c:	1884b03a 	or	r2,r3,r2
   10860:	1007883a 	mov	r3,r2
   10864:	e0bffc17 	ldw	r2,-16(fp)
   10868:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1086c:	d0a72e17 	ldw	r2,-25416(gp)
   10870:	e0ffe80b 	ldhu	r3,-96(fp)
   10874:	10c00b0d 	sth	r3,44(r2)
   10878:	e0bfe517 	ldw	r2,-108(fp)
   1087c:	e0bfec15 	stw	r2,-80(fp)
   10880:	e0bfec17 	ldw	r2,-80(fp)
   10884:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10888:	e0800217 	ldw	r2,8(fp)
   1088c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10890:	e0bfe80b 	ldhu	r2,-96(fp)
   10894:	00009d06 	br	10b0c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10898:	e13ffd0b 	ldhu	r4,-12(fp)
   1089c:	e17ffe03 	ldbu	r5,-8(fp)
   108a0:	e0bfff0b 	ldhu	r2,-4(fp)
   108a4:	e0fff704 	addi	r3,fp,-36
   108a8:	d8800015 	stw	r2,0(sp)
   108ac:	280f883a 	mov	r7,r5
   108b0:	200d883a 	mov	r6,r4
   108b4:	180b883a 	mov	r5,r3
   108b8:	e13ffc17 	ldw	r4,-16(fp)
   108bc:	0010fd80 	call	10fd8 <OS_FlagBlock>
   108c0:	e0bfe517 	ldw	r2,-108(fp)
   108c4:	e0bfed15 	stw	r2,-76(fp)
   108c8:	e0bfed17 	ldw	r2,-76(fp)
   108cc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   108d0:	00003706 	br	109b0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   108d4:	e0bffc17 	ldw	r2,-16(fp)
   108d8:	1080020b 	ldhu	r2,8(r2)
   108dc:	0084303a 	nor	r2,zero,r2
   108e0:	1007883a 	mov	r3,r2
   108e4:	e0bffd0b 	ldhu	r2,-12(fp)
   108e8:	1884703a 	and	r2,r3,r2
   108ec:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   108f0:	e0bfe80b 	ldhu	r2,-96(fp)
   108f4:	10001526 	beq	r2,zero,1094c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   108f8:	e0bfe403 	ldbu	r2,-112(fp)
   108fc:	10800058 	cmpnei	r2,r2,1
   10900:	1000071e 	bne	r2,zero,10920 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10904:	e0bffc17 	ldw	r2,-16(fp)
   10908:	10c0020b 	ldhu	r3,8(r2)
   1090c:	e0bfe80b 	ldhu	r2,-96(fp)
   10910:	1884b03a 	or	r2,r3,r2
   10914:	1007883a 	mov	r3,r2
   10918:	e0bffc17 	ldw	r2,-16(fp)
   1091c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10920:	d0a72e17 	ldw	r2,-25416(gp)
   10924:	e0ffe80b 	ldhu	r3,-96(fp)
   10928:	10c00b0d 	sth	r3,44(r2)
   1092c:	e0bfe517 	ldw	r2,-108(fp)
   10930:	e0bfee15 	stw	r2,-72(fp)
   10934:	e0bfee17 	ldw	r2,-72(fp)
   10938:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1093c:	e0800217 	ldw	r2,8(fp)
   10940:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10944:	e0bfe80b 	ldhu	r2,-96(fp)
   10948:	00007006 	br	10b0c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1094c:	e13ffd0b 	ldhu	r4,-12(fp)
   10950:	e17ffe03 	ldbu	r5,-8(fp)
   10954:	e0bfff0b 	ldhu	r2,-4(fp)
   10958:	e0fff704 	addi	r3,fp,-36
   1095c:	d8800015 	stw	r2,0(sp)
   10960:	280f883a 	mov	r7,r5
   10964:	200d883a 	mov	r6,r4
   10968:	180b883a 	mov	r5,r3
   1096c:	e13ffc17 	ldw	r4,-16(fp)
   10970:	0010fd80 	call	10fd8 <OS_FlagBlock>
   10974:	e0bfe517 	ldw	r2,-108(fp)
   10978:	e0bfef15 	stw	r2,-68(fp)
   1097c:	e0bfef17 	ldw	r2,-68(fp)
   10980:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10984:	00000a06 	br	109b0 <OSFlagPend+0x448>
   10988:	e0bfe517 	ldw	r2,-108(fp)
   1098c:	e0bff015 	stw	r2,-64(fp)
   10990:	e0bff017 	ldw	r2,-64(fp)
   10994:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10998:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   1099c:	e0800217 	ldw	r2,8(fp)
   109a0:	00c01bc4 	movi	r3,111
   109a4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   109a8:	e0bfe80b 	ldhu	r2,-96(fp)
   109ac:	00005706 	br	10b0c <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   109b0:	000f4380 	call	f438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   109b4:	0005303a 	rdctl	r2,status
   109b8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   109bc:	e0fff117 	ldw	r3,-60(fp)
   109c0:	00bfff84 	movi	r2,-2
   109c4:	1884703a 	and	r2,r3,r2
   109c8:	1001703a 	wrctl	status,r2
  
  return context;
   109cc:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   109d0:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   109d4:	d0a72e17 	ldw	r2,-25416(gp)
   109d8:	10800c43 	ldbu	r2,49(r2)
   109dc:	10803fcc 	andi	r2,r2,255
   109e0:	10001c26 	beq	r2,zero,10a54 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   109e4:	d0a72e17 	ldw	r2,-25416(gp)
   109e8:	10800c43 	ldbu	r2,49(r2)
   109ec:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   109f0:	d0a72e17 	ldw	r2,-25416(gp)
   109f4:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   109f8:	e0bff704 	addi	r2,fp,-36
   109fc:	1009883a 	mov	r4,r2
   10a00:	001130c0 	call	1130c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   10a04:	d0a72e17 	ldw	r2,-25416(gp)
   10a08:	10000c05 	stb	zero,48(r2)
   10a0c:	e0bfe517 	ldw	r2,-108(fp)
   10a10:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a14:	e0bff217 	ldw	r2,-56(fp)
   10a18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   10a1c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   10a20:	e0bff303 	ldbu	r2,-52(fp)
   10a24:	108000a0 	cmpeqi	r2,r2,2
   10a28:	10000426 	beq	r2,zero,10a3c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   10a2c:	e0800217 	ldw	r2,8(fp)
   10a30:	00c00384 	movi	r3,14
   10a34:	10c00005 	stb	r3,0(r2)
                 break;
   10a38:	00000406 	br	10a4c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   10a3c:	e0800217 	ldw	r2,8(fp)
   10a40:	00c00284 	movi	r3,10
   10a44:	10c00005 	stb	r3,0(r2)
                 break;
   10a48:	0001883a 	nop
        }
        return (flags_rdy);
   10a4c:	e0bfe80b 	ldhu	r2,-96(fp)
   10a50:	00002e06 	br	10b0c <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   10a54:	d0a72e17 	ldw	r2,-25416(gp)
   10a58:	10800b0b 	ldhu	r2,44(r2)
   10a5c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   10a60:	e0bfe403 	ldbu	r2,-112(fp)
   10a64:	10800058 	cmpnei	r2,r2,1
   10a68:	1000211e 	bne	r2,zero,10af0 <OSFlagPend+0x588>
        switch (wait_type) {
   10a6c:	e0bffe03 	ldbu	r2,-8(fp)
   10a70:	10001616 	blt	r2,zero,10acc <OSFlagPend+0x564>
   10a74:	10c00090 	cmplti	r3,r2,2
   10a78:	18000c1e 	bne	r3,zero,10aac <OSFlagPend+0x544>
   10a7c:	10800108 	cmpgei	r2,r2,4
   10a80:	1000121e 	bne	r2,zero,10acc <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   10a84:	e0bffc17 	ldw	r2,-16(fp)
   10a88:	1080020b 	ldhu	r2,8(r2)
   10a8c:	1007883a 	mov	r3,r2
   10a90:	e0bfe80b 	ldhu	r2,-96(fp)
   10a94:	0084303a 	nor	r2,zero,r2
   10a98:	1884703a 	and	r2,r3,r2
   10a9c:	1007883a 	mov	r3,r2
   10aa0:	e0bffc17 	ldw	r2,-16(fp)
   10aa4:	10c0020d 	sth	r3,8(r2)
                 break;
   10aa8:	00001106 	br	10af0 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   10aac:	e0bffc17 	ldw	r2,-16(fp)
   10ab0:	10c0020b 	ldhu	r3,8(r2)
   10ab4:	e0bfe80b 	ldhu	r2,-96(fp)
   10ab8:	1884b03a 	or	r2,r3,r2
   10abc:	1007883a 	mov	r3,r2
   10ac0:	e0bffc17 	ldw	r2,-16(fp)
   10ac4:	10c0020d 	sth	r3,8(r2)
                 break;
   10ac8:	00000906 	br	10af0 <OSFlagPend+0x588>
   10acc:	e0bfe517 	ldw	r2,-108(fp)
   10ad0:	e0bff415 	stw	r2,-48(fp)
   10ad4:	e0bff417 	ldw	r2,-48(fp)
   10ad8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10adc:	e0800217 	ldw	r2,8(fp)
   10ae0:	00c01bc4 	movi	r3,111
   10ae4:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10ae8:	0005883a 	mov	r2,zero
   10aec:	00000706 	br	10b0c <OSFlagPend+0x5a4>
   10af0:	e0bfe517 	ldw	r2,-108(fp)
   10af4:	e0bff515 	stw	r2,-44(fp)
   10af8:	e0bff517 	ldw	r2,-44(fp)
   10afc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   10b00:	e0800217 	ldw	r2,8(fp)
   10b04:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   10b08:	e0bfe80b 	ldhu	r2,-96(fp)
}
   10b0c:	e037883a 	mov	sp,fp
   10b10:	dfc00117 	ldw	ra,4(sp)
   10b14:	df000017 	ldw	fp,0(sp)
   10b18:	dec00204 	addi	sp,sp,8
   10b1c:	f800283a 	ret

00010b20 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   10b20:	defffb04 	addi	sp,sp,-20
   10b24:	df000415 	stw	fp,16(sp)
   10b28:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10b2c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b30:	0005303a 	rdctl	r2,status
   10b34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b38:	e0fffe17 	ldw	r3,-8(fp)
   10b3c:	00bfff84 	movi	r2,-2
   10b40:	1884703a 	and	r2,r3,r2
   10b44:	1001703a 	wrctl	status,r2
  
  return context;
   10b48:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10b4c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   10b50:	d0a72e17 	ldw	r2,-25416(gp)
   10b54:	10800b0b 	ldhu	r2,44(r2)
   10b58:	e0bffd0d 	sth	r2,-12(fp)
   10b5c:	e0bffc17 	ldw	r2,-16(fp)
   10b60:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b64:	e0bfff17 	ldw	r2,-4(fp)
   10b68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   10b6c:	e0bffd0b 	ldhu	r2,-12(fp)
}
   10b70:	e037883a 	mov	sp,fp
   10b74:	df000017 	ldw	fp,0(sp)
   10b78:	dec00104 	addi	sp,sp,4
   10b7c:	f800283a 	ret

00010b80 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   10b80:	deffef04 	addi	sp,sp,-68
   10b84:	dfc01015 	stw	ra,64(sp)
   10b88:	df000f15 	stw	fp,60(sp)
   10b8c:	df000f04 	addi	fp,sp,60
   10b90:	e13ffc15 	stw	r4,-16(fp)
   10b94:	2807883a 	mov	r3,r5
   10b98:	3005883a 	mov	r2,r6
   10b9c:	e1ffff15 	stw	r7,-4(fp)
   10ba0:	e0fffd0d 	sth	r3,-12(fp)
   10ba4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   10ba8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   10bac:	e0bfff17 	ldw	r2,-4(fp)
   10bb0:	1000021e 	bne	r2,zero,10bbc <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   10bb4:	0005883a 	mov	r2,zero
   10bb8:	0000d106 	br	10f00 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   10bbc:	e0bffc17 	ldw	r2,-16(fp)
   10bc0:	1000051e 	bne	r2,zero,10bd8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10bc4:	e0bfff17 	ldw	r2,-4(fp)
   10bc8:	00c01b84 	movi	r3,110
   10bcc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10bd0:	0005883a 	mov	r2,zero
   10bd4:	0000ca06 	br	10f00 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   10bd8:	e0bffc17 	ldw	r2,-16(fp)
   10bdc:	10800003 	ldbu	r2,0(r2)
   10be0:	10803fcc 	andi	r2,r2,255
   10be4:	10800160 	cmpeqi	r2,r2,5
   10be8:	1000051e 	bne	r2,zero,10c00 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   10bec:	e0bfff17 	ldw	r2,-4(fp)
   10bf0:	00c00044 	movi	r3,1
   10bf4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10bf8:	0005883a 	mov	r2,zero
   10bfc:	0000c006 	br	10f00 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c00:	0005303a 	rdctl	r2,status
   10c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c08:	e0fffb17 	ldw	r3,-20(fp)
   10c0c:	00bfff84 	movi	r2,-2
   10c10:	1884703a 	and	r2,r3,r2
   10c14:	1001703a 	wrctl	status,r2
  
  return context;
   10c18:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10c1c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   10c20:	e0bffe03 	ldbu	r2,-8(fp)
   10c24:	10000326 	beq	r2,zero,10c34 <OSFlagPost+0xb4>
   10c28:	10800060 	cmpeqi	r2,r2,1
   10c2c:	10000b1e 	bne	r2,zero,10c5c <OSFlagPost+0xdc>
   10c30:	00001206 	br	10c7c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   10c34:	e0bffc17 	ldw	r2,-16(fp)
   10c38:	1080020b 	ldhu	r2,8(r2)
   10c3c:	1007883a 	mov	r3,r2
   10c40:	e0bffd0b 	ldhu	r2,-12(fp)
   10c44:	0084303a 	nor	r2,zero,r2
   10c48:	1884703a 	and	r2,r3,r2
   10c4c:	1007883a 	mov	r3,r2
   10c50:	e0bffc17 	ldw	r2,-16(fp)
   10c54:	10c0020d 	sth	r3,8(r2)
             break;
   10c58:	00001106 	br	10ca0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   10c5c:	e0bffc17 	ldw	r2,-16(fp)
   10c60:	10c0020b 	ldhu	r3,8(r2)
   10c64:	e0bffd0b 	ldhu	r2,-12(fp)
   10c68:	1884b03a 	or	r2,r3,r2
   10c6c:	1007883a 	mov	r3,r2
   10c70:	e0bffc17 	ldw	r2,-16(fp)
   10c74:	10c0020d 	sth	r3,8(r2)
             break;
   10c78:	00000906 	br	10ca0 <OSFlagPost+0x120>
   10c7c:	e0bff317 	ldw	r2,-52(fp)
   10c80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10c84:	e0bff417 	ldw	r2,-48(fp)
   10c88:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   10c8c:	e0bfff17 	ldw	r2,-4(fp)
   10c90:	00c01c44 	movi	r3,113
   10c94:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   10c98:	0005883a 	mov	r2,zero
   10c9c:	00009806 	br	10f00 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   10ca0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10ca4:	e0bffc17 	ldw	r2,-16(fp)
   10ca8:	10800117 	ldw	r2,4(r2)
   10cac:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10cb0:	00007706 	br	10e90 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   10cb4:	e0bff117 	ldw	r2,-60(fp)
   10cb8:	10800483 	ldbu	r2,18(r2)
   10cbc:	10803fcc 	andi	r2,r2,255
   10cc0:	10c00060 	cmpeqi	r3,r2,1
   10cc4:	18004a1e 	bne	r3,zero,10df0 <OSFlagPost+0x270>
   10cc8:	10c00088 	cmpgei	r3,r2,2
   10ccc:	1800021e 	bne	r3,zero,10cd8 <OSFlagPost+0x158>
   10cd0:	10002f26 	beq	r2,zero,10d90 <OSFlagPost+0x210>
   10cd4:	00005b06 	br	10e44 <OSFlagPost+0x2c4>
   10cd8:	10c000a0 	cmpeqi	r3,r2,2
   10cdc:	1800031e 	bne	r3,zero,10cec <OSFlagPost+0x16c>
   10ce0:	108000e0 	cmpeqi	r2,r2,3
   10ce4:	1000171e 	bne	r2,zero,10d44 <OSFlagPost+0x1c4>
   10ce8:	00005606 	br	10e44 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10cec:	e0bffc17 	ldw	r2,-16(fp)
   10cf0:	10c0020b 	ldhu	r3,8(r2)
   10cf4:	e0bff117 	ldw	r2,-60(fp)
   10cf8:	1080040b 	ldhu	r2,16(r2)
   10cfc:	1884703a 	and	r2,r3,r2
   10d00:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10d04:	e0bff117 	ldw	r2,-60(fp)
   10d08:	1080040b 	ldhu	r2,16(r2)
   10d0c:	10ffffcc 	andi	r3,r2,65535
   10d10:	e0bff60b 	ldhu	r2,-40(fp)
   10d14:	1880541e 	bne	r3,r2,10e68 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10d18:	e0bff60b 	ldhu	r2,-40(fp)
   10d1c:	100b883a 	mov	r5,r2
   10d20:	e13ff117 	ldw	r4,-60(fp)
   10d24:	00112180 	call	11218 <OS_FlagTaskRdy>
   10d28:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10d2c:	e0bff683 	ldbu	r2,-38(fp)
   10d30:	10800058 	cmpnei	r2,r2,1
   10d34:	10004c1e 	bne	r2,zero,10e68 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10d38:	00800044 	movi	r2,1
   10d3c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10d40:	00004906 	br	10e68 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10d44:	e0bffc17 	ldw	r2,-16(fp)
   10d48:	10c0020b 	ldhu	r3,8(r2)
   10d4c:	e0bff117 	ldw	r2,-60(fp)
   10d50:	1080040b 	ldhu	r2,16(r2)
   10d54:	1884703a 	and	r2,r3,r2
   10d58:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10d5c:	e0bff60b 	ldhu	r2,-40(fp)
   10d60:	10004326 	beq	r2,zero,10e70 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10d64:	e0bff60b 	ldhu	r2,-40(fp)
   10d68:	100b883a 	mov	r5,r2
   10d6c:	e13ff117 	ldw	r4,-60(fp)
   10d70:	00112180 	call	11218 <OS_FlagTaskRdy>
   10d74:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10d78:	e0bff683 	ldbu	r2,-38(fp)
   10d7c:	10800058 	cmpnei	r2,r2,1
   10d80:	10003b1e 	bne	r2,zero,10e70 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10d84:	00800044 	movi	r2,1
   10d88:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10d8c:	00003806 	br	10e70 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10d90:	e0bffc17 	ldw	r2,-16(fp)
   10d94:	1080020b 	ldhu	r2,8(r2)
   10d98:	0084303a 	nor	r2,zero,r2
   10d9c:	1007883a 	mov	r3,r2
   10da0:	e0bff117 	ldw	r2,-60(fp)
   10da4:	1080040b 	ldhu	r2,16(r2)
   10da8:	1884703a 	and	r2,r3,r2
   10dac:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10db0:	e0bff117 	ldw	r2,-60(fp)
   10db4:	1080040b 	ldhu	r2,16(r2)
   10db8:	10ffffcc 	andi	r3,r2,65535
   10dbc:	e0bff60b 	ldhu	r2,-40(fp)
   10dc0:	18802d1e 	bne	r3,r2,10e78 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10dc4:	e0bff60b 	ldhu	r2,-40(fp)
   10dc8:	100b883a 	mov	r5,r2
   10dcc:	e13ff117 	ldw	r4,-60(fp)
   10dd0:	00112180 	call	11218 <OS_FlagTaskRdy>
   10dd4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10dd8:	e0bff683 	ldbu	r2,-38(fp)
   10ddc:	10800058 	cmpnei	r2,r2,1
   10de0:	1000251e 	bne	r2,zero,10e78 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10de4:	00800044 	movi	r2,1
   10de8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10dec:	00002206 	br	10e78 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10df0:	e0bffc17 	ldw	r2,-16(fp)
   10df4:	1080020b 	ldhu	r2,8(r2)
   10df8:	0084303a 	nor	r2,zero,r2
   10dfc:	1007883a 	mov	r3,r2
   10e00:	e0bff117 	ldw	r2,-60(fp)
   10e04:	1080040b 	ldhu	r2,16(r2)
   10e08:	1884703a 	and	r2,r3,r2
   10e0c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10e10:	e0bff60b 	ldhu	r2,-40(fp)
   10e14:	10001a26 	beq	r2,zero,10e80 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10e18:	e0bff60b 	ldhu	r2,-40(fp)
   10e1c:	100b883a 	mov	r5,r2
   10e20:	e13ff117 	ldw	r4,-60(fp)
   10e24:	00112180 	call	11218 <OS_FlagTaskRdy>
   10e28:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10e2c:	e0bff683 	ldbu	r2,-38(fp)
   10e30:	10800058 	cmpnei	r2,r2,1
   10e34:	1000121e 	bne	r2,zero,10e80 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10e38:	00800044 	movi	r2,1
   10e3c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10e40:	00000f06 	br	10e80 <OSFlagPost+0x300>
   10e44:	e0bff317 	ldw	r2,-52(fp)
   10e48:	e0bff515 	stw	r2,-44(fp)
   10e4c:	e0bff517 	ldw	r2,-44(fp)
   10e50:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10e54:	e0bfff17 	ldw	r2,-4(fp)
   10e58:	00c01bc4 	movi	r3,111
   10e5c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10e60:	0005883a 	mov	r2,zero
   10e64:	00002606 	br	10f00 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10e68:	0001883a 	nop
   10e6c:	00000506 	br	10e84 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10e70:	0001883a 	nop
   10e74:	00000306 	br	10e84 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10e78:	0001883a 	nop
   10e7c:	00000106 	br	10e84 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10e80:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   10e84:	e0bff117 	ldw	r2,-60(fp)
   10e88:	10800017 	ldw	r2,0(r2)
   10e8c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10e90:	e0bff117 	ldw	r2,-60(fp)
   10e94:	103f871e 	bne	r2,zero,10cb4 <OSFlagPost+0x134>
   10e98:	e0bff317 	ldw	r2,-52(fp)
   10e9c:	e0bff715 	stw	r2,-36(fp)
   10ea0:	e0bff717 	ldw	r2,-36(fp)
   10ea4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   10ea8:	e0bff203 	ldbu	r2,-56(fp)
   10eac:	10800058 	cmpnei	r2,r2,1
   10eb0:	1000011e 	bne	r2,zero,10eb8 <OSFlagPost+0x338>
        OS_Sched();
   10eb4:	000f4380 	call	f438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10eb8:	0005303a 	rdctl	r2,status
   10ebc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ec0:	e0fffa17 	ldw	r3,-24(fp)
   10ec4:	00bfff84 	movi	r2,-2
   10ec8:	1884703a 	and	r2,r3,r2
   10ecc:	1001703a 	wrctl	status,r2
  
  return context;
   10ed0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   10ed4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   10ed8:	e0bffc17 	ldw	r2,-16(fp)
   10edc:	1080020b 	ldhu	r2,8(r2)
   10ee0:	e0bff90d 	sth	r2,-28(fp)
   10ee4:	e0bff317 	ldw	r2,-52(fp)
   10ee8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10eec:	e0bff817 	ldw	r2,-32(fp)
   10ef0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   10ef4:	e0bfff17 	ldw	r2,-4(fp)
   10ef8:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   10efc:	e0bff90b 	ldhu	r2,-28(fp)
}
   10f00:	e037883a 	mov	sp,fp
   10f04:	dfc00117 	ldw	ra,4(sp)
   10f08:	df000017 	ldw	fp,0(sp)
   10f0c:	dec00204 	addi	sp,sp,8
   10f10:	f800283a 	ret

00010f14 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   10f14:	defff904 	addi	sp,sp,-28
   10f18:	df000615 	stw	fp,24(sp)
   10f1c:	df000604 	addi	fp,sp,24
   10f20:	e13ffe15 	stw	r4,-8(fp)
   10f24:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   10f28:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   10f2c:	e0bfff17 	ldw	r2,-4(fp)
   10f30:	1000021e 	bne	r2,zero,10f3c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   10f34:	0005883a 	mov	r2,zero
   10f38:	00002306 	br	10fc8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   10f3c:	e0bffe17 	ldw	r2,-8(fp)
   10f40:	1000051e 	bne	r2,zero,10f58 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10f44:	e0bfff17 	ldw	r2,-4(fp)
   10f48:	00c01b84 	movi	r3,110
   10f4c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10f50:	0005883a 	mov	r2,zero
   10f54:	00001c06 	br	10fc8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   10f58:	e0bffe17 	ldw	r2,-8(fp)
   10f5c:	10800003 	ldbu	r2,0(r2)
   10f60:	10803fcc 	andi	r2,r2,255
   10f64:	10800160 	cmpeqi	r2,r2,5
   10f68:	1000051e 	bne	r2,zero,10f80 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   10f6c:	e0bfff17 	ldw	r2,-4(fp)
   10f70:	00c00044 	movi	r3,1
   10f74:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10f78:	0005883a 	mov	r2,zero
   10f7c:	00001206 	br	10fc8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f80:	0005303a 	rdctl	r2,status
   10f84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f88:	e0fffc17 	ldw	r3,-16(fp)
   10f8c:	00bfff84 	movi	r2,-2
   10f90:	1884703a 	and	r2,r3,r2
   10f94:	1001703a 	wrctl	status,r2
  
  return context;
   10f98:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10f9c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   10fa0:	e0bffe17 	ldw	r2,-8(fp)
   10fa4:	1080020b 	ldhu	r2,8(r2)
   10fa8:	e0bffb0d 	sth	r2,-20(fp)
   10fac:	e0bffa17 	ldw	r2,-24(fp)
   10fb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fb4:	e0bffd17 	ldw	r2,-12(fp)
   10fb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10fbc:	e0bfff17 	ldw	r2,-4(fp)
   10fc0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   10fc4:	e0bffb0b 	ldhu	r2,-20(fp)
}
   10fc8:	e037883a 	mov	sp,fp
   10fcc:	df000017 	ldw	fp,0(sp)
   10fd0:	dec00104 	addi	sp,sp,4
   10fd4:	f800283a 	ret

00010fd8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   10fd8:	defff804 	addi	sp,sp,-32
   10fdc:	df000715 	stw	fp,28(sp)
   10fe0:	df000704 	addi	fp,sp,28
   10fe4:	e13ffb15 	stw	r4,-20(fp)
   10fe8:	e17ffc15 	stw	r5,-16(fp)
   10fec:	3009883a 	mov	r4,r6
   10ff0:	3807883a 	mov	r3,r7
   10ff4:	e0800117 	ldw	r2,4(fp)
   10ff8:	e13ffd0d 	sth	r4,-12(fp)
   10ffc:	e0fffe05 	stb	r3,-8(fp)
   11000:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   11004:	d0a72e17 	ldw	r2,-25416(gp)
   11008:	d0e72e17 	ldw	r3,-25416(gp)
   1100c:	18c00c03 	ldbu	r3,48(r3)
   11010:	18c00814 	ori	r3,r3,32
   11014:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11018:	d0a72e17 	ldw	r2,-25416(gp)
   1101c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   11020:	d0a72e17 	ldw	r2,-25416(gp)
   11024:	e0ffff0b 	ldhu	r3,-4(fp)
   11028:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1102c:	d0a72e17 	ldw	r2,-25416(gp)
   11030:	e0fffc17 	ldw	r3,-16(fp)
   11034:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   11038:	e0bffc17 	ldw	r2,-16(fp)
   1103c:	e0fffd0b 	ldhu	r3,-12(fp)
   11040:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   11044:	e0bffc17 	ldw	r2,-16(fp)
   11048:	e0fffe03 	ldbu	r3,-8(fp)
   1104c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   11050:	d0e72e17 	ldw	r3,-25416(gp)
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1105c:	e0bffb17 	ldw	r2,-20(fp)
   11060:	10c00117 	ldw	r3,4(r2)
   11064:	e0bffc17 	ldw	r2,-16(fp)
   11068:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1106c:	e0bffc17 	ldw	r2,-16(fp)
   11070:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   11074:	e0bffc17 	ldw	r2,-16(fp)
   11078:	e0fffb17 	ldw	r3,-20(fp)
   1107c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11080:	e0bffb17 	ldw	r2,-20(fp)
   11084:	10800117 	ldw	r2,4(r2)
   11088:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1108c:	e0bff917 	ldw	r2,-28(fp)
   11090:	10000326 	beq	r2,zero,110a0 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   11094:	e0bff917 	ldw	r2,-28(fp)
   11098:	e0fffc17 	ldw	r3,-16(fp)
   1109c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   110a0:	e0bffb17 	ldw	r2,-20(fp)
   110a4:	e0fffc17 	ldw	r3,-16(fp)
   110a8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   110ac:	d0a72e17 	ldw	r2,-25416(gp)
   110b0:	10800d03 	ldbu	r2,52(r2)
   110b4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   110b8:	e0fffa03 	ldbu	r3,-24(fp)
   110bc:	e13ffa03 	ldbu	r4,-24(fp)
   110c0:	d0a72b44 	addi	r2,gp,-25427
   110c4:	2085883a 	add	r2,r4,r2
   110c8:	10800003 	ldbu	r2,0(r2)
   110cc:	1009883a 	mov	r4,r2
   110d0:	d0a72e17 	ldw	r2,-25416(gp)
   110d4:	10800d43 	ldbu	r2,53(r2)
   110d8:	0084303a 	nor	r2,zero,r2
   110dc:	2084703a 	and	r2,r4,r2
   110e0:	1009883a 	mov	r4,r2
   110e4:	d0a72b44 	addi	r2,gp,-25427
   110e8:	1885883a 	add	r2,r3,r2
   110ec:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   110f0:	e0fffa03 	ldbu	r3,-24(fp)
   110f4:	d0a72b44 	addi	r2,gp,-25427
   110f8:	1885883a 	add	r2,r3,r2
   110fc:	10800003 	ldbu	r2,0(r2)
   11100:	10803fcc 	andi	r2,r2,255
   11104:	1000071e 	bne	r2,zero,11124 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11108:	d0a72e17 	ldw	r2,-25416(gp)
   1110c:	10800d83 	ldbu	r2,54(r2)
   11110:	0084303a 	nor	r2,zero,r2
   11114:	1007883a 	mov	r3,r2
   11118:	d0a72b03 	ldbu	r2,-25428(gp)
   1111c:	1884703a 	and	r2,r3,r2
   11120:	d0a72b05 	stb	r2,-25428(gp)
    }
}
   11124:	0001883a 	nop
   11128:	e037883a 	mov	sp,fp
   1112c:	df000017 	ldw	fp,0(sp)
   11130:	dec00104 	addi	sp,sp,4
   11134:	f800283a 	ret

00011138 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   11138:	defffb04 	addi	sp,sp,-20
   1113c:	dfc00415 	stw	ra,16(sp)
   11140:	df000315 	stw	fp,12(sp)
   11144:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   11148:	0140dc04 	movi	r5,880
   1114c:	01000134 	movhi	r4,4
   11150:	2125e004 	addi	r4,r4,-26752
   11154:	000f37c0 	call	f37c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   11158:	00800134 	movhi	r2,4
   1115c:	10a5e004 	addi	r2,r2,-26752
   11160:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   11164:	00800134 	movhi	r2,4
   11168:	10a5eb04 	addi	r2,r2,-26708
   1116c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11170:	e03ffd0d 	sth	zero,-12(fp)
   11174:	00001306 	br	111c4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11178:	e0bffe17 	ldw	r2,-8(fp)
   1117c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   11180:	e0bffe17 	ldw	r2,-8(fp)
   11184:	e0ffff17 	ldw	r3,-4(fp)
   11188:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1118c:	e0bffe17 	ldw	r2,-8(fp)
   11190:	00c00fc4 	movi	r3,63
   11194:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11198:	e0bffe17 	ldw	r2,-8(fp)
   1119c:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   111a0:	e0bffe17 	ldw	r2,-8(fp)
   111a4:	10800b04 	addi	r2,r2,44
   111a8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   111ac:	e0bfff17 	ldw	r2,-4(fp)
   111b0:	10800b04 	addi	r2,r2,44
   111b4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   111b8:	e0bffd0b 	ldhu	r2,-12(fp)
   111bc:	10800044 	addi	r2,r2,1
   111c0:	e0bffd0d 	sth	r2,-12(fp)
   111c4:	e0bffd0b 	ldhu	r2,-12(fp)
   111c8:	108004f0 	cmpltui	r2,r2,19
   111cc:	103fea1e 	bne	r2,zero,11178 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   111d0:	e0bffe17 	ldw	r2,-8(fp)
   111d4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   111d8:	e0bffe17 	ldw	r2,-8(fp)
   111dc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   111e0:	e0bffe17 	ldw	r2,-8(fp)
   111e4:	00c00fc4 	movi	r3,63
   111e8:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   111ec:	e0bffe17 	ldw	r2,-8(fp)
   111f0:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   111f4:	00800134 	movhi	r2,4
   111f8:	10a5e004 	addi	r2,r2,-26752
   111fc:	d0a73015 	stw	r2,-25408(gp)
#endif
}
   11200:	0001883a 	nop
   11204:	e037883a 	mov	sp,fp
   11208:	dfc00117 	ldw	ra,4(sp)
   1120c:	df000017 	ldw	fp,0(sp)
   11210:	dec00204 	addi	sp,sp,8
   11214:	f800283a 	ret

00011218 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11218:	defffa04 	addi	sp,sp,-24
   1121c:	dfc00515 	stw	ra,20(sp)
   11220:	df000415 	stw	fp,16(sp)
   11224:	df000404 	addi	fp,sp,16
   11228:	e13ffe15 	stw	r4,-8(fp)
   1122c:	2805883a 	mov	r2,r5
   11230:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   11234:	e0bffe17 	ldw	r2,-8(fp)
   11238:	10800217 	ldw	r2,8(r2)
   1123c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   11240:	e0bffd17 	ldw	r2,-12(fp)
   11244:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   11248:	e0bffd17 	ldw	r2,-12(fp)
   1124c:	e0ffff0b 	ldhu	r3,-4(fp)
   11250:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   11254:	e0bffd17 	ldw	r2,-12(fp)
   11258:	10c00c03 	ldbu	r3,48(r2)
   1125c:	00bff7c4 	movi	r2,-33
   11260:	1884703a 	and	r2,r3,r2
   11264:	1007883a 	mov	r3,r2
   11268:	e0bffd17 	ldw	r2,-12(fp)
   1126c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   11270:	e0bffd17 	ldw	r2,-12(fp)
   11274:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   11278:	e0bffd17 	ldw	r2,-12(fp)
   1127c:	10800c03 	ldbu	r2,48(r2)
   11280:	10803fcc 	andi	r2,r2,255
   11284:	1000181e 	bne	r2,zero,112e8 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   11288:	e0bffd17 	ldw	r2,-12(fp)
   1128c:	10c00d83 	ldbu	r3,54(r2)
   11290:	d0a72b03 	ldbu	r2,-25428(gp)
   11294:	1884b03a 	or	r2,r3,r2
   11298:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1129c:	e0bffd17 	ldw	r2,-12(fp)
   112a0:	10800d03 	ldbu	r2,52(r2)
   112a4:	10c03fcc 	andi	r3,r2,255
   112a8:	e0bffd17 	ldw	r2,-12(fp)
   112ac:	10800d03 	ldbu	r2,52(r2)
   112b0:	11003fcc 	andi	r4,r2,255
   112b4:	d0a72b44 	addi	r2,gp,-25427
   112b8:	2085883a 	add	r2,r4,r2
   112bc:	11000003 	ldbu	r4,0(r2)
   112c0:	e0bffd17 	ldw	r2,-12(fp)
   112c4:	10800d43 	ldbu	r2,53(r2)
   112c8:	2084b03a 	or	r2,r4,r2
   112cc:	1009883a 	mov	r4,r2
   112d0:	d0a72b44 	addi	r2,gp,-25427
   112d4:	1885883a 	add	r2,r3,r2
   112d8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   112dc:	00800044 	movi	r2,1
   112e0:	e0bffc05 	stb	r2,-16(fp)
   112e4:	00000106 	br	112ec <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   112e8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   112ec:	e13ffe17 	ldw	r4,-8(fp)
   112f0:	001130c0 	call	1130c <OS_FlagUnlink>
    return (sched);
   112f4:	e0bffc03 	ldbu	r2,-16(fp)
}
   112f8:	e037883a 	mov	sp,fp
   112fc:	dfc00117 	ldw	ra,4(sp)
   11300:	df000017 	ldw	fp,0(sp)
   11304:	dec00204 	addi	sp,sp,8
   11308:	f800283a 	ret

0001130c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   1130c:	defffa04 	addi	sp,sp,-24
   11310:	df000515 	stw	fp,20(sp)
   11314:	df000504 	addi	fp,sp,20
   11318:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1131c:	e0bfff17 	ldw	r2,-4(fp)
   11320:	10800117 	ldw	r2,4(r2)
   11324:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11328:	e0bfff17 	ldw	r2,-4(fp)
   1132c:	10800017 	ldw	r2,0(r2)
   11330:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11334:	e0bffb17 	ldw	r2,-20(fp)
   11338:	10000b1e 	bne	r2,zero,11368 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1133c:	e0bfff17 	ldw	r2,-4(fp)
   11340:	10800317 	ldw	r2,12(r2)
   11344:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   11348:	e0bffd17 	ldw	r2,-12(fp)
   1134c:	e0fffc17 	ldw	r3,-16(fp)
   11350:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   11354:	e0bffc17 	ldw	r2,-16(fp)
   11358:	10000b26 	beq	r2,zero,11388 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1135c:	e0bffc17 	ldw	r2,-16(fp)
   11360:	10000115 	stw	zero,4(r2)
   11364:	00000806 	br	11388 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   11368:	e0bffb17 	ldw	r2,-20(fp)
   1136c:	e0fffc17 	ldw	r3,-16(fp)
   11370:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   11374:	e0bffc17 	ldw	r2,-16(fp)
   11378:	10000326 	beq	r2,zero,11388 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1137c:	e0bffc17 	ldw	r2,-16(fp)
   11380:	e0fffb17 	ldw	r3,-20(fp)
   11384:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11388:	e0bfff17 	ldw	r2,-4(fp)
   1138c:	10800217 	ldw	r2,8(r2)
   11390:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   11394:	e0bffe17 	ldw	r2,-8(fp)
   11398:	10000a15 	stw	zero,40(r2)
#endif
}
   1139c:	0001883a 	nop
   113a0:	e037883a 	mov	sp,fp
   113a4:	df000017 	ldw	fp,0(sp)
   113a8:	dec00104 	addi	sp,sp,4
   113ac:	f800283a 	ret

000113b0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   113b0:	defff404 	addi	sp,sp,-48
   113b4:	df000b15 	stw	fp,44(sp)
   113b8:	df000b04 	addi	fp,sp,44
   113bc:	e13ffc15 	stw	r4,-16(fp)
   113c0:	e17ffd15 	stw	r5,-12(fp)
   113c4:	e1bffe15 	stw	r6,-8(fp)
   113c8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   113cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   113d0:	e0bfff17 	ldw	r2,-4(fp)
   113d4:	1000021e 	bne	r2,zero,113e0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   113d8:	0005883a 	mov	r2,zero
   113dc:	00006506 	br	11574 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   113e0:	e0bffc17 	ldw	r2,-16(fp)
   113e4:	1000051e 	bne	r2,zero,113fc <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   113e8:	e0bfff17 	ldw	r2,-4(fp)
   113ec:	00c01884 	movi	r3,98
   113f0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   113f4:	0005883a 	mov	r2,zero
   113f8:	00005e06 	br	11574 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   113fc:	e0bffc17 	ldw	r2,-16(fp)
   11400:	108000cc 	andi	r2,r2,3
   11404:	10000526 	beq	r2,zero,1141c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11408:	e0bfff17 	ldw	r2,-4(fp)
   1140c:	00c01884 	movi	r3,98
   11410:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11414:	0005883a 	mov	r2,zero
   11418:	00005606 	br	11574 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   1141c:	e0bffd17 	ldw	r2,-12(fp)
   11420:	108000a8 	cmpgeui	r2,r2,2
   11424:	1000051e 	bne	r2,zero,1143c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   11428:	e0bfff17 	ldw	r2,-4(fp)
   1142c:	00c016c4 	movi	r3,91
   11430:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11434:	0005883a 	mov	r2,zero
   11438:	00004e06 	br	11574 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   1143c:	e0bffe17 	ldw	r2,-8(fp)
   11440:	10800128 	cmpgeui	r2,r2,4
   11444:	1000051e 	bne	r2,zero,1145c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   11448:	e0bfff17 	ldw	r2,-4(fp)
   1144c:	00c01704 	movi	r3,92
   11450:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11454:	0005883a 	mov	r2,zero
   11458:	00004606 	br	11574 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1145c:	0005303a 	rdctl	r2,status
   11460:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11464:	e0fffb17 	ldw	r3,-20(fp)
   11468:	00bfff84 	movi	r2,-2
   1146c:	1884703a 	and	r2,r3,r2
   11470:	1001703a 	wrctl	status,r2
  
  return context;
   11474:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11478:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   1147c:	d0a72817 	ldw	r2,-25440(gp)
   11480:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11484:	d0a72817 	ldw	r2,-25440(gp)
   11488:	10000326 	beq	r2,zero,11498 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   1148c:	d0a72817 	ldw	r2,-25440(gp)
   11490:	10800117 	ldw	r2,4(r2)
   11494:	d0a72815 	stw	r2,-25440(gp)
   11498:	e0bff817 	ldw	r2,-32(fp)
   1149c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   114a0:	e0bff917 	ldw	r2,-28(fp)
   114a4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   114a8:	e0bffa17 	ldw	r2,-24(fp)
   114ac:	1000051e 	bne	r2,zero,114c4 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   114b0:	e0bfff17 	ldw	r2,-4(fp)
   114b4:	00c01684 	movi	r3,90
   114b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   114bc:	0005883a 	mov	r2,zero
   114c0:	00002c06 	br	11574 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   114c4:	e0bffc17 	ldw	r2,-16(fp)
   114c8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   114cc:	e0fffc17 	ldw	r3,-16(fp)
   114d0:	e0bffe17 	ldw	r2,-8(fp)
   114d4:	1885883a 	add	r2,r3,r2
   114d8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   114dc:	e03ff715 	stw	zero,-36(fp)
   114e0:	00000c06 	br	11514 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   114e4:	e0bff617 	ldw	r2,-40(fp)
   114e8:	e0fff517 	ldw	r3,-44(fp)
   114ec:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   114f0:	e0bff517 	ldw	r2,-44(fp)
   114f4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   114f8:	e0fff517 	ldw	r3,-44(fp)
   114fc:	e0bffe17 	ldw	r2,-8(fp)
   11500:	1885883a 	add	r2,r3,r2
   11504:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11508:	e0bff717 	ldw	r2,-36(fp)
   1150c:	10800044 	addi	r2,r2,1
   11510:	e0bff715 	stw	r2,-36(fp)
   11514:	e0bffd17 	ldw	r2,-12(fp)
   11518:	10bfffc4 	addi	r2,r2,-1
   1151c:	e0fff717 	ldw	r3,-36(fp)
   11520:	18bff036 	bltu	r3,r2,114e4 <OSMemCreate+0x134>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   11524:	e0bff617 	ldw	r2,-40(fp)
   11528:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   1152c:	e0bffa17 	ldw	r2,-24(fp)
   11530:	e0fffc17 	ldw	r3,-16(fp)
   11534:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   11538:	e0bffa17 	ldw	r2,-24(fp)
   1153c:	e0fffc17 	ldw	r3,-16(fp)
   11540:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   11544:	e0bffa17 	ldw	r2,-24(fp)
   11548:	e0fffd17 	ldw	r3,-12(fp)
   1154c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   11550:	e0bffa17 	ldw	r2,-24(fp)
   11554:	e0fffd17 	ldw	r3,-12(fp)
   11558:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1155c:	e0bffa17 	ldw	r2,-24(fp)
   11560:	e0fffe17 	ldw	r3,-8(fp)
   11564:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   11568:	e0bfff17 	ldw	r2,-4(fp)
   1156c:	10000005 	stb	zero,0(r2)
    return (pmem);
   11570:	e0bffa17 	ldw	r2,-24(fp)
}
   11574:	e037883a 	mov	sp,fp
   11578:	df000017 	ldw	fp,0(sp)
   1157c:	dec00104 	addi	sp,sp,4
   11580:	f800283a 	ret

00011584 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   11584:	defff804 	addi	sp,sp,-32
   11588:	df000715 	stw	fp,28(sp)
   1158c:	df000704 	addi	fp,sp,28
   11590:	e13ffe15 	stw	r4,-8(fp)
   11594:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11598:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1159c:	e0bfff17 	ldw	r2,-4(fp)
   115a0:	1000021e 	bne	r2,zero,115ac <OSMemGet+0x28>
        return ((void *)0);
   115a4:	0005883a 	mov	r2,zero
   115a8:	00002e06 	br	11664 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   115ac:	e0bffe17 	ldw	r2,-8(fp)
   115b0:	1000051e 	bne	r2,zero,115c8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   115b4:	e0bfff17 	ldw	r2,-4(fp)
   115b8:	00c01804 	movi	r3,96
   115bc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   115c0:	0005883a 	mov	r2,zero
   115c4:	00002706 	br	11664 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115c8:	0005303a 	rdctl	r2,status
   115cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115d0:	e0fffd17 	ldw	r3,-12(fp)
   115d4:	00bfff84 	movi	r2,-2
   115d8:	1884703a 	and	r2,r3,r2
   115dc:	1001703a 	wrctl	status,r2
  
  return context;
   115e0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   115e4:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   115e8:	e0bffe17 	ldw	r2,-8(fp)
   115ec:	10800417 	ldw	r2,16(r2)
   115f0:	10001426 	beq	r2,zero,11644 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   115f4:	e0bffe17 	ldw	r2,-8(fp)
   115f8:	10800117 	ldw	r2,4(r2)
   115fc:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   11600:	e0bffb17 	ldw	r2,-20(fp)
   11604:	10c00017 	ldw	r3,0(r2)
   11608:	e0bffe17 	ldw	r2,-8(fp)
   1160c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   11610:	e0bffe17 	ldw	r2,-8(fp)
   11614:	10800417 	ldw	r2,16(r2)
   11618:	10ffffc4 	addi	r3,r2,-1
   1161c:	e0bffe17 	ldw	r2,-8(fp)
   11620:	10c00415 	stw	r3,16(r2)
   11624:	e0bff917 	ldw	r2,-28(fp)
   11628:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1162c:	e0bffa17 	ldw	r2,-24(fp)
   11630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   11634:	e0bfff17 	ldw	r2,-4(fp)
   11638:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1163c:	e0bffb17 	ldw	r2,-20(fp)
   11640:	00000806 	br	11664 <OSMemGet+0xe0>
   11644:	e0bff917 	ldw	r2,-28(fp)
   11648:	e0bffc15 	stw	r2,-16(fp)
   1164c:	e0bffc17 	ldw	r2,-16(fp)
   11650:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   11654:	e0bfff17 	ldw	r2,-4(fp)
   11658:	00c01744 	movi	r3,93
   1165c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   11660:	0005883a 	mov	r2,zero
}
   11664:	e037883a 	mov	sp,fp
   11668:	df000017 	ldw	fp,0(sp)
   1166c:	dec00104 	addi	sp,sp,4
   11670:	f800283a 	ret

00011674 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11674:	defff704 	addi	sp,sp,-36
   11678:	dfc00815 	stw	ra,32(sp)
   1167c:	df000715 	stw	fp,28(sp)
   11680:	df000704 	addi	fp,sp,28
   11684:	e13ffd15 	stw	r4,-12(fp)
   11688:	e17ffe15 	stw	r5,-8(fp)
   1168c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11690:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11694:	e0bfff17 	ldw	r2,-4(fp)
   11698:	1000021e 	bne	r2,zero,116a4 <OSMemNameGet+0x30>
        return (0);
   1169c:	0005883a 	mov	r2,zero
   116a0:	00002b06 	br	11750 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   116a4:	e0bffd17 	ldw	r2,-12(fp)
   116a8:	1000051e 	bne	r2,zero,116c0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   116ac:	e0bfff17 	ldw	r2,-4(fp)
   116b0:	00c01804 	movi	r3,96
   116b4:	10c00005 	stb	r3,0(r2)
        return (0);
   116b8:	0005883a 	mov	r2,zero
   116bc:	00002406 	br	11750 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   116c0:	e0bffe17 	ldw	r2,-8(fp)
   116c4:	1000051e 	bne	r2,zero,116dc <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   116c8:	e0bfff17 	ldw	r2,-4(fp)
   116cc:	00c00304 	movi	r3,12
   116d0:	10c00005 	stb	r3,0(r2)
        return (0);
   116d4:	0005883a 	mov	r2,zero
   116d8:	00001d06 	br	11750 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   116dc:	d0a72d03 	ldbu	r2,-25420(gp)
   116e0:	10803fcc 	andi	r2,r2,255
   116e4:	10000526 	beq	r2,zero,116fc <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   116e8:	e0bfff17 	ldw	r2,-4(fp)
   116ec:	00c00444 	movi	r3,17
   116f0:	10c00005 	stb	r3,0(r2)
        return (0);
   116f4:	0005883a 	mov	r2,zero
   116f8:	00001506 	br	11750 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   116fc:	0005303a 	rdctl	r2,status
   11700:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11704:	e0fffb17 	ldw	r3,-20(fp)
   11708:	00bfff84 	movi	r2,-2
   1170c:	1884703a 	and	r2,r3,r2
   11710:	1001703a 	wrctl	status,r2
  
  return context;
   11714:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11718:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   1171c:	e0bffd17 	ldw	r2,-12(fp)
   11720:	10800504 	addi	r2,r2,20
   11724:	100b883a 	mov	r5,r2
   11728:	e13ffe17 	ldw	r4,-8(fp)
   1172c:	000f57c0 	call	f57c <OS_StrCopy>
   11730:	e0bffa05 	stb	r2,-24(fp)
   11734:	e0bff917 	ldw	r2,-28(fp)
   11738:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1173c:	e0bffc17 	ldw	r2,-16(fp)
   11740:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11744:	e0bfff17 	ldw	r2,-4(fp)
   11748:	10000005 	stb	zero,0(r2)
    return (len);
   1174c:	e0bffa03 	ldbu	r2,-24(fp)
}
   11750:	e037883a 	mov	sp,fp
   11754:	dfc00117 	ldw	ra,4(sp)
   11758:	df000017 	ldw	fp,0(sp)
   1175c:	dec00204 	addi	sp,sp,8
   11760:	f800283a 	ret

00011764 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   11764:	defff604 	addi	sp,sp,-40
   11768:	dfc00915 	stw	ra,36(sp)
   1176c:	df000815 	stw	fp,32(sp)
   11770:	df000804 	addi	fp,sp,32
   11774:	e13ffd15 	stw	r4,-12(fp)
   11778:	e17ffe15 	stw	r5,-8(fp)
   1177c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11780:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11784:	e0bfff17 	ldw	r2,-4(fp)
   11788:	10003526 	beq	r2,zero,11860 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1178c:	e0bffd17 	ldw	r2,-12(fp)
   11790:	1000041e 	bne	r2,zero,117a4 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11794:	e0bfff17 	ldw	r2,-4(fp)
   11798:	00c01804 	movi	r3,96
   1179c:	10c00005 	stb	r3,0(r2)
        return;
   117a0:	00003006 	br	11864 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   117a4:	e0bffe17 	ldw	r2,-8(fp)
   117a8:	1000041e 	bne	r2,zero,117bc <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   117ac:	e0bfff17 	ldw	r2,-4(fp)
   117b0:	00c00304 	movi	r3,12
   117b4:	10c00005 	stb	r3,0(r2)
        return;
   117b8:	00002a06 	br	11864 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   117bc:	d0a72d03 	ldbu	r2,-25420(gp)
   117c0:	10803fcc 	andi	r2,r2,255
   117c4:	10000426 	beq	r2,zero,117d8 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   117c8:	e0bfff17 	ldw	r2,-4(fp)
   117cc:	00c00484 	movi	r3,18
   117d0:	10c00005 	stb	r3,0(r2)
        return;
   117d4:	00002306 	br	11864 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117d8:	0005303a 	rdctl	r2,status
   117dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117e0:	e0fffc17 	ldw	r3,-16(fp)
   117e4:	00bfff84 	movi	r2,-2
   117e8:	1884703a 	and	r2,r3,r2
   117ec:	1001703a 	wrctl	status,r2
  
  return context;
   117f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   117f4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   117f8:	e13ffe17 	ldw	r4,-8(fp)
   117fc:	000f5f00 	call	f5f0 <OS_StrLen>
   11800:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11804:	e0bffa03 	ldbu	r2,-24(fp)
   11808:	10800830 	cmpltui	r2,r2,32
   1180c:	1000081e 	bne	r2,zero,11830 <OSMemNameSet+0xcc>
   11810:	e0bff817 	ldw	r2,-32(fp)
   11814:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11818:	e0bff917 	ldw	r2,-28(fp)
   1181c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   11820:	e0bfff17 	ldw	r2,-4(fp)
   11824:	00c018c4 	movi	r3,99
   11828:	10c00005 	stb	r3,0(r2)
        return;
   1182c:	00000d06 	br	11864 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   11830:	e0bffd17 	ldw	r2,-12(fp)
   11834:	10800504 	addi	r2,r2,20
   11838:	e17ffe17 	ldw	r5,-8(fp)
   1183c:	1009883a 	mov	r4,r2
   11840:	000f57c0 	call	f57c <OS_StrCopy>
   11844:	e0bff817 	ldw	r2,-32(fp)
   11848:	e0bffb15 	stw	r2,-20(fp)
   1184c:	e0bffb17 	ldw	r2,-20(fp)
   11850:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11854:	e0bfff17 	ldw	r2,-4(fp)
   11858:	10000005 	stb	zero,0(r2)
   1185c:	00000106 	br	11864 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11860:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   11864:	e037883a 	mov	sp,fp
   11868:	dfc00117 	ldw	ra,4(sp)
   1186c:	df000017 	ldw	fp,0(sp)
   11870:	dec00204 	addi	sp,sp,8
   11874:	f800283a 	ret

00011878 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   11878:	defff904 	addi	sp,sp,-28
   1187c:	df000615 	stw	fp,24(sp)
   11880:	df000604 	addi	fp,sp,24
   11884:	e13ffe15 	stw	r4,-8(fp)
   11888:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1188c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11890:	e0bffe17 	ldw	r2,-8(fp)
   11894:	1000021e 	bne	r2,zero,118a0 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11898:	00801804 	movi	r2,96
   1189c:	00002806 	br	11940 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   118a0:	e0bfff17 	ldw	r2,-4(fp)
   118a4:	1000021e 	bne	r2,zero,118b0 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   118a8:	008017c4 	movi	r2,95
   118ac:	00002406 	br	11940 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118b0:	0005303a 	rdctl	r2,status
   118b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118b8:	e0fffd17 	ldw	r3,-12(fp)
   118bc:	00bfff84 	movi	r2,-2
   118c0:	1884703a 	and	r2,r3,r2
   118c4:	1001703a 	wrctl	status,r2
  
  return context;
   118c8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   118cc:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   118d0:	e0bffe17 	ldw	r2,-8(fp)
   118d4:	10c00417 	ldw	r3,16(r2)
   118d8:	e0bffe17 	ldw	r2,-8(fp)
   118dc:	10800317 	ldw	r2,12(r2)
   118e0:	18800636 	bltu	r3,r2,118fc <OSMemPut+0x84>
   118e4:	e0bffa17 	ldw	r2,-24(fp)
   118e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118ec:	e0bffb17 	ldw	r2,-20(fp)
   118f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   118f4:	00801784 	movi	r2,94
   118f8:	00001106 	br	11940 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   118fc:	e0bffe17 	ldw	r2,-8(fp)
   11900:	10c00117 	ldw	r3,4(r2)
   11904:	e0bfff17 	ldw	r2,-4(fp)
   11908:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   1190c:	e0bffe17 	ldw	r2,-8(fp)
   11910:	e0ffff17 	ldw	r3,-4(fp)
   11914:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11918:	e0bffe17 	ldw	r2,-8(fp)
   1191c:	10800417 	ldw	r2,16(r2)
   11920:	10c00044 	addi	r3,r2,1
   11924:	e0bffe17 	ldw	r2,-8(fp)
   11928:	10c00415 	stw	r3,16(r2)
   1192c:	e0bffa17 	ldw	r2,-24(fp)
   11930:	e0bffc15 	stw	r2,-16(fp)
   11934:	e0bffc17 	ldw	r2,-16(fp)
   11938:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   1193c:	0005883a 	mov	r2,zero
}
   11940:	e037883a 	mov	sp,fp
   11944:	df000017 	ldw	fp,0(sp)
   11948:	dec00104 	addi	sp,sp,4
   1194c:	f800283a 	ret

00011950 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11950:	defffa04 	addi	sp,sp,-24
   11954:	df000515 	stw	fp,20(sp)
   11958:	df000504 	addi	fp,sp,20
   1195c:	e13ffe15 	stw	r4,-8(fp)
   11960:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11964:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11968:	e0bffe17 	ldw	r2,-8(fp)
   1196c:	1000021e 	bne	r2,zero,11978 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11970:	00801804 	movi	r2,96
   11974:	00002c06 	br	11a28 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11978:	e0bfff17 	ldw	r2,-4(fp)
   1197c:	1000021e 	bne	r2,zero,11988 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11980:	00801844 	movi	r2,97
   11984:	00002806 	br	11a28 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11988:	0005303a 	rdctl	r2,status
   1198c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11990:	e0fffc17 	ldw	r3,-16(fp)
   11994:	00bfff84 	movi	r2,-2
   11998:	1884703a 	and	r2,r3,r2
   1199c:	1001703a 	wrctl	status,r2
  
  return context;
   119a0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   119a4:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   119a8:	e0bffe17 	ldw	r2,-8(fp)
   119ac:	10c00017 	ldw	r3,0(r2)
   119b0:	e0bfff17 	ldw	r2,-4(fp)
   119b4:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   119b8:	e0bffe17 	ldw	r2,-8(fp)
   119bc:	10c00117 	ldw	r3,4(r2)
   119c0:	e0bfff17 	ldw	r2,-4(fp)
   119c4:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   119c8:	e0bffe17 	ldw	r2,-8(fp)
   119cc:	10c00217 	ldw	r3,8(r2)
   119d0:	e0bfff17 	ldw	r2,-4(fp)
   119d4:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   119d8:	e0bffe17 	ldw	r2,-8(fp)
   119dc:	10c00317 	ldw	r3,12(r2)
   119e0:	e0bfff17 	ldw	r2,-4(fp)
   119e4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   119e8:	e0bffe17 	ldw	r2,-8(fp)
   119ec:	10c00417 	ldw	r3,16(r2)
   119f0:	e0bfff17 	ldw	r2,-4(fp)
   119f4:	10c00415 	stw	r3,16(r2)
   119f8:	e0bffb17 	ldw	r2,-20(fp)
   119fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a00:	e0bffd17 	ldw	r2,-12(fp)
   11a04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11a08:	e0bfff17 	ldw	r2,-4(fp)
   11a0c:	10c00317 	ldw	r3,12(r2)
   11a10:	e0bfff17 	ldw	r2,-4(fp)
   11a14:	10800417 	ldw	r2,16(r2)
   11a18:	1887c83a 	sub	r3,r3,r2
   11a1c:	e0bfff17 	ldw	r2,-4(fp)
   11a20:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   11a24:	0005883a 	mov	r2,zero
}
   11a28:	e037883a 	mov	sp,fp
   11a2c:	df000017 	ldw	fp,0(sp)
   11a30:	dec00104 	addi	sp,sp,4
   11a34:	f800283a 	ret

00011a38 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11a38:	defffc04 	addi	sp,sp,-16
   11a3c:	dfc00315 	stw	ra,12(sp)
   11a40:	df000215 	stw	fp,8(sp)
   11a44:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11a48:	01430c04 	movi	r5,3120
   11a4c:	01000134 	movhi	r4,4
   11a50:	2126bc04 	addi	r4,r4,-25872
   11a54:	000f37c0 	call	f37c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11a58:	00800134 	movhi	r2,4
   11a5c:	10a6bc04 	addi	r2,r2,-25872
   11a60:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11a64:	e03fff0d 	sth	zero,-4(fp)
   11a68:	00001306 	br	11ab8 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   11a6c:	e0bfff0b 	ldhu	r2,-4(fp)
   11a70:	10800044 	addi	r2,r2,1
   11a74:	10c00d24 	muli	r3,r2,52
   11a78:	00800134 	movhi	r2,4
   11a7c:	10a6bc04 	addi	r2,r2,-25872
   11a80:	1887883a 	add	r3,r3,r2
   11a84:	e0bffe17 	ldw	r2,-8(fp)
   11a88:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   11a8c:	e0bffe17 	ldw	r2,-8(fp)
   11a90:	00c00fc4 	movi	r3,63
   11a94:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   11a98:	e0bffe17 	ldw	r2,-8(fp)
   11a9c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   11aa0:	e0bffe17 	ldw	r2,-8(fp)
   11aa4:	10800d04 	addi	r2,r2,52
   11aa8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11aac:	e0bfff0b 	ldhu	r2,-4(fp)
   11ab0:	10800044 	addi	r2,r2,1
   11ab4:	e0bfff0d 	sth	r2,-4(fp)
   11ab8:	e0bfff0b 	ldhu	r2,-4(fp)
   11abc:	10800ef0 	cmpltui	r2,r2,59
   11ac0:	103fea1e 	bne	r2,zero,11a6c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   11ac4:	e0bffe17 	ldw	r2,-8(fp)
   11ac8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   11acc:	e0bffe17 	ldw	r2,-8(fp)
   11ad0:	00c00fc4 	movi	r3,63
   11ad4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   11ad8:	e0bffe17 	ldw	r2,-8(fp)
   11adc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11ae0:	00800134 	movhi	r2,4
   11ae4:	10a6bc04 	addi	r2,r2,-25872
   11ae8:	d0a72815 	stw	r2,-25440(gp)
#endif
}
   11aec:	0001883a 	nop
   11af0:	e037883a 	mov	sp,fp
   11af4:	dfc00117 	ldw	ra,4(sp)
   11af8:	df000017 	ldw	fp,0(sp)
   11afc:	dec00204 	addi	sp,sp,8
   11b00:	f800283a 	ret

00011b04 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   11b04:	defff804 	addi	sp,sp,-32
   11b08:	df000715 	stw	fp,28(sp)
   11b0c:	df000704 	addi	fp,sp,28
   11b10:	e13ffe15 	stw	r4,-8(fp)
   11b14:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11b18:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11b1c:	e0bfff17 	ldw	r2,-4(fp)
   11b20:	1000021e 	bne	r2,zero,11b2c <OSQAccept+0x28>
        return ((void *)0);
   11b24:	0005883a 	mov	r2,zero
   11b28:	00004206 	br	11c34 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11b2c:	e0bffe17 	ldw	r2,-8(fp)
   11b30:	1000051e 	bne	r2,zero,11b48 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   11b34:	e0bfff17 	ldw	r2,-4(fp)
   11b38:	00c00104 	movi	r3,4
   11b3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11b40:	0005883a 	mov	r2,zero
   11b44:	00003b06 	br	11c34 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11b48:	e0bffe17 	ldw	r2,-8(fp)
   11b4c:	10800003 	ldbu	r2,0(r2)
   11b50:	10803fcc 	andi	r2,r2,255
   11b54:	108000a0 	cmpeqi	r2,r2,2
   11b58:	1000051e 	bne	r2,zero,11b70 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11b5c:	e0bfff17 	ldw	r2,-4(fp)
   11b60:	00c00044 	movi	r3,1
   11b64:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11b68:	0005883a 	mov	r2,zero
   11b6c:	00003106 	br	11c34 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b70:	0005303a 	rdctl	r2,status
   11b74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b78:	e0fffd17 	ldw	r3,-12(fp)
   11b7c:	00bfff84 	movi	r2,-2
   11b80:	1884703a 	and	r2,r3,r2
   11b84:	1001703a 	wrctl	status,r2
  
  return context;
   11b88:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   11b8c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   11b90:	e0bffe17 	ldw	r2,-8(fp)
   11b94:	10800117 	ldw	r2,4(r2)
   11b98:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   11b9c:	e0bffc17 	ldw	r2,-16(fp)
   11ba0:	1080058b 	ldhu	r2,22(r2)
   11ba4:	10bfffcc 	andi	r2,r2,65535
   11ba8:	10001926 	beq	r2,zero,11c10 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   11bac:	e0bffc17 	ldw	r2,-16(fp)
   11bb0:	10800417 	ldw	r2,16(r2)
   11bb4:	11000104 	addi	r4,r2,4
   11bb8:	e0fffc17 	ldw	r3,-16(fp)
   11bbc:	19000415 	stw	r4,16(r3)
   11bc0:	10800017 	ldw	r2,0(r2)
   11bc4:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11bc8:	e0bffc17 	ldw	r2,-16(fp)
   11bcc:	1080058b 	ldhu	r2,22(r2)
   11bd0:	10bfffc4 	addi	r2,r2,-1
   11bd4:	1007883a 	mov	r3,r2
   11bd8:	e0bffc17 	ldw	r2,-16(fp)
   11bdc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11be0:	e0bffc17 	ldw	r2,-16(fp)
   11be4:	10c00417 	ldw	r3,16(r2)
   11be8:	e0bffc17 	ldw	r2,-16(fp)
   11bec:	10800217 	ldw	r2,8(r2)
   11bf0:	1880041e 	bne	r3,r2,11c04 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   11bf4:	e0bffc17 	ldw	r2,-16(fp)
   11bf8:	10c00117 	ldw	r3,4(r2)
   11bfc:	e0bffc17 	ldw	r2,-16(fp)
   11c00:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   11c04:	e0bfff17 	ldw	r2,-4(fp)
   11c08:	10000005 	stb	zero,0(r2)
   11c0c:	00000406 	br	11c20 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   11c10:	e0bfff17 	ldw	r2,-4(fp)
   11c14:	00c007c4 	movi	r3,31
   11c18:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   11c1c:	e03ff915 	stw	zero,-28(fp)
   11c20:	e0bffa17 	ldw	r2,-24(fp)
   11c24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c28:	e0bffb17 	ldw	r2,-20(fp)
   11c2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   11c30:	e0bff917 	ldw	r2,-28(fp)
}
   11c34:	e037883a 	mov	sp,fp
   11c38:	df000017 	ldw	fp,0(sp)
   11c3c:	dec00104 	addi	sp,sp,4
   11c40:	f800283a 	ret

00011c44 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   11c44:	defff404 	addi	sp,sp,-48
   11c48:	dfc00b15 	stw	ra,44(sp)
   11c4c:	df000a15 	stw	fp,40(sp)
   11c50:	df000a04 	addi	fp,sp,40
   11c54:	e13ffe15 	stw	r4,-8(fp)
   11c58:	2805883a 	mov	r2,r5
   11c5c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11c60:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11c64:	d0a72d03 	ldbu	r2,-25420(gp)
   11c68:	10803fcc 	andi	r2,r2,255
   11c6c:	10000226 	beq	r2,zero,11c78 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   11c70:	0005883a 	mov	r2,zero
   11c74:	00005906 	br	11ddc <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c78:	0005303a 	rdctl	r2,status
   11c7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c80:	e0fffd17 	ldw	r3,-12(fp)
   11c84:	00bfff84 	movi	r2,-2
   11c88:	1884703a 	and	r2,r3,r2
   11c8c:	1001703a 	wrctl	status,r2
  
  return context;
   11c90:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   11c94:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   11c98:	d0a72c17 	ldw	r2,-25424(gp)
   11c9c:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   11ca0:	d0a72c17 	ldw	r2,-25424(gp)
   11ca4:	10000326 	beq	r2,zero,11cb4 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   11ca8:	d0a72c17 	ldw	r2,-25424(gp)
   11cac:	10800117 	ldw	r2,4(r2)
   11cb0:	d0a72c15 	stw	r2,-25424(gp)
   11cb4:	e0bff717 	ldw	r2,-36(fp)
   11cb8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11cbc:	e0bff817 	ldw	r2,-32(fp)
   11cc0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   11cc4:	e0bff617 	ldw	r2,-40(fp)
   11cc8:	10004326 	beq	r2,zero,11dd8 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11ccc:	0005303a 	rdctl	r2,status
   11cd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11cd4:	e0fff917 	ldw	r3,-28(fp)
   11cd8:	00bfff84 	movi	r2,-2
   11cdc:	1884703a 	and	r2,r3,r2
   11ce0:	1001703a 	wrctl	status,r2
  
  return context;
   11ce4:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   11ce8:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   11cec:	d0a72a17 	ldw	r2,-25432(gp)
   11cf0:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   11cf4:	e0bffb17 	ldw	r2,-20(fp)
   11cf8:	10002d26 	beq	r2,zero,11db0 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   11cfc:	d0a72a17 	ldw	r2,-25432(gp)
   11d00:	10800017 	ldw	r2,0(r2)
   11d04:	d0a72a15 	stw	r2,-25432(gp)
   11d08:	e0bff717 	ldw	r2,-36(fp)
   11d0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d10:	e0bffa17 	ldw	r2,-24(fp)
   11d14:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   11d18:	e0bffb17 	ldw	r2,-20(fp)
   11d1c:	e0fffe17 	ldw	r3,-8(fp)
   11d20:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   11d24:	e0bfff0b 	ldhu	r2,-4(fp)
   11d28:	1085883a 	add	r2,r2,r2
   11d2c:	1085883a 	add	r2,r2,r2
   11d30:	1007883a 	mov	r3,r2
   11d34:	e0bffe17 	ldw	r2,-8(fp)
   11d38:	10c7883a 	add	r3,r2,r3
   11d3c:	e0bffb17 	ldw	r2,-20(fp)
   11d40:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   11d44:	e0bffb17 	ldw	r2,-20(fp)
   11d48:	e0fffe17 	ldw	r3,-8(fp)
   11d4c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   11d50:	e0bffb17 	ldw	r2,-20(fp)
   11d54:	e0fffe17 	ldw	r3,-8(fp)
   11d58:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   11d5c:	e0bffb17 	ldw	r2,-20(fp)
   11d60:	e0ffff0b 	ldhu	r3,-4(fp)
   11d64:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   11d68:	e0bffb17 	ldw	r2,-20(fp)
   11d6c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   11d70:	e0bff617 	ldw	r2,-40(fp)
   11d74:	00c00084 	movi	r3,2
   11d78:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   11d7c:	e0bff617 	ldw	r2,-40(fp)
   11d80:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   11d84:	e0bff617 	ldw	r2,-40(fp)
   11d88:	e0fffb17 	ldw	r3,-20(fp)
   11d8c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   11d90:	e0bff617 	ldw	r2,-40(fp)
   11d94:	00c00fc4 	movi	r3,63
   11d98:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   11d9c:	e0bff617 	ldw	r2,-40(fp)
   11da0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   11da4:	e13ff617 	ldw	r4,-40(fp)
   11da8:	000ef9c0 	call	ef9c <OS_EventWaitListInit>
   11dac:	00000a06 	br	11dd8 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   11db0:	d0e72c17 	ldw	r3,-25424(gp)
   11db4:	e0bff617 	ldw	r2,-40(fp)
   11db8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   11dbc:	e0bff617 	ldw	r2,-40(fp)
   11dc0:	d0a72c15 	stw	r2,-25424(gp)
   11dc4:	e0bff717 	ldw	r2,-36(fp)
   11dc8:	e0bffc15 	stw	r2,-16(fp)
   11dcc:	e0bffc17 	ldw	r2,-16(fp)
   11dd0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   11dd4:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   11dd8:	e0bff617 	ldw	r2,-40(fp)
}
   11ddc:	e037883a 	mov	sp,fp
   11de0:	dfc00117 	ldw	ra,4(sp)
   11de4:	df000017 	ldw	fp,0(sp)
   11de8:	dec00204 	addi	sp,sp,8
   11dec:	f800283a 	ret

00011df0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   11df0:	defff204 	addi	sp,sp,-56
   11df4:	dfc00d15 	stw	ra,52(sp)
   11df8:	df000c15 	stw	fp,48(sp)
   11dfc:	df000c04 	addi	fp,sp,48
   11e00:	e13ffd15 	stw	r4,-12(fp)
   11e04:	2805883a 	mov	r2,r5
   11e08:	e1bfff15 	stw	r6,-4(fp)
   11e0c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11e10:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11e14:	e0bfff17 	ldw	r2,-4(fp)
   11e18:	1000021e 	bne	r2,zero,11e24 <OSQDel+0x34>
        return (pevent);
   11e1c:	e0bffd17 	ldw	r2,-12(fp)
   11e20:	00008e06 	br	1205c <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11e24:	e0bffd17 	ldw	r2,-12(fp)
   11e28:	1000051e 	bne	r2,zero,11e40 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   11e2c:	e0bfff17 	ldw	r2,-4(fp)
   11e30:	00c00104 	movi	r3,4
   11e34:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11e38:	e0bffd17 	ldw	r2,-12(fp)
   11e3c:	00008706 	br	1205c <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   11e40:	e0bffd17 	ldw	r2,-12(fp)
   11e44:	10800003 	ldbu	r2,0(r2)
   11e48:	10803fcc 	andi	r2,r2,255
   11e4c:	108000a0 	cmpeqi	r2,r2,2
   11e50:	1000051e 	bne	r2,zero,11e68 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   11e54:	e0bfff17 	ldw	r2,-4(fp)
   11e58:	00c00044 	movi	r3,1
   11e5c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11e60:	e0bffd17 	ldw	r2,-12(fp)
   11e64:	00007d06 	br	1205c <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11e68:	d0a72d03 	ldbu	r2,-25420(gp)
   11e6c:	10803fcc 	andi	r2,r2,255
   11e70:	10000526 	beq	r2,zero,11e88 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   11e74:	e0bfff17 	ldw	r2,-4(fp)
   11e78:	00c003c4 	movi	r3,15
   11e7c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11e80:	e0bffd17 	ldw	r2,-12(fp)
   11e84:	00007506 	br	1205c <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e88:	0005303a 	rdctl	r2,status
   11e8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e90:	e0fffc17 	ldw	r3,-16(fp)
   11e94:	00bfff84 	movi	r2,-2
   11e98:	1884703a 	and	r2,r3,r2
   11e9c:	1001703a 	wrctl	status,r2
  
  return context;
   11ea0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11ea4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   11ea8:	e0bffd17 	ldw	r2,-12(fp)
   11eac:	10800283 	ldbu	r2,10(r2)
   11eb0:	10803fcc 	andi	r2,r2,255
   11eb4:	10000326 	beq	r2,zero,11ec4 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   11eb8:	00800044 	movi	r2,1
   11ebc:	e0bff405 	stb	r2,-48(fp)
   11ec0:	00000106 	br	11ec8 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   11ec4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   11ec8:	e0bffe03 	ldbu	r2,-8(fp)
   11ecc:	10000326 	beq	r2,zero,11edc <OSQDel+0xec>
   11ed0:	10800060 	cmpeqi	r2,r2,1
   11ed4:	1000301e 	bne	r2,zero,11f98 <OSQDel+0x1a8>
   11ed8:	00005506 	br	12030 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   11edc:	e0bff403 	ldbu	r2,-48(fp)
   11ee0:	10001e1e 	bne	r2,zero,11f5c <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   11ee4:	e0bffd17 	ldw	r2,-12(fp)
   11ee8:	00c00fc4 	movi	r3,63
   11eec:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   11ef0:	e0bffd17 	ldw	r2,-12(fp)
   11ef4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   11ef8:	e0bffd17 	ldw	r2,-12(fp)
   11efc:	10800117 	ldw	r2,4(r2)
   11f00:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   11f04:	d0e72a17 	ldw	r3,-25432(gp)
   11f08:	e0bff817 	ldw	r2,-32(fp)
   11f0c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   11f10:	e0bff817 	ldw	r2,-32(fp)
   11f14:	d0a72a15 	stw	r2,-25432(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11f18:	e0bffd17 	ldw	r2,-12(fp)
   11f1c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   11f20:	d0e72c17 	ldw	r3,-25424(gp)
   11f24:	e0bffd17 	ldw	r2,-12(fp)
   11f28:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   11f2c:	e0bffd17 	ldw	r2,-12(fp)
   11f30:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   11f34:	e0bffd17 	ldw	r2,-12(fp)
   11f38:	d0a72c15 	stw	r2,-25424(gp)
   11f3c:	e0bff617 	ldw	r2,-40(fp)
   11f40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11f44:	e0bff717 	ldw	r2,-36(fp)
   11f48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   11f4c:	e0bfff17 	ldw	r2,-4(fp)
   11f50:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   11f54:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   11f58:	00003f06 	br	12058 <OSQDel+0x268>
   11f5c:	e0bff617 	ldw	r2,-40(fp)
   11f60:	e0bff915 	stw	r2,-28(fp)
   11f64:	e0bff917 	ldw	r2,-28(fp)
   11f68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   11f6c:	e0bfff17 	ldw	r2,-4(fp)
   11f70:	00c01244 	movi	r3,73
   11f74:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   11f78:	e0bffd17 	ldw	r2,-12(fp)
   11f7c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   11f80:	00003506 	br	12058 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   11f84:	000f883a 	mov	r7,zero
   11f88:	01800104 	movi	r6,4
   11f8c:	000b883a 	mov	r5,zero
   11f90:	e13ffd17 	ldw	r4,-12(fp)
   11f94:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   11f98:	e0bffd17 	ldw	r2,-12(fp)
   11f9c:	10800283 	ldbu	r2,10(r2)
   11fa0:	10803fcc 	andi	r2,r2,255
   11fa4:	103ff71e 	bne	r2,zero,11f84 <OSQDel+0x194>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   11fa8:	e0bffd17 	ldw	r2,-12(fp)
   11fac:	00c00fc4 	movi	r3,63
   11fb0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   11fb4:	e0bffd17 	ldw	r2,-12(fp)
   11fb8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   11fbc:	e0bffd17 	ldw	r2,-12(fp)
   11fc0:	10800117 	ldw	r2,4(r2)
   11fc4:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   11fc8:	d0e72a17 	ldw	r3,-25432(gp)
   11fcc:	e0bff817 	ldw	r2,-32(fp)
   11fd0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   11fd4:	e0bff817 	ldw	r2,-32(fp)
   11fd8:	d0a72a15 	stw	r2,-25432(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   11fdc:	e0bffd17 	ldw	r2,-12(fp)
   11fe0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   11fe4:	d0e72c17 	ldw	r3,-25424(gp)
   11fe8:	e0bffd17 	ldw	r2,-12(fp)
   11fec:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   11ff0:	e0bffd17 	ldw	r2,-12(fp)
   11ff4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   11ff8:	e0bffd17 	ldw	r2,-12(fp)
   11ffc:	d0a72c15 	stw	r2,-25424(gp)
   12000:	e0bff617 	ldw	r2,-40(fp)
   12004:	e0bffa15 	stw	r2,-24(fp)
   12008:	e0bffa17 	ldw	r2,-24(fp)
   1200c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12010:	e0bff403 	ldbu	r2,-48(fp)
   12014:	10800058 	cmpnei	r2,r2,1
   12018:	1000011e 	bne	r2,zero,12020 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1201c:	000f4380 	call	f438 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12020:	e0bfff17 	ldw	r2,-4(fp)
   12024:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   12028:	e03ff515 	stw	zero,-44(fp)
             break;
   1202c:	00000a06 	br	12058 <OSQDel+0x268>
   12030:	e0bff617 	ldw	r2,-40(fp)
   12034:	e0bffb15 	stw	r2,-20(fp)
   12038:	e0bffb17 	ldw	r2,-20(fp)
   1203c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12040:	e0bfff17 	ldw	r2,-4(fp)
   12044:	00c001c4 	movi	r3,7
   12048:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1204c:	e0bffd17 	ldw	r2,-12(fp)
   12050:	e0bff515 	stw	r2,-44(fp)
             break;
   12054:	0001883a 	nop
    }
    return (pevent_return);
   12058:	e0bff517 	ldw	r2,-44(fp)
}
   1205c:	e037883a 	mov	sp,fp
   12060:	dfc00117 	ldw	ra,4(sp)
   12064:	df000017 	ldw	fp,0(sp)
   12068:	dec00204 	addi	sp,sp,8
   1206c:	f800283a 	ret

00012070 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   12070:	defffa04 	addi	sp,sp,-24
   12074:	df000515 	stw	fp,20(sp)
   12078:	df000504 	addi	fp,sp,20
   1207c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12080:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12084:	e0bfff17 	ldw	r2,-4(fp)
   12088:	1000021e 	bne	r2,zero,12094 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   1208c:	00800104 	movi	r2,4
   12090:	00002106 	br	12118 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12094:	e0bfff17 	ldw	r2,-4(fp)
   12098:	10800003 	ldbu	r2,0(r2)
   1209c:	10803fcc 	andi	r2,r2,255
   120a0:	108000a0 	cmpeqi	r2,r2,2
   120a4:	1000021e 	bne	r2,zero,120b0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   120a8:	00800044 	movi	r2,1
   120ac:	00001a06 	br	12118 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120b0:	0005303a 	rdctl	r2,status
   120b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120b8:	e0fffd17 	ldw	r3,-12(fp)
   120bc:	00bfff84 	movi	r2,-2
   120c0:	1884703a 	and	r2,r3,r2
   120c4:	1001703a 	wrctl	status,r2
  
  return context;
   120c8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   120cc:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   120d0:	e0bfff17 	ldw	r2,-4(fp)
   120d4:	10800117 	ldw	r2,4(r2)
   120d8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   120dc:	e0bffc17 	ldw	r2,-16(fp)
   120e0:	10c00117 	ldw	r3,4(r2)
   120e4:	e0bffc17 	ldw	r2,-16(fp)
   120e8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   120ec:	e0bffc17 	ldw	r2,-16(fp)
   120f0:	10c00117 	ldw	r3,4(r2)
   120f4:	e0bffc17 	ldw	r2,-16(fp)
   120f8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   120fc:	e0bffc17 	ldw	r2,-16(fp)
   12100:	1000058d 	sth	zero,22(r2)
   12104:	e0bffb17 	ldw	r2,-20(fp)
   12108:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1210c:	e0bffe17 	ldw	r2,-8(fp)
   12110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12114:	0005883a 	mov	r2,zero
}
   12118:	e037883a 	mov	sp,fp
   1211c:	df000017 	ldw	fp,0(sp)
   12120:	dec00104 	addi	sp,sp,4
   12124:	f800283a 	ret

00012128 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12128:	defff304 	addi	sp,sp,-52
   1212c:	dfc00c15 	stw	ra,48(sp)
   12130:	df000b15 	stw	fp,44(sp)
   12134:	df000b04 	addi	fp,sp,44
   12138:	e13ffd15 	stw	r4,-12(fp)
   1213c:	2805883a 	mov	r2,r5
   12140:	e1bfff15 	stw	r6,-4(fp)
   12144:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12148:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1214c:	e0bfff17 	ldw	r2,-4(fp)
   12150:	1000021e 	bne	r2,zero,1215c <OSQPend+0x34>
        return ((void *)0);
   12154:	0005883a 	mov	r2,zero
   12158:	00009106 	br	123a0 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1215c:	e0bffd17 	ldw	r2,-12(fp)
   12160:	1000051e 	bne	r2,zero,12178 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12164:	e0bfff17 	ldw	r2,-4(fp)
   12168:	00c00104 	movi	r3,4
   1216c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12170:	0005883a 	mov	r2,zero
   12174:	00008a06 	br	123a0 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12178:	e0bffd17 	ldw	r2,-12(fp)
   1217c:	10800003 	ldbu	r2,0(r2)
   12180:	10803fcc 	andi	r2,r2,255
   12184:	108000a0 	cmpeqi	r2,r2,2
   12188:	1000051e 	bne	r2,zero,121a0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1218c:	e0bfff17 	ldw	r2,-4(fp)
   12190:	00c00044 	movi	r3,1
   12194:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12198:	0005883a 	mov	r2,zero
   1219c:	00008006 	br	123a0 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   121a0:	d0a72d03 	ldbu	r2,-25420(gp)
   121a4:	10803fcc 	andi	r2,r2,255
   121a8:	10000526 	beq	r2,zero,121c0 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   121ac:	e0bfff17 	ldw	r2,-4(fp)
   121b0:	00c00084 	movi	r3,2
   121b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   121b8:	0005883a 	mov	r2,zero
   121bc:	00007806 	br	123a0 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   121c0:	d0a71f03 	ldbu	r2,-25476(gp)
   121c4:	10803fcc 	andi	r2,r2,255
   121c8:	10000526 	beq	r2,zero,121e0 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   121cc:	e0bfff17 	ldw	r2,-4(fp)
   121d0:	00c00344 	movi	r3,13
   121d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   121d8:	0005883a 	mov	r2,zero
   121dc:	00007006 	br	123a0 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121e0:	0005303a 	rdctl	r2,status
   121e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121e8:	e0fffc17 	ldw	r3,-16(fp)
   121ec:	00bfff84 	movi	r2,-2
   121f0:	1884703a 	and	r2,r3,r2
   121f4:	1001703a 	wrctl	status,r2
  
  return context;
   121f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   121fc:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12200:	e0bffd17 	ldw	r2,-12(fp)
   12204:	10800117 	ldw	r2,4(r2)
   12208:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1220c:	e0bff817 	ldw	r2,-32(fp)
   12210:	1080058b 	ldhu	r2,22(r2)
   12214:	10bfffcc 	andi	r2,r2,65535
   12218:	10001e26 	beq	r2,zero,12294 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1221c:	e0bff817 	ldw	r2,-32(fp)
   12220:	10800417 	ldw	r2,16(r2)
   12224:	11000104 	addi	r4,r2,4
   12228:	e0fff817 	ldw	r3,-32(fp)
   1222c:	19000415 	stw	r4,16(r3)
   12230:	10800017 	ldw	r2,0(r2)
   12234:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12238:	e0bff817 	ldw	r2,-32(fp)
   1223c:	1080058b 	ldhu	r2,22(r2)
   12240:	10bfffc4 	addi	r2,r2,-1
   12244:	1007883a 	mov	r3,r2
   12248:	e0bff817 	ldw	r2,-32(fp)
   1224c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12250:	e0bff817 	ldw	r2,-32(fp)
   12254:	10c00417 	ldw	r3,16(r2)
   12258:	e0bff817 	ldw	r2,-32(fp)
   1225c:	10800217 	ldw	r2,8(r2)
   12260:	1880041e 	bne	r3,r2,12274 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   12264:	e0bff817 	ldw	r2,-32(fp)
   12268:	10c00117 	ldw	r3,4(r2)
   1226c:	e0bff817 	ldw	r2,-32(fp)
   12270:	10c00415 	stw	r3,16(r2)
   12274:	e0bff617 	ldw	r2,-40(fp)
   12278:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1227c:	e0bff717 	ldw	r2,-36(fp)
   12280:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12284:	e0bfff17 	ldw	r2,-4(fp)
   12288:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   1228c:	e0bff517 	ldw	r2,-44(fp)
   12290:	00004306 	br	123a0 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   12294:	d0a72e17 	ldw	r2,-25416(gp)
   12298:	d0e72e17 	ldw	r3,-25416(gp)
   1229c:	18c00c03 	ldbu	r3,48(r3)
   122a0:	18c00114 	ori	r3,r3,4
   122a4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   122a8:	d0a72e17 	ldw	r2,-25416(gp)
   122ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   122b0:	d0a72e17 	ldw	r2,-25416(gp)
   122b4:	e0fffe0b 	ldhu	r3,-8(fp)
   122b8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   122bc:	e13ffd17 	ldw	r4,-12(fp)
   122c0:	000eb840 	call	eb84 <OS_EventTaskWait>
   122c4:	e0bff617 	ldw	r2,-40(fp)
   122c8:	e0bffb15 	stw	r2,-20(fp)
   122cc:	e0bffb17 	ldw	r2,-20(fp)
   122d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   122d4:	000f4380 	call	f438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   122d8:	0005303a 	rdctl	r2,status
   122dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   122e0:	e0fff917 	ldw	r3,-28(fp)
   122e4:	00bfff84 	movi	r2,-2
   122e8:	1884703a 	and	r2,r3,r2
   122ec:	1001703a 	wrctl	status,r2
  
  return context;
   122f0:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   122f4:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   122f8:	d0a72e17 	ldw	r2,-25416(gp)
   122fc:	10800c43 	ldbu	r2,49(r2)
   12300:	10803fcc 	andi	r2,r2,255
   12304:	10000326 	beq	r2,zero,12314 <OSQPend+0x1ec>
   12308:	108000a0 	cmpeqi	r2,r2,2
   1230c:	1000071e 	bne	r2,zero,1232c <OSQPend+0x204>
   12310:	00000b06 	br	12340 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12314:	d0a72e17 	ldw	r2,-25416(gp)
   12318:	10800917 	ldw	r2,36(r2)
   1231c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   12320:	e0bfff17 	ldw	r2,-4(fp)
   12324:	10000005 	stb	zero,0(r2)
             break;
   12328:	00000e06 	br	12364 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1232c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   12330:	e0bfff17 	ldw	r2,-4(fp)
   12334:	00c00384 	movi	r3,14
   12338:	10c00005 	stb	r3,0(r2)
             break;
   1233c:	00000906 	br	12364 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   12340:	d0a72e17 	ldw	r2,-25416(gp)
   12344:	e17ffd17 	ldw	r5,-12(fp)
   12348:	1009883a 	mov	r4,r2
   1234c:	000ede40 	call	ede4 <OS_EventTaskRemove>
             pmsg = (void *)0;
   12350:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   12354:	e0bfff17 	ldw	r2,-4(fp)
   12358:	00c00284 	movi	r3,10
   1235c:	10c00005 	stb	r3,0(r2)
             break;
   12360:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   12364:	d0a72e17 	ldw	r2,-25416(gp)
   12368:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1236c:	d0a72e17 	ldw	r2,-25416(gp)
   12370:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   12374:	d0a72e17 	ldw	r2,-25416(gp)
   12378:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1237c:	d0a72e17 	ldw	r2,-25416(gp)
   12380:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   12384:	d0a72e17 	ldw	r2,-25416(gp)
   12388:	10000915 	stw	zero,36(r2)
   1238c:	e0bff617 	ldw	r2,-40(fp)
   12390:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12394:	e0bffa17 	ldw	r2,-24(fp)
   12398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1239c:	e0bff517 	ldw	r2,-44(fp)
}
   123a0:	e037883a 	mov	sp,fp
   123a4:	dfc00117 	ldw	ra,4(sp)
   123a8:	df000017 	ldw	fp,0(sp)
   123ac:	dec00204 	addi	sp,sp,8
   123b0:	f800283a 	ret

000123b4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   123b4:	defff604 	addi	sp,sp,-40
   123b8:	dfc00915 	stw	ra,36(sp)
   123bc:	df000815 	stw	fp,32(sp)
   123c0:	df000804 	addi	fp,sp,32
   123c4:	e13ffd15 	stw	r4,-12(fp)
   123c8:	2805883a 	mov	r2,r5
   123cc:	e1bfff15 	stw	r6,-4(fp)
   123d0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   123d4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   123d8:	e0bfff17 	ldw	r2,-4(fp)
   123dc:	1000021e 	bne	r2,zero,123e8 <OSQPendAbort+0x34>
        return (0);
   123e0:	0005883a 	mov	r2,zero
   123e4:	00004906 	br	1250c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   123e8:	e0bffd17 	ldw	r2,-12(fp)
   123ec:	1000051e 	bne	r2,zero,12404 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   123f0:	e0bfff17 	ldw	r2,-4(fp)
   123f4:	00c00104 	movi	r3,4
   123f8:	10c00005 	stb	r3,0(r2)
        return (0);
   123fc:	0005883a 	mov	r2,zero
   12400:	00004206 	br	1250c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12404:	e0bffd17 	ldw	r2,-12(fp)
   12408:	10800003 	ldbu	r2,0(r2)
   1240c:	10803fcc 	andi	r2,r2,255
   12410:	108000a0 	cmpeqi	r2,r2,2
   12414:	1000051e 	bne	r2,zero,1242c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12418:	e0bfff17 	ldw	r2,-4(fp)
   1241c:	00c00044 	movi	r3,1
   12420:	10c00005 	stb	r3,0(r2)
        return (0);
   12424:	0005883a 	mov	r2,zero
   12428:	00003806 	br	1250c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1242c:	0005303a 	rdctl	r2,status
   12430:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12434:	e0fffc17 	ldw	r3,-16(fp)
   12438:	00bfff84 	movi	r2,-2
   1243c:	1884703a 	and	r2,r3,r2
   12440:	1001703a 	wrctl	status,r2
  
  return context;
   12444:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12448:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1244c:	e0bffd17 	ldw	r2,-12(fp)
   12450:	10800283 	ldbu	r2,10(r2)
   12454:	10803fcc 	andi	r2,r2,255
   12458:	10002526 	beq	r2,zero,124f0 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   1245c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   12460:	e0bffe03 	ldbu	r2,-8(fp)
   12464:	10800060 	cmpeqi	r2,r2,1
   12468:	10000e26 	beq	r2,zero,124a4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1246c:	00000806 	br	12490 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12470:	01c00084 	movi	r7,2
   12474:	01800104 	movi	r6,4
   12478:	000b883a 	mov	r5,zero
   1247c:	e13ffd17 	ldw	r4,-12(fp)
   12480:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
                     nbr_tasks++;
   12484:	e0bff803 	ldbu	r2,-32(fp)
   12488:	10800044 	addi	r2,r2,1
   1248c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   12490:	e0bffd17 	ldw	r2,-12(fp)
   12494:	10800283 	ldbu	r2,10(r2)
   12498:	10803fcc 	andi	r2,r2,255
   1249c:	103ff41e 	bne	r2,zero,12470 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   124a0:	00000906 	br	124c8 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   124a4:	01c00084 	movi	r7,2
   124a8:	01800104 	movi	r6,4
   124ac:	000b883a 	mov	r5,zero
   124b0:	e13ffd17 	ldw	r4,-12(fp)
   124b4:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
                 nbr_tasks++;
   124b8:	e0bff803 	ldbu	r2,-32(fp)
   124bc:	10800044 	addi	r2,r2,1
   124c0:	e0bff805 	stb	r2,-32(fp)
                 break;
   124c4:	0001883a 	nop
   124c8:	e0bff917 	ldw	r2,-28(fp)
   124cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   124d0:	e0bffa17 	ldw	r2,-24(fp)
   124d4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   124d8:	000f4380 	call	f438 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   124dc:	e0bfff17 	ldw	r2,-4(fp)
   124e0:	00c00384 	movi	r3,14
   124e4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   124e8:	e0bff803 	ldbu	r2,-32(fp)
   124ec:	00000706 	br	1250c <OSQPendAbort+0x158>
   124f0:	e0bff917 	ldw	r2,-28(fp)
   124f4:	e0bffb15 	stw	r2,-20(fp)
   124f8:	e0bffb17 	ldw	r2,-20(fp)
   124fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   12500:	e0bfff17 	ldw	r2,-4(fp)
   12504:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12508:	0005883a 	mov	r2,zero
}
   1250c:	e037883a 	mov	sp,fp
   12510:	dfc00117 	ldw	ra,4(sp)
   12514:	df000017 	ldw	fp,0(sp)
   12518:	dec00204 	addi	sp,sp,8
   1251c:	f800283a 	ret

00012520 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   12520:	defff604 	addi	sp,sp,-40
   12524:	dfc00915 	stw	ra,36(sp)
   12528:	df000815 	stw	fp,32(sp)
   1252c:	df000804 	addi	fp,sp,32
   12530:	e13ffe15 	stw	r4,-8(fp)
   12534:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12538:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1253c:	e0bffe17 	ldw	r2,-8(fp)
   12540:	1000021e 	bne	r2,zero,1254c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12544:	00800104 	movi	r2,4
   12548:	00004a06 	br	12674 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1254c:	e0bffe17 	ldw	r2,-8(fp)
   12550:	10800003 	ldbu	r2,0(r2)
   12554:	10803fcc 	andi	r2,r2,255
   12558:	108000a0 	cmpeqi	r2,r2,2
   1255c:	1000021e 	bne	r2,zero,12568 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   12560:	00800044 	movi	r2,1
   12564:	00004306 	br	12674 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12568:	0005303a 	rdctl	r2,status
   1256c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12570:	e0fffd17 	ldw	r3,-12(fp)
   12574:	00bfff84 	movi	r2,-2
   12578:	1884703a 	and	r2,r3,r2
   1257c:	1001703a 	wrctl	status,r2
  
  return context;
   12580:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12584:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12588:	e0bffe17 	ldw	r2,-8(fp)
   1258c:	10800283 	ldbu	r2,10(r2)
   12590:	10803fcc 	andi	r2,r2,255
   12594:	10000c26 	beq	r2,zero,125c8 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12598:	000f883a 	mov	r7,zero
   1259c:	01800104 	movi	r6,4
   125a0:	e17fff17 	ldw	r5,-4(fp)
   125a4:	e13ffe17 	ldw	r4,-8(fp)
   125a8:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
   125ac:	e0bff817 	ldw	r2,-32(fp)
   125b0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125b4:	e0bff917 	ldw	r2,-28(fp)
   125b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   125bc:	000f4380 	call	f438 <OS_Sched>
        return (OS_ERR_NONE);
   125c0:	0005883a 	mov	r2,zero
   125c4:	00002b06 	br	12674 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   125c8:	e0bffe17 	ldw	r2,-8(fp)
   125cc:	10800117 	ldw	r2,4(r2)
   125d0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   125d4:	e0bffb17 	ldw	r2,-20(fp)
   125d8:	10c0058b 	ldhu	r3,22(r2)
   125dc:	e0bffb17 	ldw	r2,-20(fp)
   125e0:	1080050b 	ldhu	r2,20(r2)
   125e4:	18ffffcc 	andi	r3,r3,65535
   125e8:	10bfffcc 	andi	r2,r2,65535
   125ec:	18800636 	bltu	r3,r2,12608 <OSQPost+0xe8>
   125f0:	e0bff817 	ldw	r2,-32(fp)
   125f4:	e0bffa15 	stw	r2,-24(fp)
   125f8:	e0bffa17 	ldw	r2,-24(fp)
   125fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12600:	00800784 	movi	r2,30
   12604:	00001b06 	br	12674 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   12608:	e0bffb17 	ldw	r2,-20(fp)
   1260c:	10800317 	ldw	r2,12(r2)
   12610:	11000104 	addi	r4,r2,4
   12614:	e0fffb17 	ldw	r3,-20(fp)
   12618:	19000315 	stw	r4,12(r3)
   1261c:	e0ffff17 	ldw	r3,-4(fp)
   12620:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   12624:	e0bffb17 	ldw	r2,-20(fp)
   12628:	1080058b 	ldhu	r2,22(r2)
   1262c:	10800044 	addi	r2,r2,1
   12630:	1007883a 	mov	r3,r2
   12634:	e0bffb17 	ldw	r2,-20(fp)
   12638:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1263c:	e0bffb17 	ldw	r2,-20(fp)
   12640:	10c00317 	ldw	r3,12(r2)
   12644:	e0bffb17 	ldw	r2,-20(fp)
   12648:	10800217 	ldw	r2,8(r2)
   1264c:	1880041e 	bne	r3,r2,12660 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   12650:	e0bffb17 	ldw	r2,-20(fp)
   12654:	10c00117 	ldw	r3,4(r2)
   12658:	e0bffb17 	ldw	r2,-20(fp)
   1265c:	10c00315 	stw	r3,12(r2)
   12660:	e0bff817 	ldw	r2,-32(fp)
   12664:	e0bffc15 	stw	r2,-16(fp)
   12668:	e0bffc17 	ldw	r2,-16(fp)
   1266c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12670:	0005883a 	mov	r2,zero
}
   12674:	e037883a 	mov	sp,fp
   12678:	dfc00117 	ldw	ra,4(sp)
   1267c:	df000017 	ldw	fp,0(sp)
   12680:	dec00204 	addi	sp,sp,8
   12684:	f800283a 	ret

00012688 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12688:	defff604 	addi	sp,sp,-40
   1268c:	dfc00915 	stw	ra,36(sp)
   12690:	df000815 	stw	fp,32(sp)
   12694:	df000804 	addi	fp,sp,32
   12698:	e13ffe15 	stw	r4,-8(fp)
   1269c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   126a0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   126a4:	e0bffe17 	ldw	r2,-8(fp)
   126a8:	1000021e 	bne	r2,zero,126b4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   126ac:	00800104 	movi	r2,4
   126b0:	00004c06 	br	127e4 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   126b4:	e0bffe17 	ldw	r2,-8(fp)
   126b8:	10800003 	ldbu	r2,0(r2)
   126bc:	10803fcc 	andi	r2,r2,255
   126c0:	108000a0 	cmpeqi	r2,r2,2
   126c4:	1000021e 	bne	r2,zero,126d0 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   126c8:	00800044 	movi	r2,1
   126cc:	00004506 	br	127e4 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126d0:	0005303a 	rdctl	r2,status
   126d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126d8:	e0fffd17 	ldw	r3,-12(fp)
   126dc:	00bfff84 	movi	r2,-2
   126e0:	1884703a 	and	r2,r3,r2
   126e4:	1001703a 	wrctl	status,r2
  
  return context;
   126e8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   126ec:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   126f0:	e0bffe17 	ldw	r2,-8(fp)
   126f4:	10800283 	ldbu	r2,10(r2)
   126f8:	10803fcc 	andi	r2,r2,255
   126fc:	10000c26 	beq	r2,zero,12730 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12700:	000f883a 	mov	r7,zero
   12704:	01800104 	movi	r6,4
   12708:	e17fff17 	ldw	r5,-4(fp)
   1270c:	e13ffe17 	ldw	r4,-8(fp)
   12710:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
   12714:	e0bff817 	ldw	r2,-32(fp)
   12718:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1271c:	e0bff917 	ldw	r2,-28(fp)
   12720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   12724:	000f4380 	call	f438 <OS_Sched>
        return (OS_ERR_NONE);
   12728:	0005883a 	mov	r2,zero
   1272c:	00002d06 	br	127e4 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12730:	e0bffe17 	ldw	r2,-8(fp)
   12734:	10800117 	ldw	r2,4(r2)
   12738:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1273c:	e0bffb17 	ldw	r2,-20(fp)
   12740:	10c0058b 	ldhu	r3,22(r2)
   12744:	e0bffb17 	ldw	r2,-20(fp)
   12748:	1080050b 	ldhu	r2,20(r2)
   1274c:	18ffffcc 	andi	r3,r3,65535
   12750:	10bfffcc 	andi	r2,r2,65535
   12754:	18800636 	bltu	r3,r2,12770 <OSQPostFront+0xe8>
   12758:	e0bff817 	ldw	r2,-32(fp)
   1275c:	e0bffa15 	stw	r2,-24(fp)
   12760:	e0bffa17 	ldw	r2,-24(fp)
   12764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12768:	00800784 	movi	r2,30
   1276c:	00001d06 	br	127e4 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   12770:	e0bffb17 	ldw	r2,-20(fp)
   12774:	10c00417 	ldw	r3,16(r2)
   12778:	e0bffb17 	ldw	r2,-20(fp)
   1277c:	10800117 	ldw	r2,4(r2)
   12780:	1880041e 	bne	r3,r2,12794 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12784:	e0bffb17 	ldw	r2,-20(fp)
   12788:	10c00217 	ldw	r3,8(r2)
   1278c:	e0bffb17 	ldw	r2,-20(fp)
   12790:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12794:	e0bffb17 	ldw	r2,-20(fp)
   12798:	10800417 	ldw	r2,16(r2)
   1279c:	10ffff04 	addi	r3,r2,-4
   127a0:	e0bffb17 	ldw	r2,-20(fp)
   127a4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   127a8:	e0bffb17 	ldw	r2,-20(fp)
   127ac:	10800417 	ldw	r2,16(r2)
   127b0:	e0ffff17 	ldw	r3,-4(fp)
   127b4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   127b8:	e0bffb17 	ldw	r2,-20(fp)
   127bc:	1080058b 	ldhu	r2,22(r2)
   127c0:	10800044 	addi	r2,r2,1
   127c4:	1007883a 	mov	r3,r2
   127c8:	e0bffb17 	ldw	r2,-20(fp)
   127cc:	10c0058d 	sth	r3,22(r2)
   127d0:	e0bff817 	ldw	r2,-32(fp)
   127d4:	e0bffc15 	stw	r2,-16(fp)
   127d8:	e0bffc17 	ldw	r2,-16(fp)
   127dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   127e0:	0005883a 	mov	r2,zero
}
   127e4:	e037883a 	mov	sp,fp
   127e8:	dfc00117 	ldw	ra,4(sp)
   127ec:	df000017 	ldw	fp,0(sp)
   127f0:	dec00204 	addi	sp,sp,8
   127f4:	f800283a 	ret

000127f8 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   127f8:	defff504 	addi	sp,sp,-44
   127fc:	dfc00a15 	stw	ra,40(sp)
   12800:	df000915 	stw	fp,36(sp)
   12804:	df000904 	addi	fp,sp,36
   12808:	e13ffd15 	stw	r4,-12(fp)
   1280c:	e17ffe15 	stw	r5,-8(fp)
   12810:	3005883a 	mov	r2,r6
   12814:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12818:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1281c:	e0bffd17 	ldw	r2,-12(fp)
   12820:	1000021e 	bne	r2,zero,1282c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   12824:	00800104 	movi	r2,4
   12828:	00007106 	br	129f0 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1282c:	e0bffd17 	ldw	r2,-12(fp)
   12830:	10800003 	ldbu	r2,0(r2)
   12834:	10803fcc 	andi	r2,r2,255
   12838:	108000a0 	cmpeqi	r2,r2,2
   1283c:	1000021e 	bne	r2,zero,12848 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   12840:	00800044 	movi	r2,1
   12844:	00006a06 	br	129f0 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12848:	0005303a 	rdctl	r2,status
   1284c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12850:	e0fffc17 	ldw	r3,-16(fp)
   12854:	00bfff84 	movi	r2,-2
   12858:	1884703a 	and	r2,r3,r2
   1285c:	1001703a 	wrctl	status,r2
  
  return context;
   12860:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12864:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   12868:	e0bffd17 	ldw	r2,-12(fp)
   1286c:	10800283 	ldbu	r2,10(r2)
   12870:	10803fcc 	andi	r2,r2,255
   12874:	10001d26 	beq	r2,zero,128ec <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   12878:	e0bfff03 	ldbu	r2,-4(fp)
   1287c:	1080004c 	andi	r2,r2,1
   12880:	10000b26 	beq	r2,zero,128b0 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12884:	00000506 	br	1289c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12888:	000f883a 	mov	r7,zero
   1288c:	01800104 	movi	r6,4
   12890:	e17ffe17 	ldw	r5,-8(fp)
   12894:	e13ffd17 	ldw	r4,-12(fp)
   12898:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1289c:	e0bffd17 	ldw	r2,-12(fp)
   128a0:	10800283 	ldbu	r2,10(r2)
   128a4:	10803fcc 	andi	r2,r2,255
   128a8:	103ff71e 	bne	r2,zero,12888 <OSQPostOpt+0x90>
   128ac:	00000506 	br	128c4 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   128b0:	000f883a 	mov	r7,zero
   128b4:	01800104 	movi	r6,4
   128b8:	e17ffe17 	ldw	r5,-8(fp)
   128bc:	e13ffd17 	ldw	r4,-12(fp)
   128c0:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
   128c4:	e0bff717 	ldw	r2,-36(fp)
   128c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128cc:	e0bff817 	ldw	r2,-32(fp)
   128d0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   128d4:	e0bfff03 	ldbu	r2,-4(fp)
   128d8:	1080010c 	andi	r2,r2,4
   128dc:	1000011e 	bne	r2,zero,128e4 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   128e0:	000f4380 	call	f438 <OS_Sched>
        }
        return (OS_ERR_NONE);
   128e4:	0005883a 	mov	r2,zero
   128e8:	00004106 	br	129f0 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   128ec:	e0bffd17 	ldw	r2,-12(fp)
   128f0:	10800117 	ldw	r2,4(r2)
   128f4:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   128f8:	e0bffa17 	ldw	r2,-24(fp)
   128fc:	10c0058b 	ldhu	r3,22(r2)
   12900:	e0bffa17 	ldw	r2,-24(fp)
   12904:	1080050b 	ldhu	r2,20(r2)
   12908:	18ffffcc 	andi	r3,r3,65535
   1290c:	10bfffcc 	andi	r2,r2,65535
   12910:	18800636 	bltu	r3,r2,1292c <OSQPostOpt+0x134>
   12914:	e0bff717 	ldw	r2,-36(fp)
   12918:	e0bff915 	stw	r2,-28(fp)
   1291c:	e0bff917 	ldw	r2,-28(fp)
   12920:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12924:	00800784 	movi	r2,30
   12928:	00003106 	br	129f0 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   1292c:	e0bfff03 	ldbu	r2,-4(fp)
   12930:	1080008c 	andi	r2,r2,2
   12934:	10001326 	beq	r2,zero,12984 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12938:	e0bffa17 	ldw	r2,-24(fp)
   1293c:	10c00417 	ldw	r3,16(r2)
   12940:	e0bffa17 	ldw	r2,-24(fp)
   12944:	10800117 	ldw	r2,4(r2)
   12948:	1880041e 	bne	r3,r2,1295c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   1294c:	e0bffa17 	ldw	r2,-24(fp)
   12950:	10c00217 	ldw	r3,8(r2)
   12954:	e0bffa17 	ldw	r2,-24(fp)
   12958:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   1295c:	e0bffa17 	ldw	r2,-24(fp)
   12960:	10800417 	ldw	r2,16(r2)
   12964:	10ffff04 	addi	r3,r2,-4
   12968:	e0bffa17 	ldw	r2,-24(fp)
   1296c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12970:	e0bffa17 	ldw	r2,-24(fp)
   12974:	10800417 	ldw	r2,16(r2)
   12978:	e0fffe17 	ldw	r3,-8(fp)
   1297c:	10c00015 	stw	r3,0(r2)
   12980:	00001006 	br	129c4 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   12984:	e0bffa17 	ldw	r2,-24(fp)
   12988:	10800317 	ldw	r2,12(r2)
   1298c:	11000104 	addi	r4,r2,4
   12990:	e0fffa17 	ldw	r3,-24(fp)
   12994:	19000315 	stw	r4,12(r3)
   12998:	e0fffe17 	ldw	r3,-8(fp)
   1299c:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   129a0:	e0bffa17 	ldw	r2,-24(fp)
   129a4:	10c00317 	ldw	r3,12(r2)
   129a8:	e0bffa17 	ldw	r2,-24(fp)
   129ac:	10800217 	ldw	r2,8(r2)
   129b0:	1880041e 	bne	r3,r2,129c4 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   129b4:	e0bffa17 	ldw	r2,-24(fp)
   129b8:	10c00117 	ldw	r3,4(r2)
   129bc:	e0bffa17 	ldw	r2,-24(fp)
   129c0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   129c4:	e0bffa17 	ldw	r2,-24(fp)
   129c8:	1080058b 	ldhu	r2,22(r2)
   129cc:	10800044 	addi	r2,r2,1
   129d0:	1007883a 	mov	r3,r2
   129d4:	e0bffa17 	ldw	r2,-24(fp)
   129d8:	10c0058d 	sth	r3,22(r2)
   129dc:	e0bff717 	ldw	r2,-36(fp)
   129e0:	e0bffb15 	stw	r2,-20(fp)
   129e4:	e0bffb17 	ldw	r2,-20(fp)
   129e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   129ec:	0005883a 	mov	r2,zero
}
   129f0:	e037883a 	mov	sp,fp
   129f4:	dfc00117 	ldw	ra,4(sp)
   129f8:	df000017 	ldw	fp,0(sp)
   129fc:	dec00204 	addi	sp,sp,8
   12a00:	f800283a 	ret

00012a04 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   12a04:	defff604 	addi	sp,sp,-40
   12a08:	df000915 	stw	fp,36(sp)
   12a0c:	df000904 	addi	fp,sp,36
   12a10:	e13ffe15 	stw	r4,-8(fp)
   12a14:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12a18:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12a1c:	e0bffe17 	ldw	r2,-8(fp)
   12a20:	1000021e 	bne	r2,zero,12a2c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12a24:	00800104 	movi	r2,4
   12a28:	00004906 	br	12b50 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   12a2c:	e0bfff17 	ldw	r2,-4(fp)
   12a30:	1000021e 	bne	r2,zero,12a3c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12a34:	00800244 	movi	r2,9
   12a38:	00004506 	br	12b50 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12a3c:	e0bffe17 	ldw	r2,-8(fp)
   12a40:	10800003 	ldbu	r2,0(r2)
   12a44:	10803fcc 	andi	r2,r2,255
   12a48:	108000a0 	cmpeqi	r2,r2,2
   12a4c:	1000021e 	bne	r2,zero,12a58 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   12a50:	00800044 	movi	r2,1
   12a54:	00003e06 	br	12b50 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12a58:	0005303a 	rdctl	r2,status
   12a5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12a60:	e0fffd17 	ldw	r3,-12(fp)
   12a64:	00bfff84 	movi	r2,-2
   12a68:	1884703a 	and	r2,r3,r2
   12a6c:	1001703a 	wrctl	status,r2
  
  return context;
   12a70:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12a74:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   12a78:	e0bffe17 	ldw	r2,-8(fp)
   12a7c:	10c00283 	ldbu	r3,10(r2)
   12a80:	e0bfff17 	ldw	r2,-4(fp)
   12a84:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   12a88:	e0bffe17 	ldw	r2,-8(fp)
   12a8c:	108002c4 	addi	r2,r2,11
   12a90:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   12a94:	e0bfff17 	ldw	r2,-4(fp)
   12a98:	10800204 	addi	r2,r2,8
   12a9c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12aa0:	e03ff705 	stb	zero,-36(fp)
   12aa4:	00000b06 	br	12ad4 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   12aa8:	e0bff917 	ldw	r2,-28(fp)
   12aac:	10c00044 	addi	r3,r2,1
   12ab0:	e0fff915 	stw	r3,-28(fp)
   12ab4:	e0fff817 	ldw	r3,-32(fp)
   12ab8:	19000044 	addi	r4,r3,1
   12abc:	e13ff815 	stw	r4,-32(fp)
   12ac0:	18c00003 	ldbu	r3,0(r3)
   12ac4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12ac8:	e0bff703 	ldbu	r2,-36(fp)
   12acc:	10800044 	addi	r2,r2,1
   12ad0:	e0bff705 	stb	r2,-36(fp)
   12ad4:	e0bff703 	ldbu	r2,-36(fp)
   12ad8:	108000f0 	cmpltui	r2,r2,3
   12adc:	103ff21e 	bne	r2,zero,12aa8 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   12ae0:	e0bffe17 	ldw	r2,-8(fp)
   12ae4:	10800117 	ldw	r2,4(r2)
   12ae8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   12aec:	e0bffc17 	ldw	r2,-16(fp)
   12af0:	1080058b 	ldhu	r2,22(r2)
   12af4:	10bfffcc 	andi	r2,r2,65535
   12af8:	10000626 	beq	r2,zero,12b14 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   12afc:	e0bffc17 	ldw	r2,-16(fp)
   12b00:	10800417 	ldw	r2,16(r2)
   12b04:	10c00017 	ldw	r3,0(r2)
   12b08:	e0bfff17 	ldw	r2,-4(fp)
   12b0c:	10c00015 	stw	r3,0(r2)
   12b10:	00000206 	br	12b1c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   12b14:	e0bfff17 	ldw	r2,-4(fp)
   12b18:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   12b1c:	e0bffc17 	ldw	r2,-16(fp)
   12b20:	10c0058b 	ldhu	r3,22(r2)
   12b24:	e0bfff17 	ldw	r2,-4(fp)
   12b28:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   12b2c:	e0bffc17 	ldw	r2,-16(fp)
   12b30:	10c0050b 	ldhu	r3,20(r2)
   12b34:	e0bfff17 	ldw	r2,-4(fp)
   12b38:	10c0018d 	sth	r3,6(r2)
   12b3c:	e0bffa17 	ldw	r2,-24(fp)
   12b40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b44:	e0bffb17 	ldw	r2,-20(fp)
   12b48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12b4c:	0005883a 	mov	r2,zero
}
   12b50:	e037883a 	mov	sp,fp
   12b54:	df000017 	ldw	fp,0(sp)
   12b58:	dec00104 	addi	sp,sp,4
   12b5c:	f800283a 	ret

00012b60 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   12b60:	defffb04 	addi	sp,sp,-20
   12b64:	dfc00415 	stw	ra,16(sp)
   12b68:	df000315 	stw	fp,12(sp)
   12b6c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   12b70:	01407804 	movi	r5,480
   12b74:	01000134 	movhi	r4,4
   12b78:	212bc804 	addi	r4,r4,-20704
   12b7c:	000f37c0 	call	f37c <OS_MemClr>
    pq1 = &OSQTbl[0];
   12b80:	00800134 	movhi	r2,4
   12b84:	10abc804 	addi	r2,r2,-20704
   12b88:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   12b8c:	00800134 	movhi	r2,4
   12b90:	10abce04 	addi	r2,r2,-20680
   12b94:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12b98:	e03ffd0d 	sth	zero,-12(fp)
   12b9c:	00000c06 	br	12bd0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   12ba0:	e0bffe17 	ldw	r2,-8(fp)
   12ba4:	e0ffff17 	ldw	r3,-4(fp)
   12ba8:	10c00015 	stw	r3,0(r2)
        pq1++;
   12bac:	e0bffe17 	ldw	r2,-8(fp)
   12bb0:	10800604 	addi	r2,r2,24
   12bb4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   12bb8:	e0bfff17 	ldw	r2,-4(fp)
   12bbc:	10800604 	addi	r2,r2,24
   12bc0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12bc4:	e0bffd0b 	ldhu	r2,-12(fp)
   12bc8:	10800044 	addi	r2,r2,1
   12bcc:	e0bffd0d 	sth	r2,-12(fp)
   12bd0:	e0bffd0b 	ldhu	r2,-12(fp)
   12bd4:	108004f0 	cmpltui	r2,r2,19
   12bd8:	103ff11e 	bne	r2,zero,12ba0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   12bdc:	e0bffe17 	ldw	r2,-8(fp)
   12be0:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   12be4:	00800134 	movhi	r2,4
   12be8:	10abc804 	addi	r2,r2,-20704
   12bec:	d0a72a15 	stw	r2,-25432(gp)
#endif
}
   12bf0:	0001883a 	nop
   12bf4:	e037883a 	mov	sp,fp
   12bf8:	dfc00117 	ldw	ra,4(sp)
   12bfc:	df000017 	ldw	fp,0(sp)
   12c00:	dec00204 	addi	sp,sp,8
   12c04:	f800283a 	ret

00012c08 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   12c08:	defffa04 	addi	sp,sp,-24
   12c0c:	df000515 	stw	fp,20(sp)
   12c10:	df000504 	addi	fp,sp,20
   12c14:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12c18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12c1c:	e0bfff17 	ldw	r2,-4(fp)
   12c20:	1000021e 	bne	r2,zero,12c2c <OSSemAccept+0x24>
        return (0);
   12c24:	0005883a 	mov	r2,zero
   12c28:	00001f06 	br	12ca8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12c2c:	e0bfff17 	ldw	r2,-4(fp)
   12c30:	10800003 	ldbu	r2,0(r2)
   12c34:	10803fcc 	andi	r2,r2,255
   12c38:	108000e0 	cmpeqi	r2,r2,3
   12c3c:	1000021e 	bne	r2,zero,12c48 <OSSemAccept+0x40>
        return (0);
   12c40:	0005883a 	mov	r2,zero
   12c44:	00001806 	br	12ca8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12c48:	0005303a 	rdctl	r2,status
   12c4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12c50:	e0fffe17 	ldw	r3,-8(fp)
   12c54:	00bfff84 	movi	r2,-2
   12c58:	1884703a 	and	r2,r3,r2
   12c5c:	1001703a 	wrctl	status,r2
  
  return context;
   12c60:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   12c64:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   12c68:	e0bfff17 	ldw	r2,-4(fp)
   12c6c:	1080020b 	ldhu	r2,8(r2)
   12c70:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   12c74:	e0bffd0b 	ldhu	r2,-12(fp)
   12c78:	10000626 	beq	r2,zero,12c94 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   12c7c:	e0bfff17 	ldw	r2,-4(fp)
   12c80:	1080020b 	ldhu	r2,8(r2)
   12c84:	10bfffc4 	addi	r2,r2,-1
   12c88:	1007883a 	mov	r3,r2
   12c8c:	e0bfff17 	ldw	r2,-4(fp)
   12c90:	10c0020d 	sth	r3,8(r2)
   12c94:	e0bffb17 	ldw	r2,-20(fp)
   12c98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c9c:	e0bffc17 	ldw	r2,-16(fp)
   12ca0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   12ca4:	e0bffd0b 	ldhu	r2,-12(fp)
}
   12ca8:	e037883a 	mov	sp,fp
   12cac:	df000017 	ldw	fp,0(sp)
   12cb0:	dec00104 	addi	sp,sp,4
   12cb4:	f800283a 	ret

00012cb8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   12cb8:	defff904 	addi	sp,sp,-28
   12cbc:	dfc00615 	stw	ra,24(sp)
   12cc0:	df000515 	stw	fp,20(sp)
   12cc4:	df000504 	addi	fp,sp,20
   12cc8:	2005883a 	mov	r2,r4
   12ccc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12cd0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12cd4:	d0a72d03 	ldbu	r2,-25420(gp)
   12cd8:	10803fcc 	andi	r2,r2,255
   12cdc:	10000226 	beq	r2,zero,12ce8 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   12ce0:	0005883a 	mov	r2,zero
   12ce4:	00002506 	br	12d7c <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ce8:	0005303a 	rdctl	r2,status
   12cec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cf0:	e0fffe17 	ldw	r3,-8(fp)
   12cf4:	00bfff84 	movi	r2,-2
   12cf8:	1884703a 	and	r2,r3,r2
   12cfc:	1001703a 	wrctl	status,r2
  
  return context;
   12d00:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   12d04:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   12d08:	d0a72c17 	ldw	r2,-25424(gp)
   12d0c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   12d10:	d0a72c17 	ldw	r2,-25424(gp)
   12d14:	10000326 	beq	r2,zero,12d24 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12d18:	d0a72c17 	ldw	r2,-25424(gp)
   12d1c:	10800117 	ldw	r2,4(r2)
   12d20:	d0a72c15 	stw	r2,-25424(gp)
   12d24:	e0bffb17 	ldw	r2,-20(fp)
   12d28:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d2c:	e0bffc17 	ldw	r2,-16(fp)
   12d30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   12d34:	e0bffd17 	ldw	r2,-12(fp)
   12d38:	10000f26 	beq	r2,zero,12d78 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   12d3c:	e0bffd17 	ldw	r2,-12(fp)
   12d40:	00c000c4 	movi	r3,3
   12d44:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   12d48:	e0bffd17 	ldw	r2,-12(fp)
   12d4c:	e0ffff0b 	ldhu	r3,-4(fp)
   12d50:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   12d54:	e0bffd17 	ldw	r2,-12(fp)
   12d58:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   12d5c:	e0bffd17 	ldw	r2,-12(fp)
   12d60:	00c00fc4 	movi	r3,63
   12d64:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   12d68:	e0bffd17 	ldw	r2,-12(fp)
   12d6c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   12d70:	e13ffd17 	ldw	r4,-12(fp)
   12d74:	000ef9c0 	call	ef9c <OS_EventWaitListInit>
    }
    return (pevent);
   12d78:	e0bffd17 	ldw	r2,-12(fp)
}
   12d7c:	e037883a 	mov	sp,fp
   12d80:	dfc00117 	ldw	ra,4(sp)
   12d84:	df000017 	ldw	fp,0(sp)
   12d88:	dec00204 	addi	sp,sp,8
   12d8c:	f800283a 	ret

00012d90 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12d90:	defff304 	addi	sp,sp,-52
   12d94:	dfc00c15 	stw	ra,48(sp)
   12d98:	df000b15 	stw	fp,44(sp)
   12d9c:	df000b04 	addi	fp,sp,44
   12da0:	e13ffd15 	stw	r4,-12(fp)
   12da4:	2805883a 	mov	r2,r5
   12da8:	e1bfff15 	stw	r6,-4(fp)
   12dac:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12db0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12db4:	e0bfff17 	ldw	r2,-4(fp)
   12db8:	1000021e 	bne	r2,zero,12dc4 <OSSemDel+0x34>
        return (pevent);
   12dbc:	e0bffd17 	ldw	r2,-12(fp)
   12dc0:	00007e06 	br	12fbc <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12dc4:	e0bffd17 	ldw	r2,-12(fp)
   12dc8:	1000051e 	bne	r2,zero,12de0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12dcc:	e0bfff17 	ldw	r2,-4(fp)
   12dd0:	00c00104 	movi	r3,4
   12dd4:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12dd8:	e0bffd17 	ldw	r2,-12(fp)
   12ddc:	00007706 	br	12fbc <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   12de0:	e0bffd17 	ldw	r2,-12(fp)
   12de4:	10800003 	ldbu	r2,0(r2)
   12de8:	10803fcc 	andi	r2,r2,255
   12dec:	108000e0 	cmpeqi	r2,r2,3
   12df0:	1000051e 	bne	r2,zero,12e08 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12df4:	e0bfff17 	ldw	r2,-4(fp)
   12df8:	00c00044 	movi	r3,1
   12dfc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12e00:	e0bffd17 	ldw	r2,-12(fp)
   12e04:	00006d06 	br	12fbc <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12e08:	d0a72d03 	ldbu	r2,-25420(gp)
   12e0c:	10803fcc 	andi	r2,r2,255
   12e10:	10000526 	beq	r2,zero,12e28 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   12e14:	e0bfff17 	ldw	r2,-4(fp)
   12e18:	00c003c4 	movi	r3,15
   12e1c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12e20:	e0bffd17 	ldw	r2,-12(fp)
   12e24:	00006506 	br	12fbc <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e28:	0005303a 	rdctl	r2,status
   12e2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e30:	e0fffc17 	ldw	r3,-16(fp)
   12e34:	00bfff84 	movi	r2,-2
   12e38:	1884703a 	and	r2,r3,r2
   12e3c:	1001703a 	wrctl	status,r2
  
  return context;
   12e40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12e44:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   12e48:	e0bffd17 	ldw	r2,-12(fp)
   12e4c:	10800283 	ldbu	r2,10(r2)
   12e50:	10803fcc 	andi	r2,r2,255
   12e54:	10000326 	beq	r2,zero,12e64 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12e58:	00800044 	movi	r2,1
   12e5c:	e0bff505 	stb	r2,-44(fp)
   12e60:	00000106 	br	12e68 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12e64:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   12e68:	e0bffe03 	ldbu	r2,-8(fp)
   12e6c:	10000326 	beq	r2,zero,12e7c <OSSemDel+0xec>
   12e70:	10800060 	cmpeqi	r2,r2,1
   12e74:	1000281e 	bne	r2,zero,12f18 <OSSemDel+0x188>
   12e78:	00004506 	br	12f90 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   12e7c:	e0bff503 	ldbu	r2,-44(fp)
   12e80:	1000161e 	bne	r2,zero,12edc <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12e84:	e0bffd17 	ldw	r2,-12(fp)
   12e88:	00c00fc4 	movi	r3,63
   12e8c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12e90:	e0bffd17 	ldw	r2,-12(fp)
   12e94:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12e98:	e0bffd17 	ldw	r2,-12(fp)
   12e9c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12ea0:	d0e72c17 	ldw	r3,-25424(gp)
   12ea4:	e0bffd17 	ldw	r2,-12(fp)
   12ea8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12eac:	e0bffd17 	ldw	r2,-12(fp)
   12eb0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12eb4:	e0bffd17 	ldw	r2,-12(fp)
   12eb8:	d0a72c15 	stw	r2,-25424(gp)
   12ebc:	e0bff717 	ldw	r2,-36(fp)
   12ec0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ec4:	e0bff817 	ldw	r2,-32(fp)
   12ec8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   12ecc:	e0bfff17 	ldw	r2,-4(fp)
   12ed0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   12ed4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12ed8:	00003706 	br	12fb8 <OSSemDel+0x228>
   12edc:	e0bff717 	ldw	r2,-36(fp)
   12ee0:	e0bff915 	stw	r2,-28(fp)
   12ee4:	e0bff917 	ldw	r2,-28(fp)
   12ee8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   12eec:	e0bfff17 	ldw	r2,-4(fp)
   12ef0:	00c01244 	movi	r3,73
   12ef4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12ef8:	e0bffd17 	ldw	r2,-12(fp)
   12efc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   12f00:	00002d06 	br	12fb8 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   12f04:	000f883a 	mov	r7,zero
   12f08:	01800044 	movi	r6,1
   12f0c:	000b883a 	mov	r5,zero
   12f10:	e13ffd17 	ldw	r4,-12(fp)
   12f14:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   12f18:	e0bffd17 	ldw	r2,-12(fp)
   12f1c:	10800283 	ldbu	r2,10(r2)
   12f20:	10803fcc 	andi	r2,r2,255
   12f24:	103ff71e 	bne	r2,zero,12f04 <OSSemDel+0x174>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12f28:	e0bffd17 	ldw	r2,-12(fp)
   12f2c:	00c00fc4 	movi	r3,63
   12f30:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12f34:	e0bffd17 	ldw	r2,-12(fp)
   12f38:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12f3c:	e0bffd17 	ldw	r2,-12(fp)
   12f40:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12f44:	d0e72c17 	ldw	r3,-25424(gp)
   12f48:	e0bffd17 	ldw	r2,-12(fp)
   12f4c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12f50:	e0bffd17 	ldw	r2,-12(fp)
   12f54:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12f58:	e0bffd17 	ldw	r2,-12(fp)
   12f5c:	d0a72c15 	stw	r2,-25424(gp)
   12f60:	e0bff717 	ldw	r2,-36(fp)
   12f64:	e0bffa15 	stw	r2,-24(fp)
   12f68:	e0bffa17 	ldw	r2,-24(fp)
   12f6c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12f70:	e0bff503 	ldbu	r2,-44(fp)
   12f74:	10800058 	cmpnei	r2,r2,1
   12f78:	1000011e 	bne	r2,zero,12f80 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12f7c:	000f4380 	call	f438 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12f80:	e0bfff17 	ldw	r2,-4(fp)
   12f84:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   12f88:	e03ff615 	stw	zero,-40(fp)
             break;
   12f8c:	00000a06 	br	12fb8 <OSSemDel+0x228>
   12f90:	e0bff717 	ldw	r2,-36(fp)
   12f94:	e0bffb15 	stw	r2,-20(fp)
   12f98:	e0bffb17 	ldw	r2,-20(fp)
   12f9c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12fa0:	e0bfff17 	ldw	r2,-4(fp)
   12fa4:	00c001c4 	movi	r3,7
   12fa8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12fac:	e0bffd17 	ldw	r2,-12(fp)
   12fb0:	e0bff615 	stw	r2,-40(fp)
             break;
   12fb4:	0001883a 	nop
    }
    return (pevent_return);
   12fb8:	e0bff617 	ldw	r2,-40(fp)
}
   12fbc:	e037883a 	mov	sp,fp
   12fc0:	dfc00117 	ldw	ra,4(sp)
   12fc4:	df000017 	ldw	fp,0(sp)
   12fc8:	dec00204 	addi	sp,sp,8
   12fcc:	f800283a 	ret

00012fd0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12fd0:	defff504 	addi	sp,sp,-44
   12fd4:	dfc00a15 	stw	ra,40(sp)
   12fd8:	df000915 	stw	fp,36(sp)
   12fdc:	df000904 	addi	fp,sp,36
   12fe0:	e13ffd15 	stw	r4,-12(fp)
   12fe4:	2805883a 	mov	r2,r5
   12fe8:	e1bfff15 	stw	r6,-4(fp)
   12fec:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12ff0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12ff4:	e0bfff17 	ldw	r2,-4(fp)
   12ff8:	10007226 	beq	r2,zero,131c4 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12ffc:	e0bffd17 	ldw	r2,-12(fp)
   13000:	1000041e 	bne	r2,zero,13014 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	00c00104 	movi	r3,4
   1300c:	10c00005 	stb	r3,0(r2)
        return;
   13010:	00006d06 	br	131c8 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13014:	e0bffd17 	ldw	r2,-12(fp)
   13018:	10800003 	ldbu	r2,0(r2)
   1301c:	10803fcc 	andi	r2,r2,255
   13020:	108000e0 	cmpeqi	r2,r2,3
   13024:	1000041e 	bne	r2,zero,13038 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   13028:	e0bfff17 	ldw	r2,-4(fp)
   1302c:	00c00044 	movi	r3,1
   13030:	10c00005 	stb	r3,0(r2)
        return;
   13034:	00006406 	br	131c8 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13038:	d0a72d03 	ldbu	r2,-25420(gp)
   1303c:	10803fcc 	andi	r2,r2,255
   13040:	10000426 	beq	r2,zero,13054 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13044:	e0bfff17 	ldw	r2,-4(fp)
   13048:	00c00084 	movi	r3,2
   1304c:	10c00005 	stb	r3,0(r2)
        return;
   13050:	00005d06 	br	131c8 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13054:	d0a71f03 	ldbu	r2,-25476(gp)
   13058:	10803fcc 	andi	r2,r2,255
   1305c:	10000426 	beq	r2,zero,13070 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   13060:	e0bfff17 	ldw	r2,-4(fp)
   13064:	00c00344 	movi	r3,13
   13068:	10c00005 	stb	r3,0(r2)
        return;
   1306c:	00005606 	br	131c8 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13070:	0005303a 	rdctl	r2,status
   13074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13078:	e0fffc17 	ldw	r3,-16(fp)
   1307c:	00bfff84 	movi	r2,-2
   13080:	1884703a 	and	r2,r3,r2
   13084:	1001703a 	wrctl	status,r2
  
  return context;
   13088:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1308c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   13090:	e0bffd17 	ldw	r2,-12(fp)
   13094:	1080020b 	ldhu	r2,8(r2)
   13098:	10bfffcc 	andi	r2,r2,65535
   1309c:	10000d26 	beq	r2,zero,130d4 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   130a0:	e0bffd17 	ldw	r2,-12(fp)
   130a4:	1080020b 	ldhu	r2,8(r2)
   130a8:	10bfffc4 	addi	r2,r2,-1
   130ac:	1007883a 	mov	r3,r2
   130b0:	e0bffd17 	ldw	r2,-12(fp)
   130b4:	10c0020d 	sth	r3,8(r2)
   130b8:	e0bff717 	ldw	r2,-36(fp)
   130bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   130c0:	e0bff817 	ldw	r2,-32(fp)
   130c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   130c8:	e0bfff17 	ldw	r2,-4(fp)
   130cc:	10000005 	stb	zero,0(r2)
        return;
   130d0:	00003d06 	br	131c8 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   130d4:	d0a72e17 	ldw	r2,-25416(gp)
   130d8:	d0e72e17 	ldw	r3,-25416(gp)
   130dc:	18c00c03 	ldbu	r3,48(r3)
   130e0:	18c00054 	ori	r3,r3,1
   130e4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   130e8:	d0a72e17 	ldw	r2,-25416(gp)
   130ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   130f0:	d0a72e17 	ldw	r2,-25416(gp)
   130f4:	e0fffe0b 	ldhu	r3,-8(fp)
   130f8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   130fc:	e13ffd17 	ldw	r4,-12(fp)
   13100:	000eb840 	call	eb84 <OS_EventTaskWait>
   13104:	e0bff717 	ldw	r2,-36(fp)
   13108:	e0bffb15 	stw	r2,-20(fp)
   1310c:	e0bffb17 	ldw	r2,-20(fp)
   13110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13114:	000f4380 	call	f438 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13118:	0005303a 	rdctl	r2,status
   1311c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13120:	e0fff917 	ldw	r3,-28(fp)
   13124:	00bfff84 	movi	r2,-2
   13128:	1884703a 	and	r2,r3,r2
   1312c:	1001703a 	wrctl	status,r2
  
  return context;
   13130:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13134:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13138:	d0a72e17 	ldw	r2,-25416(gp)
   1313c:	10800c43 	ldbu	r2,49(r2)
   13140:	10803fcc 	andi	r2,r2,255
   13144:	10000326 	beq	r2,zero,13154 <OSSemPend+0x184>
   13148:	108000a0 	cmpeqi	r2,r2,2
   1314c:	1000041e 	bne	r2,zero,13160 <OSSemPend+0x190>
   13150:	00000706 	br	13170 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   13154:	e0bfff17 	ldw	r2,-4(fp)
   13158:	10000005 	stb	zero,0(r2)
             break;
   1315c:	00000c06 	br	13190 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   13160:	e0bfff17 	ldw	r2,-4(fp)
   13164:	00c00384 	movi	r3,14
   13168:	10c00005 	stb	r3,0(r2)
             break;
   1316c:	00000806 	br	13190 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   13170:	d0a72e17 	ldw	r2,-25416(gp)
   13174:	e17ffd17 	ldw	r5,-12(fp)
   13178:	1009883a 	mov	r4,r2
   1317c:	000ede40 	call	ede4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13180:	e0bfff17 	ldw	r2,-4(fp)
   13184:	00c00284 	movi	r3,10
   13188:	10c00005 	stb	r3,0(r2)
             break;
   1318c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13190:	d0a72e17 	ldw	r2,-25416(gp)
   13194:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13198:	d0a72e17 	ldw	r2,-25416(gp)
   1319c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   131a0:	d0a72e17 	ldw	r2,-25416(gp)
   131a4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   131a8:	d0a72e17 	ldw	r2,-25416(gp)
   131ac:	10000815 	stw	zero,32(r2)
   131b0:	e0bff717 	ldw	r2,-36(fp)
   131b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131b8:	e0bffa17 	ldw	r2,-24(fp)
   131bc:	1001703a 	wrctl	status,r2
   131c0:	00000106 	br	131c8 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   131c4:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   131c8:	e037883a 	mov	sp,fp
   131cc:	dfc00117 	ldw	ra,4(sp)
   131d0:	df000017 	ldw	fp,0(sp)
   131d4:	dec00204 	addi	sp,sp,8
   131d8:	f800283a 	ret

000131dc <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   131dc:	defff604 	addi	sp,sp,-40
   131e0:	dfc00915 	stw	ra,36(sp)
   131e4:	df000815 	stw	fp,32(sp)
   131e8:	df000804 	addi	fp,sp,32
   131ec:	e13ffd15 	stw	r4,-12(fp)
   131f0:	2805883a 	mov	r2,r5
   131f4:	e1bfff15 	stw	r6,-4(fp)
   131f8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   131fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13200:	e0bfff17 	ldw	r2,-4(fp)
   13204:	1000021e 	bne	r2,zero,13210 <OSSemPendAbort+0x34>
        return (0);
   13208:	0005883a 	mov	r2,zero
   1320c:	00004906 	br	13334 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13210:	e0bffd17 	ldw	r2,-12(fp)
   13214:	1000051e 	bne	r2,zero,1322c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13218:	e0bfff17 	ldw	r2,-4(fp)
   1321c:	00c00104 	movi	r3,4
   13220:	10c00005 	stb	r3,0(r2)
        return (0);
   13224:	0005883a 	mov	r2,zero
   13228:	00004206 	br	13334 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1322c:	e0bffd17 	ldw	r2,-12(fp)
   13230:	10800003 	ldbu	r2,0(r2)
   13234:	10803fcc 	andi	r2,r2,255
   13238:	108000e0 	cmpeqi	r2,r2,3
   1323c:	1000051e 	bne	r2,zero,13254 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13240:	e0bfff17 	ldw	r2,-4(fp)
   13244:	00c00044 	movi	r3,1
   13248:	10c00005 	stb	r3,0(r2)
        return (0);
   1324c:	0005883a 	mov	r2,zero
   13250:	00003806 	br	13334 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13254:	0005303a 	rdctl	r2,status
   13258:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1325c:	e0fffc17 	ldw	r3,-16(fp)
   13260:	00bfff84 	movi	r2,-2
   13264:	1884703a 	and	r2,r3,r2
   13268:	1001703a 	wrctl	status,r2
  
  return context;
   1326c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13270:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   13274:	e0bffd17 	ldw	r2,-12(fp)
   13278:	10800283 	ldbu	r2,10(r2)
   1327c:	10803fcc 	andi	r2,r2,255
   13280:	10002526 	beq	r2,zero,13318 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13284:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13288:	e0bffe03 	ldbu	r2,-8(fp)
   1328c:	10800060 	cmpeqi	r2,r2,1
   13290:	10000e26 	beq	r2,zero,132cc <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13294:	00000806 	br	132b8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13298:	01c00084 	movi	r7,2
   1329c:	01800044 	movi	r6,1
   132a0:	000b883a 	mov	r5,zero
   132a4:	e13ffd17 	ldw	r4,-12(fp)
   132a8:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
                     nbr_tasks++;
   132ac:	e0bff803 	ldbu	r2,-32(fp)
   132b0:	10800044 	addi	r2,r2,1
   132b4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   132b8:	e0bffd17 	ldw	r2,-12(fp)
   132bc:	10800283 	ldbu	r2,10(r2)
   132c0:	10803fcc 	andi	r2,r2,255
   132c4:	103ff41e 	bne	r2,zero,13298 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   132c8:	00000906 	br	132f0 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   132cc:	01c00084 	movi	r7,2
   132d0:	01800044 	movi	r6,1
   132d4:	000b883a 	mov	r5,zero
   132d8:	e13ffd17 	ldw	r4,-12(fp)
   132dc:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
                 nbr_tasks++;
   132e0:	e0bff803 	ldbu	r2,-32(fp)
   132e4:	10800044 	addi	r2,r2,1
   132e8:	e0bff805 	stb	r2,-32(fp)
                 break;
   132ec:	0001883a 	nop
   132f0:	e0bff917 	ldw	r2,-28(fp)
   132f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132f8:	e0bffa17 	ldw	r2,-24(fp)
   132fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13300:	000f4380 	call	f438 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13304:	e0bfff17 	ldw	r2,-4(fp)
   13308:	00c00384 	movi	r3,14
   1330c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13310:	e0bff803 	ldbu	r2,-32(fp)
   13314:	00000706 	br	13334 <OSSemPendAbort+0x158>
   13318:	e0bff917 	ldw	r2,-28(fp)
   1331c:	e0bffb15 	stw	r2,-20(fp)
   13320:	e0bffb17 	ldw	r2,-20(fp)
   13324:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13328:	e0bfff17 	ldw	r2,-4(fp)
   1332c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   13330:	0005883a 	mov	r2,zero
}
   13334:	e037883a 	mov	sp,fp
   13338:	dfc00117 	ldw	ra,4(sp)
   1333c:	df000017 	ldw	fp,0(sp)
   13340:	dec00204 	addi	sp,sp,8
   13344:	f800283a 	ret

00013348 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   13348:	defff804 	addi	sp,sp,-32
   1334c:	dfc00715 	stw	ra,28(sp)
   13350:	df000615 	stw	fp,24(sp)
   13354:	df000604 	addi	fp,sp,24
   13358:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1335c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13360:	e0bfff17 	ldw	r2,-4(fp)
   13364:	1000021e 	bne	r2,zero,13370 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   13368:	00800104 	movi	r2,4
   1336c:	00003506 	br	13444 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13370:	e0bfff17 	ldw	r2,-4(fp)
   13374:	10800003 	ldbu	r2,0(r2)
   13378:	10803fcc 	andi	r2,r2,255
   1337c:	108000e0 	cmpeqi	r2,r2,3
   13380:	1000021e 	bne	r2,zero,1338c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13384:	00800044 	movi	r2,1
   13388:	00002e06 	br	13444 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1338c:	0005303a 	rdctl	r2,status
   13390:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13394:	e0fffe17 	ldw	r3,-8(fp)
   13398:	00bfff84 	movi	r2,-2
   1339c:	1884703a 	and	r2,r3,r2
   133a0:	1001703a 	wrctl	status,r2
  
  return context;
   133a4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   133a8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   133ac:	e0bfff17 	ldw	r2,-4(fp)
   133b0:	10800283 	ldbu	r2,10(r2)
   133b4:	10803fcc 	andi	r2,r2,255
   133b8:	10000c26 	beq	r2,zero,133ec <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   133bc:	000f883a 	mov	r7,zero
   133c0:	01800044 	movi	r6,1
   133c4:	000b883a 	mov	r5,zero
   133c8:	e13fff17 	ldw	r4,-4(fp)
   133cc:	000e9ec0 	call	e9ec <OS_EventTaskRdy>
   133d0:	e0bffa17 	ldw	r2,-24(fp)
   133d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133d8:	e0bffb17 	ldw	r2,-20(fp)
   133dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   133e0:	000f4380 	call	f438 <OS_Sched>
        return (OS_ERR_NONE);
   133e4:	0005883a 	mov	r2,zero
   133e8:	00001606 	br	13444 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   133ec:	e0bfff17 	ldw	r2,-4(fp)
   133f0:	1080020b 	ldhu	r2,8(r2)
   133f4:	10ffffcc 	andi	r3,r2,65535
   133f8:	00bfffd4 	movui	r2,65535
   133fc:	18800c26 	beq	r3,r2,13430 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   13400:	e0bfff17 	ldw	r2,-4(fp)
   13404:	1080020b 	ldhu	r2,8(r2)
   13408:	10800044 	addi	r2,r2,1
   1340c:	1007883a 	mov	r3,r2
   13410:	e0bfff17 	ldw	r2,-4(fp)
   13414:	10c0020d 	sth	r3,8(r2)
   13418:	e0bffa17 	ldw	r2,-24(fp)
   1341c:	e0bffc15 	stw	r2,-16(fp)
   13420:	e0bffc17 	ldw	r2,-16(fp)
   13424:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   13428:	0005883a 	mov	r2,zero
   1342c:	00000506 	br	13444 <OSSemPost+0xfc>
   13430:	e0bffa17 	ldw	r2,-24(fp)
   13434:	e0bffd15 	stw	r2,-12(fp)
   13438:	e0bffd17 	ldw	r2,-12(fp)
   1343c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   13440:	00800c84 	movi	r2,50
}
   13444:	e037883a 	mov	sp,fp
   13448:	dfc00117 	ldw	ra,4(sp)
   1344c:	df000017 	ldw	fp,0(sp)
   13450:	dec00204 	addi	sp,sp,8
   13454:	f800283a 	ret

00013458 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   13458:	defff704 	addi	sp,sp,-36
   1345c:	df000815 	stw	fp,32(sp)
   13460:	df000804 	addi	fp,sp,32
   13464:	e13ffe15 	stw	r4,-8(fp)
   13468:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1346c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13470:	e0bffe17 	ldw	r2,-8(fp)
   13474:	1000021e 	bne	r2,zero,13480 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   13478:	00800104 	movi	r2,4
   1347c:	00003606 	br	13558 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   13480:	e0bfff17 	ldw	r2,-4(fp)
   13484:	1000021e 	bne	r2,zero,13490 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13488:	00800244 	movi	r2,9
   1348c:	00003206 	br	13558 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13490:	e0bffe17 	ldw	r2,-8(fp)
   13494:	10800003 	ldbu	r2,0(r2)
   13498:	10803fcc 	andi	r2,r2,255
   1349c:	108000e0 	cmpeqi	r2,r2,3
   134a0:	1000021e 	bne	r2,zero,134ac <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   134a4:	00800044 	movi	r2,1
   134a8:	00002b06 	br	13558 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134ac:	0005303a 	rdctl	r2,status
   134b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134b4:	e0fffd17 	ldw	r3,-12(fp)
   134b8:	00bfff84 	movi	r2,-2
   134bc:	1884703a 	and	r2,r3,r2
   134c0:	1001703a 	wrctl	status,r2
  
  return context;
   134c4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   134c8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   134cc:	e0bffe17 	ldw	r2,-8(fp)
   134d0:	10c00283 	ldbu	r3,10(r2)
   134d4:	e0bfff17 	ldw	r2,-4(fp)
   134d8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   134dc:	e0bffe17 	ldw	r2,-8(fp)
   134e0:	108002c4 	addi	r2,r2,11
   134e4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   134e8:	e0bfff17 	ldw	r2,-4(fp)
   134ec:	10800084 	addi	r2,r2,2
   134f0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   134f4:	e03ffa05 	stb	zero,-24(fp)
   134f8:	00000b06 	br	13528 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   134fc:	e0bff917 	ldw	r2,-28(fp)
   13500:	10c00044 	addi	r3,r2,1
   13504:	e0fff915 	stw	r3,-28(fp)
   13508:	e0fff817 	ldw	r3,-32(fp)
   1350c:	19000044 	addi	r4,r3,1
   13510:	e13ff815 	stw	r4,-32(fp)
   13514:	18c00003 	ldbu	r3,0(r3)
   13518:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1351c:	e0bffa03 	ldbu	r2,-24(fp)
   13520:	10800044 	addi	r2,r2,1
   13524:	e0bffa05 	stb	r2,-24(fp)
   13528:	e0bffa03 	ldbu	r2,-24(fp)
   1352c:	108000f0 	cmpltui	r2,r2,3
   13530:	103ff21e 	bne	r2,zero,134fc <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   13534:	e0bffe17 	ldw	r2,-8(fp)
   13538:	10c0020b 	ldhu	r3,8(r2)
   1353c:	e0bfff17 	ldw	r2,-4(fp)
   13540:	10c0000d 	sth	r3,0(r2)
   13544:	e0bffb17 	ldw	r2,-20(fp)
   13548:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1354c:	e0bffc17 	ldw	r2,-16(fp)
   13550:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13554:	0005883a 	mov	r2,zero
}
   13558:	e037883a 	mov	sp,fp
   1355c:	df000017 	ldw	fp,0(sp)
   13560:	dec00104 	addi	sp,sp,4
   13564:	f800283a 	ret

00013568 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   13568:	defff904 	addi	sp,sp,-28
   1356c:	df000615 	stw	fp,24(sp)
   13570:	df000604 	addi	fp,sp,24
   13574:	e13ffd15 	stw	r4,-12(fp)
   13578:	2805883a 	mov	r2,r5
   1357c:	e1bfff15 	stw	r6,-4(fp)
   13580:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13584:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13588:	e0bfff17 	ldw	r2,-4(fp)
   1358c:	10003126 	beq	r2,zero,13654 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13590:	e0bffd17 	ldw	r2,-12(fp)
   13594:	1000041e 	bne	r2,zero,135a8 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13598:	e0bfff17 	ldw	r2,-4(fp)
   1359c:	00c00104 	movi	r3,4
   135a0:	10c00005 	stb	r3,0(r2)
        return;
   135a4:	00002c06 	br	13658 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   135a8:	e0bffd17 	ldw	r2,-12(fp)
   135ac:	10800003 	ldbu	r2,0(r2)
   135b0:	10803fcc 	andi	r2,r2,255
   135b4:	108000e0 	cmpeqi	r2,r2,3
   135b8:	1000041e 	bne	r2,zero,135cc <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   135bc:	e0bfff17 	ldw	r2,-4(fp)
   135c0:	00c00044 	movi	r3,1
   135c4:	10c00005 	stb	r3,0(r2)
        return;
   135c8:	00002306 	br	13658 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   135cc:	0005303a 	rdctl	r2,status
   135d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   135d4:	e0fffc17 	ldw	r3,-16(fp)
   135d8:	00bfff84 	movi	r2,-2
   135dc:	1884703a 	and	r2,r3,r2
   135e0:	1001703a 	wrctl	status,r2
  
  return context;
   135e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   135e8:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   135ec:	e0bfff17 	ldw	r2,-4(fp)
   135f0:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   135f4:	e0bffd17 	ldw	r2,-12(fp)
   135f8:	1080020b 	ldhu	r2,8(r2)
   135fc:	10bfffcc 	andi	r2,r2,65535
   13600:	10000426 	beq	r2,zero,13614 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13604:	e0bffd17 	ldw	r2,-12(fp)
   13608:	e0fffe0b 	ldhu	r3,-8(fp)
   1360c:	10c0020d 	sth	r3,8(r2)
   13610:	00000b06 	br	13640 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13614:	e0bffd17 	ldw	r2,-12(fp)
   13618:	10800283 	ldbu	r2,10(r2)
   1361c:	10803fcc 	andi	r2,r2,255
   13620:	1000041e 	bne	r2,zero,13634 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   13624:	e0bffd17 	ldw	r2,-12(fp)
   13628:	e0fffe0b 	ldhu	r3,-8(fp)
   1362c:	10c0020d 	sth	r3,8(r2)
   13630:	00000306 	br	13640 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   13634:	e0bfff17 	ldw	r2,-4(fp)
   13638:	00c01244 	movi	r3,73
   1363c:	10c00005 	stb	r3,0(r2)
   13640:	e0bffa17 	ldw	r2,-24(fp)
   13644:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13648:	e0bffb17 	ldw	r2,-20(fp)
   1364c:	1001703a 	wrctl	status,r2
   13650:	00000106 	br	13658 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13654:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   13658:	e037883a 	mov	sp,fp
   1365c:	df000017 	ldw	fp,0(sp)
   13660:	dec00104 	addi	sp,sp,4
   13664:	f800283a 	ret

00013668 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   13668:	defff104 	addi	sp,sp,-60
   1366c:	dfc00e15 	stw	ra,56(sp)
   13670:	df000d15 	stw	fp,52(sp)
   13674:	df000d04 	addi	fp,sp,52
   13678:	2007883a 	mov	r3,r4
   1367c:	2805883a 	mov	r2,r5
   13680:	e0fffe05 	stb	r3,-8(fp)
   13684:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13688:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1368c:	e0bffe03 	ldbu	r2,-8(fp)
   13690:	10800530 	cmpltui	r2,r2,20
   13694:	1000051e 	bne	r2,zero,136ac <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13698:	e0bffe03 	ldbu	r2,-8(fp)
   1369c:	10803fe0 	cmpeqi	r2,r2,255
   136a0:	1000021e 	bne	r2,zero,136ac <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   136a4:	00800a84 	movi	r2,42
   136a8:	00012606 	br	13b44 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   136ac:	e0bfff03 	ldbu	r2,-4(fp)
   136b0:	10800530 	cmpltui	r2,r2,20
   136b4:	1000021e 	bne	r2,zero,136c0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   136b8:	00800a84 	movi	r2,42
   136bc:	00012106 	br	13b44 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   136c0:	0005303a 	rdctl	r2,status
   136c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   136c8:	e0fffd17 	ldw	r3,-12(fp)
   136cc:	00bfff84 	movi	r2,-2
   136d0:	1884703a 	and	r2,r3,r2
   136d4:	1001703a 	wrctl	status,r2
  
  return context;
   136d8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   136dc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   136e0:	e0ffff03 	ldbu	r3,-4(fp)
   136e4:	00800134 	movhi	r2,4
   136e8:	10b25404 	addi	r2,r2,-14000
   136ec:	18c7883a 	add	r3,r3,r3
   136f0:	18c7883a 	add	r3,r3,r3
   136f4:	10c5883a 	add	r2,r2,r3
   136f8:	10800017 	ldw	r2,0(r2)
   136fc:	10000626 	beq	r2,zero,13718 <OSTaskChangePrio+0xb0>
   13700:	e0bff517 	ldw	r2,-44(fp)
   13704:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13708:	e0bff617 	ldw	r2,-40(fp)
   1370c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   13710:	00800a04 	movi	r2,40
   13714:	00010b06 	br	13b44 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13718:	e0bffe03 	ldbu	r2,-8(fp)
   1371c:	10803fd8 	cmpnei	r2,r2,255
   13720:	1000031e 	bne	r2,zero,13730 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   13724:	d0a72e17 	ldw	r2,-25416(gp)
   13728:	10800c83 	ldbu	r2,50(r2)
   1372c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   13730:	e0fffe03 	ldbu	r3,-8(fp)
   13734:	00800134 	movhi	r2,4
   13738:	10b25404 	addi	r2,r2,-14000
   1373c:	18c7883a 	add	r3,r3,r3
   13740:	18c7883a 	add	r3,r3,r3
   13744:	10c5883a 	add	r2,r2,r3
   13748:	10800017 	ldw	r2,0(r2)
   1374c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   13750:	e0bff817 	ldw	r2,-32(fp)
   13754:	1000061e 	bne	r2,zero,13770 <OSTaskChangePrio+0x108>
   13758:	e0bff517 	ldw	r2,-44(fp)
   1375c:	e0bff715 	stw	r2,-36(fp)
   13760:	e0bff717 	ldw	r2,-36(fp)
   13764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   13768:	00800a44 	movi	r2,41
   1376c:	0000f506 	br	13b44 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   13770:	e0bff817 	ldw	r2,-32(fp)
   13774:	10800058 	cmpnei	r2,r2,1
   13778:	1000061e 	bne	r2,zero,13794 <OSTaskChangePrio+0x12c>
   1377c:	e0bff517 	ldw	r2,-44(fp)
   13780:	e0bff915 	stw	r2,-28(fp)
   13784:	e0bff917 	ldw	r2,-28(fp)
   13788:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1378c:	008010c4 	movi	r2,67
   13790:	0000ec06 	br	13b44 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13794:	e0bfff03 	ldbu	r2,-4(fp)
   13798:	1004d0fa 	srli	r2,r2,3
   1379c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   137a0:	e0bfff03 	ldbu	r2,-4(fp)
   137a4:	108001cc 	andi	r2,r2,7
   137a8:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   137ac:	e0bffb03 	ldbu	r2,-20(fp)
   137b0:	00c00044 	movi	r3,1
   137b4:	1884983a 	sll	r2,r3,r2
   137b8:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   137bc:	e0bffb43 	ldbu	r2,-19(fp)
   137c0:	00c00044 	movi	r3,1
   137c4:	1884983a 	sll	r2,r3,r2
   137c8:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   137cc:	e0fffe03 	ldbu	r3,-8(fp)
   137d0:	00800134 	movhi	r2,4
   137d4:	10b25404 	addi	r2,r2,-14000
   137d8:	18c7883a 	add	r3,r3,r3
   137dc:	18c7883a 	add	r3,r3,r3
   137e0:	10c5883a 	add	r2,r2,r3
   137e4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   137e8:	e0ffff03 	ldbu	r3,-4(fp)
   137ec:	00800134 	movhi	r2,4
   137f0:	10b25404 	addi	r2,r2,-14000
   137f4:	18c7883a 	add	r3,r3,r3
   137f8:	18c7883a 	add	r3,r3,r3
   137fc:	10c5883a 	add	r2,r2,r3
   13800:	e0fff817 	ldw	r3,-32(fp)
   13804:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13808:	e0bff817 	ldw	r2,-32(fp)
   1380c:	10800d03 	ldbu	r2,52(r2)
   13810:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13814:	e0bff817 	ldw	r2,-32(fp)
   13818:	10800d83 	ldbu	r2,54(r2)
   1381c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   13820:	e0bff817 	ldw	r2,-32(fp)
   13824:	10800d43 	ldbu	r2,53(r2)
   13828:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1382c:	e0fffc03 	ldbu	r3,-16(fp)
   13830:	d0a72b44 	addi	r2,gp,-25427
   13834:	1885883a 	add	r2,r3,r2
   13838:	10c00003 	ldbu	r3,0(r2)
   1383c:	e0bffc83 	ldbu	r2,-14(fp)
   13840:	1884703a 	and	r2,r3,r2
   13844:	10803fcc 	andi	r2,r2,255
   13848:	10002826 	beq	r2,zero,138ec <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   1384c:	e0fffc03 	ldbu	r3,-16(fp)
   13850:	e13ffc03 	ldbu	r4,-16(fp)
   13854:	d0a72b44 	addi	r2,gp,-25427
   13858:	2085883a 	add	r2,r4,r2
   1385c:	10800003 	ldbu	r2,0(r2)
   13860:	1009883a 	mov	r4,r2
   13864:	e0bffc83 	ldbu	r2,-14(fp)
   13868:	0084303a 	nor	r2,zero,r2
   1386c:	2084703a 	and	r2,r4,r2
   13870:	1009883a 	mov	r4,r2
   13874:	d0a72b44 	addi	r2,gp,-25427
   13878:	1885883a 	add	r2,r3,r2
   1387c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   13880:	e0fffc03 	ldbu	r3,-16(fp)
   13884:	d0a72b44 	addi	r2,gp,-25427
   13888:	1885883a 	add	r2,r3,r2
   1388c:	10800003 	ldbu	r2,0(r2)
   13890:	10803fcc 	andi	r2,r2,255
   13894:	1000061e 	bne	r2,zero,138b0 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   13898:	e0bffc43 	ldbu	r2,-15(fp)
   1389c:	0084303a 	nor	r2,zero,r2
   138a0:	1007883a 	mov	r3,r2
   138a4:	d0a72b03 	ldbu	r2,-25428(gp)
   138a8:	1884703a 	and	r2,r3,r2
   138ac:	d0a72b05 	stb	r2,-25428(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   138b0:	d0e72b03 	ldbu	r3,-25428(gp)
   138b4:	e0bffb83 	ldbu	r2,-18(fp)
   138b8:	1884b03a 	or	r2,r3,r2
   138bc:	d0a72b05 	stb	r2,-25428(gp)
         OSRdyTbl[y_new] |= bitx_new;
   138c0:	e0fffb03 	ldbu	r3,-20(fp)
   138c4:	e13ffb03 	ldbu	r4,-20(fp)
   138c8:	d0a72b44 	addi	r2,gp,-25427
   138cc:	2085883a 	add	r2,r4,r2
   138d0:	11000003 	ldbu	r4,0(r2)
   138d4:	e0bffbc3 	ldbu	r2,-17(fp)
   138d8:	2084b03a 	or	r2,r4,r2
   138dc:	1009883a 	mov	r4,r2
   138e0:	d0a72b44 	addi	r2,gp,-25427
   138e4:	1885883a 	add	r2,r3,r2
   138e8:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   138ec:	e0bff817 	ldw	r2,-32(fp)
   138f0:	10800717 	ldw	r2,28(r2)
   138f4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   138f8:	e0bff317 	ldw	r2,-52(fp)
   138fc:	10003326 	beq	r2,zero,139cc <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13900:	e0bffc03 	ldbu	r2,-16(fp)
   13904:	e0fffc03 	ldbu	r3,-16(fp)
   13908:	e13ff317 	ldw	r4,-52(fp)
   1390c:	20c7883a 	add	r3,r4,r3
   13910:	18c002c4 	addi	r3,r3,11
   13914:	18c00003 	ldbu	r3,0(r3)
   13918:	1809883a 	mov	r4,r3
   1391c:	e0fffc83 	ldbu	r3,-14(fp)
   13920:	00c6303a 	nor	r3,zero,r3
   13924:	20c6703a 	and	r3,r4,r3
   13928:	1809883a 	mov	r4,r3
   1392c:	e0fff317 	ldw	r3,-52(fp)
   13930:	1885883a 	add	r2,r3,r2
   13934:	108002c4 	addi	r2,r2,11
   13938:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1393c:	e0bffc03 	ldbu	r2,-16(fp)
   13940:	e0fff317 	ldw	r3,-52(fp)
   13944:	1885883a 	add	r2,r3,r2
   13948:	108002c4 	addi	r2,r2,11
   1394c:	10800003 	ldbu	r2,0(r2)
   13950:	10803fcc 	andi	r2,r2,255
   13954:	1000091e 	bne	r2,zero,1397c <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   13958:	e0bff317 	ldw	r2,-52(fp)
   1395c:	10800283 	ldbu	r2,10(r2)
   13960:	1007883a 	mov	r3,r2
   13964:	e0bffc43 	ldbu	r2,-15(fp)
   13968:	0084303a 	nor	r2,zero,r2
   1396c:	1884703a 	and	r2,r3,r2
   13970:	1007883a 	mov	r3,r2
   13974:	e0bff317 	ldw	r2,-52(fp)
   13978:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1397c:	e0bff317 	ldw	r2,-52(fp)
   13980:	10c00283 	ldbu	r3,10(r2)
   13984:	e0bffb83 	ldbu	r2,-18(fp)
   13988:	1884b03a 	or	r2,r3,r2
   1398c:	1007883a 	mov	r3,r2
   13990:	e0bff317 	ldw	r2,-52(fp)
   13994:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   13998:	e0bffb03 	ldbu	r2,-20(fp)
   1399c:	e0fffb03 	ldbu	r3,-20(fp)
   139a0:	e13ff317 	ldw	r4,-52(fp)
   139a4:	20c7883a 	add	r3,r4,r3
   139a8:	18c002c4 	addi	r3,r3,11
   139ac:	19000003 	ldbu	r4,0(r3)
   139b0:	e0fffbc3 	ldbu	r3,-17(fp)
   139b4:	20c6b03a 	or	r3,r4,r3
   139b8:	1809883a 	mov	r4,r3
   139bc:	e0fff317 	ldw	r3,-52(fp)
   139c0:	1885883a 	add	r2,r3,r2
   139c4:	108002c4 	addi	r2,r2,11
   139c8:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   139cc:	e0bff817 	ldw	r2,-32(fp)
   139d0:	10800817 	ldw	r2,32(r2)
   139d4:	10004226 	beq	r2,zero,13ae0 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   139d8:	e0bff817 	ldw	r2,-32(fp)
   139dc:	10800817 	ldw	r2,32(r2)
   139e0:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   139e4:	e0bff417 	ldw	r2,-48(fp)
   139e8:	10800017 	ldw	r2,0(r2)
   139ec:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   139f0:	00003906 	br	13ad8 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   139f4:	e0bffc03 	ldbu	r2,-16(fp)
   139f8:	e0fffc03 	ldbu	r3,-16(fp)
   139fc:	e13ff317 	ldw	r4,-52(fp)
   13a00:	20c7883a 	add	r3,r4,r3
   13a04:	18c002c4 	addi	r3,r3,11
   13a08:	18c00003 	ldbu	r3,0(r3)
   13a0c:	1809883a 	mov	r4,r3
   13a10:	e0fffc83 	ldbu	r3,-14(fp)
   13a14:	00c6303a 	nor	r3,zero,r3
   13a18:	20c6703a 	and	r3,r4,r3
   13a1c:	1809883a 	mov	r4,r3
   13a20:	e0fff317 	ldw	r3,-52(fp)
   13a24:	1885883a 	add	r2,r3,r2
   13a28:	108002c4 	addi	r2,r2,11
   13a2c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   13a30:	e0bffc03 	ldbu	r2,-16(fp)
   13a34:	e0fff317 	ldw	r3,-52(fp)
   13a38:	1885883a 	add	r2,r3,r2
   13a3c:	108002c4 	addi	r2,r2,11
   13a40:	10800003 	ldbu	r2,0(r2)
   13a44:	10803fcc 	andi	r2,r2,255
   13a48:	1000091e 	bne	r2,zero,13a70 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   13a4c:	e0bff317 	ldw	r2,-52(fp)
   13a50:	10800283 	ldbu	r2,10(r2)
   13a54:	1007883a 	mov	r3,r2
   13a58:	e0bffc43 	ldbu	r2,-15(fp)
   13a5c:	0084303a 	nor	r2,zero,r2
   13a60:	1884703a 	and	r2,r3,r2
   13a64:	1007883a 	mov	r3,r2
   13a68:	e0bff317 	ldw	r2,-52(fp)
   13a6c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   13a70:	e0bff317 	ldw	r2,-52(fp)
   13a74:	10c00283 	ldbu	r3,10(r2)
   13a78:	e0bffb83 	ldbu	r2,-18(fp)
   13a7c:	1884b03a 	or	r2,r3,r2
   13a80:	1007883a 	mov	r3,r2
   13a84:	e0bff317 	ldw	r2,-52(fp)
   13a88:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   13a8c:	e0bffb03 	ldbu	r2,-20(fp)
   13a90:	e0fffb03 	ldbu	r3,-20(fp)
   13a94:	e13ff317 	ldw	r4,-52(fp)
   13a98:	20c7883a 	add	r3,r4,r3
   13a9c:	18c002c4 	addi	r3,r3,11
   13aa0:	19000003 	ldbu	r4,0(r3)
   13aa4:	e0fffbc3 	ldbu	r3,-17(fp)
   13aa8:	20c6b03a 	or	r3,r4,r3
   13aac:	1809883a 	mov	r4,r3
   13ab0:	e0fff317 	ldw	r3,-52(fp)
   13ab4:	1885883a 	add	r2,r3,r2
   13ab8:	108002c4 	addi	r2,r2,11
   13abc:	11000005 	stb	r4,0(r2)
            pevents++;
   13ac0:	e0bff417 	ldw	r2,-48(fp)
   13ac4:	10800104 	addi	r2,r2,4
   13ac8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   13acc:	e0bff417 	ldw	r2,-48(fp)
   13ad0:	10800017 	ldw	r2,0(r2)
   13ad4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   13ad8:	e0bff317 	ldw	r2,-52(fp)
   13adc:	103fc51e 	bne	r2,zero,139f4 <OSTaskChangePrio+0x38c>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13ae0:	e0bff817 	ldw	r2,-32(fp)
   13ae4:	e0ffff03 	ldbu	r3,-4(fp)
   13ae8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   13aec:	e0bff817 	ldw	r2,-32(fp)
   13af0:	e0fffb03 	ldbu	r3,-20(fp)
   13af4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   13af8:	e0bff817 	ldw	r2,-32(fp)
   13afc:	e0fffb43 	ldbu	r3,-19(fp)
   13b00:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   13b04:	e0bff817 	ldw	r2,-32(fp)
   13b08:	e0fffb83 	ldbu	r3,-18(fp)
   13b0c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   13b10:	e0bff817 	ldw	r2,-32(fp)
   13b14:	e0fffbc3 	ldbu	r3,-17(fp)
   13b18:	10c00d45 	stb	r3,53(r2)
   13b1c:	e0bff517 	ldw	r2,-44(fp)
   13b20:	e0bffa15 	stw	r2,-24(fp)
   13b24:	e0bffa17 	ldw	r2,-24(fp)
   13b28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   13b2c:	d0a71f43 	ldbu	r2,-25475(gp)
   13b30:	10803fcc 	andi	r2,r2,255
   13b34:	10800058 	cmpnei	r2,r2,1
   13b38:	1000011e 	bne	r2,zero,13b40 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   13b3c:	000f4380 	call	f438 <OS_Sched>
    }
    return (OS_ERR_NONE);
   13b40:	0005883a 	mov	r2,zero
}
   13b44:	e037883a 	mov	sp,fp
   13b48:	dfc00117 	ldw	ra,4(sp)
   13b4c:	df000017 	ldw	fp,0(sp)
   13b50:	dec00204 	addi	sp,sp,8
   13b54:	f800283a 	ret

00013b58 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   13b58:	deffee04 	addi	sp,sp,-72
   13b5c:	dfc01115 	stw	ra,68(sp)
   13b60:	df001015 	stw	fp,64(sp)
   13b64:	df001004 	addi	fp,sp,64
   13b68:	e13ffc15 	stw	r4,-16(fp)
   13b6c:	e17ffd15 	stw	r5,-12(fp)
   13b70:	e1bffe15 	stw	r6,-8(fp)
   13b74:	3805883a 	mov	r2,r7
   13b78:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13b7c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13b80:	e0bfff03 	ldbu	r2,-4(fp)
   13b84:	10800570 	cmpltui	r2,r2,21
   13b88:	1000021e 	bne	r2,zero,13b94 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   13b8c:	00800a84 	movi	r2,42
   13b90:	00005706 	br	13cf0 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b94:	0005303a 	rdctl	r2,status
   13b98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b9c:	e0fffb17 	ldw	r3,-20(fp)
   13ba0:	00bfff84 	movi	r2,-2
   13ba4:	1884703a 	and	r2,r3,r2
   13ba8:	1001703a 	wrctl	status,r2
  
  return context;
   13bac:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13bb0:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13bb4:	d0a72d03 	ldbu	r2,-25420(gp)
   13bb8:	10803fcc 	andi	r2,r2,255
   13bbc:	10000626 	beq	r2,zero,13bd8 <OSTaskCreate+0x80>
   13bc0:	e0bff317 	ldw	r2,-52(fp)
   13bc4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13bc8:	e0bff417 	ldw	r2,-48(fp)
   13bcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13bd0:	00800f04 	movi	r2,60
   13bd4:	00004606 	br	13cf0 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13bd8:	e0ffff03 	ldbu	r3,-4(fp)
   13bdc:	00800134 	movhi	r2,4
   13be0:	10b25404 	addi	r2,r2,-14000
   13be4:	18c7883a 	add	r3,r3,r3
   13be8:	18c7883a 	add	r3,r3,r3
   13bec:	10c5883a 	add	r2,r2,r3
   13bf0:	10800017 	ldw	r2,0(r2)
   13bf4:	1000391e 	bne	r2,zero,13cdc <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13bf8:	e0ffff03 	ldbu	r3,-4(fp)
   13bfc:	00800134 	movhi	r2,4
   13c00:	10b25404 	addi	r2,r2,-14000
   13c04:	18c7883a 	add	r3,r3,r3
   13c08:	18c7883a 	add	r3,r3,r3
   13c0c:	10c5883a 	add	r2,r2,r3
   13c10:	00c00044 	movi	r3,1
   13c14:	10c00015 	stw	r3,0(r2)
   13c18:	e0bff317 	ldw	r2,-52(fp)
   13c1c:	e0bff515 	stw	r2,-44(fp)
   13c20:	e0bff517 	ldw	r2,-44(fp)
   13c24:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   13c28:	000f883a 	mov	r7,zero
   13c2c:	e1bffe17 	ldw	r6,-8(fp)
   13c30:	e17ffd17 	ldw	r5,-12(fp)
   13c34:	e13ffc17 	ldw	r4,-16(fp)
   13c38:	0016cb40 	call	16cb4 <OSTaskStkInit>
   13c3c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   13c40:	e0bfff03 	ldbu	r2,-4(fp)
   13c44:	d8000215 	stw	zero,8(sp)
   13c48:	d8000115 	stw	zero,4(sp)
   13c4c:	d8000015 	stw	zero,0(sp)
   13c50:	000f883a 	mov	r7,zero
   13c54:	000d883a 	mov	r6,zero
   13c58:	e17ff717 	ldw	r5,-36(fp)
   13c5c:	1009883a 	mov	r4,r2
   13c60:	000f8380 	call	f838 <OS_TCBInit>
   13c64:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   13c68:	e0bff803 	ldbu	r2,-32(fp)
   13c6c:	1000061e 	bne	r2,zero,13c88 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   13c70:	d0a71f43 	ldbu	r2,-25475(gp)
   13c74:	10803fcc 	andi	r2,r2,255
   13c78:	10800058 	cmpnei	r2,r2,1
   13c7c:	1000151e 	bne	r2,zero,13cd4 <OSTaskCreate+0x17c>
                OS_Sched();
   13c80:	000f4380 	call	f438 <OS_Sched>
   13c84:	00001306 	br	13cd4 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13c88:	0005303a 	rdctl	r2,status
   13c8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c90:	e0fffa17 	ldw	r3,-24(fp)
   13c94:	00bfff84 	movi	r2,-2
   13c98:	1884703a 	and	r2,r3,r2
   13c9c:	1001703a 	wrctl	status,r2
  
  return context;
   13ca0:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   13ca4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   13ca8:	e0ffff03 	ldbu	r3,-4(fp)
   13cac:	00800134 	movhi	r2,4
   13cb0:	10b25404 	addi	r2,r2,-14000
   13cb4:	18c7883a 	add	r3,r3,r3
   13cb8:	18c7883a 	add	r3,r3,r3
   13cbc:	10c5883a 	add	r2,r2,r3
   13cc0:	10000015 	stw	zero,0(r2)
   13cc4:	e0bff317 	ldw	r2,-52(fp)
   13cc8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ccc:	e0bff617 	ldw	r2,-40(fp)
   13cd0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   13cd4:	e0bff803 	ldbu	r2,-32(fp)
   13cd8:	00000506 	br	13cf0 <OSTaskCreate+0x198>
   13cdc:	e0bff317 	ldw	r2,-52(fp)
   13ce0:	e0bff915 	stw	r2,-28(fp)
   13ce4:	e0bff917 	ldw	r2,-28(fp)
   13ce8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13cec:	00800a04 	movi	r2,40
}
   13cf0:	e037883a 	mov	sp,fp
   13cf4:	dfc00117 	ldw	ra,4(sp)
   13cf8:	df000017 	ldw	fp,0(sp)
   13cfc:	dec00204 	addi	sp,sp,8
   13d00:	f800283a 	ret

00013d04 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   13d04:	deffec04 	addi	sp,sp,-80
   13d08:	dfc01315 	stw	ra,76(sp)
   13d0c:	df001215 	stw	fp,72(sp)
   13d10:	df001204 	addi	fp,sp,72
   13d14:	e13ffa15 	stw	r4,-24(fp)
   13d18:	e17ffb15 	stw	r5,-20(fp)
   13d1c:	e1bffc15 	stw	r6,-16(fp)
   13d20:	3809883a 	mov	r4,r7
   13d24:	e0c00217 	ldw	r3,8(fp)
   13d28:	e0800617 	ldw	r2,24(fp)
   13d2c:	e13ffd05 	stb	r4,-12(fp)
   13d30:	e0fffe0d 	sth	r3,-8(fp)
   13d34:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13d38:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13d3c:	e0bffd03 	ldbu	r2,-12(fp)
   13d40:	10800570 	cmpltui	r2,r2,21
   13d44:	1000021e 	bne	r2,zero,13d50 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   13d48:	00800a84 	movi	r2,42
   13d4c:	00006106 	br	13ed4 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d50:	0005303a 	rdctl	r2,status
   13d54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d58:	e0fff917 	ldw	r3,-28(fp)
   13d5c:	00bfff84 	movi	r2,-2
   13d60:	1884703a 	and	r2,r3,r2
   13d64:	1001703a 	wrctl	status,r2
  
  return context;
   13d68:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13d6c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13d70:	d0a72d03 	ldbu	r2,-25420(gp)
   13d74:	10803fcc 	andi	r2,r2,255
   13d78:	10000626 	beq	r2,zero,13d94 <OSTaskCreateExt+0x90>
   13d7c:	e0bff117 	ldw	r2,-60(fp)
   13d80:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d84:	e0bff217 	ldw	r2,-56(fp)
   13d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13d8c:	00800f04 	movi	r2,60
   13d90:	00005006 	br	13ed4 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13d94:	e0fffd03 	ldbu	r3,-12(fp)
   13d98:	00800134 	movhi	r2,4
   13d9c:	10b25404 	addi	r2,r2,-14000
   13da0:	18c7883a 	add	r3,r3,r3
   13da4:	18c7883a 	add	r3,r3,r3
   13da8:	10c5883a 	add	r2,r2,r3
   13dac:	10800017 	ldw	r2,0(r2)
   13db0:	1000431e 	bne	r2,zero,13ec0 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13db4:	e0fffd03 	ldbu	r3,-12(fp)
   13db8:	00800134 	movhi	r2,4
   13dbc:	10b25404 	addi	r2,r2,-14000
   13dc0:	18c7883a 	add	r3,r3,r3
   13dc4:	18c7883a 	add	r3,r3,r3
   13dc8:	10c5883a 	add	r2,r2,r3
   13dcc:	00c00044 	movi	r3,1
   13dd0:	10c00015 	stw	r3,0(r2)
   13dd4:	e0bff117 	ldw	r2,-60(fp)
   13dd8:	e0bff315 	stw	r2,-52(fp)
   13ddc:	e0bff317 	ldw	r2,-52(fp)
   13de0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   13de4:	e0bfff0b 	ldhu	r2,-4(fp)
   13de8:	100d883a 	mov	r6,r2
   13dec:	e1400417 	ldw	r5,16(fp)
   13df0:	e1000317 	ldw	r4,12(fp)
   13df4:	0014d640 	call	14d64 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   13df8:	e0bfff0b 	ldhu	r2,-4(fp)
   13dfc:	100f883a 	mov	r7,r2
   13e00:	e1bffc17 	ldw	r6,-16(fp)
   13e04:	e17ffb17 	ldw	r5,-20(fp)
   13e08:	e13ffa17 	ldw	r4,-24(fp)
   13e0c:	0016cb40 	call	16cb4 <OSTaskStkInit>
   13e10:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   13e14:	e0fffd03 	ldbu	r3,-12(fp)
   13e18:	e13ffe0b 	ldhu	r4,-8(fp)
   13e1c:	e0bfff0b 	ldhu	r2,-4(fp)
   13e20:	d8800215 	stw	r2,8(sp)
   13e24:	e0800517 	ldw	r2,20(fp)
   13e28:	d8800115 	stw	r2,4(sp)
   13e2c:	e0800417 	ldw	r2,16(fp)
   13e30:	d8800015 	stw	r2,0(sp)
   13e34:	200f883a 	mov	r7,r4
   13e38:	e1800317 	ldw	r6,12(fp)
   13e3c:	e17ff517 	ldw	r5,-44(fp)
   13e40:	1809883a 	mov	r4,r3
   13e44:	000f8380 	call	f838 <OS_TCBInit>
   13e48:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   13e4c:	e0bff603 	ldbu	r2,-40(fp)
   13e50:	1000061e 	bne	r2,zero,13e6c <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   13e54:	d0a71f43 	ldbu	r2,-25475(gp)
   13e58:	10803fcc 	andi	r2,r2,255
   13e5c:	10800058 	cmpnei	r2,r2,1
   13e60:	1000151e 	bne	r2,zero,13eb8 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   13e64:	000f4380 	call	f438 <OS_Sched>
   13e68:	00001306 	br	13eb8 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e6c:	0005303a 	rdctl	r2,status
   13e70:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e74:	e0fff817 	ldw	r3,-32(fp)
   13e78:	00bfff84 	movi	r2,-2
   13e7c:	1884703a 	and	r2,r3,r2
   13e80:	1001703a 	wrctl	status,r2
  
  return context;
   13e84:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   13e88:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   13e8c:	e0fffd03 	ldbu	r3,-12(fp)
   13e90:	00800134 	movhi	r2,4
   13e94:	10b25404 	addi	r2,r2,-14000
   13e98:	18c7883a 	add	r3,r3,r3
   13e9c:	18c7883a 	add	r3,r3,r3
   13ea0:	10c5883a 	add	r2,r2,r3
   13ea4:	10000015 	stw	zero,0(r2)
   13ea8:	e0bff117 	ldw	r2,-60(fp)
   13eac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13eb0:	e0bff417 	ldw	r2,-48(fp)
   13eb4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   13eb8:	e0bff603 	ldbu	r2,-40(fp)
   13ebc:	00000506 	br	13ed4 <OSTaskCreateExt+0x1d0>
   13ec0:	e0bff117 	ldw	r2,-60(fp)
   13ec4:	e0bff715 	stw	r2,-36(fp)
   13ec8:	e0bff717 	ldw	r2,-36(fp)
   13ecc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13ed0:	00800a04 	movi	r2,40
}
   13ed4:	e037883a 	mov	sp,fp
   13ed8:	dfc00117 	ldw	ra,4(sp)
   13edc:	df000017 	ldw	fp,0(sp)
   13ee0:	dec00204 	addi	sp,sp,8
   13ee4:	f800283a 	ret

00013ee8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   13ee8:	defff404 	addi	sp,sp,-48
   13eec:	dfc00b15 	stw	ra,44(sp)
   13ef0:	df000a15 	stw	fp,40(sp)
   13ef4:	df000a04 	addi	fp,sp,40
   13ef8:	2005883a 	mov	r2,r4
   13efc:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   13f00:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   13f04:	d0a72d03 	ldbu	r2,-25420(gp)
   13f08:	10803fcc 	andi	r2,r2,255
   13f0c:	10000226 	beq	r2,zero,13f18 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   13f10:	00801004 	movi	r2,64
   13f14:	0000c006 	br	14218 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   13f18:	e0bfff03 	ldbu	r2,-4(fp)
   13f1c:	10800518 	cmpnei	r2,r2,20
   13f20:	1000021e 	bne	r2,zero,13f2c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   13f24:	00800f84 	movi	r2,62
   13f28:	0000bb06 	br	14218 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   13f2c:	e0bfff03 	ldbu	r2,-4(fp)
   13f30:	10800530 	cmpltui	r2,r2,20
   13f34:	1000051e 	bne	r2,zero,13f4c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   13f38:	e0bfff03 	ldbu	r2,-4(fp)
   13f3c:	10803fe0 	cmpeqi	r2,r2,255
   13f40:	1000021e 	bne	r2,zero,13f4c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   13f44:	00800a84 	movi	r2,42
   13f48:	0000b306 	br	14218 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f4c:	0005303a 	rdctl	r2,status
   13f50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f54:	e0fffe17 	ldw	r3,-8(fp)
   13f58:	00bfff84 	movi	r2,-2
   13f5c:	1884703a 	and	r2,r3,r2
   13f60:	1001703a 	wrctl	status,r2
  
  return context;
   13f64:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13f68:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   13f6c:	e0bfff03 	ldbu	r2,-4(fp)
   13f70:	10803fd8 	cmpnei	r2,r2,255
   13f74:	1000031e 	bne	r2,zero,13f84 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   13f78:	d0a72e17 	ldw	r2,-25416(gp)
   13f7c:	10800c83 	ldbu	r2,50(r2)
   13f80:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   13f84:	e0ffff03 	ldbu	r3,-4(fp)
   13f88:	00800134 	movhi	r2,4
   13f8c:	10b25404 	addi	r2,r2,-14000
   13f90:	18c7883a 	add	r3,r3,r3
   13f94:	18c7883a 	add	r3,r3,r3
   13f98:	10c5883a 	add	r2,r2,r3
   13f9c:	10800017 	ldw	r2,0(r2)
   13fa0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   13fa4:	e0bff817 	ldw	r2,-32(fp)
   13fa8:	1000061e 	bne	r2,zero,13fc4 <OSTaskDel+0xdc>
   13fac:	e0bff617 	ldw	r2,-40(fp)
   13fb0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fb4:	e0bff717 	ldw	r2,-36(fp)
   13fb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   13fbc:	008010c4 	movi	r2,67
   13fc0:	00009506 	br	14218 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   13fc4:	e0bff817 	ldw	r2,-32(fp)
   13fc8:	10800058 	cmpnei	r2,r2,1
   13fcc:	1000061e 	bne	r2,zero,13fe8 <OSTaskDel+0x100>
   13fd0:	e0bff617 	ldw	r2,-40(fp)
   13fd4:	e0bff915 	stw	r2,-28(fp)
   13fd8:	e0bff917 	ldw	r2,-28(fp)
   13fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   13fe0:	00800f44 	movi	r2,61
   13fe4:	00008c06 	br	14218 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   13fe8:	e0bff817 	ldw	r2,-32(fp)
   13fec:	10800d03 	ldbu	r2,52(r2)
   13ff0:	10c03fcc 	andi	r3,r2,255
   13ff4:	e0bff817 	ldw	r2,-32(fp)
   13ff8:	10800d03 	ldbu	r2,52(r2)
   13ffc:	11003fcc 	andi	r4,r2,255
   14000:	d0a72b44 	addi	r2,gp,-25427
   14004:	2085883a 	add	r2,r4,r2
   14008:	10800003 	ldbu	r2,0(r2)
   1400c:	1009883a 	mov	r4,r2
   14010:	e0bff817 	ldw	r2,-32(fp)
   14014:	10800d43 	ldbu	r2,53(r2)
   14018:	0084303a 	nor	r2,zero,r2
   1401c:	2084703a 	and	r2,r4,r2
   14020:	1009883a 	mov	r4,r2
   14024:	d0a72b44 	addi	r2,gp,-25427
   14028:	1885883a 	add	r2,r3,r2
   1402c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   14030:	e0bff817 	ldw	r2,-32(fp)
   14034:	10800d03 	ldbu	r2,52(r2)
   14038:	10c03fcc 	andi	r3,r2,255
   1403c:	d0a72b44 	addi	r2,gp,-25427
   14040:	1885883a 	add	r2,r3,r2
   14044:	10800003 	ldbu	r2,0(r2)
   14048:	10803fcc 	andi	r2,r2,255
   1404c:	1000071e 	bne	r2,zero,1406c <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   14050:	e0bff817 	ldw	r2,-32(fp)
   14054:	10800d83 	ldbu	r2,54(r2)
   14058:	0084303a 	nor	r2,zero,r2
   1405c:	1007883a 	mov	r3,r2
   14060:	d0a72b03 	ldbu	r2,-25428(gp)
   14064:	1884703a 	and	r2,r3,r2
   14068:	d0a72b05 	stb	r2,-25428(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1406c:	e0bff817 	ldw	r2,-32(fp)
   14070:	10800717 	ldw	r2,28(r2)
   14074:	10000526 	beq	r2,zero,1408c <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   14078:	e0bff817 	ldw	r2,-32(fp)
   1407c:	10800717 	ldw	r2,28(r2)
   14080:	100b883a 	mov	r5,r2
   14084:	e13ff817 	ldw	r4,-32(fp)
   14088:	000ede40 	call	ede4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1408c:	e0bff817 	ldw	r2,-32(fp)
   14090:	10800817 	ldw	r2,32(r2)
   14094:	10000526 	beq	r2,zero,140ac <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14098:	e0bff817 	ldw	r2,-32(fp)
   1409c:	10800817 	ldw	r2,32(r2)
   140a0:	100b883a 	mov	r5,r2
   140a4:	e13ff817 	ldw	r4,-32(fp)
   140a8:	000ee9c0 	call	ee9c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   140ac:	e0bff817 	ldw	r2,-32(fp)
   140b0:	10800a17 	ldw	r2,40(r2)
   140b4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   140b8:	e0bffb17 	ldw	r2,-20(fp)
   140bc:	10000226 	beq	r2,zero,140c8 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   140c0:	e13ffb17 	ldw	r4,-20(fp)
   140c4:	001130c0 	call	1130c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   140c8:	e0bff817 	ldw	r2,-32(fp)
   140cc:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   140d0:	e0bff817 	ldw	r2,-32(fp)
   140d4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   140d8:	e0bff817 	ldw	r2,-32(fp)
   140dc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   140e0:	d0a71f03 	ldbu	r2,-25476(gp)
   140e4:	10803fcc 	andi	r2,r2,255
   140e8:	10803fe0 	cmpeqi	r2,r2,255
   140ec:	1000031e 	bne	r2,zero,140fc <OSTaskDel+0x214>
        OSLockNesting++;
   140f0:	d0a71f03 	ldbu	r2,-25476(gp)
   140f4:	10800044 	addi	r2,r2,1
   140f8:	d0a71f05 	stb	r2,-25476(gp)
   140fc:	e0bff617 	ldw	r2,-40(fp)
   14100:	e0bffd15 	stw	r2,-12(fp)
   14104:	e0bffd17 	ldw	r2,-12(fp)
   14108:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1410c:	000e9cc0 	call	e9cc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14110:	0005303a 	rdctl	r2,status
   14114:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14118:	e0fffa17 	ldw	r3,-24(fp)
   1411c:	00bfff84 	movi	r2,-2
   14120:	1884703a 	and	r2,r3,r2
   14124:	1001703a 	wrctl	status,r2
  
  return context;
   14128:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1412c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   14130:	d0a71f03 	ldbu	r2,-25476(gp)
   14134:	10803fcc 	andi	r2,r2,255
   14138:	10000326 	beq	r2,zero,14148 <OSTaskDel+0x260>
        OSLockNesting--;
   1413c:	d0a71f03 	ldbu	r2,-25476(gp)
   14140:	10bfffc4 	addi	r2,r2,-1
   14144:	d0a71f05 	stb	r2,-25476(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14148:	e13ff817 	ldw	r4,-32(fp)
   1414c:	0016e340 	call	16e34 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   14150:	d0a72743 	ldbu	r2,-25443(gp)
   14154:	10bfffc4 	addi	r2,r2,-1
   14158:	d0a72745 	stb	r2,-25443(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1415c:	e0ffff03 	ldbu	r3,-4(fp)
   14160:	00800134 	movhi	r2,4
   14164:	10b25404 	addi	r2,r2,-14000
   14168:	18c7883a 	add	r3,r3,r3
   1416c:	18c7883a 	add	r3,r3,r3
   14170:	10c5883a 	add	r2,r2,r3
   14174:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14178:	e0bff817 	ldw	r2,-32(fp)
   1417c:	10800617 	ldw	r2,24(r2)
   14180:	1000071e 	bne	r2,zero,141a0 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14184:	e0bff817 	ldw	r2,-32(fp)
   14188:	10800517 	ldw	r2,20(r2)
   1418c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14190:	e0bff817 	ldw	r2,-32(fp)
   14194:	10800517 	ldw	r2,20(r2)
   14198:	d0a72215 	stw	r2,-25464(gp)
   1419c:	00000a06 	br	141c8 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   141a0:	e0bff817 	ldw	r2,-32(fp)
   141a4:	10800617 	ldw	r2,24(r2)
   141a8:	e0fff817 	ldw	r3,-32(fp)
   141ac:	18c00517 	ldw	r3,20(r3)
   141b0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   141b4:	e0bff817 	ldw	r2,-32(fp)
   141b8:	10800517 	ldw	r2,20(r2)
   141bc:	e0fff817 	ldw	r3,-32(fp)
   141c0:	18c00617 	ldw	r3,24(r3)
   141c4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   141c8:	d0e72617 	ldw	r3,-25448(gp)
   141cc:	e0bff817 	ldw	r2,-32(fp)
   141d0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   141d4:	e0bff817 	ldw	r2,-32(fp)
   141d8:	d0a72615 	stw	r2,-25448(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   141dc:	e0bff817 	ldw	r2,-32(fp)
   141e0:	00c00fc4 	movi	r3,63
   141e4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   141e8:	e0bff817 	ldw	r2,-32(fp)
   141ec:	10001345 	stb	zero,77(r2)
   141f0:	e0bff617 	ldw	r2,-40(fp)
   141f4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   141f8:	e0bffc17 	ldw	r2,-16(fp)
   141fc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14200:	d0a71f43 	ldbu	r2,-25475(gp)
   14204:	10803fcc 	andi	r2,r2,255
   14208:	10800058 	cmpnei	r2,r2,1
   1420c:	1000011e 	bne	r2,zero,14214 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   14210:	000f4380 	call	f438 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14214:	0005883a 	mov	r2,zero
}
   14218:	e037883a 	mov	sp,fp
   1421c:	dfc00117 	ldw	ra,4(sp)
   14220:	df000017 	ldw	fp,0(sp)
   14224:	dec00204 	addi	sp,sp,8
   14228:	f800283a 	ret

0001422c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1422c:	defff504 	addi	sp,sp,-44
   14230:	df000a15 	stw	fp,40(sp)
   14234:	df000a04 	addi	fp,sp,40
   14238:	2005883a 	mov	r2,r4
   1423c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14240:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   14244:	e0bfff03 	ldbu	r2,-4(fp)
   14248:	10800518 	cmpnei	r2,r2,20
   1424c:	1000021e 	bne	r2,zero,14258 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   14250:	00800f84 	movi	r2,62
   14254:	00004506 	br	1436c <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14258:	e0bfff03 	ldbu	r2,-4(fp)
   1425c:	10800530 	cmpltui	r2,r2,20
   14260:	1000051e 	bne	r2,zero,14278 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   14264:	e0bfff03 	ldbu	r2,-4(fp)
   14268:	10803fe0 	cmpeqi	r2,r2,255
   1426c:	1000021e 	bne	r2,zero,14278 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14270:	00800a84 	movi	r2,42
   14274:	00003d06 	br	1436c <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14278:	e0bfff03 	ldbu	r2,-4(fp)
   1427c:	10803fd8 	cmpnei	r2,r2,255
   14280:	1000111e 	bne	r2,zero,142c8 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14284:	0005303a 	rdctl	r2,status
   14288:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1428c:	e0fff917 	ldw	r3,-28(fp)
   14290:	00bfff84 	movi	r2,-2
   14294:	1884703a 	and	r2,r3,r2
   14298:	1001703a 	wrctl	status,r2
  
  return context;
   1429c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   142a0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   142a4:	d0a72e17 	ldw	r2,-25416(gp)
   142a8:	10800dc3 	ldbu	r2,55(r2)
   142ac:	e0bff805 	stb	r2,-32(fp)
   142b0:	e0bff617 	ldw	r2,-40(fp)
   142b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142b8:	e0bffe17 	ldw	r2,-8(fp)
   142bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   142c0:	e0bff803 	ldbu	r2,-32(fp)
   142c4:	00002906 	br	1436c <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142c8:	0005303a 	rdctl	r2,status
   142cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142d0:	e0fff717 	ldw	r3,-36(fp)
   142d4:	00bfff84 	movi	r2,-2
   142d8:	1884703a 	and	r2,r3,r2
   142dc:	1001703a 	wrctl	status,r2
  
  return context;
   142e0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   142e4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   142e8:	e0ffff03 	ldbu	r3,-4(fp)
   142ec:	00800134 	movhi	r2,4
   142f0:	10b25404 	addi	r2,r2,-14000
   142f4:	18c7883a 	add	r3,r3,r3
   142f8:	18c7883a 	add	r3,r3,r3
   142fc:	10c5883a 	add	r2,r2,r3
   14300:	10800017 	ldw	r2,0(r2)
   14304:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14308:	e0bffb17 	ldw	r2,-20(fp)
   1430c:	1000061e 	bne	r2,zero,14328 <OSTaskDelReq+0xfc>
   14310:	e0bff617 	ldw	r2,-40(fp)
   14314:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14318:	e0bffa17 	ldw	r2,-24(fp)
   1431c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14320:	008010c4 	movi	r2,67
   14324:	00001106 	br	1436c <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14328:	e0bffb17 	ldw	r2,-20(fp)
   1432c:	10800058 	cmpnei	r2,r2,1
   14330:	1000061e 	bne	r2,zero,1434c <OSTaskDelReq+0x120>
   14334:	e0bff617 	ldw	r2,-40(fp)
   14338:	e0bffc15 	stw	r2,-16(fp)
   1433c:	e0bffc17 	ldw	r2,-16(fp)
   14340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14344:	00800f44 	movi	r2,61
   14348:	00000806 	br	1436c <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1434c:	e0bffb17 	ldw	r2,-20(fp)
   14350:	00c00fc4 	movi	r3,63
   14354:	10c00dc5 	stb	r3,55(r2)
   14358:	e0bff617 	ldw	r2,-40(fp)
   1435c:	e0bffd15 	stw	r2,-12(fp)
   14360:	e0bffd17 	ldw	r2,-12(fp)
   14364:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14368:	0005883a 	mov	r2,zero
}
   1436c:	e037883a 	mov	sp,fp
   14370:	df000017 	ldw	fp,0(sp)
   14374:	dec00104 	addi	sp,sp,4
   14378:	f800283a 	ret

0001437c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1437c:	defff404 	addi	sp,sp,-48
   14380:	dfc00b15 	stw	ra,44(sp)
   14384:	df000a15 	stw	fp,40(sp)
   14388:	df000a04 	addi	fp,sp,40
   1438c:	2005883a 	mov	r2,r4
   14390:	e17ffe15 	stw	r5,-8(fp)
   14394:	e1bfff15 	stw	r6,-4(fp)
   14398:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1439c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   143a0:	e0bfff17 	ldw	r2,-4(fp)
   143a4:	1000021e 	bne	r2,zero,143b0 <OSTaskNameGet+0x34>
        return (0);
   143a8:	0005883a 	mov	r2,zero
   143ac:	00005406 	br	14500 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   143b0:	e0bffd03 	ldbu	r2,-12(fp)
   143b4:	10800570 	cmpltui	r2,r2,21
   143b8:	1000081e 	bne	r2,zero,143dc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   143bc:	e0bffd03 	ldbu	r2,-12(fp)
   143c0:	10803fe0 	cmpeqi	r2,r2,255
   143c4:	1000051e 	bne	r2,zero,143dc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   143c8:	e0bfff17 	ldw	r2,-4(fp)
   143cc:	00c00a84 	movi	r3,42
   143d0:	10c00005 	stb	r3,0(r2)
            return (0);
   143d4:	0005883a 	mov	r2,zero
   143d8:	00004906 	br	14500 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   143dc:	e0bffe17 	ldw	r2,-8(fp)
   143e0:	1000051e 	bne	r2,zero,143f8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   143e4:	e0bfff17 	ldw	r2,-4(fp)
   143e8:	00c00304 	movi	r3,12
   143ec:	10c00005 	stb	r3,0(r2)
        return (0);
   143f0:	0005883a 	mov	r2,zero
   143f4:	00004206 	br	14500 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   143f8:	d0a72d03 	ldbu	r2,-25420(gp)
   143fc:	10803fcc 	andi	r2,r2,255
   14400:	10000526 	beq	r2,zero,14418 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   14404:	e0bfff17 	ldw	r2,-4(fp)
   14408:	00c00444 	movi	r3,17
   1440c:	10c00005 	stb	r3,0(r2)
        return (0);
   14410:	0005883a 	mov	r2,zero
   14414:	00003a06 	br	14500 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14418:	0005303a 	rdctl	r2,status
   1441c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14420:	e0fffc17 	ldw	r3,-16(fp)
   14424:	00bfff84 	movi	r2,-2
   14428:	1884703a 	and	r2,r3,r2
   1442c:	1001703a 	wrctl	status,r2
  
  return context;
   14430:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14434:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   14438:	e0bffd03 	ldbu	r2,-12(fp)
   1443c:	10803fd8 	cmpnei	r2,r2,255
   14440:	1000031e 	bne	r2,zero,14450 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   14444:	d0a72e17 	ldw	r2,-25416(gp)
   14448:	10800c83 	ldbu	r2,50(r2)
   1444c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14450:	e0fffd03 	ldbu	r3,-12(fp)
   14454:	00800134 	movhi	r2,4
   14458:	10b25404 	addi	r2,r2,-14000
   1445c:	18c7883a 	add	r3,r3,r3
   14460:	18c7883a 	add	r3,r3,r3
   14464:	10c5883a 	add	r2,r2,r3
   14468:	10800017 	ldw	r2,0(r2)
   1446c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   14470:	e0bff817 	ldw	r2,-32(fp)
   14474:	1000091e 	bne	r2,zero,1449c <OSTaskNameGet+0x120>
   14478:	e0bff617 	ldw	r2,-40(fp)
   1447c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14480:	e0bff717 	ldw	r2,-36(fp)
   14484:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14488:	e0bfff17 	ldw	r2,-4(fp)
   1448c:	00c010c4 	movi	r3,67
   14490:	10c00005 	stb	r3,0(r2)
        return (0);
   14494:	0005883a 	mov	r2,zero
   14498:	00001906 	br	14500 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1449c:	e0bff817 	ldw	r2,-32(fp)
   144a0:	10800058 	cmpnei	r2,r2,1
   144a4:	1000091e 	bne	r2,zero,144cc <OSTaskNameGet+0x150>
   144a8:	e0bff617 	ldw	r2,-40(fp)
   144ac:	e0bff915 	stw	r2,-28(fp)
   144b0:	e0bff917 	ldw	r2,-28(fp)
   144b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   144b8:	e0bfff17 	ldw	r2,-4(fp)
   144bc:	00c010c4 	movi	r3,67
   144c0:	10c00005 	stb	r3,0(r2)
        return (0);
   144c4:	0005883a 	mov	r2,zero
   144c8:	00000d06 	br	14500 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   144cc:	e0bff817 	ldw	r2,-32(fp)
   144d0:	10801304 	addi	r2,r2,76
   144d4:	100b883a 	mov	r5,r2
   144d8:	e13ffe17 	ldw	r4,-8(fp)
   144dc:	000f57c0 	call	f57c <OS_StrCopy>
   144e0:	e0bffb05 	stb	r2,-20(fp)
   144e4:	e0bff617 	ldw	r2,-40(fp)
   144e8:	e0bffa15 	stw	r2,-24(fp)
   144ec:	e0bffa17 	ldw	r2,-24(fp)
   144f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   144f4:	e0bfff17 	ldw	r2,-4(fp)
   144f8:	10000005 	stb	zero,0(r2)
    return (len);
   144fc:	e0bffb03 	ldbu	r2,-20(fp)
}
   14500:	e037883a 	mov	sp,fp
   14504:	dfc00117 	ldw	ra,4(sp)
   14508:	df000017 	ldw	fp,0(sp)
   1450c:	dec00204 	addi	sp,sp,8
   14510:	f800283a 	ret

00014514 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14514:	defff304 	addi	sp,sp,-52
   14518:	dfc00c15 	stw	ra,48(sp)
   1451c:	df000b15 	stw	fp,44(sp)
   14520:	df000b04 	addi	fp,sp,44
   14524:	2005883a 	mov	r2,r4
   14528:	e17ffe15 	stw	r5,-8(fp)
   1452c:	e1bfff15 	stw	r6,-4(fp)
   14530:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   14534:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   14538:	e0bfff17 	ldw	r2,-4(fp)
   1453c:	10005c26 	beq	r2,zero,146b0 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   14540:	e0bffd03 	ldbu	r2,-12(fp)
   14544:	10800570 	cmpltui	r2,r2,21
   14548:	1000071e 	bne	r2,zero,14568 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   1454c:	e0bffd03 	ldbu	r2,-12(fp)
   14550:	10803fe0 	cmpeqi	r2,r2,255
   14554:	1000041e 	bne	r2,zero,14568 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   14558:	e0bfff17 	ldw	r2,-4(fp)
   1455c:	00c00a84 	movi	r3,42
   14560:	10c00005 	stb	r3,0(r2)
            return;
   14564:	00005306 	br	146b4 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   14568:	e0bffe17 	ldw	r2,-8(fp)
   1456c:	1000041e 	bne	r2,zero,14580 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   14570:	e0bfff17 	ldw	r2,-4(fp)
   14574:	00c00304 	movi	r3,12
   14578:	10c00005 	stb	r3,0(r2)
        return;
   1457c:	00004d06 	br	146b4 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   14580:	d0a72d03 	ldbu	r2,-25420(gp)
   14584:	10803fcc 	andi	r2,r2,255
   14588:	10000426 	beq	r2,zero,1459c <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   1458c:	e0bfff17 	ldw	r2,-4(fp)
   14590:	00c00484 	movi	r3,18
   14594:	10c00005 	stb	r3,0(r2)
        return;
   14598:	00004606 	br	146b4 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1459c:	0005303a 	rdctl	r2,status
   145a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145a4:	e0fffc17 	ldw	r3,-16(fp)
   145a8:	00bfff84 	movi	r2,-2
   145ac:	1884703a 	and	r2,r3,r2
   145b0:	1001703a 	wrctl	status,r2
  
  return context;
   145b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   145b8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   145bc:	e0bffd03 	ldbu	r2,-12(fp)
   145c0:	10803fd8 	cmpnei	r2,r2,255
   145c4:	1000031e 	bne	r2,zero,145d4 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   145c8:	d0a72e17 	ldw	r2,-25416(gp)
   145cc:	10800c83 	ldbu	r2,50(r2)
   145d0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   145d4:	e0fffd03 	ldbu	r3,-12(fp)
   145d8:	00800134 	movhi	r2,4
   145dc:	10b25404 	addi	r2,r2,-14000
   145e0:	18c7883a 	add	r3,r3,r3
   145e4:	18c7883a 	add	r3,r3,r3
   145e8:	10c5883a 	add	r2,r2,r3
   145ec:	10800017 	ldw	r2,0(r2)
   145f0:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   145f4:	e0bff717 	ldw	r2,-36(fp)
   145f8:	1000081e 	bne	r2,zero,1461c <OSTaskNameSet+0x108>
   145fc:	e0bff517 	ldw	r2,-44(fp)
   14600:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14604:	e0bff617 	ldw	r2,-40(fp)
   14608:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1460c:	e0bfff17 	ldw	r2,-4(fp)
   14610:	00c010c4 	movi	r3,67
   14614:	10c00005 	stb	r3,0(r2)
        return;
   14618:	00002606 	br	146b4 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1461c:	e0bff717 	ldw	r2,-36(fp)
   14620:	10800058 	cmpnei	r2,r2,1
   14624:	1000081e 	bne	r2,zero,14648 <OSTaskNameSet+0x134>
   14628:	e0bff517 	ldw	r2,-44(fp)
   1462c:	e0bff815 	stw	r2,-32(fp)
   14630:	e0bff817 	ldw	r2,-32(fp)
   14634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14638:	e0bfff17 	ldw	r2,-4(fp)
   1463c:	00c010c4 	movi	r3,67
   14640:	10c00005 	stb	r3,0(r2)
        return;
   14644:	00001b06 	br	146b4 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   14648:	e13ffe17 	ldw	r4,-8(fp)
   1464c:	000f5f00 	call	f5f0 <OS_StrLen>
   14650:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   14654:	e0bffa03 	ldbu	r2,-24(fp)
   14658:	10800830 	cmpltui	r2,r2,32
   1465c:	1000081e 	bne	r2,zero,14680 <OSTaskNameSet+0x16c>
   14660:	e0bff517 	ldw	r2,-44(fp)
   14664:	e0bff915 	stw	r2,-28(fp)
   14668:	e0bff917 	ldw	r2,-28(fp)
   1466c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   14670:	e0bfff17 	ldw	r2,-4(fp)
   14674:	00c01044 	movi	r3,65
   14678:	10c00005 	stb	r3,0(r2)
        return;
   1467c:	00000d06 	br	146b4 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   14680:	e0bff717 	ldw	r2,-36(fp)
   14684:	10801304 	addi	r2,r2,76
   14688:	e17ffe17 	ldw	r5,-8(fp)
   1468c:	1009883a 	mov	r4,r2
   14690:	000f57c0 	call	f57c <OS_StrCopy>
   14694:	e0bff517 	ldw	r2,-44(fp)
   14698:	e0bffb15 	stw	r2,-20(fp)
   1469c:	e0bffb17 	ldw	r2,-20(fp)
   146a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   146a4:	e0bfff17 	ldw	r2,-4(fp)
   146a8:	10000005 	stb	zero,0(r2)
   146ac:	00000106 	br	146b4 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   146b0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   146b4:	e037883a 	mov	sp,fp
   146b8:	dfc00117 	ldw	ra,4(sp)
   146bc:	df000017 	ldw	fp,0(sp)
   146c0:	dec00204 	addi	sp,sp,8
   146c4:	f800283a 	ret

000146c8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   146c8:	defff404 	addi	sp,sp,-48
   146cc:	dfc00b15 	stw	ra,44(sp)
   146d0:	df000a15 	stw	fp,40(sp)
   146d4:	df000a04 	addi	fp,sp,40
   146d8:	2005883a 	mov	r2,r4
   146dc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   146e0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   146e4:	e0bfff03 	ldbu	r2,-4(fp)
   146e8:	10800530 	cmpltui	r2,r2,20
   146ec:	1000021e 	bne	r2,zero,146f8 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   146f0:	00800a84 	movi	r2,42
   146f4:	00006406 	br	14888 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146f8:	0005303a 	rdctl	r2,status
   146fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14700:	e0fffe17 	ldw	r3,-8(fp)
   14704:	00bfff84 	movi	r2,-2
   14708:	1884703a 	and	r2,r3,r2
   1470c:	1001703a 	wrctl	status,r2
  
  return context;
   14710:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14714:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14718:	e0ffff03 	ldbu	r3,-4(fp)
   1471c:	00800134 	movhi	r2,4
   14720:	10b25404 	addi	r2,r2,-14000
   14724:	18c7883a 	add	r3,r3,r3
   14728:	18c7883a 	add	r3,r3,r3
   1472c:	10c5883a 	add	r2,r2,r3
   14730:	10800017 	ldw	r2,0(r2)
   14734:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   14738:	e0bff817 	ldw	r2,-32(fp)
   1473c:	1000061e 	bne	r2,zero,14758 <OSTaskResume+0x90>
   14740:	e0bff617 	ldw	r2,-40(fp)
   14744:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14748:	e0bff717 	ldw	r2,-36(fp)
   1474c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   14750:	00801184 	movi	r2,70
   14754:	00004c06 	br	14888 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   14758:	e0bff817 	ldw	r2,-32(fp)
   1475c:	10800058 	cmpnei	r2,r2,1
   14760:	1000061e 	bne	r2,zero,1477c <OSTaskResume+0xb4>
   14764:	e0bff617 	ldw	r2,-40(fp)
   14768:	e0bff915 	stw	r2,-28(fp)
   1476c:	e0bff917 	ldw	r2,-28(fp)
   14770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14774:	008010c4 	movi	r2,67
   14778:	00004306 	br	14888 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1477c:	e0bff817 	ldw	r2,-32(fp)
   14780:	10800c03 	ldbu	r2,48(r2)
   14784:	10803fcc 	andi	r2,r2,255
   14788:	1080020c 	andi	r2,r2,8
   1478c:	10003926 	beq	r2,zero,14874 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   14790:	e0bff817 	ldw	r2,-32(fp)
   14794:	10c00c03 	ldbu	r3,48(r2)
   14798:	00bffdc4 	movi	r2,-9
   1479c:	1884703a 	and	r2,r3,r2
   147a0:	1007883a 	mov	r3,r2
   147a4:	e0bff817 	ldw	r2,-32(fp)
   147a8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   147ac:	e0bff817 	ldw	r2,-32(fp)
   147b0:	10800c03 	ldbu	r2,48(r2)
   147b4:	10803fcc 	andi	r2,r2,255
   147b8:	1000281e 	bne	r2,zero,1485c <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   147bc:	e0bff817 	ldw	r2,-32(fp)
   147c0:	10800b8b 	ldhu	r2,46(r2)
   147c4:	10bfffcc 	andi	r2,r2,65535
   147c8:	10001f1e 	bne	r2,zero,14848 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   147cc:	e0bff817 	ldw	r2,-32(fp)
   147d0:	10c00d83 	ldbu	r3,54(r2)
   147d4:	d0a72b03 	ldbu	r2,-25428(gp)
   147d8:	1884b03a 	or	r2,r3,r2
   147dc:	d0a72b05 	stb	r2,-25428(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   147e0:	e0bff817 	ldw	r2,-32(fp)
   147e4:	10800d03 	ldbu	r2,52(r2)
   147e8:	10c03fcc 	andi	r3,r2,255
   147ec:	e0bff817 	ldw	r2,-32(fp)
   147f0:	10800d03 	ldbu	r2,52(r2)
   147f4:	11003fcc 	andi	r4,r2,255
   147f8:	d0a72b44 	addi	r2,gp,-25427
   147fc:	2085883a 	add	r2,r4,r2
   14800:	11000003 	ldbu	r4,0(r2)
   14804:	e0bff817 	ldw	r2,-32(fp)
   14808:	10800d43 	ldbu	r2,53(r2)
   1480c:	2084b03a 	or	r2,r4,r2
   14810:	1009883a 	mov	r4,r2
   14814:	d0a72b44 	addi	r2,gp,-25427
   14818:	1885883a 	add	r2,r3,r2
   1481c:	11000005 	stb	r4,0(r2)
   14820:	e0bff617 	ldw	r2,-40(fp)
   14824:	e0bffa15 	stw	r2,-24(fp)
   14828:	e0bffa17 	ldw	r2,-24(fp)
   1482c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   14830:	d0a71f43 	ldbu	r2,-25475(gp)
   14834:	10803fcc 	andi	r2,r2,255
   14838:	10800058 	cmpnei	r2,r2,1
   1483c:	10000b1e 	bne	r2,zero,1486c <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   14840:	000f4380 	call	f438 <OS_Sched>
   14844:	00000906 	br	1486c <OSTaskResume+0x1a4>
   14848:	e0bff617 	ldw	r2,-40(fp)
   1484c:	e0bffb15 	stw	r2,-20(fp)
   14850:	e0bffb17 	ldw	r2,-20(fp)
   14854:	1001703a 	wrctl	status,r2
   14858:	00000406 	br	1486c <OSTaskResume+0x1a4>
   1485c:	e0bff617 	ldw	r2,-40(fp)
   14860:	e0bffc15 	stw	r2,-16(fp)
   14864:	e0bffc17 	ldw	r2,-16(fp)
   14868:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1486c:	0005883a 	mov	r2,zero
   14870:	00000506 	br	14888 <OSTaskResume+0x1c0>
   14874:	e0bff617 	ldw	r2,-40(fp)
   14878:	e0bffd15 	stw	r2,-12(fp)
   1487c:	e0bffd17 	ldw	r2,-12(fp)
   14880:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   14884:	00801104 	movi	r2,68
}
   14888:	e037883a 	mov	sp,fp
   1488c:	dfc00117 	ldw	ra,4(sp)
   14890:	df000017 	ldw	fp,0(sp)
   14894:	dec00204 	addi	sp,sp,8
   14898:	f800283a 	ret

0001489c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1489c:	defff304 	addi	sp,sp,-52
   148a0:	df000c15 	stw	fp,48(sp)
   148a4:	df000c04 	addi	fp,sp,48
   148a8:	2005883a 	mov	r2,r4
   148ac:	e17fff15 	stw	r5,-4(fp)
   148b0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   148b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   148b8:	e0bffe03 	ldbu	r2,-8(fp)
   148bc:	10800570 	cmpltui	r2,r2,21
   148c0:	1000051e 	bne	r2,zero,148d8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   148c4:	e0bffe03 	ldbu	r2,-8(fp)
   148c8:	10803fe0 	cmpeqi	r2,r2,255
   148cc:	1000021e 	bne	r2,zero,148d8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   148d0:	00800a84 	movi	r2,42
   148d4:	00005d06 	br	14a4c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   148d8:	e0bfff17 	ldw	r2,-4(fp)
   148dc:	1000021e 	bne	r2,zero,148e8 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   148e0:	00800244 	movi	r2,9
   148e4:	00005906 	br	14a4c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   148e8:	e0bfff17 	ldw	r2,-4(fp)
   148ec:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   148f0:	e0bfff17 	ldw	r2,-4(fp)
   148f4:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148f8:	0005303a 	rdctl	r2,status
   148fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14900:	e0fffd17 	ldw	r3,-12(fp)
   14904:	00bfff84 	movi	r2,-2
   14908:	1884703a 	and	r2,r3,r2
   1490c:	1001703a 	wrctl	status,r2
  
  return context;
   14910:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   14914:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14918:	e0bffe03 	ldbu	r2,-8(fp)
   1491c:	10803fd8 	cmpnei	r2,r2,255
   14920:	1000031e 	bne	r2,zero,14930 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14924:	d0a72e17 	ldw	r2,-25416(gp)
   14928:	10800c83 	ldbu	r2,50(r2)
   1492c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14930:	e0fffe03 	ldbu	r3,-8(fp)
   14934:	00800134 	movhi	r2,4
   14938:	10b25404 	addi	r2,r2,-14000
   1493c:	18c7883a 	add	r3,r3,r3
   14940:	18c7883a 	add	r3,r3,r3
   14944:	10c5883a 	add	r2,r2,r3
   14948:	10800017 	ldw	r2,0(r2)
   1494c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14950:	e0bff817 	ldw	r2,-32(fp)
   14954:	1000061e 	bne	r2,zero,14970 <OSTaskStkChk+0xd4>
   14958:	e0bff617 	ldw	r2,-40(fp)
   1495c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14960:	e0bff717 	ldw	r2,-36(fp)
   14964:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14968:	008010c4 	movi	r2,67
   1496c:	00003706 	br	14a4c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14970:	e0bff817 	ldw	r2,-32(fp)
   14974:	10800058 	cmpnei	r2,r2,1
   14978:	1000061e 	bne	r2,zero,14994 <OSTaskStkChk+0xf8>
   1497c:	e0bff617 	ldw	r2,-40(fp)
   14980:	e0bff915 	stw	r2,-28(fp)
   14984:	e0bff917 	ldw	r2,-28(fp)
   14988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1498c:	008010c4 	movi	r2,67
   14990:	00002e06 	br	14a4c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   14994:	e0bff817 	ldw	r2,-32(fp)
   14998:	1080040b 	ldhu	r2,16(r2)
   1499c:	10bfffcc 	andi	r2,r2,65535
   149a0:	1080004c 	andi	r2,r2,1
   149a4:	1000061e 	bne	r2,zero,149c0 <OSTaskStkChk+0x124>
   149a8:	e0bff617 	ldw	r2,-40(fp)
   149ac:	e0bffa15 	stw	r2,-24(fp)
   149b0:	e0bffa17 	ldw	r2,-24(fp)
   149b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   149b8:	00801144 	movi	r2,69
   149bc:	00002306 	br	14a4c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   149c0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   149c4:	e0bff817 	ldw	r2,-32(fp)
   149c8:	10800317 	ldw	r2,12(r2)
   149cc:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   149d0:	e0bff817 	ldw	r2,-32(fp)
   149d4:	10800217 	ldw	r2,8(r2)
   149d8:	e0bff415 	stw	r2,-48(fp)
   149dc:	e0bff617 	ldw	r2,-40(fp)
   149e0:	e0bffb15 	stw	r2,-20(fp)
   149e4:	e0bffb17 	ldw	r2,-20(fp)
   149e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   149ec:	00000306 	br	149fc <OSTaskStkChk+0x160>
        nfree++;
   149f0:	e0bff517 	ldw	r2,-44(fp)
   149f4:	10800044 	addi	r2,r2,1
   149f8:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   149fc:	e0bff417 	ldw	r2,-48(fp)
   14a00:	10c00104 	addi	r3,r2,4
   14a04:	e0fff415 	stw	r3,-48(fp)
   14a08:	10800017 	ldw	r2,0(r2)
   14a0c:	103ff826 	beq	r2,zero,149f0 <OSTaskStkChk+0x154>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   14a10:	e0bff517 	ldw	r2,-44(fp)
   14a14:	1085883a 	add	r2,r2,r2
   14a18:	1085883a 	add	r2,r2,r2
   14a1c:	1007883a 	mov	r3,r2
   14a20:	e0bfff17 	ldw	r2,-4(fp)
   14a24:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   14a28:	e0fffc17 	ldw	r3,-16(fp)
   14a2c:	e0bff517 	ldw	r2,-44(fp)
   14a30:	1885c83a 	sub	r2,r3,r2
   14a34:	1085883a 	add	r2,r2,r2
   14a38:	1085883a 	add	r2,r2,r2
   14a3c:	1007883a 	mov	r3,r2
   14a40:	e0bfff17 	ldw	r2,-4(fp)
   14a44:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   14a48:	0005883a 	mov	r2,zero
}
   14a4c:	e037883a 	mov	sp,fp
   14a50:	df000017 	ldw	fp,0(sp)
   14a54:	dec00104 	addi	sp,sp,4
   14a58:	f800283a 	ret

00014a5c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   14a5c:	defff504 	addi	sp,sp,-44
   14a60:	dfc00a15 	stw	ra,40(sp)
   14a64:	df000915 	stw	fp,36(sp)
   14a68:	df000904 	addi	fp,sp,36
   14a6c:	2005883a 	mov	r2,r4
   14a70:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a74:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   14a78:	e0bfff03 	ldbu	r2,-4(fp)
   14a7c:	10800518 	cmpnei	r2,r2,20
   14a80:	1000021e 	bne	r2,zero,14a8c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   14a84:	008011c4 	movi	r2,71
   14a88:	00006806 	br	14c2c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14a8c:	e0bfff03 	ldbu	r2,-4(fp)
   14a90:	10800530 	cmpltui	r2,r2,20
   14a94:	1000051e 	bne	r2,zero,14aac <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   14a98:	e0bfff03 	ldbu	r2,-4(fp)
   14a9c:	10803fe0 	cmpeqi	r2,r2,255
   14aa0:	1000021e 	bne	r2,zero,14aac <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   14aa4:	00800a84 	movi	r2,42
   14aa8:	00006006 	br	14c2c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14aac:	0005303a 	rdctl	r2,status
   14ab0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ab4:	e0fffe17 	ldw	r3,-8(fp)
   14ab8:	00bfff84 	movi	r2,-2
   14abc:	1884703a 	and	r2,r3,r2
   14ac0:	1001703a 	wrctl	status,r2
  
  return context;
   14ac4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   14ac8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   14acc:	e0bfff03 	ldbu	r2,-4(fp)
   14ad0:	10803fd8 	cmpnei	r2,r2,255
   14ad4:	1000061e 	bne	r2,zero,14af0 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14ad8:	d0a72e17 	ldw	r2,-25416(gp)
   14adc:	10800c83 	ldbu	r2,50(r2)
   14ae0:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   14ae4:	00800044 	movi	r2,1
   14ae8:	e0bff705 	stb	r2,-36(fp)
   14aec:	00000906 	br	14b14 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   14af0:	d0a72e17 	ldw	r2,-25416(gp)
   14af4:	10800c83 	ldbu	r2,50(r2)
   14af8:	10c03fcc 	andi	r3,r2,255
   14afc:	e0bfff03 	ldbu	r2,-4(fp)
   14b00:	1880031e 	bne	r3,r2,14b10 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   14b04:	00800044 	movi	r2,1
   14b08:	e0bff705 	stb	r2,-36(fp)
   14b0c:	00000106 	br	14b14 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   14b10:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14b14:	e0ffff03 	ldbu	r3,-4(fp)
   14b18:	00800134 	movhi	r2,4
   14b1c:	10b25404 	addi	r2,r2,-14000
   14b20:	18c7883a 	add	r3,r3,r3
   14b24:	18c7883a 	add	r3,r3,r3
   14b28:	10c5883a 	add	r2,r2,r3
   14b2c:	10800017 	ldw	r2,0(r2)
   14b30:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   14b34:	e0bffa17 	ldw	r2,-24(fp)
   14b38:	1000061e 	bne	r2,zero,14b54 <OSTaskSuspend+0xf8>
   14b3c:	e0bff817 	ldw	r2,-32(fp)
   14b40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b44:	e0bff917 	ldw	r2,-28(fp)
   14b48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   14b4c:	00801204 	movi	r2,72
   14b50:	00003606 	br	14c2c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   14b54:	e0bffa17 	ldw	r2,-24(fp)
   14b58:	10800058 	cmpnei	r2,r2,1
   14b5c:	1000061e 	bne	r2,zero,14b78 <OSTaskSuspend+0x11c>
   14b60:	e0bff817 	ldw	r2,-32(fp)
   14b64:	e0bffb15 	stw	r2,-20(fp)
   14b68:	e0bffb17 	ldw	r2,-20(fp)
   14b6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14b70:	008010c4 	movi	r2,67
   14b74:	00002d06 	br	14c2c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   14b78:	e0bffa17 	ldw	r2,-24(fp)
   14b7c:	10800d03 	ldbu	r2,52(r2)
   14b80:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   14b84:	e0fffd03 	ldbu	r3,-12(fp)
   14b88:	e13ffd03 	ldbu	r4,-12(fp)
   14b8c:	d0a72b44 	addi	r2,gp,-25427
   14b90:	2085883a 	add	r2,r4,r2
   14b94:	10800003 	ldbu	r2,0(r2)
   14b98:	1009883a 	mov	r4,r2
   14b9c:	e0bffa17 	ldw	r2,-24(fp)
   14ba0:	10800d43 	ldbu	r2,53(r2)
   14ba4:	0084303a 	nor	r2,zero,r2
   14ba8:	2084703a 	and	r2,r4,r2
   14bac:	1009883a 	mov	r4,r2
   14bb0:	d0a72b44 	addi	r2,gp,-25427
   14bb4:	1885883a 	add	r2,r3,r2
   14bb8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14bbc:	e0fffd03 	ldbu	r3,-12(fp)
   14bc0:	d0a72b44 	addi	r2,gp,-25427
   14bc4:	1885883a 	add	r2,r3,r2
   14bc8:	10800003 	ldbu	r2,0(r2)
   14bcc:	10803fcc 	andi	r2,r2,255
   14bd0:	1000071e 	bne	r2,zero,14bf0 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   14bd4:	e0bffa17 	ldw	r2,-24(fp)
   14bd8:	10800d83 	ldbu	r2,54(r2)
   14bdc:	0084303a 	nor	r2,zero,r2
   14be0:	1007883a 	mov	r3,r2
   14be4:	d0a72b03 	ldbu	r2,-25428(gp)
   14be8:	1884703a 	and	r2,r3,r2
   14bec:	d0a72b05 	stb	r2,-25428(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   14bf0:	e0bffa17 	ldw	r2,-24(fp)
   14bf4:	10800c03 	ldbu	r2,48(r2)
   14bf8:	10800214 	ori	r2,r2,8
   14bfc:	1007883a 	mov	r3,r2
   14c00:	e0bffa17 	ldw	r2,-24(fp)
   14c04:	10c00c05 	stb	r3,48(r2)
   14c08:	e0bff817 	ldw	r2,-32(fp)
   14c0c:	e0bffc15 	stw	r2,-16(fp)
   14c10:	e0bffc17 	ldw	r2,-16(fp)
   14c14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   14c18:	e0bff703 	ldbu	r2,-36(fp)
   14c1c:	10800058 	cmpnei	r2,r2,1
   14c20:	1000011e 	bne	r2,zero,14c28 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   14c24:	000f4380 	call	f438 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14c28:	0005883a 	mov	r2,zero
}
   14c2c:	e037883a 	mov	sp,fp
   14c30:	dfc00117 	ldw	ra,4(sp)
   14c34:	df000017 	ldw	fp,0(sp)
   14c38:	dec00204 	addi	sp,sp,8
   14c3c:	f800283a 	ret

00014c40 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   14c40:	defff604 	addi	sp,sp,-40
   14c44:	dfc00915 	stw	ra,36(sp)
   14c48:	df000815 	stw	fp,32(sp)
   14c4c:	df000804 	addi	fp,sp,32
   14c50:	2005883a 	mov	r2,r4
   14c54:	e17fff15 	stw	r5,-4(fp)
   14c58:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14c5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   14c60:	e0bffe03 	ldbu	r2,-8(fp)
   14c64:	10800570 	cmpltui	r2,r2,21
   14c68:	1000051e 	bne	r2,zero,14c80 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   14c6c:	e0bffe03 	ldbu	r2,-8(fp)
   14c70:	10803fe0 	cmpeqi	r2,r2,255
   14c74:	1000021e 	bne	r2,zero,14c80 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   14c78:	00800a84 	movi	r2,42
   14c7c:	00003406 	br	14d50 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   14c80:	e0bfff17 	ldw	r2,-4(fp)
   14c84:	1000021e 	bne	r2,zero,14c90 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   14c88:	00800244 	movi	r2,9
   14c8c:	00003006 	br	14d50 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c90:	0005303a 	rdctl	r2,status
   14c94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c98:	e0fffd17 	ldw	r3,-12(fp)
   14c9c:	00bfff84 	movi	r2,-2
   14ca0:	1884703a 	and	r2,r3,r2
   14ca4:	1001703a 	wrctl	status,r2
  
  return context;
   14ca8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14cac:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   14cb0:	e0bffe03 	ldbu	r2,-8(fp)
   14cb4:	10803fd8 	cmpnei	r2,r2,255
   14cb8:	1000031e 	bne	r2,zero,14cc8 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   14cbc:	d0a72e17 	ldw	r2,-25416(gp)
   14cc0:	10800c83 	ldbu	r2,50(r2)
   14cc4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14cc8:	e0fffe03 	ldbu	r3,-8(fp)
   14ccc:	00800134 	movhi	r2,4
   14cd0:	10b25404 	addi	r2,r2,-14000
   14cd4:	18c7883a 	add	r3,r3,r3
   14cd8:	18c7883a 	add	r3,r3,r3
   14cdc:	10c5883a 	add	r2,r2,r3
   14ce0:	10800017 	ldw	r2,0(r2)
   14ce4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   14ce8:	e0bffa17 	ldw	r2,-24(fp)
   14cec:	1000061e 	bne	r2,zero,14d08 <OSTaskQuery+0xc8>
   14cf0:	e0bff817 	ldw	r2,-32(fp)
   14cf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cf8:	e0bff917 	ldw	r2,-28(fp)
   14cfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   14d00:	00800a44 	movi	r2,41
   14d04:	00001206 	br	14d50 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   14d08:	e0bffa17 	ldw	r2,-24(fp)
   14d0c:	10800058 	cmpnei	r2,r2,1
   14d10:	1000061e 	bne	r2,zero,14d2c <OSTaskQuery+0xec>
   14d14:	e0bff817 	ldw	r2,-32(fp)
   14d18:	e0bffb15 	stw	r2,-20(fp)
   14d1c:	e0bffb17 	ldw	r2,-20(fp)
   14d20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14d24:	008010c4 	movi	r2,67
   14d28:	00000906 	br	14d50 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   14d2c:	01801b04 	movi	r6,108
   14d30:	e17ffa17 	ldw	r5,-24(fp)
   14d34:	e13fff17 	ldw	r4,-4(fp)
   14d38:	000f3d00 	call	f3d0 <OS_MemCopy>
   14d3c:	e0bff817 	ldw	r2,-32(fp)
   14d40:	e0bffc15 	stw	r2,-16(fp)
   14d44:	e0bffc17 	ldw	r2,-16(fp)
   14d48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14d4c:	0005883a 	mov	r2,zero
}
   14d50:	e037883a 	mov	sp,fp
   14d54:	dfc00117 	ldw	ra,4(sp)
   14d58:	df000017 	ldw	fp,0(sp)
   14d5c:	dec00204 	addi	sp,sp,8
   14d60:	f800283a 	ret

00014d64 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   14d64:	defffc04 	addi	sp,sp,-16
   14d68:	df000315 	stw	fp,12(sp)
   14d6c:	df000304 	addi	fp,sp,12
   14d70:	e13ffd15 	stw	r4,-12(fp)
   14d74:	e17ffe15 	stw	r5,-8(fp)
   14d78:	3005883a 	mov	r2,r6
   14d7c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   14d80:	e0bfff0b 	ldhu	r2,-4(fp)
   14d84:	1080004c 	andi	r2,r2,1
   14d88:	10000d26 	beq	r2,zero,14dc0 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   14d8c:	e0bfff0b 	ldhu	r2,-4(fp)
   14d90:	1080008c 	andi	r2,r2,2
   14d94:	10000a26 	beq	r2,zero,14dc0 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14d98:	00000706 	br	14db8 <OS_TaskStkClr+0x54>
                size--;
   14d9c:	e0bffe17 	ldw	r2,-8(fp)
   14da0:	10bfffc4 	addi	r2,r2,-1
   14da4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   14da8:	e0bffd17 	ldw	r2,-12(fp)
   14dac:	10c00104 	addi	r3,r2,4
   14db0:	e0fffd15 	stw	r3,-12(fp)
   14db4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14db8:	e0bffe17 	ldw	r2,-8(fp)
   14dbc:	103ff71e 	bne	r2,zero,14d9c <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   14dc0:	0001883a 	nop
   14dc4:	e037883a 	mov	sp,fp
   14dc8:	df000017 	ldw	fp,0(sp)
   14dcc:	dec00104 	addi	sp,sp,4
   14dd0:	f800283a 	ret

00014dd4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   14dd4:	defff904 	addi	sp,sp,-28
   14dd8:	dfc00615 	stw	ra,24(sp)
   14ddc:	df000515 	stw	fp,20(sp)
   14de0:	df000504 	addi	fp,sp,20
   14de4:	2005883a 	mov	r2,r4
   14de8:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14dec:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14df0:	d0a72d03 	ldbu	r2,-25420(gp)
   14df4:	10803fcc 	andi	r2,r2,255
   14df8:	1000311e 	bne	r2,zero,14ec0 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   14dfc:	e0bfff0b 	ldhu	r2,-4(fp)
   14e00:	10003026 	beq	r2,zero,14ec4 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e04:	0005303a 	rdctl	r2,status
   14e08:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e0c:	e0fffe17 	ldw	r3,-8(fp)
   14e10:	00bfff84 	movi	r2,-2
   14e14:	1884703a 	and	r2,r3,r2
   14e18:	1001703a 	wrctl	status,r2
  
  return context;
   14e1c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   14e20:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   14e24:	d0a72e17 	ldw	r2,-25416(gp)
   14e28:	10800d03 	ldbu	r2,52(r2)
   14e2c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   14e30:	e0fffd03 	ldbu	r3,-12(fp)
   14e34:	e13ffd03 	ldbu	r4,-12(fp)
   14e38:	d0a72b44 	addi	r2,gp,-25427
   14e3c:	2085883a 	add	r2,r4,r2
   14e40:	10800003 	ldbu	r2,0(r2)
   14e44:	1009883a 	mov	r4,r2
   14e48:	d0a72e17 	ldw	r2,-25416(gp)
   14e4c:	10800d43 	ldbu	r2,53(r2)
   14e50:	0084303a 	nor	r2,zero,r2
   14e54:	2084703a 	and	r2,r4,r2
   14e58:	1009883a 	mov	r4,r2
   14e5c:	d0a72b44 	addi	r2,gp,-25427
   14e60:	1885883a 	add	r2,r3,r2
   14e64:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   14e68:	e0fffd03 	ldbu	r3,-12(fp)
   14e6c:	d0a72b44 	addi	r2,gp,-25427
   14e70:	1885883a 	add	r2,r3,r2
   14e74:	10800003 	ldbu	r2,0(r2)
   14e78:	10803fcc 	andi	r2,r2,255
   14e7c:	1000071e 	bne	r2,zero,14e9c <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14e80:	d0a72e17 	ldw	r2,-25416(gp)
   14e84:	10800d83 	ldbu	r2,54(r2)
   14e88:	0084303a 	nor	r2,zero,r2
   14e8c:	1007883a 	mov	r3,r2
   14e90:	d0a72b03 	ldbu	r2,-25428(gp)
   14e94:	1884703a 	and	r2,r3,r2
   14e98:	d0a72b05 	stb	r2,-25428(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   14e9c:	d0a72e17 	ldw	r2,-25416(gp)
   14ea0:	e0ffff0b 	ldhu	r3,-4(fp)
   14ea4:	10c00b8d 	sth	r3,46(r2)
   14ea8:	e0bffb17 	ldw	r2,-20(fp)
   14eac:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14eb0:	e0bffc17 	ldw	r2,-16(fp)
   14eb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   14eb8:	000f4380 	call	f438 <OS_Sched>
   14ebc:	00000106 	br	14ec4 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   14ec0:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   14ec4:	e037883a 	mov	sp,fp
   14ec8:	dfc00117 	ldw	ra,4(sp)
   14ecc:	df000017 	ldw	fp,0(sp)
   14ed0:	dec00204 	addi	sp,sp,8
   14ed4:	f800283a 	ret

00014ed8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   14ed8:	defff704 	addi	sp,sp,-36
   14edc:	dfc00815 	stw	ra,32(sp)
   14ee0:	df000715 	stw	fp,28(sp)
   14ee4:	dc000615 	stw	r16,24(sp)
   14ee8:	df000704 	addi	fp,sp,28
   14eec:	2011883a 	mov	r8,r4
   14ef0:	2809883a 	mov	r4,r5
   14ef4:	3007883a 	mov	r3,r6
   14ef8:	3805883a 	mov	r2,r7
   14efc:	e23ffb05 	stb	r8,-20(fp)
   14f00:	e13ffc05 	stb	r4,-16(fp)
   14f04:	e0fffd05 	stb	r3,-12(fp)
   14f08:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14f0c:	d0a72d03 	ldbu	r2,-25420(gp)
   14f10:	10803fcc 	andi	r2,r2,255
   14f14:	10000226 	beq	r2,zero,14f20 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   14f18:	00801544 	movi	r2,85
   14f1c:	00003d06 	br	15014 <OSTimeDlyHMSM+0x13c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   14f20:	e0bffb03 	ldbu	r2,-20(fp)
   14f24:	1000081e 	bne	r2,zero,14f48 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   14f28:	e0bffc03 	ldbu	r2,-16(fp)
   14f2c:	1000061e 	bne	r2,zero,14f48 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   14f30:	e0bffd03 	ldbu	r2,-12(fp)
   14f34:	1000041e 	bne	r2,zero,14f48 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   14f38:	e0bffe0b 	ldhu	r2,-8(fp)
   14f3c:	1000021e 	bne	r2,zero,14f48 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   14f40:	00801504 	movi	r2,84
   14f44:	00003306 	br	15014 <OSTimeDlyHMSM+0x13c>
                }
            }
        }
    }
    if (minutes > 59) {
   14f48:	e0bffc03 	ldbu	r2,-16(fp)
   14f4c:	10800f30 	cmpltui	r2,r2,60
   14f50:	1000021e 	bne	r2,zero,14f5c <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   14f54:	00801444 	movi	r2,81
   14f58:	00002e06 	br	15014 <OSTimeDlyHMSM+0x13c>
    }
    if (seconds > 59) {
   14f5c:	e0bffd03 	ldbu	r2,-12(fp)
   14f60:	10800f30 	cmpltui	r2,r2,60
   14f64:	1000021e 	bne	r2,zero,14f70 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   14f68:	00801484 	movi	r2,82
   14f6c:	00002906 	br	15014 <OSTimeDlyHMSM+0x13c>
    }
    if (ms > 999) {
   14f70:	e0bffe0b 	ldhu	r2,-8(fp)
   14f74:	1080fa30 	cmpltui	r2,r2,1000
   14f78:	1000021e 	bne	r2,zero,14f84 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   14f7c:	008014c4 	movi	r2,83
   14f80:	00002406 	br	15014 <OSTimeDlyHMSM+0x13c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   14f84:	e0bffb03 	ldbu	r2,-20(fp)
   14f88:	10c38424 	muli	r3,r2,3600
   14f8c:	e0bffc03 	ldbu	r2,-16(fp)
   14f90:	10800f24 	muli	r2,r2,60
   14f94:	1887883a 	add	r3,r3,r2
   14f98:	e0bffd03 	ldbu	r2,-12(fp)
   14f9c:	1885883a 	add	r2,r3,r2
   14fa0:	1409c424 	muli	r16,r2,10000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   14fa4:	e0bffe0b 	ldhu	r2,-8(fp)
   14fa8:	1089c424 	muli	r2,r2,10000
   14fac:	0140fa04 	movi	r5,1000
   14fb0:	1009883a 	mov	r4,r2
   14fb4:	00006840 	call	684 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   14fb8:	8085883a 	add	r2,r16,r2
   14fbc:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   14fc0:	e0bffa17 	ldw	r2,-24(fp)
   14fc4:	1004d43a 	srli	r2,r2,16
   14fc8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   14fcc:	e0bffa17 	ldw	r2,-24(fp)
   14fd0:	10bfffcc 	andi	r2,r2,65535
   14fd4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   14fd8:	e0bffa17 	ldw	r2,-24(fp)
   14fdc:	10bfffcc 	andi	r2,r2,65535
   14fe0:	1009883a 	mov	r4,r2
   14fe4:	0014dd40 	call	14dd4 <OSTimeDly>
    while (loops > 0) {
   14fe8:	00000706 	br	15008 <OSTimeDlyHMSM+0x130>
        OSTimeDly((INT16U)32768u);
   14fec:	01200014 	movui	r4,32768
   14ff0:	0014dd40 	call	14dd4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   14ff4:	01200014 	movui	r4,32768
   14ff8:	0014dd40 	call	14dd4 <OSTimeDly>
        loops--;
   14ffc:	e0bff90b 	ldhu	r2,-28(fp)
   15000:	10bfffc4 	addi	r2,r2,-1
   15004:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15008:	e0bff90b 	ldhu	r2,-28(fp)
   1500c:	103ff71e 	bne	r2,zero,14fec <OSTimeDlyHMSM+0x114>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   15010:	0005883a 	mov	r2,zero
}
   15014:	e6ffff04 	addi	sp,fp,-4
   15018:	dfc00217 	ldw	ra,8(sp)
   1501c:	df000117 	ldw	fp,4(sp)
   15020:	dc000017 	ldw	r16,0(sp)
   15024:	dec00304 	addi	sp,sp,12
   15028:	f800283a 	ret

0001502c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1502c:	defff504 	addi	sp,sp,-44
   15030:	dfc00a15 	stw	ra,40(sp)
   15034:	df000915 	stw	fp,36(sp)
   15038:	df000904 	addi	fp,sp,36
   1503c:	2005883a 	mov	r2,r4
   15040:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15044:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15048:	e0bfff03 	ldbu	r2,-4(fp)
   1504c:	10800530 	cmpltui	r2,r2,20
   15050:	1000021e 	bne	r2,zero,1505c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15054:	00800a84 	movi	r2,42
   15058:	00006406 	br	151ec <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1505c:	0005303a 	rdctl	r2,status
   15060:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15064:	e0fffe17 	ldw	r3,-8(fp)
   15068:	00bfff84 	movi	r2,-2
   1506c:	1884703a 	and	r2,r3,r2
   15070:	1001703a 	wrctl	status,r2
  
  return context;
   15074:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15078:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1507c:	e0ffff03 	ldbu	r3,-4(fp)
   15080:	00800134 	movhi	r2,4
   15084:	10b25404 	addi	r2,r2,-14000
   15088:	18c7883a 	add	r3,r3,r3
   1508c:	18c7883a 	add	r3,r3,r3
   15090:	10c5883a 	add	r2,r2,r3
   15094:	10800017 	ldw	r2,0(r2)
   15098:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1509c:	e0bff917 	ldw	r2,-28(fp)
   150a0:	1000061e 	bne	r2,zero,150bc <OSTimeDlyResume+0x90>
   150a4:	e0bff717 	ldw	r2,-36(fp)
   150a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   150ac:	e0bff817 	ldw	r2,-32(fp)
   150b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   150b4:	008010c4 	movi	r2,67
   150b8:	00004c06 	br	151ec <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   150bc:	e0bff917 	ldw	r2,-28(fp)
   150c0:	10800058 	cmpnei	r2,r2,1
   150c4:	1000061e 	bne	r2,zero,150e0 <OSTimeDlyResume+0xb4>
   150c8:	e0bff717 	ldw	r2,-36(fp)
   150cc:	e0bffa15 	stw	r2,-24(fp)
   150d0:	e0bffa17 	ldw	r2,-24(fp)
   150d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   150d8:	008010c4 	movi	r2,67
   150dc:	00004306 	br	151ec <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   150e0:	e0bff917 	ldw	r2,-28(fp)
   150e4:	10800b8b 	ldhu	r2,46(r2)
   150e8:	10bfffcc 	andi	r2,r2,65535
   150ec:	1000061e 	bne	r2,zero,15108 <OSTimeDlyResume+0xdc>
   150f0:	e0bff717 	ldw	r2,-36(fp)
   150f4:	e0bffb15 	stw	r2,-20(fp)
   150f8:	e0bffb17 	ldw	r2,-20(fp)
   150fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   15100:	00801404 	movi	r2,80
   15104:	00003906 	br	151ec <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15108:	e0bff917 	ldw	r2,-28(fp)
   1510c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15110:	e0bff917 	ldw	r2,-28(fp)
   15114:	10800c03 	ldbu	r2,48(r2)
   15118:	10803fcc 	andi	r2,r2,255
   1511c:	10800dcc 	andi	r2,r2,55
   15120:	10000b26 	beq	r2,zero,15150 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15124:	e0bff917 	ldw	r2,-28(fp)
   15128:	10c00c03 	ldbu	r3,48(r2)
   1512c:	00bff204 	movi	r2,-56
   15130:	1884703a 	and	r2,r3,r2
   15134:	1007883a 	mov	r3,r2
   15138:	e0bff917 	ldw	r2,-28(fp)
   1513c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   15140:	e0bff917 	ldw	r2,-28(fp)
   15144:	00c00044 	movi	r3,1
   15148:	10c00c45 	stb	r3,49(r2)
   1514c:	00000206 	br	15158 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15150:	e0bff917 	ldw	r2,-28(fp)
   15154:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15158:	e0bff917 	ldw	r2,-28(fp)
   1515c:	10800c03 	ldbu	r2,48(r2)
   15160:	10803fcc 	andi	r2,r2,255
   15164:	1080020c 	andi	r2,r2,8
   15168:	10001b1e 	bne	r2,zero,151d8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1516c:	e0bff917 	ldw	r2,-28(fp)
   15170:	10c00d83 	ldbu	r3,54(r2)
   15174:	d0a72b03 	ldbu	r2,-25428(gp)
   15178:	1884b03a 	or	r2,r3,r2
   1517c:	d0a72b05 	stb	r2,-25428(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15180:	e0bff917 	ldw	r2,-28(fp)
   15184:	10800d03 	ldbu	r2,52(r2)
   15188:	10c03fcc 	andi	r3,r2,255
   1518c:	e0bff917 	ldw	r2,-28(fp)
   15190:	10800d03 	ldbu	r2,52(r2)
   15194:	11003fcc 	andi	r4,r2,255
   15198:	d0a72b44 	addi	r2,gp,-25427
   1519c:	2085883a 	add	r2,r4,r2
   151a0:	11000003 	ldbu	r4,0(r2)
   151a4:	e0bff917 	ldw	r2,-28(fp)
   151a8:	10800d43 	ldbu	r2,53(r2)
   151ac:	2084b03a 	or	r2,r4,r2
   151b0:	1009883a 	mov	r4,r2
   151b4:	d0a72b44 	addi	r2,gp,-25427
   151b8:	1885883a 	add	r2,r3,r2
   151bc:	11000005 	stb	r4,0(r2)
   151c0:	e0bff717 	ldw	r2,-36(fp)
   151c4:	e0bffc15 	stw	r2,-16(fp)
   151c8:	e0bffc17 	ldw	r2,-16(fp)
   151cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   151d0:	000f4380 	call	f438 <OS_Sched>
   151d4:	00000406 	br	151e8 <OSTimeDlyResume+0x1bc>
   151d8:	e0bff717 	ldw	r2,-36(fp)
   151dc:	e0bffd15 	stw	r2,-12(fp)
   151e0:	e0bffd17 	ldw	r2,-12(fp)
   151e4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   151e8:	0005883a 	mov	r2,zero
}
   151ec:	e037883a 	mov	sp,fp
   151f0:	dfc00117 	ldw	ra,4(sp)
   151f4:	df000017 	ldw	fp,0(sp)
   151f8:	dec00204 	addi	sp,sp,8
   151fc:	f800283a 	ret

00015200 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15200:	defffb04 	addi	sp,sp,-20
   15204:	df000415 	stw	fp,16(sp)
   15208:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1520c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15210:	0005303a 	rdctl	r2,status
   15214:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15218:	e0fffe17 	ldw	r3,-8(fp)
   1521c:	00bfff84 	movi	r2,-2
   15220:	1884703a 	and	r2,r3,r2
   15224:	1001703a 	wrctl	status,r2
  
  return context;
   15228:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1522c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   15230:	d0a72f17 	ldw	r2,-25412(gp)
   15234:	e0bffd15 	stw	r2,-12(fp)
   15238:	e0bffc17 	ldw	r2,-16(fp)
   1523c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15240:	e0bfff17 	ldw	r2,-4(fp)
   15244:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   15248:	e0bffd17 	ldw	r2,-12(fp)
}
   1524c:	e037883a 	mov	sp,fp
   15250:	df000017 	ldw	fp,0(sp)
   15254:	dec00104 	addi	sp,sp,4
   15258:	f800283a 	ret

0001525c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1525c:	defffb04 	addi	sp,sp,-20
   15260:	df000415 	stw	fp,16(sp)
   15264:	df000404 	addi	fp,sp,16
   15268:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1526c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15270:	0005303a 	rdctl	r2,status
   15274:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15278:	e0fffd17 	ldw	r3,-12(fp)
   1527c:	00bfff84 	movi	r2,-2
   15280:	1884703a 	and	r2,r3,r2
   15284:	1001703a 	wrctl	status,r2
  
  return context;
   15288:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1528c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15290:	e0bfff17 	ldw	r2,-4(fp)
   15294:	d0a72f15 	stw	r2,-25412(gp)
   15298:	e0bffc17 	ldw	r2,-16(fp)
   1529c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152a0:	e0bffe17 	ldw	r2,-8(fp)
   152a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   152a8:	0001883a 	nop
   152ac:	e037883a 	mov	sp,fp
   152b0:	df000017 	ldw	fp,0(sp)
   152b4:	dec00104 	addi	sp,sp,4
   152b8:	f800283a 	ret

000152bc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   152bc:	defffd04 	addi	sp,sp,-12
   152c0:	dfc00215 	stw	ra,8(sp)
   152c4:	df000115 	stw	fp,4(sp)
   152c8:	df000104 	addi	fp,sp,4
   152cc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   152d0:	d1600904 	addi	r5,gp,-32732
   152d4:	e13fff17 	ldw	r4,-4(fp)
   152d8:	00162500 	call	16250 <alt_dev_llist_insert>
}
   152dc:	e037883a 	mov	sp,fp
   152e0:	dfc00117 	ldw	ra,4(sp)
   152e4:	df000017 	ldw	fp,0(sp)
   152e8:	dec00204 	addi	sp,sp,8
   152ec:	f800283a 	ret

000152f0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   152f0:	defffd04 	addi	sp,sp,-12
   152f4:	dfc00215 	stw	ra,8(sp)
   152f8:	df000115 	stw	fp,4(sp)
   152fc:	df000104 	addi	fp,sp,4
   15300:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   15304:	0016bc00 	call	16bc0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15308:	00800044 	movi	r2,1
   1530c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   15310:	0001883a 	nop
   15314:	e037883a 	mov	sp,fp
   15318:	dfc00117 	ldw	ra,4(sp)
   1531c:	df000017 	ldw	fp,0(sp)
   15320:	dec00204 	addi	sp,sp,8
   15324:	f800283a 	ret

00015328 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   15328:	defffe04 	addi	sp,sp,-8
   1532c:	dfc00115 	stw	ra,4(sp)
   15330:	df000015 	stw	fp,0(sp)
   15334:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   15338:	01800144 	movi	r6,5
   1533c:	000b883a 	mov	r5,zero
   15340:	010000f4 	movhi	r4,3
   15344:	21168e04 	addi	r4,r4,23096
   15348:	00154d80 	call	154d8 <altera_avalon_jtag_uart_init>
   1534c:	010000f4 	movhi	r4,3
   15350:	21168404 	addi	r4,r4,23056
   15354:	00152bc0 	call	152bc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   15358:	0001883a 	nop
}
   1535c:	0001883a 	nop
   15360:	e037883a 	mov	sp,fp
   15364:	dfc00117 	ldw	ra,4(sp)
   15368:	df000017 	ldw	fp,0(sp)
   1536c:	dec00204 	addi	sp,sp,8
   15370:	f800283a 	ret

00015374 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15374:	defffa04 	addi	sp,sp,-24
   15378:	dfc00515 	stw	ra,20(sp)
   1537c:	df000415 	stw	fp,16(sp)
   15380:	df000404 	addi	fp,sp,16
   15384:	e13ffd15 	stw	r4,-12(fp)
   15388:	e17ffe15 	stw	r5,-8(fp)
   1538c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15390:	e0bffd17 	ldw	r2,-12(fp)
   15394:	10800017 	ldw	r2,0(r2)
   15398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1539c:	e0bffc17 	ldw	r2,-16(fp)
   153a0:	10c00a04 	addi	r3,r2,40
   153a4:	e0bffd17 	ldw	r2,-12(fp)
   153a8:	10800217 	ldw	r2,8(r2)
   153ac:	100f883a 	mov	r7,r2
   153b0:	e1bfff17 	ldw	r6,-4(fp)
   153b4:	e17ffe17 	ldw	r5,-8(fp)
   153b8:	1809883a 	mov	r4,r3
   153bc:	0015b200 	call	15b20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   153c0:	e037883a 	mov	sp,fp
   153c4:	dfc00117 	ldw	ra,4(sp)
   153c8:	df000017 	ldw	fp,0(sp)
   153cc:	dec00204 	addi	sp,sp,8
   153d0:	f800283a 	ret

000153d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   153d4:	defffa04 	addi	sp,sp,-24
   153d8:	dfc00515 	stw	ra,20(sp)
   153dc:	df000415 	stw	fp,16(sp)
   153e0:	df000404 	addi	fp,sp,16
   153e4:	e13ffd15 	stw	r4,-12(fp)
   153e8:	e17ffe15 	stw	r5,-8(fp)
   153ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   153f0:	e0bffd17 	ldw	r2,-12(fp)
   153f4:	10800017 	ldw	r2,0(r2)
   153f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   153fc:	e0bffc17 	ldw	r2,-16(fp)
   15400:	10c00a04 	addi	r3,r2,40
   15404:	e0bffd17 	ldw	r2,-12(fp)
   15408:	10800217 	ldw	r2,8(r2)
   1540c:	100f883a 	mov	r7,r2
   15410:	e1bfff17 	ldw	r6,-4(fp)
   15414:	e17ffe17 	ldw	r5,-8(fp)
   15418:	1809883a 	mov	r4,r3
   1541c:	0015ddc0 	call	15ddc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15420:	e037883a 	mov	sp,fp
   15424:	dfc00117 	ldw	ra,4(sp)
   15428:	df000017 	ldw	fp,0(sp)
   1542c:	dec00204 	addi	sp,sp,8
   15430:	f800283a 	ret

00015434 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   15434:	defffc04 	addi	sp,sp,-16
   15438:	dfc00315 	stw	ra,12(sp)
   1543c:	df000215 	stw	fp,8(sp)
   15440:	df000204 	addi	fp,sp,8
   15444:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15448:	e0bfff17 	ldw	r2,-4(fp)
   1544c:	10800017 	ldw	r2,0(r2)
   15450:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   15454:	e0bffe17 	ldw	r2,-8(fp)
   15458:	10c00a04 	addi	r3,r2,40
   1545c:	e0bfff17 	ldw	r2,-4(fp)
   15460:	10800217 	ldw	r2,8(r2)
   15464:	100b883a 	mov	r5,r2
   15468:	1809883a 	mov	r4,r3
   1546c:	00159c80 	call	159c8 <altera_avalon_jtag_uart_close>
}
   15470:	e037883a 	mov	sp,fp
   15474:	dfc00117 	ldw	ra,4(sp)
   15478:	df000017 	ldw	fp,0(sp)
   1547c:	dec00204 	addi	sp,sp,8
   15480:	f800283a 	ret

00015484 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15484:	defffa04 	addi	sp,sp,-24
   15488:	dfc00515 	stw	ra,20(sp)
   1548c:	df000415 	stw	fp,16(sp)
   15490:	df000404 	addi	fp,sp,16
   15494:	e13ffd15 	stw	r4,-12(fp)
   15498:	e17ffe15 	stw	r5,-8(fp)
   1549c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   154a0:	e0bffd17 	ldw	r2,-12(fp)
   154a4:	10800017 	ldw	r2,0(r2)
   154a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   154ac:	e0bffc17 	ldw	r2,-16(fp)
   154b0:	10800a04 	addi	r2,r2,40
   154b4:	e1bfff17 	ldw	r6,-4(fp)
   154b8:	e17ffe17 	ldw	r5,-8(fp)
   154bc:	1009883a 	mov	r4,r2
   154c0:	0015a300 	call	15a30 <altera_avalon_jtag_uart_ioctl>
}
   154c4:	e037883a 	mov	sp,fp
   154c8:	dfc00117 	ldw	ra,4(sp)
   154cc:	df000017 	ldw	fp,0(sp)
   154d0:	dec00204 	addi	sp,sp,8
   154d4:	f800283a 	ret

000154d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   154d8:	defff104 	addi	sp,sp,-60
   154dc:	dfc00e15 	stw	ra,56(sp)
   154e0:	df000d15 	stw	fp,52(sp)
   154e4:	df000d04 	addi	fp,sp,52
   154e8:	e13ff915 	stw	r4,-28(fp)
   154ec:	e17ffa15 	stw	r5,-24(fp)
   154f0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   154f4:	e0bff917 	ldw	r2,-28(fp)
   154f8:	10800c04 	addi	r2,r2,48
   154fc:	e0bff415 	stw	r2,-48(fp)
   15500:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15504:	e0bff80b 	ldhu	r2,-32(fp)
   15508:	e0fff884 	addi	r3,fp,-30
   1550c:	180b883a 	mov	r5,r3
   15510:	1009883a 	mov	r4,r2
   15514:	000ffa40 	call	ffa4 <OSFlagCreate>
   15518:	1007883a 	mov	r3,r2
   1551c:	e0bff417 	ldw	r2,-48(fp)
   15520:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   15524:	e0bff917 	ldw	r2,-28(fp)
   15528:	10800a04 	addi	r2,r2,40
   1552c:	e0bff515 	stw	r2,-44(fp)
   15530:	00800044 	movi	r2,1
   15534:	e0bff78d 	sth	r2,-34(fp)
   15538:	e0bff78b 	ldhu	r2,-34(fp)
   1553c:	1009883a 	mov	r4,r2
   15540:	0012cb80 	call	12cb8 <OSSemCreate>
   15544:	1007883a 	mov	r3,r2
   15548:	e0bff517 	ldw	r2,-44(fp)
   1554c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   15550:	e0bff917 	ldw	r2,-28(fp)
   15554:	10800b04 	addi	r2,r2,44
   15558:	e0bff615 	stw	r2,-40(fp)
   1555c:	00800044 	movi	r2,1
   15560:	e0bff70d 	sth	r2,-36(fp)
   15564:	e0bff70b 	ldhu	r2,-36(fp)
   15568:	1009883a 	mov	r4,r2
   1556c:	0012cb80 	call	12cb8 <OSSemCreate>
   15570:	1007883a 	mov	r3,r2
   15574:	e0bff617 	ldw	r2,-40(fp)
   15578:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1557c:	e0bff917 	ldw	r2,-28(fp)
   15580:	00c00044 	movi	r3,1
   15584:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15588:	e0bff917 	ldw	r2,-28(fp)
   1558c:	10800017 	ldw	r2,0(r2)
   15590:	10800104 	addi	r2,r2,4
   15594:	1007883a 	mov	r3,r2
   15598:	e0bff917 	ldw	r2,-28(fp)
   1559c:	10800817 	ldw	r2,32(r2)
   155a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   155a4:	e0bffa17 	ldw	r2,-24(fp)
   155a8:	e0fffb17 	ldw	r3,-20(fp)
   155ac:	d8000015 	stw	zero,0(sp)
   155b0:	e1fff917 	ldw	r7,-28(fp)
   155b4:	01800074 	movhi	r6,1
   155b8:	31958804 	addi	r6,r6,22048
   155bc:	180b883a 	mov	r5,r3
   155c0:	1009883a 	mov	r4,r2
   155c4:	00163e80 	call	163e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   155c8:	e0bff917 	ldw	r2,-28(fp)
   155cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   155d0:	e0bff917 	ldw	r2,-28(fp)
   155d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   155d8:	d0e73417 	ldw	r3,-25392(gp)
   155dc:	e1fff917 	ldw	r7,-28(fp)
   155e0:	01800074 	movhi	r6,1
   155e4:	31963104 	addi	r6,r6,22724
   155e8:	180b883a 	mov	r5,r3
   155ec:	1009883a 	mov	r4,r2
   155f0:	00160a00 	call	160a0 <alt_alarm_start>
   155f4:	1000040e 	bge	r2,zero,15608 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   155f8:	e0fff917 	ldw	r3,-28(fp)
   155fc:	00a00034 	movhi	r2,32768
   15600:	10bfffc4 	addi	r2,r2,-1
   15604:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15608:	0001883a 	nop
   1560c:	e037883a 	mov	sp,fp
   15610:	dfc00117 	ldw	ra,4(sp)
   15614:	df000017 	ldw	fp,0(sp)
   15618:	dec00204 	addi	sp,sp,8
   1561c:	f800283a 	ret

00015620 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   15620:	defff204 	addi	sp,sp,-56
   15624:	dfc00d15 	stw	ra,52(sp)
   15628:	df000c15 	stw	fp,48(sp)
   1562c:	df000c04 	addi	fp,sp,48
   15630:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   15634:	e0bfff17 	ldw	r2,-4(fp)
   15638:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   1563c:	e0bff617 	ldw	r2,-40(fp)
   15640:	10800017 	ldw	r2,0(r2)
   15644:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15648:	e0bff717 	ldw	r2,-36(fp)
   1564c:	10800104 	addi	r2,r2,4
   15650:	10800037 	ldwio	r2,0(r2)
   15654:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   15658:	e0bff817 	ldw	r2,-32(fp)
   1565c:	1080c00c 	andi	r2,r2,768
   15660:	10009126 	beq	r2,zero,158a8 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   15664:	e0bff817 	ldw	r2,-32(fp)
   15668:	1080400c 	andi	r2,r2,256
   1566c:	10004726 	beq	r2,zero,1578c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   15670:	00800074 	movhi	r2,1
   15674:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15678:	e0bff617 	ldw	r2,-40(fp)
   1567c:	10800d17 	ldw	r2,52(r2)
   15680:	10800044 	addi	r2,r2,1
   15684:	1081ffcc 	andi	r2,r2,2047
   15688:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   1568c:	e0bff617 	ldw	r2,-40(fp)
   15690:	10c00e17 	ldw	r3,56(r2)
   15694:	e0bff917 	ldw	r2,-28(fp)
   15698:	18802726 	beq	r3,r2,15738 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1569c:	e0bff717 	ldw	r2,-36(fp)
   156a0:	10800037 	ldwio	r2,0(r2)
   156a4:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   156a8:	e0bff417 	ldw	r2,-48(fp)
   156ac:	10a0000c 	andi	r2,r2,32768
   156b0:	10002326 	beq	r2,zero,15740 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   156b4:	e0bff617 	ldw	r2,-40(fp)
   156b8:	10800d17 	ldw	r2,52(r2)
   156bc:	e0fff417 	ldw	r3,-48(fp)
   156c0:	1809883a 	mov	r4,r3
   156c4:	e0fff617 	ldw	r3,-40(fp)
   156c8:	1885883a 	add	r2,r3,r2
   156cc:	10801104 	addi	r2,r2,68
   156d0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   156d4:	e0bff617 	ldw	r2,-40(fp)
   156d8:	10800d17 	ldw	r2,52(r2)
   156dc:	10800044 	addi	r2,r2,1
   156e0:	10c1ffcc 	andi	r3,r2,2047
   156e4:	e0bff617 	ldw	r2,-40(fp)
   156e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   156ec:	e0bff617 	ldw	r2,-40(fp)
   156f0:	10800c17 	ldw	r2,48(r2)
   156f4:	e0bffb15 	stw	r2,-20(fp)
   156f8:	00800044 	movi	r2,1
   156fc:	e0bffc0d 	sth	r2,-16(fp)
   15700:	00800044 	movi	r2,1
   15704:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15708:	d0a71f43 	ldbu	r2,-25475(gp)
   1570c:	10803fcc 	andi	r2,r2,255
   15710:	103fd926 	beq	r2,zero,15678 <altera_avalon_jtag_uart_irq+0x58>
  {
    OSFlagPost (group, flags, opt, &err);
   15714:	e0bffc0b 	ldhu	r2,-16(fp)
   15718:	e0fffc83 	ldbu	r3,-14(fp)
   1571c:	e13ffdc4 	addi	r4,fp,-9
   15720:	200f883a 	mov	r7,r4
   15724:	180d883a 	mov	r6,r3
   15728:	100b883a 	mov	r5,r2
   1572c:	e13ffb17 	ldw	r4,-20(fp)
   15730:	0010b800 	call	10b80 <OSFlagPost>
      }
   15734:	003fd006 	br	15678 <altera_avalon_jtag_uart_irq+0x58>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   15738:	0001883a 	nop
   1573c:	00000106 	br	15744 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   15740:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   15744:	e0bff417 	ldw	r2,-48(fp)
   15748:	10bfffec 	andhi	r2,r2,65535
   1574c:	10000f26 	beq	r2,zero,1578c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15750:	e0bff617 	ldw	r2,-40(fp)
   15754:	10c00817 	ldw	r3,32(r2)
   15758:	00bfff84 	movi	r2,-2
   1575c:	1886703a 	and	r3,r3,r2
   15760:	e0bff617 	ldw	r2,-40(fp)
   15764:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   15768:	e0bff717 	ldw	r2,-36(fp)
   1576c:	10800104 	addi	r2,r2,4
   15770:	1007883a 	mov	r3,r2
   15774:	e0bff617 	ldw	r2,-40(fp)
   15778:	10800817 	ldw	r2,32(r2)
   1577c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15780:	e0bff717 	ldw	r2,-36(fp)
   15784:	10800104 	addi	r2,r2,4
   15788:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1578c:	e0bff817 	ldw	r2,-32(fp)
   15790:	1080800c 	andi	r2,r2,512
   15794:	103fac26 	beq	r2,zero,15648 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15798:	e0bff817 	ldw	r2,-32(fp)
   1579c:	1004d43a 	srli	r2,r2,16
   157a0:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   157a4:	00002606 	br	15840 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   157a8:	e0bff717 	ldw	r2,-36(fp)
   157ac:	e0fff617 	ldw	r3,-40(fp)
   157b0:	18c01017 	ldw	r3,64(r3)
   157b4:	e13ff617 	ldw	r4,-40(fp)
   157b8:	20c7883a 	add	r3,r4,r3
   157bc:	18c21104 	addi	r3,r3,2116
   157c0:	18c00003 	ldbu	r3,0(r3)
   157c4:	18c03fcc 	andi	r3,r3,255
   157c8:	18c0201c 	xori	r3,r3,128
   157cc:	18ffe004 	addi	r3,r3,-128
   157d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   157d4:	e0bff617 	ldw	r2,-40(fp)
   157d8:	10801017 	ldw	r2,64(r2)
   157dc:	10800044 	addi	r2,r2,1
   157e0:	10c1ffcc 	andi	r3,r2,2047
   157e4:	e0bff617 	ldw	r2,-40(fp)
   157e8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   157ec:	e0bff617 	ldw	r2,-40(fp)
   157f0:	10800c17 	ldw	r2,48(r2)
   157f4:	e0bffa15 	stw	r2,-24(fp)
   157f8:	00800084 	movi	r2,2
   157fc:	e0bffd0d 	sth	r2,-12(fp)
   15800:	00800044 	movi	r2,1
   15804:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15808:	d0a71f43 	ldbu	r2,-25475(gp)
   1580c:	10803fcc 	andi	r2,r2,255
   15810:	10000826 	beq	r2,zero,15834 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   15814:	e0bffd0b 	ldhu	r2,-12(fp)
   15818:	e0fffd83 	ldbu	r3,-10(fp)
   1581c:	e13ffe04 	addi	r4,fp,-8
   15820:	200f883a 	mov	r7,r4
   15824:	180d883a 	mov	r6,r3
   15828:	100b883a 	mov	r5,r2
   1582c:	e13ffa17 	ldw	r4,-24(fp)
   15830:	0010b800 	call	10b80 <OSFlagPost>

        space--;
   15834:	e0bff517 	ldw	r2,-44(fp)
   15838:	10bfffc4 	addi	r2,r2,-1
   1583c:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   15840:	e0bff517 	ldw	r2,-44(fp)
   15844:	10000526 	beq	r2,zero,1585c <altera_avalon_jtag_uart_irq+0x23c>
   15848:	e0bff617 	ldw	r2,-40(fp)
   1584c:	10c01017 	ldw	r3,64(r2)
   15850:	e0bff617 	ldw	r2,-40(fp)
   15854:	10800f17 	ldw	r2,60(r2)
   15858:	18bfd31e 	bne	r3,r2,157a8 <altera_avalon_jtag_uart_irq+0x188>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1585c:	e0bff517 	ldw	r2,-44(fp)
   15860:	103f7926 	beq	r2,zero,15648 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15864:	e0bff617 	ldw	r2,-40(fp)
   15868:	10c00817 	ldw	r3,32(r2)
   1586c:	00bfff44 	movi	r2,-3
   15870:	1886703a 	and	r3,r3,r2
   15874:	e0bff617 	ldw	r2,-40(fp)
   15878:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1587c:	e0bff617 	ldw	r2,-40(fp)
   15880:	10800017 	ldw	r2,0(r2)
   15884:	10800104 	addi	r2,r2,4
   15888:	1007883a 	mov	r3,r2
   1588c:	e0bff617 	ldw	r2,-40(fp)
   15890:	10800817 	ldw	r2,32(r2)
   15894:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15898:	e0bff717 	ldw	r2,-36(fp)
   1589c:	10800104 	addi	r2,r2,4
   158a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   158a4:	003f6806 	br	15648 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   158a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   158ac:	0001883a 	nop
   158b0:	e037883a 	mov	sp,fp
   158b4:	dfc00117 	ldw	ra,4(sp)
   158b8:	df000017 	ldw	fp,0(sp)
   158bc:	dec00204 	addi	sp,sp,8
   158c0:	f800283a 	ret

000158c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   158c4:	defff904 	addi	sp,sp,-28
   158c8:	dfc00615 	stw	ra,24(sp)
   158cc:	df000515 	stw	fp,20(sp)
   158d0:	df000504 	addi	fp,sp,20
   158d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   158d8:	e0bfff17 	ldw	r2,-4(fp)
   158dc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   158e0:	e0bffb17 	ldw	r2,-20(fp)
   158e4:	10800017 	ldw	r2,0(r2)
   158e8:	10800104 	addi	r2,r2,4
   158ec:	10800037 	ldwio	r2,0(r2)
   158f0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   158f4:	e0bffc17 	ldw	r2,-16(fp)
   158f8:	1081000c 	andi	r2,r2,1024
   158fc:	10000b26 	beq	r2,zero,1592c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   15900:	e0bffb17 	ldw	r2,-20(fp)
   15904:	10800017 	ldw	r2,0(r2)
   15908:	10800104 	addi	r2,r2,4
   1590c:	1007883a 	mov	r3,r2
   15910:	e0bffb17 	ldw	r2,-20(fp)
   15914:	10800817 	ldw	r2,32(r2)
   15918:	10810014 	ori	r2,r2,1024
   1591c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   15920:	e0bffb17 	ldw	r2,-20(fp)
   15924:	10000915 	stw	zero,36(r2)
   15928:	00002106 	br	159b0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1592c:	e0bffb17 	ldw	r2,-20(fp)
   15930:	10c00917 	ldw	r3,36(r2)
   15934:	00a00034 	movhi	r2,32768
   15938:	10bfff04 	addi	r2,r2,-4
   1593c:	10c01c36 	bltu	r2,r3,159b0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   15940:	e0bffb17 	ldw	r2,-20(fp)
   15944:	10800917 	ldw	r2,36(r2)
   15948:	10c00044 	addi	r3,r2,1
   1594c:	e0bffb17 	ldw	r2,-20(fp)
   15950:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   15954:	e0bffb17 	ldw	r2,-20(fp)
   15958:	10c00917 	ldw	r3,36(r2)
   1595c:	e0bffb17 	ldw	r2,-20(fp)
   15960:	10800117 	ldw	r2,4(r2)
   15964:	18801236 	bltu	r3,r2,159b0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   15968:	e0bffb17 	ldw	r2,-20(fp)
   1596c:	10800c17 	ldw	r2,48(r2)
   15970:	e0bffd15 	stw	r2,-12(fp)
   15974:	00800104 	movi	r2,4
   15978:	e0bffe0d 	sth	r2,-8(fp)
   1597c:	00800044 	movi	r2,1
   15980:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15984:	d0a71f43 	ldbu	r2,-25475(gp)
   15988:	10803fcc 	andi	r2,r2,255
   1598c:	10000826 	beq	r2,zero,159b0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   15990:	e0bffe0b 	ldhu	r2,-8(fp)
   15994:	e0fffe83 	ldbu	r3,-6(fp)
   15998:	e13ffec4 	addi	r4,fp,-5
   1599c:	200f883a 	mov	r7,r4
   159a0:	180d883a 	mov	r6,r3
   159a4:	100b883a 	mov	r5,r2
   159a8:	e13ffd17 	ldw	r4,-12(fp)
   159ac:	0010b800 	call	10b80 <OSFlagPost>
   159b0:	d0a73417 	ldw	r2,-25392(gp)
    }
  }

  return alt_ticks_per_second();
}
   159b4:	e037883a 	mov	sp,fp
   159b8:	dfc00117 	ldw	ra,4(sp)
   159bc:	df000017 	ldw	fp,0(sp)
   159c0:	dec00204 	addi	sp,sp,8
   159c4:	f800283a 	ret

000159c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   159c8:	defffd04 	addi	sp,sp,-12
   159cc:	df000215 	stw	fp,8(sp)
   159d0:	df000204 	addi	fp,sp,8
   159d4:	e13ffe15 	stw	r4,-8(fp)
   159d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   159dc:	00000506 	br	159f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   159e0:	e0bfff17 	ldw	r2,-4(fp)
   159e4:	1090000c 	andi	r2,r2,16384
   159e8:	10000226 	beq	r2,zero,159f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   159ec:	00bffd44 	movi	r2,-11
   159f0:	00000b06 	br	15a20 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   159f4:	e0bffe17 	ldw	r2,-8(fp)
   159f8:	10c01017 	ldw	r3,64(r2)
   159fc:	e0bffe17 	ldw	r2,-8(fp)
   15a00:	10800f17 	ldw	r2,60(r2)
   15a04:	18800526 	beq	r3,r2,15a1c <altera_avalon_jtag_uart_close+0x54>
   15a08:	e0bffe17 	ldw	r2,-8(fp)
   15a0c:	10c00917 	ldw	r3,36(r2)
   15a10:	e0bffe17 	ldw	r2,-8(fp)
   15a14:	10800117 	ldw	r2,4(r2)
   15a18:	18bff136 	bltu	r3,r2,159e0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15a1c:	0005883a 	mov	r2,zero
}
   15a20:	e037883a 	mov	sp,fp
   15a24:	df000017 	ldw	fp,0(sp)
   15a28:	dec00104 	addi	sp,sp,4
   15a2c:	f800283a 	ret

00015a30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15a30:	defffa04 	addi	sp,sp,-24
   15a34:	df000515 	stw	fp,20(sp)
   15a38:	df000504 	addi	fp,sp,20
   15a3c:	e13ffd15 	stw	r4,-12(fp)
   15a40:	e17ffe15 	stw	r5,-8(fp)
   15a44:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   15a48:	00bff9c4 	movi	r2,-25
   15a4c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   15a50:	e0bffe17 	ldw	r2,-8(fp)
   15a54:	10da8060 	cmpeqi	r3,r2,27137
   15a58:	1800031e 	bne	r3,zero,15a68 <altera_avalon_jtag_uart_ioctl+0x38>
   15a5c:	109a80a0 	cmpeqi	r2,r2,27138
   15a60:	1000181e 	bne	r2,zero,15ac4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   15a64:	00002906 	br	15b0c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   15a68:	e0bffd17 	ldw	r2,-12(fp)
   15a6c:	10c00117 	ldw	r3,4(r2)
   15a70:	00a00034 	movhi	r2,32768
   15a74:	10bfffc4 	addi	r2,r2,-1
   15a78:	18802126 	beq	r3,r2,15b00 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   15a7c:	e0bfff17 	ldw	r2,-4(fp)
   15a80:	10800017 	ldw	r2,0(r2)
   15a84:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15a88:	e0bffc17 	ldw	r2,-16(fp)
   15a8c:	10800090 	cmplti	r2,r2,2
   15a90:	1000061e 	bne	r2,zero,15aac <altera_avalon_jtag_uart_ioctl+0x7c>
   15a94:	e0fffc17 	ldw	r3,-16(fp)
   15a98:	00a00034 	movhi	r2,32768
   15a9c:	10bfffc4 	addi	r2,r2,-1
   15aa0:	18800226 	beq	r3,r2,15aac <altera_avalon_jtag_uart_ioctl+0x7c>
   15aa4:	e0bffc17 	ldw	r2,-16(fp)
   15aa8:	00000206 	br	15ab4 <altera_avalon_jtag_uart_ioctl+0x84>
   15aac:	00a00034 	movhi	r2,32768
   15ab0:	10bfff84 	addi	r2,r2,-2
   15ab4:	e0fffd17 	ldw	r3,-12(fp)
   15ab8:	18800115 	stw	r2,4(r3)
      rc = 0;
   15abc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15ac0:	00000f06 	br	15b00 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15ac4:	e0bffd17 	ldw	r2,-12(fp)
   15ac8:	10c00117 	ldw	r3,4(r2)
   15acc:	00a00034 	movhi	r2,32768
   15ad0:	10bfffc4 	addi	r2,r2,-1
   15ad4:	18800c26 	beq	r3,r2,15b08 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15ad8:	e0bffd17 	ldw	r2,-12(fp)
   15adc:	10c00917 	ldw	r3,36(r2)
   15ae0:	e0bffd17 	ldw	r2,-12(fp)
   15ae4:	10800117 	ldw	r2,4(r2)
   15ae8:	1885803a 	cmpltu	r2,r3,r2
   15aec:	10c03fcc 	andi	r3,r2,255
   15af0:	e0bfff17 	ldw	r2,-4(fp)
   15af4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15af8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15afc:	00000206 	br	15b08 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   15b00:	0001883a 	nop
   15b04:	00000106 	br	15b0c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   15b08:	0001883a 	nop

  default:
    break;
  }

  return rc;
   15b0c:	e0bffb17 	ldw	r2,-20(fp)
}
   15b10:	e037883a 	mov	sp,fp
   15b14:	df000017 	ldw	fp,0(sp)
   15b18:	dec00104 	addi	sp,sp,4
   15b1c:	f800283a 	ret

00015b20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15b20:	deffed04 	addi	sp,sp,-76
   15b24:	dfc01215 	stw	ra,72(sp)
   15b28:	df001115 	stw	fp,68(sp)
   15b2c:	df001104 	addi	fp,sp,68
   15b30:	e13ffc15 	stw	r4,-16(fp)
   15b34:	e17ffd15 	stw	r5,-12(fp)
   15b38:	e1bffe15 	stw	r6,-8(fp)
   15b3c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   15b40:	e0bffd17 	ldw	r2,-12(fp)
   15b44:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   15b48:	e0bffc17 	ldw	r2,-16(fp)
   15b4c:	10800a17 	ldw	r2,40(r2)
   15b50:	e0bff815 	stw	r2,-32(fp)
   15b54:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   15b58:	e0bff90b 	ldhu	r2,-28(fp)
   15b5c:	e0fffb04 	addi	r3,fp,-20
   15b60:	180d883a 	mov	r6,r3
   15b64:	100b883a 	mov	r5,r2
   15b68:	e13ff817 	ldw	r4,-32(fp)
   15b6c:	0012fd00 	call	12fd0 <OSSemPend>

  while (space > 0)
   15b70:	00006106 	br	15cf8 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15b74:	e0bffc17 	ldw	r2,-16(fp)
   15b78:	10800d17 	ldw	r2,52(r2)
   15b7c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   15b80:	e0bffc17 	ldw	r2,-16(fp)
   15b84:	10800e17 	ldw	r2,56(r2)
   15b88:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   15b8c:	e0fff317 	ldw	r3,-52(fp)
   15b90:	e0bff417 	ldw	r2,-48(fp)
   15b94:	18800536 	bltu	r3,r2,15bac <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   15b98:	e0fff317 	ldw	r3,-52(fp)
   15b9c:	e0bff417 	ldw	r2,-48(fp)
   15ba0:	1885c83a 	sub	r2,r3,r2
   15ba4:	e0bff115 	stw	r2,-60(fp)
   15ba8:	00000406 	br	15bbc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15bac:	00c20004 	movi	r3,2048
   15bb0:	e0bff417 	ldw	r2,-48(fp)
   15bb4:	1885c83a 	sub	r2,r3,r2
   15bb8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   15bbc:	e0bff117 	ldw	r2,-60(fp)
   15bc0:	10001e26 	beq	r2,zero,15c3c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   15bc4:	e0fffe17 	ldw	r3,-8(fp)
   15bc8:	e0bff117 	ldw	r2,-60(fp)
   15bcc:	1880022e 	bgeu	r3,r2,15bd8 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   15bd0:	e0bffe17 	ldw	r2,-8(fp)
   15bd4:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15bd8:	e0bffc17 	ldw	r2,-16(fp)
   15bdc:	10c01104 	addi	r3,r2,68
   15be0:	e0bff417 	ldw	r2,-48(fp)
   15be4:	1885883a 	add	r2,r3,r2
   15be8:	e1bff117 	ldw	r6,-60(fp)
   15bec:	100b883a 	mov	r5,r2
   15bf0:	e13ff017 	ldw	r4,-64(fp)
   15bf4:	000620c0 	call	620c <memcpy>
      ptr   += n;
   15bf8:	e0fff017 	ldw	r3,-64(fp)
   15bfc:	e0bff117 	ldw	r2,-60(fp)
   15c00:	1885883a 	add	r2,r3,r2
   15c04:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   15c08:	e0fffe17 	ldw	r3,-8(fp)
   15c0c:	e0bff117 	ldw	r2,-60(fp)
   15c10:	1885c83a 	sub	r2,r3,r2
   15c14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15c18:	e0fff417 	ldw	r3,-48(fp)
   15c1c:	e0bff117 	ldw	r2,-60(fp)
   15c20:	1885883a 	add	r2,r3,r2
   15c24:	10c1ffcc 	andi	r3,r2,2047
   15c28:	e0bffc17 	ldw	r2,-16(fp)
   15c2c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   15c30:	e0bffe17 	ldw	r2,-8(fp)
   15c34:	00bfcf16 	blt	zero,r2,15b74 <altera_avalon_jtag_uart_read+0x54>
   15c38:	00000106 	br	15c40 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   15c3c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   15c40:	e0fff017 	ldw	r3,-64(fp)
   15c44:	e0bffd17 	ldw	r2,-12(fp)
   15c48:	18802e1e 	bne	r3,r2,15d04 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15c4c:	e0bfff17 	ldw	r2,-4(fp)
   15c50:	1090000c 	andi	r2,r2,16384
   15c54:	10002d1e 	bne	r2,zero,15d0c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   15c58:	d0a71f43 	ldbu	r2,-25475(gp)
   15c5c:	10803fcc 	andi	r2,r2,255
   15c60:	10800058 	cmpnei	r2,r2,1
   15c64:	1000161e 	bne	r2,zero,15cc0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   15c68:	e0bffc17 	ldw	r2,-16(fp)
   15c6c:	10800c17 	ldw	r2,48(r2)
   15c70:	e0bff215 	stw	r2,-56(fp)
   15c74:	00800144 	movi	r2,5
   15c78:	e0bff98d 	sth	r2,-26(fp)
   15c7c:	00bfe0c4 	movi	r2,-125
   15c80:	e0bffa05 	stb	r2,-24(fp)
   15c84:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   15c88:	d0a71f43 	ldbu	r2,-25475(gp)
   15c8c:	10803fcc 	andi	r2,r2,255
   15c90:	10001526 	beq	r2,zero,15ce8 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   15c94:	e0fff98b 	ldhu	r3,-26(fp)
   15c98:	e13ffa03 	ldbu	r4,-24(fp)
   15c9c:	e17ffa8b 	ldhu	r5,-22(fp)
   15ca0:	e0bffb44 	addi	r2,fp,-19
   15ca4:	d8800015 	stw	r2,0(sp)
   15ca8:	280f883a 	mov	r7,r5
   15cac:	200d883a 	mov	r6,r4
   15cb0:	180b883a 	mov	r5,r3
   15cb4:	e13ff217 	ldw	r4,-56(fp)
   15cb8:	00105680 	call	10568 <OSFlagPend>
   15cbc:	00000a06 	br	15ce8 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15cc0:	0001883a 	nop
   15cc4:	e0bffc17 	ldw	r2,-16(fp)
   15cc8:	10c00d17 	ldw	r3,52(r2)
   15ccc:	e0bff317 	ldw	r2,-52(fp)
   15cd0:	1880051e 	bne	r3,r2,15ce8 <altera_avalon_jtag_uart_read+0x1c8>
   15cd4:	e0bffc17 	ldw	r2,-16(fp)
   15cd8:	10c00917 	ldw	r3,36(r2)
   15cdc:	e0bffc17 	ldw	r2,-16(fp)
   15ce0:	10800117 	ldw	r2,4(r2)
   15ce4:	18bff736 	bltu	r3,r2,15cc4 <altera_avalon_jtag_uart_read+0x1a4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15ce8:	e0bffc17 	ldw	r2,-16(fp)
   15cec:	10c00d17 	ldw	r3,52(r2)
   15cf0:	e0bff317 	ldw	r2,-52(fp)
   15cf4:	18800726 	beq	r3,r2,15d14 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15cf8:	e0bffe17 	ldw	r2,-8(fp)
   15cfc:	00bf9d16 	blt	zero,r2,15b74 <altera_avalon_jtag_uart_read+0x54>
   15d00:	00000506 	br	15d18 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   15d04:	0001883a 	nop
   15d08:	00000306 	br	15d18 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   15d0c:	0001883a 	nop
   15d10:	00000106 	br	15d18 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   15d14:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   15d18:	e0bffc17 	ldw	r2,-16(fp)
   15d1c:	10800a17 	ldw	r2,40(r2)
   15d20:	1009883a 	mov	r4,r2
   15d24:	00133480 	call	13348 <OSSemPost>

  if (ptr != buffer)
   15d28:	e0fff017 	ldw	r3,-64(fp)
   15d2c:	e0bffd17 	ldw	r2,-12(fp)
   15d30:	18801826 	beq	r3,r2,15d94 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d34:	0005303a 	rdctl	r2,status
   15d38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d3c:	e0fff717 	ldw	r3,-36(fp)
   15d40:	00bfff84 	movi	r2,-2
   15d44:	1884703a 	and	r2,r3,r2
   15d48:	1001703a 	wrctl	status,r2
  
  return context;
   15d4c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15d50:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15d54:	e0bffc17 	ldw	r2,-16(fp)
   15d58:	10800817 	ldw	r2,32(r2)
   15d5c:	10c00054 	ori	r3,r2,1
   15d60:	e0bffc17 	ldw	r2,-16(fp)
   15d64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15d68:	e0bffc17 	ldw	r2,-16(fp)
   15d6c:	10800017 	ldw	r2,0(r2)
   15d70:	10800104 	addi	r2,r2,4
   15d74:	1007883a 	mov	r3,r2
   15d78:	e0bffc17 	ldw	r2,-16(fp)
   15d7c:	10800817 	ldw	r2,32(r2)
   15d80:	18800035 	stwio	r2,0(r3)
   15d84:	e0bff617 	ldw	r2,-40(fp)
   15d88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d8c:	e0bff517 	ldw	r2,-44(fp)
   15d90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15d94:	e0fff017 	ldw	r3,-64(fp)
   15d98:	e0bffd17 	ldw	r2,-12(fp)
   15d9c:	18800426 	beq	r3,r2,15db0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   15da0:	e0fff017 	ldw	r3,-64(fp)
   15da4:	e0bffd17 	ldw	r2,-12(fp)
   15da8:	1885c83a 	sub	r2,r3,r2
   15dac:	00000606 	br	15dc8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   15db0:	e0bfff17 	ldw	r2,-4(fp)
   15db4:	1090000c 	andi	r2,r2,16384
   15db8:	10000226 	beq	r2,zero,15dc4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   15dbc:	00bffd44 	movi	r2,-11
   15dc0:	00000106 	br	15dc8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   15dc4:	00bffec4 	movi	r2,-5
}
   15dc8:	e037883a 	mov	sp,fp
   15dcc:	dfc00117 	ldw	ra,4(sp)
   15dd0:	df000017 	ldw	fp,0(sp)
   15dd4:	dec00204 	addi	sp,sp,8
   15dd8:	f800283a 	ret

00015ddc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15ddc:	deffed04 	addi	sp,sp,-76
   15de0:	dfc01215 	stw	ra,72(sp)
   15de4:	df001115 	stw	fp,68(sp)
   15de8:	df001104 	addi	fp,sp,68
   15dec:	e13ffc15 	stw	r4,-16(fp)
   15df0:	e17ffd15 	stw	r5,-12(fp)
   15df4:	e1bffe15 	stw	r6,-8(fp)
   15df8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15dfc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15e00:	e0bffd17 	ldw	r2,-12(fp)
   15e04:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   15e08:	e0bffc17 	ldw	r2,-16(fp)
   15e0c:	10800b17 	ldw	r2,44(r2)
   15e10:	e0bff815 	stw	r2,-32(fp)
   15e14:	e03ff90d 	sth	zero,-28(fp)
   15e18:	e0bff90b 	ldhu	r2,-28(fp)
   15e1c:	e0fffb44 	addi	r3,fp,-19
   15e20:	180d883a 	mov	r6,r3
   15e24:	100b883a 	mov	r5,r2
   15e28:	e13ff817 	ldw	r4,-32(fp)
   15e2c:	0012fd00 	call	12fd0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15e30:	00003706 	br	15f10 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15e34:	e0bffc17 	ldw	r2,-16(fp)
   15e38:	10800f17 	ldw	r2,60(r2)
   15e3c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   15e40:	e0bffc17 	ldw	r2,-16(fp)
   15e44:	10801017 	ldw	r2,64(r2)
   15e48:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   15e4c:	e0fff417 	ldw	r3,-48(fp)
   15e50:	e0bff017 	ldw	r2,-64(fp)
   15e54:	1880062e 	bgeu	r3,r2,15e70 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   15e58:	e0fff017 	ldw	r3,-64(fp)
   15e5c:	e0bff417 	ldw	r2,-48(fp)
   15e60:	1885c83a 	sub	r2,r3,r2
   15e64:	10bfffc4 	addi	r2,r2,-1
   15e68:	e0bff115 	stw	r2,-60(fp)
   15e6c:	00000b06 	br	15e9c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   15e70:	e0bff017 	ldw	r2,-64(fp)
   15e74:	10000526 	beq	r2,zero,15e8c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   15e78:	00c20004 	movi	r3,2048
   15e7c:	e0bff417 	ldw	r2,-48(fp)
   15e80:	1885c83a 	sub	r2,r3,r2
   15e84:	e0bff115 	stw	r2,-60(fp)
   15e88:	00000406 	br	15e9c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   15e8c:	00c1ffc4 	movi	r3,2047
   15e90:	e0bff417 	ldw	r2,-48(fp)
   15e94:	1885c83a 	sub	r2,r3,r2
   15e98:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   15e9c:	e0bff117 	ldw	r2,-60(fp)
   15ea0:	10001e26 	beq	r2,zero,15f1c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   15ea4:	e0fffe17 	ldw	r3,-8(fp)
   15ea8:	e0bff117 	ldw	r2,-60(fp)
   15eac:	1880022e 	bgeu	r3,r2,15eb8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   15eb0:	e0bffe17 	ldw	r2,-8(fp)
   15eb4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   15eb8:	e0bffc17 	ldw	r2,-16(fp)
   15ebc:	10c21104 	addi	r3,r2,2116
   15ec0:	e0bff417 	ldw	r2,-48(fp)
   15ec4:	1885883a 	add	r2,r3,r2
   15ec8:	e1bff117 	ldw	r6,-60(fp)
   15ecc:	e17ffd17 	ldw	r5,-12(fp)
   15ed0:	1009883a 	mov	r4,r2
   15ed4:	000620c0 	call	620c <memcpy>
      ptr   += n;
   15ed8:	e0fffd17 	ldw	r3,-12(fp)
   15edc:	e0bff117 	ldw	r2,-60(fp)
   15ee0:	1885883a 	add	r2,r3,r2
   15ee4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   15ee8:	e0fffe17 	ldw	r3,-8(fp)
   15eec:	e0bff117 	ldw	r2,-60(fp)
   15ef0:	1885c83a 	sub	r2,r3,r2
   15ef4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15ef8:	e0fff417 	ldw	r3,-48(fp)
   15efc:	e0bff117 	ldw	r2,-60(fp)
   15f00:	1885883a 	add	r2,r3,r2
   15f04:	10c1ffcc 	andi	r3,r2,2047
   15f08:	e0bffc17 	ldw	r2,-16(fp)
   15f0c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15f10:	e0bffe17 	ldw	r2,-8(fp)
   15f14:	00bfc716 	blt	zero,r2,15e34 <altera_avalon_jtag_uart_write+0x58>
   15f18:	00000106 	br	15f20 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   15f1c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f20:	0005303a 	rdctl	r2,status
   15f24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f28:	e0fff717 	ldw	r3,-36(fp)
   15f2c:	00bfff84 	movi	r2,-2
   15f30:	1884703a 	and	r2,r3,r2
   15f34:	1001703a 	wrctl	status,r2
  
  return context;
   15f38:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   15f3c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   15f40:	e0bffc17 	ldw	r2,-16(fp)
   15f44:	10800817 	ldw	r2,32(r2)
   15f48:	10c00094 	ori	r3,r2,2
   15f4c:	e0bffc17 	ldw	r2,-16(fp)
   15f50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15f54:	e0bffc17 	ldw	r2,-16(fp)
   15f58:	10800017 	ldw	r2,0(r2)
   15f5c:	10800104 	addi	r2,r2,4
   15f60:	1007883a 	mov	r3,r2
   15f64:	e0bffc17 	ldw	r2,-16(fp)
   15f68:	10800817 	ldw	r2,32(r2)
   15f6c:	18800035 	stwio	r2,0(r3)
   15f70:	e0bff617 	ldw	r2,-40(fp)
   15f74:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f78:	e0bff317 	ldw	r2,-52(fp)
   15f7c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   15f80:	e0bffe17 	ldw	r2,-8(fp)
   15f84:	00802a0e 	bge	zero,r2,16030 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   15f88:	e0bfff17 	ldw	r2,-4(fp)
   15f8c:	1090000c 	andi	r2,r2,16384
   15f90:	10002a1e 	bne	r2,zero,1603c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   15f94:	d0a71f43 	ldbu	r2,-25475(gp)
   15f98:	10803fcc 	andi	r2,r2,255
   15f9c:	10800058 	cmpnei	r2,r2,1
   15fa0:	1000161e 	bne	r2,zero,15ffc <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   15fa4:	e0bffc17 	ldw	r2,-16(fp)
   15fa8:	10800c17 	ldw	r2,48(r2)
   15fac:	e0bff515 	stw	r2,-44(fp)
   15fb0:	00800184 	movi	r2,6
   15fb4:	e0bff98d 	sth	r2,-26(fp)
   15fb8:	00bfe0c4 	movi	r2,-125
   15fbc:	e0bffa05 	stb	r2,-24(fp)
   15fc0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   15fc4:	d0a71f43 	ldbu	r2,-25475(gp)
   15fc8:	10803fcc 	andi	r2,r2,255
   15fcc:	10001526 	beq	r2,zero,16024 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   15fd0:	e0fff98b 	ldhu	r3,-26(fp)
   15fd4:	e13ffa03 	ldbu	r4,-24(fp)
   15fd8:	e17ffa8b 	ldhu	r5,-22(fp)
   15fdc:	e0bffb04 	addi	r2,fp,-20
   15fe0:	d8800015 	stw	r2,0(sp)
   15fe4:	280f883a 	mov	r7,r5
   15fe8:	200d883a 	mov	r6,r4
   15fec:	180b883a 	mov	r5,r3
   15ff0:	e13ff517 	ldw	r4,-44(fp)
   15ff4:	00105680 	call	10568 <OSFlagPend>
   15ff8:	00000a06 	br	16024 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   15ffc:	0001883a 	nop
   16000:	e0bffc17 	ldw	r2,-16(fp)
   16004:	10c01017 	ldw	r3,64(r2)
   16008:	e0bff017 	ldw	r2,-64(fp)
   1600c:	1880051e 	bne	r3,r2,16024 <altera_avalon_jtag_uart_write+0x248>
   16010:	e0bffc17 	ldw	r2,-16(fp)
   16014:	10c00917 	ldw	r3,36(r2)
   16018:	e0bffc17 	ldw	r2,-16(fp)
   1601c:	10800117 	ldw	r2,4(r2)
   16020:	18bff736 	bltu	r3,r2,16000 <altera_avalon_jtag_uart_write+0x224>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16024:	e0bffc17 	ldw	r2,-16(fp)
   16028:	10800917 	ldw	r2,36(r2)
   1602c:	1000051e 	bne	r2,zero,16044 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   16030:	e0bffe17 	ldw	r2,-8(fp)
   16034:	00bfb616 	blt	zero,r2,15f10 <altera_avalon_jtag_uart_write+0x134>
   16038:	00000306 	br	16048 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1603c:	0001883a 	nop
   16040:	00000106 	br	16048 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16044:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16048:	e0bffc17 	ldw	r2,-16(fp)
   1604c:	10800b17 	ldw	r2,44(r2)
   16050:	1009883a 	mov	r4,r2
   16054:	00133480 	call	13348 <OSSemPost>

  if (ptr != start)
   16058:	e0fffd17 	ldw	r3,-12(fp)
   1605c:	e0bff217 	ldw	r2,-56(fp)
   16060:	18800426 	beq	r3,r2,16074 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   16064:	e0fffd17 	ldw	r3,-12(fp)
   16068:	e0bff217 	ldw	r2,-56(fp)
   1606c:	1885c83a 	sub	r2,r3,r2
   16070:	00000606 	br	1608c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   16074:	e0bfff17 	ldw	r2,-4(fp)
   16078:	1090000c 	andi	r2,r2,16384
   1607c:	10000226 	beq	r2,zero,16088 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   16080:	00bffd44 	movi	r2,-11
   16084:	00000106 	br	1608c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16088:	00bffec4 	movi	r2,-5
}
   1608c:	e037883a 	mov	sp,fp
   16090:	dfc00117 	ldw	ra,4(sp)
   16094:	df000017 	ldw	fp,0(sp)
   16098:	dec00204 	addi	sp,sp,8
   1609c:	f800283a 	ret

000160a0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   160a0:	defff504 	addi	sp,sp,-44
   160a4:	df000a15 	stw	fp,40(sp)
   160a8:	df000a04 	addi	fp,sp,40
   160ac:	e13ffc15 	stw	r4,-16(fp)
   160b0:	e17ffd15 	stw	r5,-12(fp)
   160b4:	e1bffe15 	stw	r6,-8(fp)
   160b8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   160bc:	e03ff615 	stw	zero,-40(fp)
   160c0:	d0a73417 	ldw	r2,-25392(gp)
  
  if (alt_ticks_per_second ())
   160c4:	10003c26 	beq	r2,zero,161b8 <alt_alarm_start+0x118>
  {
    if (alarm)
   160c8:	e0bffc17 	ldw	r2,-16(fp)
   160cc:	10003826 	beq	r2,zero,161b0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   160d0:	e0bffc17 	ldw	r2,-16(fp)
   160d4:	e0fffe17 	ldw	r3,-8(fp)
   160d8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   160dc:	e0bffc17 	ldw	r2,-16(fp)
   160e0:	e0ffff17 	ldw	r3,-4(fp)
   160e4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160e8:	0005303a 	rdctl	r2,status
   160ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160f0:	e0fff917 	ldw	r3,-28(fp)
   160f4:	00bfff84 	movi	r2,-2
   160f8:	1884703a 	and	r2,r3,r2
   160fc:	1001703a 	wrctl	status,r2
  
  return context;
   16100:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   16104:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16108:	d0a73517 	ldw	r2,-25388(gp)
      
      current_nticks = alt_nticks();
   1610c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   16110:	e0fffd17 	ldw	r3,-12(fp)
   16114:	e0bff617 	ldw	r2,-40(fp)
   16118:	1885883a 	add	r2,r3,r2
   1611c:	10c00044 	addi	r3,r2,1
   16120:	e0bffc17 	ldw	r2,-16(fp)
   16124:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   16128:	e0bffc17 	ldw	r2,-16(fp)
   1612c:	10c00217 	ldw	r3,8(r2)
   16130:	e0bff617 	ldw	r2,-40(fp)
   16134:	1880042e 	bgeu	r3,r2,16148 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   16138:	e0bffc17 	ldw	r2,-16(fp)
   1613c:	00c00044 	movi	r3,1
   16140:	10c00405 	stb	r3,16(r2)
   16144:	00000206 	br	16150 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   16148:	e0bffc17 	ldw	r2,-16(fp)
   1614c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16150:	e0bffc17 	ldw	r2,-16(fp)
   16154:	d0e02e04 	addi	r3,gp,-32584
   16158:	e0fffa15 	stw	r3,-24(fp)
   1615c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16160:	e0bffb17 	ldw	r2,-20(fp)
   16164:	e0fffa17 	ldw	r3,-24(fp)
   16168:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1616c:	e0bffa17 	ldw	r2,-24(fp)
   16170:	10c00017 	ldw	r3,0(r2)
   16174:	e0bffb17 	ldw	r2,-20(fp)
   16178:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1617c:	e0bffa17 	ldw	r2,-24(fp)
   16180:	10800017 	ldw	r2,0(r2)
   16184:	e0fffb17 	ldw	r3,-20(fp)
   16188:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1618c:	e0bffa17 	ldw	r2,-24(fp)
   16190:	e0fffb17 	ldw	r3,-20(fp)
   16194:	10c00015 	stw	r3,0(r2)
   16198:	e0bff817 	ldw	r2,-32(fp)
   1619c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   161a0:	e0bff717 	ldw	r2,-36(fp)
   161a4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   161a8:	0005883a 	mov	r2,zero
   161ac:	00000306 	br	161bc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   161b0:	00bffa84 	movi	r2,-22
   161b4:	00000106 	br	161bc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   161b8:	00bfde84 	movi	r2,-134
  }
}
   161bc:	e037883a 	mov	sp,fp
   161c0:	df000017 	ldw	fp,0(sp)
   161c4:	dec00104 	addi	sp,sp,4
   161c8:	f800283a 	ret

000161cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   161cc:	defffe04 	addi	sp,sp,-8
   161d0:	df000115 	stw	fp,4(sp)
   161d4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   161d8:	e03fff15 	stw	zero,-4(fp)
   161dc:	00000506 	br	161f4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   161e0:	e0bfff17 	ldw	r2,-4(fp)
   161e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   161e8:	e0bfff17 	ldw	r2,-4(fp)
   161ec:	10800804 	addi	r2,r2,32
   161f0:	e0bfff15 	stw	r2,-4(fp)
   161f4:	e0bfff17 	ldw	r2,-4(fp)
   161f8:	10820030 	cmpltui	r2,r2,2048
   161fc:	103ff81e 	bne	r2,zero,161e0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16200:	0001883a 	nop
   16204:	e037883a 	mov	sp,fp
   16208:	df000017 	ldw	fp,0(sp)
   1620c:	dec00104 	addi	sp,sp,4
   16210:	f800283a 	ret

00016214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16214:	defffe04 	addi	sp,sp,-8
   16218:	dfc00115 	stw	ra,4(sp)
   1621c:	df000015 	stw	fp,0(sp)
   16220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16224:	d0a00c17 	ldw	r2,-32720(gp)
   16228:	10000326 	beq	r2,zero,16238 <alt_get_errno+0x24>
   1622c:	d0a00c17 	ldw	r2,-32720(gp)
   16230:	103ee83a 	callr	r2
   16234:	00000106 	br	1623c <alt_get_errno+0x28>
   16238:	d0a71604 	addi	r2,gp,-25512
}
   1623c:	e037883a 	mov	sp,fp
   16240:	dfc00117 	ldw	ra,4(sp)
   16244:	df000017 	ldw	fp,0(sp)
   16248:	dec00204 	addi	sp,sp,8
   1624c:	f800283a 	ret

00016250 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   16250:	defffa04 	addi	sp,sp,-24
   16254:	dfc00515 	stw	ra,20(sp)
   16258:	df000415 	stw	fp,16(sp)
   1625c:	df000404 	addi	fp,sp,16
   16260:	e13ffe15 	stw	r4,-8(fp)
   16264:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   16268:	e0bffe17 	ldw	r2,-8(fp)
   1626c:	10000326 	beq	r2,zero,1627c <alt_dev_llist_insert+0x2c>
   16270:	e0bffe17 	ldw	r2,-8(fp)
   16274:	10800217 	ldw	r2,8(r2)
   16278:	1000061e 	bne	r2,zero,16294 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1627c:	00162140 	call	16214 <alt_get_errno>
   16280:	1007883a 	mov	r3,r2
   16284:	00800584 	movi	r2,22
   16288:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1628c:	00bffa84 	movi	r2,-22
   16290:	00001306 	br	162e0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16294:	e0bffe17 	ldw	r2,-8(fp)
   16298:	e0ffff17 	ldw	r3,-4(fp)
   1629c:	e0fffc15 	stw	r3,-16(fp)
   162a0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   162a4:	e0bffd17 	ldw	r2,-12(fp)
   162a8:	e0fffc17 	ldw	r3,-16(fp)
   162ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   162b0:	e0bffc17 	ldw	r2,-16(fp)
   162b4:	10c00017 	ldw	r3,0(r2)
   162b8:	e0bffd17 	ldw	r2,-12(fp)
   162bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   162c0:	e0bffc17 	ldw	r2,-16(fp)
   162c4:	10800017 	ldw	r2,0(r2)
   162c8:	e0fffd17 	ldw	r3,-12(fp)
   162cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   162d0:	e0bffc17 	ldw	r2,-16(fp)
   162d4:	e0fffd17 	ldw	r3,-12(fp)
   162d8:	10c00015 	stw	r3,0(r2)

  return 0;  
   162dc:	0005883a 	mov	r2,zero
}
   162e0:	e037883a 	mov	sp,fp
   162e4:	dfc00117 	ldw	ra,4(sp)
   162e8:	df000017 	ldw	fp,0(sp)
   162ec:	dec00204 	addi	sp,sp,8
   162f0:	f800283a 	ret

000162f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   162f4:	defffd04 	addi	sp,sp,-12
   162f8:	dfc00215 	stw	ra,8(sp)
   162fc:	df000115 	stw	fp,4(sp)
   16300:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16304:	00800074 	movhi	r2,1
   16308:	109d9b04 	addi	r2,r2,30316
   1630c:	e0bfff15 	stw	r2,-4(fp)
   16310:	00000606 	br	1632c <_do_ctors+0x38>
        (*ctor) (); 
   16314:	e0bfff17 	ldw	r2,-4(fp)
   16318:	10800017 	ldw	r2,0(r2)
   1631c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16320:	e0bfff17 	ldw	r2,-4(fp)
   16324:	10bfff04 	addi	r2,r2,-4
   16328:	e0bfff15 	stw	r2,-4(fp)
   1632c:	e0ffff17 	ldw	r3,-4(fp)
   16330:	00800074 	movhi	r2,1
   16334:	109d9c04 	addi	r2,r2,30320
   16338:	18bff62e 	bgeu	r3,r2,16314 <_do_ctors+0x20>
        (*ctor) (); 
}
   1633c:	0001883a 	nop
   16340:	e037883a 	mov	sp,fp
   16344:	dfc00117 	ldw	ra,4(sp)
   16348:	df000017 	ldw	fp,0(sp)
   1634c:	dec00204 	addi	sp,sp,8
   16350:	f800283a 	ret

00016354 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   16354:	defffd04 	addi	sp,sp,-12
   16358:	dfc00215 	stw	ra,8(sp)
   1635c:	df000115 	stw	fp,4(sp)
   16360:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16364:	00800074 	movhi	r2,1
   16368:	109d9b04 	addi	r2,r2,30316
   1636c:	e0bfff15 	stw	r2,-4(fp)
   16370:	00000606 	br	1638c <_do_dtors+0x38>
        (*dtor) (); 
   16374:	e0bfff17 	ldw	r2,-4(fp)
   16378:	10800017 	ldw	r2,0(r2)
   1637c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   16380:	e0bfff17 	ldw	r2,-4(fp)
   16384:	10bfff04 	addi	r2,r2,-4
   16388:	e0bfff15 	stw	r2,-4(fp)
   1638c:	e0ffff17 	ldw	r3,-4(fp)
   16390:	00800074 	movhi	r2,1
   16394:	109d9c04 	addi	r2,r2,30320
   16398:	18bff62e 	bgeu	r3,r2,16374 <_do_dtors+0x20>
        (*dtor) (); 
}
   1639c:	0001883a 	nop
   163a0:	e037883a 	mov	sp,fp
   163a4:	dfc00117 	ldw	ra,4(sp)
   163a8:	df000017 	ldw	fp,0(sp)
   163ac:	dec00204 	addi	sp,sp,8
   163b0:	f800283a 	ret

000163b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   163b4:	defffe04 	addi	sp,sp,-8
   163b8:	dfc00115 	stw	ra,4(sp)
   163bc:	df000015 	stw	fp,0(sp)
   163c0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   163c4:	01440004 	movi	r5,4096
   163c8:	0009883a 	mov	r4,zero
   163cc:	00171b00 	call	171b0 <alt_icache_flush>
#endif
}
   163d0:	0001883a 	nop
   163d4:	e037883a 	mov	sp,fp
   163d8:	dfc00117 	ldw	ra,4(sp)
   163dc:	df000017 	ldw	fp,0(sp)
   163e0:	dec00204 	addi	sp,sp,8
   163e4:	f800283a 	ret

000163e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   163e8:	defff904 	addi	sp,sp,-28
   163ec:	dfc00615 	stw	ra,24(sp)
   163f0:	df000515 	stw	fp,20(sp)
   163f4:	df000504 	addi	fp,sp,20
   163f8:	e13ffc15 	stw	r4,-16(fp)
   163fc:	e17ffd15 	stw	r5,-12(fp)
   16400:	e1bffe15 	stw	r6,-8(fp)
   16404:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   16408:	e0800217 	ldw	r2,8(fp)
   1640c:	d8800015 	stw	r2,0(sp)
   16410:	e1ffff17 	ldw	r7,-4(fp)
   16414:	e1bffe17 	ldw	r6,-8(fp)
   16418:	e17ffd17 	ldw	r5,-12(fp)
   1641c:	e13ffc17 	ldw	r4,-16(fp)
   16420:	00165980 	call	16598 <alt_iic_isr_register>
}  
   16424:	e037883a 	mov	sp,fp
   16428:	dfc00117 	ldw	ra,4(sp)
   1642c:	df000017 	ldw	fp,0(sp)
   16430:	dec00204 	addi	sp,sp,8
   16434:	f800283a 	ret

00016438 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   16438:	defff904 	addi	sp,sp,-28
   1643c:	df000615 	stw	fp,24(sp)
   16440:	df000604 	addi	fp,sp,24
   16444:	e13ffe15 	stw	r4,-8(fp)
   16448:	e17fff15 	stw	r5,-4(fp)
   1644c:	e0bfff17 	ldw	r2,-4(fp)
   16450:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16454:	0005303a 	rdctl	r2,status
   16458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1645c:	e0fffb17 	ldw	r3,-20(fp)
   16460:	00bfff84 	movi	r2,-2
   16464:	1884703a 	and	r2,r3,r2
   16468:	1001703a 	wrctl	status,r2
  
  return context;
   1646c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   16470:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   16474:	00c00044 	movi	r3,1
   16478:	e0bffa17 	ldw	r2,-24(fp)
   1647c:	1884983a 	sll	r2,r3,r2
   16480:	1007883a 	mov	r3,r2
   16484:	d0a73317 	ldw	r2,-25396(gp)
   16488:	1884b03a 	or	r2,r3,r2
   1648c:	d0a73315 	stw	r2,-25396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   16490:	d0a73317 	ldw	r2,-25396(gp)
   16494:	100170fa 	wrctl	ienable,r2
   16498:	e0bffc17 	ldw	r2,-16(fp)
   1649c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164a0:	e0bffd17 	ldw	r2,-12(fp)
   164a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   164a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   164ac:	0001883a 	nop
}
   164b0:	e037883a 	mov	sp,fp
   164b4:	df000017 	ldw	fp,0(sp)
   164b8:	dec00104 	addi	sp,sp,4
   164bc:	f800283a 	ret

000164c0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   164c0:	defff904 	addi	sp,sp,-28
   164c4:	df000615 	stw	fp,24(sp)
   164c8:	df000604 	addi	fp,sp,24
   164cc:	e13ffe15 	stw	r4,-8(fp)
   164d0:	e17fff15 	stw	r5,-4(fp)
   164d4:	e0bfff17 	ldw	r2,-4(fp)
   164d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   164dc:	0005303a 	rdctl	r2,status
   164e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   164e4:	e0fffb17 	ldw	r3,-20(fp)
   164e8:	00bfff84 	movi	r2,-2
   164ec:	1884703a 	and	r2,r3,r2
   164f0:	1001703a 	wrctl	status,r2
  
  return context;
   164f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   164f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   164fc:	00c00044 	movi	r3,1
   16500:	e0bffa17 	ldw	r2,-24(fp)
   16504:	1884983a 	sll	r2,r3,r2
   16508:	0084303a 	nor	r2,zero,r2
   1650c:	1007883a 	mov	r3,r2
   16510:	d0a73317 	ldw	r2,-25396(gp)
   16514:	1884703a 	and	r2,r3,r2
   16518:	d0a73315 	stw	r2,-25396(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1651c:	d0a73317 	ldw	r2,-25396(gp)
   16520:	100170fa 	wrctl	ienable,r2
   16524:	e0bffc17 	ldw	r2,-16(fp)
   16528:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1652c:	e0bffd17 	ldw	r2,-12(fp)
   16530:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   16534:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   16538:	0001883a 	nop
}
   1653c:	e037883a 	mov	sp,fp
   16540:	df000017 	ldw	fp,0(sp)
   16544:	dec00104 	addi	sp,sp,4
   16548:	f800283a 	ret

0001654c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1654c:	defffc04 	addi	sp,sp,-16
   16550:	df000315 	stw	fp,12(sp)
   16554:	df000304 	addi	fp,sp,12
   16558:	e13ffe15 	stw	r4,-8(fp)
   1655c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   16560:	000530fa 	rdctl	r2,ienable
   16564:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   16568:	00c00044 	movi	r3,1
   1656c:	e0bfff17 	ldw	r2,-4(fp)
   16570:	1884983a 	sll	r2,r3,r2
   16574:	1007883a 	mov	r3,r2
   16578:	e0bffd17 	ldw	r2,-12(fp)
   1657c:	1884703a 	and	r2,r3,r2
   16580:	1004c03a 	cmpne	r2,r2,zero
   16584:	10803fcc 	andi	r2,r2,255
}
   16588:	e037883a 	mov	sp,fp
   1658c:	df000017 	ldw	fp,0(sp)
   16590:	dec00104 	addi	sp,sp,4
   16594:	f800283a 	ret

00016598 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   16598:	defff504 	addi	sp,sp,-44
   1659c:	dfc00a15 	stw	ra,40(sp)
   165a0:	df000915 	stw	fp,36(sp)
   165a4:	df000904 	addi	fp,sp,36
   165a8:	e13ffc15 	stw	r4,-16(fp)
   165ac:	e17ffd15 	stw	r5,-12(fp)
   165b0:	e1bffe15 	stw	r6,-8(fp)
   165b4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   165b8:	00bffa84 	movi	r2,-22
   165bc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   165c0:	e0bffd17 	ldw	r2,-12(fp)
   165c4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   165c8:	e0bff817 	ldw	r2,-32(fp)
   165cc:	10800808 	cmpgei	r2,r2,32
   165d0:	1000271e 	bne	r2,zero,16670 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   165d4:	0005303a 	rdctl	r2,status
   165d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   165dc:	e0fffb17 	ldw	r3,-20(fp)
   165e0:	00bfff84 	movi	r2,-2
   165e4:	1884703a 	and	r2,r3,r2
   165e8:	1001703a 	wrctl	status,r2
  
  return context;
   165ec:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   165f0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   165f4:	00800134 	movhi	r2,4
   165f8:	10b26904 	addi	r2,r2,-13916
   165fc:	e0fff817 	ldw	r3,-32(fp)
   16600:	180690fa 	slli	r3,r3,3
   16604:	10c5883a 	add	r2,r2,r3
   16608:	e0fffe17 	ldw	r3,-8(fp)
   1660c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   16610:	00800134 	movhi	r2,4
   16614:	10b26904 	addi	r2,r2,-13916
   16618:	e0fff817 	ldw	r3,-32(fp)
   1661c:	180690fa 	slli	r3,r3,3
   16620:	10c5883a 	add	r2,r2,r3
   16624:	10800104 	addi	r2,r2,4
   16628:	e0ffff17 	ldw	r3,-4(fp)
   1662c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   16630:	e0bffe17 	ldw	r2,-8(fp)
   16634:	10000526 	beq	r2,zero,1664c <alt_iic_isr_register+0xb4>
   16638:	e0bff817 	ldw	r2,-32(fp)
   1663c:	100b883a 	mov	r5,r2
   16640:	e13ffc17 	ldw	r4,-16(fp)
   16644:	00164380 	call	16438 <alt_ic_irq_enable>
   16648:	00000406 	br	1665c <alt_iic_isr_register+0xc4>
   1664c:	e0bff817 	ldw	r2,-32(fp)
   16650:	100b883a 	mov	r5,r2
   16654:	e13ffc17 	ldw	r4,-16(fp)
   16658:	00164c00 	call	164c0 <alt_ic_irq_disable>
   1665c:	e0bff715 	stw	r2,-36(fp)
   16660:	e0bffa17 	ldw	r2,-24(fp)
   16664:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16668:	e0bff917 	ldw	r2,-28(fp)
   1666c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   16670:	e0bff717 	ldw	r2,-36(fp)
}
   16674:	e037883a 	mov	sp,fp
   16678:	dfc00117 	ldw	ra,4(sp)
   1667c:	df000017 	ldw	fp,0(sp)
   16680:	dec00204 	addi	sp,sp,8
   16684:	f800283a 	ret

00016688 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16688:	defff904 	addi	sp,sp,-28
   1668c:	dfc00615 	stw	ra,24(sp)
   16690:	df000515 	stw	fp,20(sp)
   16694:	df000504 	addi	fp,sp,20
   16698:	e13ffc15 	stw	r4,-16(fp)
   1669c:	e17ffd15 	stw	r5,-12(fp)
   166a0:	e1bffe15 	stw	r6,-8(fp)
   166a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   166a8:	e1bfff17 	ldw	r6,-4(fp)
   166ac:	e17ffe17 	ldw	r5,-8(fp)
   166b0:	e13ffd17 	ldw	r4,-12(fp)
   166b4:	00168c80 	call	168c8 <open>
   166b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   166bc:	e0bffb17 	ldw	r2,-20(fp)
   166c0:	10001c16 	blt	r2,zero,16734 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   166c4:	008000f4 	movhi	r2,3
   166c8:	10962404 	addi	r2,r2,22672
   166cc:	e0fffb17 	ldw	r3,-20(fp)
   166d0:	18c00324 	muli	r3,r3,12
   166d4:	10c5883a 	add	r2,r2,r3
   166d8:	10c00017 	ldw	r3,0(r2)
   166dc:	e0bffc17 	ldw	r2,-16(fp)
   166e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   166e4:	008000f4 	movhi	r2,3
   166e8:	10962404 	addi	r2,r2,22672
   166ec:	e0fffb17 	ldw	r3,-20(fp)
   166f0:	18c00324 	muli	r3,r3,12
   166f4:	10c5883a 	add	r2,r2,r3
   166f8:	10800104 	addi	r2,r2,4
   166fc:	10c00017 	ldw	r3,0(r2)
   16700:	e0bffc17 	ldw	r2,-16(fp)
   16704:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16708:	008000f4 	movhi	r2,3
   1670c:	10962404 	addi	r2,r2,22672
   16710:	e0fffb17 	ldw	r3,-20(fp)
   16714:	18c00324 	muli	r3,r3,12
   16718:	10c5883a 	add	r2,r2,r3
   1671c:	10800204 	addi	r2,r2,8
   16720:	10c00017 	ldw	r3,0(r2)
   16724:	e0bffc17 	ldw	r2,-16(fp)
   16728:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1672c:	e13ffb17 	ldw	r4,-20(fp)
   16730:	000d5a00 	call	d5a0 <alt_release_fd>
  }
} 
   16734:	0001883a 	nop
   16738:	e037883a 	mov	sp,fp
   1673c:	dfc00117 	ldw	ra,4(sp)
   16740:	df000017 	ldw	fp,0(sp)
   16744:	dec00204 	addi	sp,sp,8
   16748:	f800283a 	ret

0001674c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1674c:	defffb04 	addi	sp,sp,-20
   16750:	dfc00415 	stw	ra,16(sp)
   16754:	df000315 	stw	fp,12(sp)
   16758:	df000304 	addi	fp,sp,12
   1675c:	e13ffd15 	stw	r4,-12(fp)
   16760:	e17ffe15 	stw	r5,-8(fp)
   16764:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16768:	01c07fc4 	movi	r7,511
   1676c:	01800044 	movi	r6,1
   16770:	e17ffd17 	ldw	r5,-12(fp)
   16774:	010000f4 	movhi	r4,3
   16778:	21162704 	addi	r4,r4,22684
   1677c:	00166880 	call	16688 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16780:	01c07fc4 	movi	r7,511
   16784:	000d883a 	mov	r6,zero
   16788:	e17ffe17 	ldw	r5,-8(fp)
   1678c:	010000f4 	movhi	r4,3
   16790:	21162404 	addi	r4,r4,22672
   16794:	00166880 	call	16688 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16798:	01c07fc4 	movi	r7,511
   1679c:	01800044 	movi	r6,1
   167a0:	e17fff17 	ldw	r5,-4(fp)
   167a4:	010000f4 	movhi	r4,3
   167a8:	21162a04 	addi	r4,r4,22696
   167ac:	00166880 	call	16688 <alt_open_fd>
}  
   167b0:	0001883a 	nop
   167b4:	e037883a 	mov	sp,fp
   167b8:	dfc00117 	ldw	ra,4(sp)
   167bc:	df000017 	ldw	fp,0(sp)
   167c0:	dec00204 	addi	sp,sp,8
   167c4:	f800283a 	ret

000167c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   167c8:	defffe04 	addi	sp,sp,-8
   167cc:	dfc00115 	stw	ra,4(sp)
   167d0:	df000015 	stw	fp,0(sp)
   167d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   167d8:	d0a00c17 	ldw	r2,-32720(gp)
   167dc:	10000326 	beq	r2,zero,167ec <alt_get_errno+0x24>
   167e0:	d0a00c17 	ldw	r2,-32720(gp)
   167e4:	103ee83a 	callr	r2
   167e8:	00000106 	br	167f0 <alt_get_errno+0x28>
   167ec:	d0a71604 	addi	r2,gp,-25512
}
   167f0:	e037883a 	mov	sp,fp
   167f4:	dfc00117 	ldw	ra,4(sp)
   167f8:	df000017 	ldw	fp,0(sp)
   167fc:	dec00204 	addi	sp,sp,8
   16800:	f800283a 	ret

00016804 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   16804:	defffd04 	addi	sp,sp,-12
   16808:	df000215 	stw	fp,8(sp)
   1680c:	df000204 	addi	fp,sp,8
   16810:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   16814:	e0bfff17 	ldw	r2,-4(fp)
   16818:	10800217 	ldw	r2,8(r2)
   1681c:	10d00034 	orhi	r3,r2,16384
   16820:	e0bfff17 	ldw	r2,-4(fp)
   16824:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16828:	e03ffe15 	stw	zero,-8(fp)
   1682c:	00001d06 	br	168a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16830:	008000f4 	movhi	r2,3
   16834:	10962404 	addi	r2,r2,22672
   16838:	e0fffe17 	ldw	r3,-8(fp)
   1683c:	18c00324 	muli	r3,r3,12
   16840:	10c5883a 	add	r2,r2,r3
   16844:	10c00017 	ldw	r3,0(r2)
   16848:	e0bfff17 	ldw	r2,-4(fp)
   1684c:	10800017 	ldw	r2,0(r2)
   16850:	1880111e 	bne	r3,r2,16898 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16854:	008000f4 	movhi	r2,3
   16858:	10962404 	addi	r2,r2,22672
   1685c:	e0fffe17 	ldw	r3,-8(fp)
   16860:	18c00324 	muli	r3,r3,12
   16864:	10c5883a 	add	r2,r2,r3
   16868:	10800204 	addi	r2,r2,8
   1686c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16870:	1000090e 	bge	r2,zero,16898 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   16874:	e0bffe17 	ldw	r2,-8(fp)
   16878:	10c00324 	muli	r3,r2,12
   1687c:	008000f4 	movhi	r2,3
   16880:	10962404 	addi	r2,r2,22672
   16884:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16888:	e0bfff17 	ldw	r2,-4(fp)
   1688c:	18800226 	beq	r3,r2,16898 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16890:	00bffcc4 	movi	r2,-13
   16894:	00000806 	br	168b8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16898:	e0bffe17 	ldw	r2,-8(fp)
   1689c:	10800044 	addi	r2,r2,1
   168a0:	e0bffe15 	stw	r2,-8(fp)
   168a4:	d0a00b17 	ldw	r2,-32724(gp)
   168a8:	1007883a 	mov	r3,r2
   168ac:	e0bffe17 	ldw	r2,-8(fp)
   168b0:	18bfdf2e 	bgeu	r3,r2,16830 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   168b4:	0005883a 	mov	r2,zero
}
   168b8:	e037883a 	mov	sp,fp
   168bc:	df000017 	ldw	fp,0(sp)
   168c0:	dec00104 	addi	sp,sp,4
   168c4:	f800283a 	ret

000168c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   168c8:	defff604 	addi	sp,sp,-40
   168cc:	dfc00915 	stw	ra,36(sp)
   168d0:	df000815 	stw	fp,32(sp)
   168d4:	df000804 	addi	fp,sp,32
   168d8:	e13ffd15 	stw	r4,-12(fp)
   168dc:	e17ffe15 	stw	r5,-8(fp)
   168e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   168e4:	00bfffc4 	movi	r2,-1
   168e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   168ec:	00bffb44 	movi	r2,-19
   168f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   168f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   168f8:	d1600904 	addi	r5,gp,-32732
   168fc:	e13ffd17 	ldw	r4,-12(fp)
   16900:	0016f3c0 	call	16f3c <alt_find_dev>
   16904:	e0bff815 	stw	r2,-32(fp)
   16908:	e0bff817 	ldw	r2,-32(fp)
   1690c:	1000051e 	bne	r2,zero,16924 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16910:	e13ffd17 	ldw	r4,-12(fp)
   16914:	0016fcc0 	call	16fcc <alt_find_file>
   16918:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1691c:	00800044 	movi	r2,1
   16920:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   16924:	e0bff817 	ldw	r2,-32(fp)
   16928:	10002926 	beq	r2,zero,169d0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1692c:	e13ff817 	ldw	r4,-32(fp)
   16930:	00170d40 	call	170d4 <alt_get_fd>
   16934:	e0bff915 	stw	r2,-28(fp)
   16938:	e0bff917 	ldw	r2,-28(fp)
   1693c:	1000030e 	bge	r2,zero,1694c <open+0x84>
    {
      status = index;
   16940:	e0bff917 	ldw	r2,-28(fp)
   16944:	e0bffa15 	stw	r2,-24(fp)
   16948:	00002306 	br	169d8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1694c:	e0bff917 	ldw	r2,-28(fp)
   16950:	10c00324 	muli	r3,r2,12
   16954:	008000f4 	movhi	r2,3
   16958:	10962404 	addi	r2,r2,22672
   1695c:	1885883a 	add	r2,r3,r2
   16960:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   16964:	e0fffe17 	ldw	r3,-8(fp)
   16968:	00900034 	movhi	r2,16384
   1696c:	10bfffc4 	addi	r2,r2,-1
   16970:	1886703a 	and	r3,r3,r2
   16974:	e0bffc17 	ldw	r2,-16(fp)
   16978:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1697c:	e0bffb17 	ldw	r2,-20(fp)
   16980:	1000051e 	bne	r2,zero,16998 <open+0xd0>
   16984:	e13ffc17 	ldw	r4,-16(fp)
   16988:	00168040 	call	16804 <alt_file_locked>
   1698c:	e0bffa15 	stw	r2,-24(fp)
   16990:	e0bffa17 	ldw	r2,-24(fp)
   16994:	10001016 	blt	r2,zero,169d8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16998:	e0bff817 	ldw	r2,-32(fp)
   1699c:	10800317 	ldw	r2,12(r2)
   169a0:	10000826 	beq	r2,zero,169c4 <open+0xfc>
   169a4:	e0bff817 	ldw	r2,-32(fp)
   169a8:	10800317 	ldw	r2,12(r2)
   169ac:	e1ffff17 	ldw	r7,-4(fp)
   169b0:	e1bffe17 	ldw	r6,-8(fp)
   169b4:	e17ffd17 	ldw	r5,-12(fp)
   169b8:	e13ffc17 	ldw	r4,-16(fp)
   169bc:	103ee83a 	callr	r2
   169c0:	00000106 	br	169c8 <open+0x100>
   169c4:	0005883a 	mov	r2,zero
   169c8:	e0bffa15 	stw	r2,-24(fp)
   169cc:	00000206 	br	169d8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   169d0:	00bffb44 	movi	r2,-19
   169d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   169d8:	e0bffa17 	ldw	r2,-24(fp)
   169dc:	1000090e 	bge	r2,zero,16a04 <open+0x13c>
  {
    alt_release_fd (index);  
   169e0:	e13ff917 	ldw	r4,-28(fp)
   169e4:	000d5a00 	call	d5a0 <alt_release_fd>
    ALT_ERRNO = -status;
   169e8:	00167c80 	call	167c8 <alt_get_errno>
   169ec:	1007883a 	mov	r3,r2
   169f0:	e0bffa17 	ldw	r2,-24(fp)
   169f4:	0085c83a 	sub	r2,zero,r2
   169f8:	18800015 	stw	r2,0(r3)
    return -1;
   169fc:	00bfffc4 	movi	r2,-1
   16a00:	00000106 	br	16a08 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   16a04:	e0bff917 	ldw	r2,-28(fp)
}
   16a08:	e037883a 	mov	sp,fp
   16a0c:	dfc00117 	ldw	ra,4(sp)
   16a10:	df000017 	ldw	fp,0(sp)
   16a14:	dec00204 	addi	sp,sp,8
   16a18:	f800283a 	ret

00016a1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   16a1c:	defffa04 	addi	sp,sp,-24
   16a20:	df000515 	stw	fp,20(sp)
   16a24:	df000504 	addi	fp,sp,20
   16a28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a2c:	0005303a 	rdctl	r2,status
   16a30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a34:	e0fffc17 	ldw	r3,-16(fp)
   16a38:	00bfff84 	movi	r2,-2
   16a3c:	1884703a 	and	r2,r3,r2
   16a40:	1001703a 	wrctl	status,r2
  
  return context;
   16a44:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16a48:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   16a4c:	e0bfff17 	ldw	r2,-4(fp)
   16a50:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16a54:	e0bffd17 	ldw	r2,-12(fp)
   16a58:	10800017 	ldw	r2,0(r2)
   16a5c:	e0fffd17 	ldw	r3,-12(fp)
   16a60:	18c00117 	ldw	r3,4(r3)
   16a64:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   16a68:	e0bffd17 	ldw	r2,-12(fp)
   16a6c:	10800117 	ldw	r2,4(r2)
   16a70:	e0fffd17 	ldw	r3,-12(fp)
   16a74:	18c00017 	ldw	r3,0(r3)
   16a78:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16a7c:	e0bffd17 	ldw	r2,-12(fp)
   16a80:	e0fffd17 	ldw	r3,-12(fp)
   16a84:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16a88:	e0bffd17 	ldw	r2,-12(fp)
   16a8c:	e0fffd17 	ldw	r3,-12(fp)
   16a90:	10c00015 	stw	r3,0(r2)
   16a94:	e0bffb17 	ldw	r2,-20(fp)
   16a98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a9c:	e0bffe17 	ldw	r2,-8(fp)
   16aa0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   16aa4:	0001883a 	nop
   16aa8:	e037883a 	mov	sp,fp
   16aac:	df000017 	ldw	fp,0(sp)
   16ab0:	dec00104 	addi	sp,sp,4
   16ab4:	f800283a 	ret

00016ab8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16ab8:	defffb04 	addi	sp,sp,-20
   16abc:	dfc00415 	stw	ra,16(sp)
   16ac0:	df000315 	stw	fp,12(sp)
   16ac4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   16ac8:	d0a02e17 	ldw	r2,-32584(gp)
   16acc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16ad0:	d0a73517 	ldw	r2,-25388(gp)
   16ad4:	10800044 	addi	r2,r2,1
   16ad8:	d0a73515 	stw	r2,-25388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16adc:	00002e06 	br	16b98 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16ae0:	e0bffd17 	ldw	r2,-12(fp)
   16ae4:	10800017 	ldw	r2,0(r2)
   16ae8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16aec:	e0bffd17 	ldw	r2,-12(fp)
   16af0:	10800403 	ldbu	r2,16(r2)
   16af4:	10803fcc 	andi	r2,r2,255
   16af8:	10000426 	beq	r2,zero,16b0c <alt_tick+0x54>
   16afc:	d0a73517 	ldw	r2,-25388(gp)
   16b00:	1000021e 	bne	r2,zero,16b0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   16b04:	e0bffd17 	ldw	r2,-12(fp)
   16b08:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   16b0c:	e0bffd17 	ldw	r2,-12(fp)
   16b10:	10800217 	ldw	r2,8(r2)
   16b14:	d0e73517 	ldw	r3,-25388(gp)
   16b18:	18801d36 	bltu	r3,r2,16b90 <alt_tick+0xd8>
   16b1c:	e0bffd17 	ldw	r2,-12(fp)
   16b20:	10800403 	ldbu	r2,16(r2)
   16b24:	10803fcc 	andi	r2,r2,255
   16b28:	1000191e 	bne	r2,zero,16b90 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   16b2c:	e0bffd17 	ldw	r2,-12(fp)
   16b30:	10800317 	ldw	r2,12(r2)
   16b34:	e0fffd17 	ldw	r3,-12(fp)
   16b38:	18c00517 	ldw	r3,20(r3)
   16b3c:	1809883a 	mov	r4,r3
   16b40:	103ee83a 	callr	r2
   16b44:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16b48:	e0bfff17 	ldw	r2,-4(fp)
   16b4c:	1000031e 	bne	r2,zero,16b5c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   16b50:	e13ffd17 	ldw	r4,-12(fp)
   16b54:	0016a1c0 	call	16a1c <alt_alarm_stop>
   16b58:	00000d06 	br	16b90 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16b5c:	e0bffd17 	ldw	r2,-12(fp)
   16b60:	10c00217 	ldw	r3,8(r2)
   16b64:	e0bfff17 	ldw	r2,-4(fp)
   16b68:	1887883a 	add	r3,r3,r2
   16b6c:	e0bffd17 	ldw	r2,-12(fp)
   16b70:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16b74:	e0bffd17 	ldw	r2,-12(fp)
   16b78:	10c00217 	ldw	r3,8(r2)
   16b7c:	d0a73517 	ldw	r2,-25388(gp)
   16b80:	1880032e 	bgeu	r3,r2,16b90 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16b84:	e0bffd17 	ldw	r2,-12(fp)
   16b88:	00c00044 	movi	r3,1
   16b8c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16b90:	e0bffe17 	ldw	r2,-8(fp)
   16b94:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16b98:	e0fffd17 	ldw	r3,-12(fp)
   16b9c:	d0a02e04 	addi	r2,gp,-32584
   16ba0:	18bfcf1e 	bne	r3,r2,16ae0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16ba4:	000e78c0 	call	e78c <OSTimeTick>
}
   16ba8:	0001883a 	nop
   16bac:	e037883a 	mov	sp,fp
   16bb0:	dfc00117 	ldw	ra,4(sp)
   16bb4:	df000017 	ldw	fp,0(sp)
   16bb8:	dec00204 	addi	sp,sp,8
   16bbc:	f800283a 	ret

00016bc0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   16bc0:	deffff04 	addi	sp,sp,-4
   16bc4:	df000015 	stw	fp,0(sp)
   16bc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   16bcc:	000170fa 	wrctl	ienable,zero
}
   16bd0:	0001883a 	nop
   16bd4:	e037883a 	mov	sp,fp
   16bd8:	df000017 	ldw	fp,0(sp)
   16bdc:	dec00104 	addi	sp,sp,4
   16be0:	f800283a 	ret

00016be4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   16be4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   16be8:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   16bec:	d1272e17 	ldw	r4,-25416(gp)

      stw ra,  0(sp)
   16bf0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   16bf4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   16bf8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   16bfc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   16c00:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   16c04:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   16c08:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   16c0c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   16c10:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   16c14:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   16c18:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   16c1c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   16c20:	0016e580 	call	16e58 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   16c24:	d1272917 	ldw	r4,-25436(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   16c28:	d1672107 	ldb	r5,-25468(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   16c2c:	d1272e15 	stw	r4,-25416(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   16c30:	d1672145 	stb	r5,-25467(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   16c34:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   16c38:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   16c3c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   16c40:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   16c44:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   16c48:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   16c4c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   16c50:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   16c54:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   16c58:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   16c5c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   16c60:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   16c64:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   16c68:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   16c6c:	f800283a 	ret

00016c70 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   16c70:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   16c74:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   16c78:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   16c7c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   16c80:	0016e580 	call	16e58 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   16c84:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   16c88:	d4a71f45 	stb	r18,-25475(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   16c8c:	003fe506 	br	16c24 <OSCtxSw+0x40>

00016c90 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   16c90:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   16c94:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   16c98:	10800054 	ori	r2,r2,1
      wrctl status, r2
   16c9c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   16ca0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   16ca4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   16ca8:	dec00204 	addi	sp,sp,8

      callr r2
   16cac:	103ee83a 	callr	r2

      nop
   16cb0:	0001883a 	nop

00016cb4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   16cb4:	defff704 	addi	sp,sp,-36
   16cb8:	dfc00815 	stw	ra,32(sp)
   16cbc:	df000715 	stw	fp,28(sp)
   16cc0:	df000704 	addi	fp,sp,28
   16cc4:	e13ffc15 	stw	r4,-16(fp)
   16cc8:	e17ffd15 	stw	r5,-12(fp)
   16ccc:	e1bffe15 	stw	r6,-8(fp)
   16cd0:	3805883a 	mov	r2,r7
   16cd4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   16cd8:	e0fffe17 	ldw	r3,-8(fp)
   16cdc:	00bfff04 	movi	r2,-4
   16ce0:	1884703a 	and	r2,r3,r2
   16ce4:	10bef704 	addi	r2,r2,-1060
   16ce8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   16cec:	01810904 	movi	r6,1060
   16cf0:	000b883a 	mov	r5,zero
   16cf4:	e13ff917 	ldw	r4,-28(fp)
   16cf8:	00064b00 	call	64b0 <memset>
   16cfc:	e0bff917 	ldw	r2,-28(fp)
   16d00:	10c0bb04 	addi	r3,r2,748
   16d04:	e0bff917 	ldw	r2,-28(fp)
   16d08:	10c00115 	stw	r3,4(r2)
   16d0c:	e0bff917 	ldw	r2,-28(fp)
   16d10:	10c0d504 	addi	r3,r2,852
   16d14:	e0bff917 	ldw	r2,-28(fp)
   16d18:	10c00215 	stw	r3,8(r2)
   16d1c:	e0bff917 	ldw	r2,-28(fp)
   16d20:	10c0ef04 	addi	r3,r2,956
   16d24:	e0bff917 	ldw	r2,-28(fp)
   16d28:	10c00315 	stw	r3,12(r2)
   16d2c:	e0fff917 	ldw	r3,-28(fp)
   16d30:	008000f4 	movhi	r2,3
   16d34:	1093f004 	addi	r2,r2,20416
   16d38:	18800d15 	stw	r2,52(r3)
   16d3c:	e0bff917 	ldw	r2,-28(fp)
   16d40:	00c00044 	movi	r3,1
   16d44:	10c02915 	stw	r3,164(r2)
   16d48:	10002a15 	stw	zero,168(r2)
   16d4c:	e0bff917 	ldw	r2,-28(fp)
   16d50:	00ccc384 	movi	r3,13070
   16d54:	10c02b0d 	sth	r3,172(r2)
   16d58:	e0bff917 	ldw	r2,-28(fp)
   16d5c:	00eaf344 	movi	r3,-21555
   16d60:	10c02b8d 	sth	r3,174(r2)
   16d64:	e0bff917 	ldw	r2,-28(fp)
   16d68:	00c48d04 	movi	r3,4660
   16d6c:	10c02c0d 	sth	r3,176(r2)
   16d70:	e0bff917 	ldw	r2,-28(fp)
   16d74:	00f99b44 	movi	r3,-6547
   16d78:	10c02c8d 	sth	r3,178(r2)
   16d7c:	e0bff917 	ldw	r2,-28(fp)
   16d80:	00f7bb04 	movi	r3,-8468
   16d84:	10c02d0d 	sth	r3,180(r2)
   16d88:	e0bff917 	ldw	r2,-28(fp)
   16d8c:	00c00144 	movi	r3,5
   16d90:	10c02d8d 	sth	r3,182(r2)
   16d94:	e0bff917 	ldw	r2,-28(fp)
   16d98:	00c002c4 	movi	r3,11
   16d9c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   16da0:	e0bff917 	ldw	r2,-28(fp)
   16da4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   16da8:	e0bffa17 	ldw	r2,-24(fp)
   16dac:	10bff304 	addi	r2,r2,-52
   16db0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   16db4:	e0bffb17 	ldw	r2,-20(fp)
   16db8:	10800c04 	addi	r2,r2,48
   16dbc:	e0fffc17 	ldw	r3,-16(fp)
   16dc0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   16dc4:	e0bffb17 	ldw	r2,-20(fp)
   16dc8:	10800b04 	addi	r2,r2,44
   16dcc:	e0fffd17 	ldw	r3,-12(fp)
   16dd0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   16dd4:	e0bffb17 	ldw	r2,-20(fp)
   16dd8:	10800a04 	addi	r2,r2,40
   16ddc:	e0fff917 	ldw	r3,-28(fp)
   16de0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   16de4:	00800074 	movhi	r2,1
   16de8:	109b2404 	addi	r2,r2,27792
   16dec:	10c00104 	addi	r3,r2,4
   16df0:	e0bffb17 	ldw	r2,-20(fp)
   16df4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   16df8:	e0bffb17 	ldw	r2,-20(fp)
}
   16dfc:	e037883a 	mov	sp,fp
   16e00:	dfc00117 	ldw	ra,4(sp)
   16e04:	df000017 	ldw	fp,0(sp)
   16e08:	dec00204 	addi	sp,sp,8
   16e0c:	f800283a 	ret

00016e10 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   16e10:	defffe04 	addi	sp,sp,-8
   16e14:	df000115 	stw	fp,4(sp)
   16e18:	df000104 	addi	fp,sp,4
   16e1c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   16e20:	0001883a 	nop
   16e24:	e037883a 	mov	sp,fp
   16e28:	df000017 	ldw	fp,0(sp)
   16e2c:	dec00104 	addi	sp,sp,4
   16e30:	f800283a 	ret

00016e34 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   16e34:	defffe04 	addi	sp,sp,-8
   16e38:	df000115 	stw	fp,4(sp)
   16e3c:	df000104 	addi	fp,sp,4
   16e40:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   16e44:	0001883a 	nop
   16e48:	e037883a 	mov	sp,fp
   16e4c:	df000017 	ldw	fp,0(sp)
   16e50:	dec00104 	addi	sp,sp,4
   16e54:	f800283a 	ret

00016e58 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   16e58:	deffff04 	addi	sp,sp,-4
   16e5c:	df000015 	stw	fp,0(sp)
   16e60:	d839883a 	mov	fp,sp
}
   16e64:	0001883a 	nop
   16e68:	e037883a 	mov	sp,fp
   16e6c:	df000017 	ldw	fp,0(sp)
   16e70:	dec00104 	addi	sp,sp,4
   16e74:	f800283a 	ret

00016e78 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   16e78:	deffff04 	addi	sp,sp,-4
   16e7c:	df000015 	stw	fp,0(sp)
   16e80:	d839883a 	mov	fp,sp
}
   16e84:	0001883a 	nop
   16e88:	e037883a 	mov	sp,fp
   16e8c:	df000017 	ldw	fp,0(sp)
   16e90:	dec00104 	addi	sp,sp,4
   16e94:	f800283a 	ret

00016e98 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   16e98:	deffff04 	addi	sp,sp,-4
   16e9c:	df000015 	stw	fp,0(sp)
   16ea0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   16ea4:	0001883a 	nop
   16ea8:	e037883a 	mov	sp,fp
   16eac:	df000017 	ldw	fp,0(sp)
   16eb0:	dec00104 	addi	sp,sp,4
   16eb4:	f800283a 	ret

00016eb8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   16eb8:	deffff04 	addi	sp,sp,-4
   16ebc:	df000015 	stw	fp,0(sp)
   16ec0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   16ec4:	0001883a 	nop
   16ec8:	e037883a 	mov	sp,fp
   16ecc:	df000017 	ldw	fp,0(sp)
   16ed0:	dec00104 	addi	sp,sp,4
   16ed4:	f800283a 	ret

00016ed8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   16ed8:	deffff04 	addi	sp,sp,-4
   16edc:	df000015 	stw	fp,0(sp)
   16ee0:	d839883a 	mov	fp,sp
}
   16ee4:	0001883a 	nop
   16ee8:	e037883a 	mov	sp,fp
   16eec:	df000017 	ldw	fp,0(sp)
   16ef0:	dec00104 	addi	sp,sp,4
   16ef4:	f800283a 	ret

00016ef8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   16ef8:	deffff04 	addi	sp,sp,-4
   16efc:	df000015 	stw	fp,0(sp)
   16f00:	d839883a 	mov	fp,sp
}
   16f04:	0001883a 	nop
   16f08:	e037883a 	mov	sp,fp
   16f0c:	df000017 	ldw	fp,0(sp)
   16f10:	dec00104 	addi	sp,sp,4
   16f14:	f800283a 	ret

00016f18 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   16f18:	defffe04 	addi	sp,sp,-8
   16f1c:	df000115 	stw	fp,4(sp)
   16f20:	df000104 	addi	fp,sp,4
   16f24:	e13fff15 	stw	r4,-4(fp)
}
   16f28:	0001883a 	nop
   16f2c:	e037883a 	mov	sp,fp
   16f30:	df000017 	ldw	fp,0(sp)
   16f34:	dec00104 	addi	sp,sp,4
   16f38:	f800283a 	ret

00016f3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16f3c:	defffa04 	addi	sp,sp,-24
   16f40:	dfc00515 	stw	ra,20(sp)
   16f44:	df000415 	stw	fp,16(sp)
   16f48:	df000404 	addi	fp,sp,16
   16f4c:	e13ffe15 	stw	r4,-8(fp)
   16f50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16f54:	e0bfff17 	ldw	r2,-4(fp)
   16f58:	10800017 	ldw	r2,0(r2)
   16f5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16f60:	e13ffe17 	ldw	r4,-8(fp)
   16f64:	00008800 	call	880 <strlen>
   16f68:	10800044 	addi	r2,r2,1
   16f6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16f70:	00000d06 	br	16fa8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16f74:	e0bffc17 	ldw	r2,-16(fp)
   16f78:	10800217 	ldw	r2,8(r2)
   16f7c:	e0fffd17 	ldw	r3,-12(fp)
   16f80:	180d883a 	mov	r6,r3
   16f84:	e17ffe17 	ldw	r5,-8(fp)
   16f88:	1009883a 	mov	r4,r2
   16f8c:	00173280 	call	17328 <memcmp>
   16f90:	1000021e 	bne	r2,zero,16f9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16f94:	e0bffc17 	ldw	r2,-16(fp)
   16f98:	00000706 	br	16fb8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16f9c:	e0bffc17 	ldw	r2,-16(fp)
   16fa0:	10800017 	ldw	r2,0(r2)
   16fa4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16fa8:	e0fffc17 	ldw	r3,-16(fp)
   16fac:	e0bfff17 	ldw	r2,-4(fp)
   16fb0:	18bff01e 	bne	r3,r2,16f74 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   16fb4:	0005883a 	mov	r2,zero
}
   16fb8:	e037883a 	mov	sp,fp
   16fbc:	dfc00117 	ldw	ra,4(sp)
   16fc0:	df000017 	ldw	fp,0(sp)
   16fc4:	dec00204 	addi	sp,sp,8
   16fc8:	f800283a 	ret

00016fcc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16fcc:	defffb04 	addi	sp,sp,-20
   16fd0:	dfc00415 	stw	ra,16(sp)
   16fd4:	df000315 	stw	fp,12(sp)
   16fd8:	df000304 	addi	fp,sp,12
   16fdc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16fe0:	d0a00717 	ldw	r2,-32740(gp)
   16fe4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16fe8:	00003106 	br	170b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   16fec:	e0bffd17 	ldw	r2,-12(fp)
   16ff0:	10800217 	ldw	r2,8(r2)
   16ff4:	1009883a 	mov	r4,r2
   16ff8:	00008800 	call	880 <strlen>
   16ffc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17000:	e0bffd17 	ldw	r2,-12(fp)
   17004:	10c00217 	ldw	r3,8(r2)
   17008:	e0bffe17 	ldw	r2,-8(fp)
   1700c:	10bfffc4 	addi	r2,r2,-1
   17010:	1885883a 	add	r2,r3,r2
   17014:	10800003 	ldbu	r2,0(r2)
   17018:	10803fcc 	andi	r2,r2,255
   1701c:	1080201c 	xori	r2,r2,128
   17020:	10bfe004 	addi	r2,r2,-128
   17024:	10800bd8 	cmpnei	r2,r2,47
   17028:	1000031e 	bne	r2,zero,17038 <alt_find_file+0x6c>
    {
      len -= 1;
   1702c:	e0bffe17 	ldw	r2,-8(fp)
   17030:	10bfffc4 	addi	r2,r2,-1
   17034:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17038:	e0bffe17 	ldw	r2,-8(fp)
   1703c:	e0ffff17 	ldw	r3,-4(fp)
   17040:	1885883a 	add	r2,r3,r2
   17044:	10800003 	ldbu	r2,0(r2)
   17048:	10803fcc 	andi	r2,r2,255
   1704c:	1080201c 	xori	r2,r2,128
   17050:	10bfe004 	addi	r2,r2,-128
   17054:	10800be0 	cmpeqi	r2,r2,47
   17058:	1000081e 	bne	r2,zero,1707c <alt_find_file+0xb0>
   1705c:	e0bffe17 	ldw	r2,-8(fp)
   17060:	e0ffff17 	ldw	r3,-4(fp)
   17064:	1885883a 	add	r2,r3,r2
   17068:	10800003 	ldbu	r2,0(r2)
   1706c:	10803fcc 	andi	r2,r2,255
   17070:	1080201c 	xori	r2,r2,128
   17074:	10bfe004 	addi	r2,r2,-128
   17078:	10000a1e 	bne	r2,zero,170a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1707c:	e0bffd17 	ldw	r2,-12(fp)
   17080:	10800217 	ldw	r2,8(r2)
   17084:	e0fffe17 	ldw	r3,-8(fp)
   17088:	180d883a 	mov	r6,r3
   1708c:	e17fff17 	ldw	r5,-4(fp)
   17090:	1009883a 	mov	r4,r2
   17094:	00173280 	call	17328 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17098:	1000021e 	bne	r2,zero,170a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1709c:	e0bffd17 	ldw	r2,-12(fp)
   170a0:	00000706 	br	170c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   170a4:	e0bffd17 	ldw	r2,-12(fp)
   170a8:	10800017 	ldw	r2,0(r2)
   170ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   170b0:	e0fffd17 	ldw	r3,-12(fp)
   170b4:	d0a00704 	addi	r2,gp,-32740
   170b8:	18bfcc1e 	bne	r3,r2,16fec <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   170bc:	0005883a 	mov	r2,zero
}
   170c0:	e037883a 	mov	sp,fp
   170c4:	dfc00117 	ldw	ra,4(sp)
   170c8:	df000017 	ldw	fp,0(sp)
   170cc:	dec00204 	addi	sp,sp,8
   170d0:	f800283a 	ret

000170d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   170d4:	defff904 	addi	sp,sp,-28
   170d8:	dfc00615 	stw	ra,24(sp)
   170dc:	df000515 	stw	fp,20(sp)
   170e0:	df000504 	addi	fp,sp,20
   170e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   170e8:	00bffa04 	movi	r2,-24
   170ec:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   170f0:	d0a71717 	ldw	r2,-25508(gp)
   170f4:	e0bffd15 	stw	r2,-12(fp)
   170f8:	e03ffe0d 	sth	zero,-8(fp)
   170fc:	e0bffe0b 	ldhu	r2,-8(fp)
   17100:	e0fffe84 	addi	r3,fp,-6
   17104:	180d883a 	mov	r6,r3
   17108:	100b883a 	mov	r5,r2
   1710c:	e13ffd17 	ldw	r4,-12(fp)
   17110:	0012fd00 	call	12fd0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17114:	e03ffb15 	stw	zero,-20(fp)
   17118:	00001906 	br	17180 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1711c:	008000f4 	movhi	r2,3
   17120:	10962404 	addi	r2,r2,22672
   17124:	e0fffb17 	ldw	r3,-20(fp)
   17128:	18c00324 	muli	r3,r3,12
   1712c:	10c5883a 	add	r2,r2,r3
   17130:	10800017 	ldw	r2,0(r2)
   17134:	10000f1e 	bne	r2,zero,17174 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   17138:	008000f4 	movhi	r2,3
   1713c:	10962404 	addi	r2,r2,22672
   17140:	e0fffb17 	ldw	r3,-20(fp)
   17144:	18c00324 	muli	r3,r3,12
   17148:	10c5883a 	add	r2,r2,r3
   1714c:	e0ffff17 	ldw	r3,-4(fp)
   17150:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   17154:	d0e00b17 	ldw	r3,-32724(gp)
   17158:	e0bffb17 	ldw	r2,-20(fp)
   1715c:	1880020e 	bge	r3,r2,17168 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   17160:	e0bffb17 	ldw	r2,-20(fp)
   17164:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   17168:	e0bffb17 	ldw	r2,-20(fp)
   1716c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   17170:	00000606 	br	1718c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17174:	e0bffb17 	ldw	r2,-20(fp)
   17178:	10800044 	addi	r2,r2,1
   1717c:	e0bffb15 	stw	r2,-20(fp)
   17180:	e0bffb17 	ldw	r2,-20(fp)
   17184:	10800810 	cmplti	r2,r2,32
   17188:	103fe41e 	bne	r2,zero,1711c <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1718c:	d0a71717 	ldw	r2,-25508(gp)
   17190:	1009883a 	mov	r4,r2
   17194:	00133480 	call	13348 <OSSemPost>

  return rc;
   17198:	e0bffc17 	ldw	r2,-16(fp)
}
   1719c:	e037883a 	mov	sp,fp
   171a0:	dfc00117 	ldw	ra,4(sp)
   171a4:	df000017 	ldw	fp,0(sp)
   171a8:	dec00204 	addi	sp,sp,8
   171ac:	f800283a 	ret

000171b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   171b0:	defffb04 	addi	sp,sp,-20
   171b4:	df000415 	stw	fp,16(sp)
   171b8:	df000404 	addi	fp,sp,16
   171bc:	e13ffe15 	stw	r4,-8(fp)
   171c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   171c4:	e0bfff17 	ldw	r2,-4(fp)
   171c8:	10840070 	cmpltui	r2,r2,4097
   171cc:	1000021e 	bne	r2,zero,171d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   171d0:	00840004 	movi	r2,4096
   171d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   171d8:	e0fffe17 	ldw	r3,-8(fp)
   171dc:	e0bfff17 	ldw	r2,-4(fp)
   171e0:	1885883a 	add	r2,r3,r2
   171e4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   171e8:	e0bffe17 	ldw	r2,-8(fp)
   171ec:	e0bffc15 	stw	r2,-16(fp)
   171f0:	00000506 	br	17208 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   171f4:	e0bffc17 	ldw	r2,-16(fp)
   171f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   171fc:	e0bffc17 	ldw	r2,-16(fp)
   17200:	10800804 	addi	r2,r2,32
   17204:	e0bffc15 	stw	r2,-16(fp)
   17208:	e0fffc17 	ldw	r3,-16(fp)
   1720c:	e0bffd17 	ldw	r2,-12(fp)
   17210:	18bff836 	bltu	r3,r2,171f4 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   17214:	e0bffe17 	ldw	r2,-8(fp)
   17218:	108007cc 	andi	r2,r2,31
   1721c:	10000226 	beq	r2,zero,17228 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   17220:	e0bffc17 	ldw	r2,-16(fp)
   17224:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   17228:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1722c:	0001883a 	nop
   17230:	e037883a 	mov	sp,fp
   17234:	df000017 	ldw	fp,0(sp)
   17238:	dec00104 	addi	sp,sp,4
   1723c:	f800283a 	ret

00017240 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   17240:	defffe04 	addi	sp,sp,-8
   17244:	df000115 	stw	fp,4(sp)
   17248:	df000104 	addi	fp,sp,4
   1724c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   17250:	e0bfff17 	ldw	r2,-4(fp)
   17254:	10bffe84 	addi	r2,r2,-6
   17258:	10c00428 	cmpgeui	r3,r2,16
   1725c:	18001a1e 	bne	r3,zero,172c8 <alt_exception_cause_generated_bad_addr+0x88>
   17260:	100690ba 	slli	r3,r2,2
   17264:	00800074 	movhi	r2,1
   17268:	109c9e04 	addi	r2,r2,29304
   1726c:	1885883a 	add	r2,r3,r2
   17270:	10800017 	ldw	r2,0(r2)
   17274:	1000683a 	jmp	r2
   17278:	000172b8 	rdprs	zero,zero,1482
   1727c:	000172b8 	rdprs	zero,zero,1482
   17280:	000172c8 	cmpgei	zero,zero,1483
   17284:	000172c8 	cmpgei	zero,zero,1483
   17288:	000172c8 	cmpgei	zero,zero,1483
   1728c:	000172b8 	rdprs	zero,zero,1482
   17290:	000172c0 	call	172c <___vfprintf_internal_r+0xe14>
   17294:	000172c8 	cmpgei	zero,zero,1483
   17298:	000172b8 	rdprs	zero,zero,1482
   1729c:	000172b8 	rdprs	zero,zero,1482
   172a0:	000172c8 	cmpgei	zero,zero,1483
   172a4:	000172b8 	rdprs	zero,zero,1482
   172a8:	000172c0 	call	172c <___vfprintf_internal_r+0xe14>
   172ac:	000172c8 	cmpgei	zero,zero,1483
   172b0:	000172c8 	cmpgei	zero,zero,1483
   172b4:	000172b8 	rdprs	zero,zero,1482
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   172b8:	00800044 	movi	r2,1
   172bc:	00000306 	br	172cc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   172c0:	0005883a 	mov	r2,zero
   172c4:	00000106 	br	172cc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   172c8:	0005883a 	mov	r2,zero
  }
}
   172cc:	e037883a 	mov	sp,fp
   172d0:	df000017 	ldw	fp,0(sp)
   172d4:	dec00104 	addi	sp,sp,4
   172d8:	f800283a 	ret

000172dc <atexit>:
   172dc:	200b883a 	mov	r5,r4
   172e0:	000f883a 	mov	r7,zero
   172e4:	000d883a 	mov	r6,zero
   172e8:	0009883a 	mov	r4,zero
   172ec:	00173a41 	jmpi	173a4 <__register_exitproc>

000172f0 <exit>:
   172f0:	defffe04 	addi	sp,sp,-8
   172f4:	000b883a 	mov	r5,zero
   172f8:	dc000015 	stw	r16,0(sp)
   172fc:	dfc00115 	stw	ra,4(sp)
   17300:	2021883a 	mov	r16,r4
   17304:	00174bc0 	call	174bc <__call_exitprocs>
   17308:	008000f4 	movhi	r2,3
   1730c:	109aa004 	addi	r2,r2,27264
   17310:	11000017 	ldw	r4,0(r2)
   17314:	20800f17 	ldw	r2,60(r4)
   17318:	10000126 	beq	r2,zero,17320 <exit+0x30>
   1731c:	103ee83a 	callr	r2
   17320:	8009883a 	mov	r4,r16
   17324:	001763c0 	call	1763c <_exit>

00017328 <memcmp>:
   17328:	01c000c4 	movi	r7,3
   1732c:	3980192e 	bgeu	r7,r6,17394 <memcmp+0x6c>
   17330:	2144b03a 	or	r2,r4,r5
   17334:	11c4703a 	and	r2,r2,r7
   17338:	10000f26 	beq	r2,zero,17378 <memcmp+0x50>
   1733c:	20800003 	ldbu	r2,0(r4)
   17340:	28c00003 	ldbu	r3,0(r5)
   17344:	10c0151e 	bne	r2,r3,1739c <memcmp+0x74>
   17348:	31bfff84 	addi	r6,r6,-2
   1734c:	01ffffc4 	movi	r7,-1
   17350:	00000406 	br	17364 <memcmp+0x3c>
   17354:	20800003 	ldbu	r2,0(r4)
   17358:	28c00003 	ldbu	r3,0(r5)
   1735c:	31bfffc4 	addi	r6,r6,-1
   17360:	10c00e1e 	bne	r2,r3,1739c <memcmp+0x74>
   17364:	21000044 	addi	r4,r4,1
   17368:	29400044 	addi	r5,r5,1
   1736c:	31fff91e 	bne	r6,r7,17354 <memcmp+0x2c>
   17370:	0005883a 	mov	r2,zero
   17374:	f800283a 	ret
   17378:	20c00017 	ldw	r3,0(r4)
   1737c:	28800017 	ldw	r2,0(r5)
   17380:	18bfee1e 	bne	r3,r2,1733c <memcmp+0x14>
   17384:	31bfff04 	addi	r6,r6,-4
   17388:	21000104 	addi	r4,r4,4
   1738c:	29400104 	addi	r5,r5,4
   17390:	39bff936 	bltu	r7,r6,17378 <memcmp+0x50>
   17394:	303fe91e 	bne	r6,zero,1733c <memcmp+0x14>
   17398:	003ff506 	br	17370 <memcmp+0x48>
   1739c:	10c5c83a 	sub	r2,r2,r3
   173a0:	f800283a 	ret

000173a4 <__register_exitproc>:
   173a4:	defffa04 	addi	sp,sp,-24
   173a8:	dc000315 	stw	r16,12(sp)
   173ac:	040000f4 	movhi	r16,3
   173b0:	841aa004 	addi	r16,r16,27264
   173b4:	80c00017 	ldw	r3,0(r16)
   173b8:	dc400415 	stw	r17,16(sp)
   173bc:	dfc00515 	stw	ra,20(sp)
   173c0:	18805217 	ldw	r2,328(r3)
   173c4:	2023883a 	mov	r17,r4
   173c8:	10003726 	beq	r2,zero,174a8 <__register_exitproc+0x104>
   173cc:	10c00117 	ldw	r3,4(r2)
   173d0:	010007c4 	movi	r4,31
   173d4:	20c00e16 	blt	r4,r3,17410 <__register_exitproc+0x6c>
   173d8:	1a000044 	addi	r8,r3,1
   173dc:	8800221e 	bne	r17,zero,17468 <__register_exitproc+0xc4>
   173e0:	18c00084 	addi	r3,r3,2
   173e4:	18c7883a 	add	r3,r3,r3
   173e8:	18c7883a 	add	r3,r3,r3
   173ec:	12000115 	stw	r8,4(r2)
   173f0:	10c7883a 	add	r3,r2,r3
   173f4:	19400015 	stw	r5,0(r3)
   173f8:	0005883a 	mov	r2,zero
   173fc:	dfc00517 	ldw	ra,20(sp)
   17400:	dc400417 	ldw	r17,16(sp)
   17404:	dc000317 	ldw	r16,12(sp)
   17408:	dec00604 	addi	sp,sp,24
   1740c:	f800283a 	ret
   17410:	00800034 	movhi	r2,0
   17414:	10800004 	addi	r2,r2,0
   17418:	10002626 	beq	r2,zero,174b4 <__register_exitproc+0x110>
   1741c:	01006404 	movi	r4,400
   17420:	d9400015 	stw	r5,0(sp)
   17424:	d9800115 	stw	r6,4(sp)
   17428:	d9c00215 	stw	r7,8(sp)
   1742c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   17430:	d9400017 	ldw	r5,0(sp)
   17434:	d9800117 	ldw	r6,4(sp)
   17438:	d9c00217 	ldw	r7,8(sp)
   1743c:	10001d26 	beq	r2,zero,174b4 <__register_exitproc+0x110>
   17440:	81000017 	ldw	r4,0(r16)
   17444:	10000115 	stw	zero,4(r2)
   17448:	02000044 	movi	r8,1
   1744c:	22405217 	ldw	r9,328(r4)
   17450:	0007883a 	mov	r3,zero
   17454:	12400015 	stw	r9,0(r2)
   17458:	20805215 	stw	r2,328(r4)
   1745c:	10006215 	stw	zero,392(r2)
   17460:	10006315 	stw	zero,396(r2)
   17464:	883fde26 	beq	r17,zero,173e0 <__register_exitproc+0x3c>
   17468:	18c9883a 	add	r4,r3,r3
   1746c:	2109883a 	add	r4,r4,r4
   17470:	1109883a 	add	r4,r2,r4
   17474:	21802215 	stw	r6,136(r4)
   17478:	01800044 	movi	r6,1
   1747c:	12406217 	ldw	r9,392(r2)
   17480:	30cc983a 	sll	r6,r6,r3
   17484:	4992b03a 	or	r9,r9,r6
   17488:	12406215 	stw	r9,392(r2)
   1748c:	21c04215 	stw	r7,264(r4)
   17490:	01000084 	movi	r4,2
   17494:	893fd21e 	bne	r17,r4,173e0 <__register_exitproc+0x3c>
   17498:	11006317 	ldw	r4,396(r2)
   1749c:	218cb03a 	or	r6,r4,r6
   174a0:	11806315 	stw	r6,396(r2)
   174a4:	003fce06 	br	173e0 <__register_exitproc+0x3c>
   174a8:	18805304 	addi	r2,r3,332
   174ac:	18805215 	stw	r2,328(r3)
   174b0:	003fc606 	br	173cc <__register_exitproc+0x28>
   174b4:	00bfffc4 	movi	r2,-1
   174b8:	003fd006 	br	173fc <__register_exitproc+0x58>

000174bc <__call_exitprocs>:
   174bc:	defff504 	addi	sp,sp,-44
   174c0:	df000915 	stw	fp,36(sp)
   174c4:	dd400615 	stw	r21,24(sp)
   174c8:	dc800315 	stw	r18,12(sp)
   174cc:	dfc00a15 	stw	ra,40(sp)
   174d0:	ddc00815 	stw	r23,32(sp)
   174d4:	dd800715 	stw	r22,28(sp)
   174d8:	dd000515 	stw	r20,20(sp)
   174dc:	dcc00415 	stw	r19,16(sp)
   174e0:	dc400215 	stw	r17,8(sp)
   174e4:	dc000115 	stw	r16,4(sp)
   174e8:	d9000015 	stw	r4,0(sp)
   174ec:	2839883a 	mov	fp,r5
   174f0:	04800044 	movi	r18,1
   174f4:	057fffc4 	movi	r21,-1
   174f8:	008000f4 	movhi	r2,3
   174fc:	109aa004 	addi	r2,r2,27264
   17500:	12000017 	ldw	r8,0(r2)
   17504:	45005217 	ldw	r20,328(r8)
   17508:	44c05204 	addi	r19,r8,328
   1750c:	a0001c26 	beq	r20,zero,17580 <__call_exitprocs+0xc4>
   17510:	a0800117 	ldw	r2,4(r20)
   17514:	15ffffc4 	addi	r23,r2,-1
   17518:	b8000d16 	blt	r23,zero,17550 <__call_exitprocs+0x94>
   1751c:	14000044 	addi	r16,r2,1
   17520:	8421883a 	add	r16,r16,r16
   17524:	8421883a 	add	r16,r16,r16
   17528:	84402004 	addi	r17,r16,128
   1752c:	a463883a 	add	r17,r20,r17
   17530:	a421883a 	add	r16,r20,r16
   17534:	e0001e26 	beq	fp,zero,175b0 <__call_exitprocs+0xf4>
   17538:	80804017 	ldw	r2,256(r16)
   1753c:	e0801c26 	beq	fp,r2,175b0 <__call_exitprocs+0xf4>
   17540:	bdffffc4 	addi	r23,r23,-1
   17544:	843fff04 	addi	r16,r16,-4
   17548:	8c7fff04 	addi	r17,r17,-4
   1754c:	bd7ff91e 	bne	r23,r21,17534 <__call_exitprocs+0x78>
   17550:	00800034 	movhi	r2,0
   17554:	10800004 	addi	r2,r2,0
   17558:	10000926 	beq	r2,zero,17580 <__call_exitprocs+0xc4>
   1755c:	a0800117 	ldw	r2,4(r20)
   17560:	1000301e 	bne	r2,zero,17624 <__call_exitprocs+0x168>
   17564:	a0800017 	ldw	r2,0(r20)
   17568:	10003226 	beq	r2,zero,17634 <__call_exitprocs+0x178>
   1756c:	a009883a 	mov	r4,r20
   17570:	98800015 	stw	r2,0(r19)
   17574:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   17578:	9d000017 	ldw	r20,0(r19)
   1757c:	a03fe41e 	bne	r20,zero,17510 <__call_exitprocs+0x54>
   17580:	dfc00a17 	ldw	ra,40(sp)
   17584:	df000917 	ldw	fp,36(sp)
   17588:	ddc00817 	ldw	r23,32(sp)
   1758c:	dd800717 	ldw	r22,28(sp)
   17590:	dd400617 	ldw	r21,24(sp)
   17594:	dd000517 	ldw	r20,20(sp)
   17598:	dcc00417 	ldw	r19,16(sp)
   1759c:	dc800317 	ldw	r18,12(sp)
   175a0:	dc400217 	ldw	r17,8(sp)
   175a4:	dc000117 	ldw	r16,4(sp)
   175a8:	dec00b04 	addi	sp,sp,44
   175ac:	f800283a 	ret
   175b0:	a0800117 	ldw	r2,4(r20)
   175b4:	80c00017 	ldw	r3,0(r16)
   175b8:	10bfffc4 	addi	r2,r2,-1
   175bc:	15c01426 	beq	r2,r23,17610 <__call_exitprocs+0x154>
   175c0:	80000015 	stw	zero,0(r16)
   175c4:	183fde26 	beq	r3,zero,17540 <__call_exitprocs+0x84>
   175c8:	95c8983a 	sll	r4,r18,r23
   175cc:	a0806217 	ldw	r2,392(r20)
   175d0:	a5800117 	ldw	r22,4(r20)
   175d4:	2084703a 	and	r2,r4,r2
   175d8:	10000b26 	beq	r2,zero,17608 <__call_exitprocs+0x14c>
   175dc:	a0806317 	ldw	r2,396(r20)
   175e0:	2088703a 	and	r4,r4,r2
   175e4:	20000c1e 	bne	r4,zero,17618 <__call_exitprocs+0x15c>
   175e8:	89400017 	ldw	r5,0(r17)
   175ec:	d9000017 	ldw	r4,0(sp)
   175f0:	183ee83a 	callr	r3
   175f4:	a0800117 	ldw	r2,4(r20)
   175f8:	15bfbf1e 	bne	r2,r22,174f8 <__call_exitprocs+0x3c>
   175fc:	98800017 	ldw	r2,0(r19)
   17600:	153fcf26 	beq	r2,r20,17540 <__call_exitprocs+0x84>
   17604:	003fbc06 	br	174f8 <__call_exitprocs+0x3c>
   17608:	183ee83a 	callr	r3
   1760c:	003ff906 	br	175f4 <__call_exitprocs+0x138>
   17610:	a5c00115 	stw	r23,4(r20)
   17614:	003feb06 	br	175c4 <__call_exitprocs+0x108>
   17618:	89000017 	ldw	r4,0(r17)
   1761c:	183ee83a 	callr	r3
   17620:	003ff406 	br	175f4 <__call_exitprocs+0x138>
   17624:	a0800017 	ldw	r2,0(r20)
   17628:	a027883a 	mov	r19,r20
   1762c:	1029883a 	mov	r20,r2
   17630:	003fb606 	br	1750c <__call_exitprocs+0x50>
   17634:	0005883a 	mov	r2,zero
   17638:	003ffb06 	br	17628 <__call_exitprocs+0x16c>

0001763c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1763c:	defffd04 	addi	sp,sp,-12
   17640:	df000215 	stw	fp,8(sp)
   17644:	df000204 	addi	fp,sp,8
   17648:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1764c:	d0271f45 	stb	zero,-25475(gp)
   17650:	e0bfff17 	ldw	r2,-4(fp)
   17654:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   17658:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1765c:	10000226 	beq	r2,zero,17668 <_exit+0x2c>
    ALT_SIM_FAIL();
   17660:	002af070 	cmpltui	zero,zero,43969
   17664:	00000106 	br	1766c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   17668:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1766c:	003fff06 	br	1766c <_exit+0x30>
