
nios_with_vga_RTOS.elf:     file format elf32-littlenios2
nios_with_vga_RTOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00034e30 memsz 0x00034e30 flags r-x
    LOAD off    0x00035e50 vaddr 0x00034e50 paddr 0x000369c8 align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags rw-
    LOAD off    0x00038540 vaddr 0x00038540 paddr 0x00038540 align 2**12
         filesz 0x00000000 memsz 0x000043f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017318  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001d8f4  0001755c  0001755c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b78  00034e50  000369c8  00035e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000043f0  00038540  00038540  00038540  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0003c930  0003c930  000379c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000379c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fd0  00000000  00000000  000379f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c032  00000000  00000000  000389c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a6fe  00000000  00000000  000649f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000d6c9  00000000  00000000  0006f0f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003054  00000000  00000000  0007c7bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004884  00000000  00000000  0007f810  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017751  00000000  00000000  00084094  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0009b7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001890  00000000  00000000  0009b818  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000a1a26  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000a1a2c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a1a38  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a1a39  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a1a3a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a1a3e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a1a42  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000a1a46  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000a1a51  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000a1a5c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000017  00000000  00000000  000a1a67  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  000a1a7e  2**0
                  CONTENTS, READONLY
 29 .jdi          000069de  00000000  00000000  000a1aaa  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0003d94e  00000000  00000000  000a8488  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0001755c l    d  .rodata	00000000 .rodata
00034e50 l    d  .rwdata	00000000 .rwdata
00038540 l    d  .bss	00000000 .bss
0003c930 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_with_vga_RTOS_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00034a72 l     O .rodata	00000010 zeroes.4404
00002970 l     F .text	000000bc __sbprintf
00034a82 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002b80 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000046b0 l     F .text	00000008 __fp_unlock
000046c4 l     F .text	0000019c __sinit.part.1
00004860 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00034e50 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00035294 l     O .rwdata	00000020 lc_ctype_charset
00035274 l     O .rwdata	00000020 lc_message_charset
000352b4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00034ab4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007178 l     F .text	000000fc __sprint_r.part.0
00034be8 l     O .rodata	00000010 blanks.4348
00034bd8 l     O .rodata	00000010 zeroes.4349
00008704 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000cd88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000ce94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cec0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d24c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d32c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d418 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d5e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00036940 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d830 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00036944 l     O .rwdata	00000004 lockid
00038578 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00036948 l     O .rwdata	00000004 lockid
00038580 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000f260 l     F .text	00000048 OS_InitMisc
0000f2a8 l     F .text	0000006c OS_InitRdyList
0000f414 l     F .text	000000e4 OS_InitTCBList
0000f180 l     F .text	000000e0 OS_InitEventList
0000f314 l     F .text	00000080 OS_InitTaskIdle
0000f394 l     F .text	00000080 OS_InitTaskStat
0000f684 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011394 l     F .text	000000f4 OS_FlagTaskRdy
00011154 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015448 l     F .text	00000034 alt_dev_reg
0003589c l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000157ac l     F .text	000002a4 altera_avalon_jtag_uart_irq
00015a50 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000163a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016610 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00016750 l     F .text	0000003c alt_get_errno
0001678c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000385d8 g     O .bss	00000004 alt_instruction_exception_handler
00006c88 g     F .text	00000074 _mprec_log10
00036996 g     O .rwdata	00000002 OSTaskNameSize
00006d74 g     F .text	0000008c __any_on
0000915c g     F .text	00000054 _isatty_r
00034ac0 g     O .rodata	00000028 __mprec_tinytens
0000d528 g     F .text	000000bc alt_main
0003960c g     O .bss	00000100 alt_irq
000091b0 g     F .text	00000060 _lseek_r
00011bb4 g     F .text	000000cc OS_MemInit
000369c8 g       *ABS*	00000000 __flash_rwdata_start
000153e8 g     F .text	00000060 OSTimeSet
0000b8b4 g     F .text	00000088 .hidden __eqdf2
0000ded4 g     F .text	00000610 OSEventPendMulti
0003c930 g       *ABS*	00000000 __alt_heap_start
00016d98 g     F .text	00000024 OSTaskCreateHook
0003860c g     O .bss	00000800 task1_stk
00000720 g     F .text	0000003c printf
0003696e g     O .rwdata	00000002 OSMboxEn
0000e53c g     F .text	0000004c OSIntEnter
00009a88 g     F .text	0000009c _wcrtomb_r
00006fa0 g     F .text	0000005c __sseek
00004a00 g     F .text	00000010 __sinit
00009930 g     F .text	00000140 __swbuf_r
0003697e g     O .rwdata	00000002 OSQEn
0000500c g     F .text	0000007c _setlocale_r
00004868 g     F .text	00000068 __sfmoreglue
0000dba8 g     F .text	000000cc __malloc_unlock
00016e00 g     F .text	00000020 OSTaskStatHook
00038588 g     O .bss	00000001 OSLockNesting
000369bc g     O .rwdata	00000002 OSDataSize
00038589 g     O .bss	00000001 OSRunning
00009210 g     F .text	0000015c memmove
00016e40 g     F .text	00000020 OSInitHookBegin
000369b4 g     O .rwdata	00000002 OSTmrSize
000049e8 g     F .text	00000018 _cleanup
00005e04 g     F .text	000000a8 _Balloc
0003858c g     O .bss	00000004 OSIdleCtr
0000b93c g     F .text	000000dc .hidden __gtdf2
00016b48 g     F .text	00000024 altera_nios2_gen2_irq_init
00016c18 g       .text	00000000 OSStartTsk
0000f9b4 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
000369ba g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0003695a g     O .rwdata	00000002 OSEventSize
00038590 g     O .bss	00000001 OSPrioHighRdy
00008c44 g     F .text	0000005c _fstat_r
00016dbc g     F .text	00000024 OSTaskDelHook
00038560 g     O .bss	00000004 errno
00006f1c g     F .text	00000008 __seofread
00016bf8 g       .text	00000000 OSStartHighRdy
00013e80 g     F .text	000001e4 OSTaskCreateExt
00010c9c g     F .text	00000060 OSFlagPendGetFlagsRdy
0003699a g     O .rwdata	00000002 OSTaskStatStkSize
0000fe18 g     F .text	00000308 OSFlagAccept
000121ec g     F .text	000000b8 OSQFlush
00011c80 g     F .text	00000140 OSQAccept
00038570 g     O .bss	00000004 alt_argv
0003e908 g       *ABS*	00000000 _gp
00013cd4 g     F .text	000001ac OSTaskCreate
000137e4 g     F .text	000004f0 OSTaskChangePrio
00038584 g     O .bss	00000004 alt_heapsem
0000fc88 g     F .text	00000190 OSDebugInit
00014064 g     F .text	00000344 OSTaskDel
0003571c g     O .rwdata	00000180 alt_fd_list
0003970c g     O .bss	00000370 OSFlagTbl
0000ef60 g     F .text	000000b8 OS_EventTaskRemove
00016ec4 g     F .text	00000090 alt_find_dev
00005b94 g     F .text	00000148 memcpy
00036984 g     O .rwdata	00000002 OSRdyTblSize
000046b8 g     F .text	0000000c _cleanup_r
0000cba0 g     F .text	000000dc .hidden __floatsidf
000166d4 g     F .text	0000007c alt_io_redirect
0000ba18 g     F .text	000000f4 .hidden __ltdf2
0001755c g       *ABS*	00000000 __DTOR_END__
00016574 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000dc74 g     F .text	00000120 OSEventNameGet
00036968 g     O .rwdata	00000002 OSFlagMax
00006e00 g     F .text	00000074 __fpclassifyd
00006be4 g     F .text	000000a4 __ratio
0000e588 g     F .text	000000f8 OSIntExit
000086e8 g     F .text	0000001c __vfiprintf_internal
000369a2 g     O .rwdata	00000002 OSTCBSize
00038591 g     O .bss	00000001 OSPrioCur
00015cac g     F .text	000002bc altera_avalon_jtag_uart_read
000006f0 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000634 g     F .text	00000064 .hidden __udivsi3
0000d288 g     F .text	000000a4 isatty
00036988 g     O .rwdata	00000002 OSStkWidth
00034b10 g     O .rodata	000000c8 __mprec_tens
0003697c g     O .rwdata	00000002 OSPtrSize
00005088 g     F .text	0000000c __locale_charset
0003695c g     O .rwdata	00000002 OSEventTblSize
00016b6c g       .text	00000000 OSCtxSw
00017138 g     F .text	00000090 alt_icache_flush
0003855c g     O .bss	00000004 __malloc_top_pad
00038594 g     O .bss	00000004 OSTCBList
00038564 g     O .bss	00000004 alt_fd_list_lock
00036914 g     O .rwdata	00000004 __mb_cur_max
000050b8 g     F .text	0000000c _localeconv_r
00008ca0 g     F .text	000004bc __sfvwrite_r
00006210 g     F .text	0000003c __i2b
00039a7c g     O .bss	00000c30 OSMemTbl
00038598 g     O .bss	00000001 OSTickStepState
00006e74 g     F .text	00000054 _sbrk_r
00036980 g     O .rwdata	00000002 OSQMax
0003a6ac g     O .bss	00000800 OSTaskStatStk
000117f0 g     F .text	000000f0 OSMemNameGet
00036960 g     O .rwdata	00000002 OSFlagEn
0000936c g     F .text	00000060 _read_r
000369a6 g     O .rwdata	00000002 OSTimeTickHookEn
0001269c g     F .text	00000168 OSQPost
00011488 g     F .text	000000a4 OS_FlagUnlink
00036934 g     O .rwdata	00000004 alt_max_fd
0000f54c g     F .text	00000068 OS_MemCopy
0000f5b4 g     F .text	000000d0 OS_Sched
00008938 g     F .text	000000f0 _fclose_r
00011700 g     F .text	000000f0 OSMemGet
00014690 g     F .text	000001b4 OSTaskNameSet
00004680 g     F .text	00000030 fflush
00038558 g     O .bss	00000004 __malloc_max_sbrked_mem
0003859c g     O .bss	00000004 OSCtxSwCtr
00016e20 g     F .text	00000020 OSTimeTickHook
0003696a g     O .rwdata	00000002 OSFlagNameSize
0000f018 g     F .text	00000100 OS_EventTaskRemoveMulti
0000a720 g     F .text	000008ac .hidden __adddf3
0000ee10 g     F .text	00000150 OS_EventTaskWaitMulti
0000698c g     F .text	0000010c __b2d
00036982 g     O .rwdata	00000002 OSQSize
0000a1e8 g     F .text	00000538 .hidden __umoddi3
0000d454 g     F .text	000000d4 lseek
0001314c g     F .text	0000020c OSSemPend
0003690c g     O .rwdata	00000004 _global_impure_ptr
000093cc g     F .text	00000564 _realloc_r
0003696c g     O .rwdata	00000002 OSLowestPrio
0003c930 g       *ABS*	00000000 __bss_end
0000d15c g     F .text	000000f0 alt_iic_isr_register
00016ea0 g     F .text	00000024 OSTCBInitHook
000369b2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00016a40 g     F .text	00000108 alt_tick
00009c70 g     F .text	00000578 .hidden __udivdi3
00008ba0 g     F .text	00000024 _fputwc_r
00036954 g     O .rwdata	00000002 OSEventEn
00034ae8 g     O .rodata	00000028 __mprec_bigtens
00005ff4 g     F .text	00000104 __s2b
000369ae g     O .rwdata	00000002 OSTmrCfgNameSize
0000cc7c g     F .text	000000a8 .hidden __floatunsidf
000066cc g     F .text	00000060 __mcmp
00004a20 g     F .text	00000018 __fp_lock_all
0000d110 g     F .text	0000004c alt_ic_irq_enabled
000112b4 g     F .text	000000e0 OS_FlagInit
000169a4 g     F .text	0000009c alt_alarm_stop
00036990 g     O .rwdata	00000002 OSTaskIdleStkSize
00038568 g     O .bss	00000004 alt_irq_active
00012d84 g     F .text	000000b0 OSSemAccept
000119f4 g     F .text	000000d8 OSMemPut
0001152c g     F .text	000001d4 OSMemCreate
000385a0 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
000356f4 g     O .rwdata	00000028 alt_dev_null
000369a4 g     O .rwdata	00000002 OSTicksPerSec
00016b6c g       .text	00000000 OSIntCtxSw
00016358 g     F .text	00000048 alt_dcache_flush_all
000060f8 g     F .text	00000068 __hi0bits
0000cb20 g     F .text	00000080 .hidden __fixdfsi
000385a4 g     O .bss	00000004 OSTCBFreeList
000369c8 g       *ABS*	00000000 __ram_rwdata_end
00013358 g     F .text	0000016c OSSemPendAbort
0003692c g     O .rwdata	00000008 alt_dev_list
0000d86c g     F .text	000000f8 write
000369a8 g     O .rwdata	00000002 OSVersionNbr
00034e50 g       *ABS*	00000000 __ram_rodata_end
0000cefc g     F .text	000000b0 fstat
0000ba18 g     F .text	000000f4 .hidden __ledf2
00036950 g     O .rwdata	00000004 OSEndiannessTest
00006444 g     F .text	00000140 __pow5mult
0000728c g     F .text	0000145c ___vfiprintf_internal_r
00038550 g     O .bss	00000004 __nlocale_changed
00000698 g     F .text	00000058 .hidden __umodsi3
00038540 g     O .bss	00000004 button_flag
00036962 g     O .rwdata	00000002 OSFlagGrpSize
0003c930 g       *ABS*	00000000 end
00015664 g     F .text	00000148 altera_avalon_jtag_uart_init
0000f81c g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0001755c g       *ABS*	00000000 __CTOR_LIST__
0003d090 g       *ABS*	00000000 __alt_stack_pointer
0000cd24 g     F .text	00000064 .hidden __clzsi2
00015f68 g     F .text	000002c4 altera_avalon_jtag_uart_write
00004a10 g     F .text	00000004 __sfp_lock_acquire
00005ab0 g     F .text	000000e4 memchr
0000f4f8 g     F .text	00000054 OS_MemClr
0000075c g     F .text	000021f8 ___vfprintf_internal_r
00016c3c g     F .text	0000015c OSTaskStkInit
000002bc g     F .text	00000164 task1
00004b74 g     F .text	00000310 _free_r
00005094 g     F .text	00000010 __locale_mb_cur_max
0000eb68 g     F .text	00000198 OS_EventTaskRdy
000173a8 g     F .text	00000180 __call_exitprocs
000385a8 g     O .bss	00000001 OSCPUUsage
0003854c g     O .bss	00000004 __mlocale_changed
00036918 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00000420 g     F .text	00000048 task2
000385dc g     O .bss	00000004 _alt_tick_rate
000122a4 g     F .text	0000028c OSQPend
00014f50 g     F .text	00000104 OSTimeDly
00006584 g     F .text	00000148 __lshift
000385e0 g     O .bss	00000004 _alt_nticks
0000d620 g     F .text	000000fc read
000154b4 g     F .text	0000004c alt_sys_init
00017290 g     F .text	00000118 __register_exitproc
000385a9 g     O .bss	00000001 OSTaskCtr
00015054 g     F .text	00000164 OSTimeDlyHMSM
0000624c g     F .text	000001f8 __multiply
00015b54 g     F .text	00000068 altera_avalon_jtag_uart_close
00034e50 g       *ABS*	00000000 __ram_rwdata_start
0001755c g       *ABS*	00000000 __ram_rodata_start
000385e4 g     O .bss	00000028 __malloc_current_mallinfo
00036956 g     O .rwdata	00000002 OSEventMax
00006a98 g     F .text	0000014c __d2b
000134c4 g     F .text	00000110 OSSemPost
0000e70c g     F .text	000000dc OSSchedUnlock
00015500 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001705c g     F .text	000000dc alt_get_fd
000385ac g     O .bss	00000004 OSMemFreeList
0000e858 g     F .text	000000b0 OSStatInit
00011090 g     F .text	000000c4 OSFlagQuery
0003698c g     O .rwdata	00000002 OSTaskCreateExtEn
00008820 g     F .text	00000054 _close_r
00017214 g     F .text	0000007c memcmp
0000eb48 g     F .text	00000020 OS_Dummy
000155c0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0003c930 g       *ABS*	00000000 __alt_stack_base
00015610 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002a2c g     F .text	00000154 __swsetup_r
0003aeac g     O .bss	000001e0 OSQTbl
0000afcc g     F .text	000008e8 .hidden __divdf3
000048d0 g     F .text	00000118 __sfp
00006cfc g     F .text	00000078 __copybits
00036908 g     O .rwdata	00000004 zoom_amount
000352ec g     O .rwdata	00000408 __malloc_av_
00004a1c g     F .text	00000004 __sinit_lock_release
000385b0 g     O .bss	00000004 OSTCBHighRdy
0000bb0c g     F .text	00000718 .hidden __muldf3
00006ec8 g     F .text	00000054 __sread
000385b4 g     O .bss	00000004 OSQFreeList
00016f54 g     F .text	00000108 alt_find_file
000163dc g     F .text	000000a4 alt_dev_llist_insert
0000da88 g     F .text	00000120 __malloc_lock
0000d780 g     F .text	000000b0 sbrk
0000dd94 g     F .text	00000140 OSEventNameSet
00004624 g     F .text	0000005c _fflush_r
00008874 g     F .text	000000c4 _calloc_r
000385b8 g     O .bss	00000001 OSRdyGrp
00038540 g       *ABS*	00000000 __bss_start
00005cdc g     F .text	00000128 memset
00000468 g     F .text	000000d4 main
00038574 g     O .bss	00000004 alt_envp
00038554 g     O .bss	00000004 __malloc_max_total_mem
00015560 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009a70 g     F .text	00000018 __swbuf
00034d18 g     O .rodata	00000100 OSUnMapTbl
00036986 g     O .rwdata	00000002 OSSemEn
00010cfc g     F .text	00000394 OSFlagPost
00006ffc g     F .text	00000008 __sclose
0003d090 g       *ABS*	00000000 __alt_heap_limit
00008a28 g     F .text	00000014 fclose
0000ed00 g     F .text	00000110 OS_EventTaskWait
00038e0c g     O .bss	00000800 task2_stk
0000f8e8 g     F .text	000000cc OS_TaskStatStkChk
000143a8 g     F .text	00000150 OSTaskDelReq
00002d80 g     F .text	00001688 _dtoa_r
000052a4 g     F .text	0000080c _malloc_r
00009be4 g     F .text	00000030 __ascii_wctomb
00036938 g     O .rwdata	00000004 alt_errno
0000e7e8 g     F .text	00000070 OSStart
0000da28 g     F .text	00000060 __env_unlock
00004e84 g     F .text	000000c4 _fwalk
00014844 g     F .text	000001d4 OSTaskResume
00011acc g     F .text	000000e8 OSMemQuery
00036998 g     O .rwdata	00000002 OSTaskStatEn
00036972 g     O .rwdata	00000002 OSMemMax
00012804 g     F .text	00000170 OSQPostFront
0000053c g     F .text	00000084 .hidden __divsi3
000385b9 g     O .bss	00000003 OSRdyTbl
0003694c g     O .rwdata	00000002 OSDebugEn
00004a50 g     F .text	00000124 _malloc_trim_r
0001755c g       *ABS*	00000000 __CTOR_END__
00036964 g     O .rwdata	00000002 OSFlagNodeSize
000369ac g     O .rwdata	00000002 OSTmrCfgMax
00007004 g     F .text	000000dc strcmp
00011dc0 g     F .text	000001ac OSQCreate
000144f8 g     F .text	00000198 OSTaskNameGet
0001755c g       *ABS*	00000000 __flash_rodata_start
00012974 g     F .text	0000020c OSQPostOpt
0000e908 g     F .text	00000220 OSTimeTick
00036994 g     O .rwdata	00000002 OSTaskMax
0001755c g       *ABS*	00000000 __DTOR_LIST__
00012e34 g     F .text	000000d8 OSSemCreate
000369b8 g     O .rwdata	00000002 OSTmrWheelSize
0000b8b4 g     F .text	00000088 .hidden __nedf2
0003698e g     O .rwdata	00000002 OSTaskDelEn
000135d4 g     F .text	00000110 OSSemQuery
00011f6c g     F .text	00000280 OSQDel
00012530 g     F .text	0000016c OSQPendAbort
0001547c g     F .text	00000038 alt_irq_init
0000d71c g     F .text	00000064 alt_release_fd
00034bf8 g     O .rodata	00000100 .hidden __clz_tab
00038548 g     O .bss	00000004 _PathLocale
000171c8 g     F .text	00000014 atexit
000087c0 g     F .text	00000060 _write_r
0000e680 g     F .text	0000008c OSSchedLock
000050c4 g     F .text	00000018 setlocale
00010120 g     F .text	00000108 OSFlagCreate
00036910 g     O .rwdata	00000004 _impure_ptr
0003856c g     O .bss	00000004 alt_argc
00004408 g     F .text	0000021c __sflush_r
000164e0 g     F .text	00000060 _do_dtors
000050b0 g     F .text	00000008 __locale_cjk_lang
0003695e g     O .rwdata	00000002 OSEventMultiEn
00010228 g     F .text	00000248 OSFlagDel
000385bc g     O .bss	00000004 OSEventFreeList
00038544 g     O .bss	00000004 button_number
00000020 g       .exceptions	00000000 alt_irq_entry
00006928 g     F .text	00000064 __ulp
000106e4 g     F .text	000005b8 OSFlagPend
000369aa g     O .rwdata	00000002 OSTmrEn
00004a38 g     F .text	00000018 __fp_unlock_all
00036924 g     O .rwdata	00000008 alt_fs_list
0000f6f8 g     F .text	00000074 OS_StrCopy
00036974 g     O .rwdata	00000002 OSMemNameSize
00016e60 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
000369a0 g     O .rwdata	00000002 OSTCBPrioTblMax
000050dc g     F .text	0000000c localeconv
0003699c g     O .rwdata	00000002 OSTaskStatStkChkEn
0000cfac g     F .text	00000050 alt_ic_isr_register
00036970 g     O .rwdata	00000002 OSMemEn
0003697a g     O .rwdata	00000002 OSMutexEn
000369c8 g       *ABS*	00000000 _edata
00000290 g     F .text	0000002c button_interrupt
0003c930 g       *ABS*	00000000 _end
000385c0 g     O .bss	00000001 OSIntNesting
00008a3c g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00015bbc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000151b8 g     F .text	000001d4 OSTimeDlyResume
00010598 g     F .text	0000014c OSFlagNameSet
00014a18 g     F .text	000001c0 OSTaskStkChk
0000d084 g     F .text	0000008c alt_ic_irq_disable
00036976 g     O .rwdata	00000002 OSMemSize
00006f24 g     F .text	0000007c __swrite
0003691c g     O .rwdata	00000004 __malloc_trim_threshold
000050a4 g     F .text	0000000c __locale_msgcharset
000385c4 g     O .bss	00000004 OSTCBCur
000171dc g     F .text	00000038 exit
00036978 g     O .rwdata	00000002 OSMemTblSize
00004f48 g     F .text	000000c4 _fwalk_reent
0000672c g     F .text	000001fc __mdiff
000005c0 g     F .text	00000074 .hidden __modsi3
0003d090 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004a14 g     F .text	00000004 __sfp_lock_release
0000e4e4 g     F .text	00000058 OSInit
00014dbc g     F .text	00000124 OSTaskQuery
00012cdc g     F .text	000000a8 OS_QInit
0000f76c g     F .text	00000054 OS_StrLen
000118e0 g     F .text	00000114 OSMemNameSet
00036992 g     O .rwdata	00000002 OSTaskProfileEn
000385c8 g     O .bss	00000004 OSTime
0003b08c g     O .bss	00000800 OSTaskIdleStk
00017528 g     F .text	00000034 _exit
0001622c g     F .text	0000012c alt_alarm_start
00010470 g     F .text	00000128 OSFlagNameGet
0001538c g     F .text	0000005c OSTimeGet
000050e8 g     F .text	000001bc __smakebuf_r
000070e0 g     F .text	00000098 strlen
00016de0 g     F .text	00000020 OSTaskSwHook
00016850 g     F .text	00000154 open
0003b88c g     O .bss	00000b40 OSEventTbl
0000b93c g     F .text	000000dc .hidden __gedf2
0003c3cc g     O .bss	00000510 OSTCBTbl
000136e4 g     F .text	00000100 OSSemSet
00036920 g     O .rwdata	00000004 __wctomb
00007274 g     F .text	00000018 __sprint_r
00016540 g     F .text	00000034 alt_icache_flush_all
0003693c g     O .rwdata	00000004 alt_priority_mask
00012f0c g     F .text	00000240 OSSemDel
000385cc g     O .bss	00000004 OSFlagFreeList
0000cffc g     F .text	00000088 alt_ic_irq_enable
00036958 g     O .rwdata	00000002 OSEventNameSize
00002954 g     F .text	0000001c __vfprintf_internal
000385d0 g     O .bss	00000001 OSStatRdy
0003c8dc g     O .bss	00000054 OSTCBPrioTbl
00009c14 g     F .text	0000005c _wctomb_r
0000d964 g     F .text	000000c4 __env_lock
0003699e g     O .rwdata	00000002 OSTaskSwHookEn
0000c224 g     F .text	000008fc .hidden __subdf3
00006160 g     F .text	000000b0 __lo0bits
000369c0 g     O .rwdata	00000008 alt_alarm_list
0001755c g     O .rodata	0001d4c0 wallpapersden_com_forest_minimal_mountain_landscape_640x480
00036966 g     O .rwdata	00000002 OSFlagWidth
00016480 g     F .text	00000060 _do_ctors
00009b24 g     F .text	000000c0 wcrtomb
0000cdc4 g     F .text	000000d0 close
0003857c g     O .bss	00000004 alt_envsem
000385d4 g     O .bss	00000004 OSIdleCtrRun
0000eb28 g     F .text	00000020 OSVersion
000369b0 g     O .rwdata	00000002 OSTmrCfgWheelSize
0000d394 g     F .text	00000084 alt_load
00014ee0 g     F .text	00000070 OS_TaskStkClr
0003698a g     O .rwdata	00000002 OSTaskCreateEn
0000f118 g     F .text	00000068 OS_EventWaitListInit
00008bc4 g     F .text	00000080 fputwc
00016e80 g     F .text	00000020 OSTaskIdleHook
00004a18 g     F .text	00000004 __sinit_lock_acquire
00005ed4 g     F .text	00000120 __multadd
00014bd8 g     F .text	000001e4 OSTaskSuspend
00005eac g     F .text	00000028 _Bfree
0000f7c0 g     F .text	0000005c OS_TaskIdle
000369b6 g     O .rwdata	00000002 OSTmrTblSize
00012b80 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <_gp+0xfffc16fc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000e53c0 	call	e53c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800134 	movhi	r2,4
 140:	10a58304 	addi	r2,r2,-27124
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800134 	movhi	r2,4
 158:	10a58304 	addi	r2,r2,-27124
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <_gp+0xfffc1824>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <_gp+0xfffc1818>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	000e5880 	call	e588 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a73417 	ldw	r2,-25392(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a73417 	ldw	r2,-25392(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <_gp+0xfffc1940>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	def42414 	ori	sp,sp,53392
    movhi gp, %hi(_gp)
     25c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     260:	d6ba4214 	ori	gp,gp,59656
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
     268:	10a15014 	ori	r2,r2,34112

    movhi r3, %hi(__bss_end)
     26c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     270:	18f24c14 	ori	r3,r3,51504

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <_gp+0xfffc1970>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000d3940 	call	d394 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000d5280 	call	d528 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <_gp+0xfffc1984>

00000290 <button_interrupt>:
volatile int button_flag = 0;
int button_number = 0;
int zoom_amount = 1;

void button_interrupt(void* context)
{
     290:	defffe04 	addi	sp,sp,-8
     294:	df000115 	stw	fp,4(sp)
     298:	df000104 	addi	fp,sp,4
     29c:	e13fff15 	stw	r4,-4(fp)
	button_flag = 1;
     2a0:	00800044 	movi	r2,1
     2a4:	d0a70e15 	stw	r2,-25544(gp)
}
     2a8:	0001883a 	nop
     2ac:	e037883a 	mov	sp,fp
     2b0:	df000017 	ldw	fp,0(sp)
     2b4:	dec00104 	addi	sp,sp,4
     2b8:	f800283a 	ret

000002bc <task1>:

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
     2bc:	defffa04 	addi	sp,sp,-24
     2c0:	dfc00515 	stw	ra,20(sp)
     2c4:	df000415 	stw	fp,16(sp)
     2c8:	df000404 	addi	fp,sp,16
     2cc:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
	  // get current pixel
	  			uint32_t pixel_reg = IORD(VGA_IMAGE_VIEWER_0_BASE, 0x01);
     2d0:	00800134 	movhi	r2,4
     2d4:	10840704 	addi	r2,r2,4124
     2d8:	10800037 	ldwio	r2,0(r2)
     2dc:	e0bffc15 	stw	r2,-16(fp)
	  			uint16_t pixel_y = pixel_reg & 0b00000000000000000000001111111111;
     2e0:	e0bffc17 	ldw	r2,-16(fp)
     2e4:	1080ffcc 	andi	r2,r2,1023
     2e8:	e0bffd0d 	sth	r2,-12(fp)
	  			uint16_t pixel_x = (pixel_reg & 0b00000000000011111111110000000000) >> 10;
     2ec:	e0fffc17 	ldw	r3,-16(fp)
     2f0:	00800434 	movhi	r2,16
     2f4:	10bf0004 	addi	r2,r2,-1024
     2f8:	1884703a 	and	r2,r3,r2
     2fc:	1004d2ba 	srli	r2,r2,10
     300:	e0bffd8d 	sth	r2,-10(fp)

	  			// resize
	  			pixel_y /= zoom_amount;
     304:	e0bffd0b 	ldhu	r2,-12(fp)
     308:	d0e00017 	ldw	r3,-32768(gp)
     30c:	180b883a 	mov	r5,r3
     310:	1009883a 	mov	r4,r2
     314:	000053c0 	call	53c <__divsi3>
     318:	e0bffd0d 	sth	r2,-12(fp)
	  			pixel_x /= zoom_amount;
     31c:	e0bffd8b 	ldhu	r2,-10(fp)
     320:	d0e00017 	ldw	r3,-32768(gp)
     324:	180b883a 	mov	r5,r3
     328:	1009883a 	mov	r4,r2
     32c:	000053c0 	call	53c <__divsi3>
     330:	e0bffd8d 	sth	r2,-10(fp)

	  			// print image from array.
	  			if(pixel_y < 200 && pixel_x < 200)
     334:	e0bffd0b 	ldhu	r2,-12(fp)
     338:	10803228 	cmpgeui	r2,r2,200
     33c:	1000331e 	bne	r2,zero,40c <task1+0x150>
     340:	e0bffd8b 	ldhu	r2,-10(fp)
     344:	10803228 	cmpgeui	r2,r2,200
     348:	1000301e 	bne	r2,zero,40c <task1+0x150>
	  			{
	  				uint32_t pixel = wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y * 200 + pixel_x) * 3)]
     34c:	e0bffd0b 	ldhu	r2,-12(fp)
     350:	10c03224 	muli	r3,r2,200
     354:	e0bffd8b 	ldhu	r2,-10(fp)
     358:	1887883a 	add	r3,r3,r2
     35c:	1805883a 	mov	r2,r3
     360:	1085883a 	add	r2,r2,r2
     364:	10c7883a 	add	r3,r2,r3
     368:	00800074 	movhi	r2,1
     36c:	109d5704 	addi	r2,r2,30044
     370:	10c5883a 	add	r2,r2,r3
     374:	10800003 	ldbu	r2,0(r2)
	  								  + (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y * 200 + pixel_x) * 3) + 1] << 8)
     378:	11003fcc 	andi	r4,r2,255
     37c:	e0bffd0b 	ldhu	r2,-12(fp)
     380:	10c03224 	muli	r3,r2,200
     384:	e0bffd8b 	ldhu	r2,-10(fp)
     388:	1887883a 	add	r3,r3,r2
     38c:	1805883a 	mov	r2,r3
     390:	1085883a 	add	r2,r2,r2
     394:	10c5883a 	add	r2,r2,r3
     398:	10c00044 	addi	r3,r2,1
     39c:	00800074 	movhi	r2,1
     3a0:	109d5704 	addi	r2,r2,30044
     3a4:	10c5883a 	add	r2,r2,r3
     3a8:	10800003 	ldbu	r2,0(r2)
     3ac:	10803fcc 	andi	r2,r2,255
     3b0:	1004923a 	slli	r2,r2,8
     3b4:	2089883a 	add	r4,r4,r2
	  								  + (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y * 200 + pixel_x) * 3) + 2] << 16);
     3b8:	e0bffd0b 	ldhu	r2,-12(fp)
     3bc:	10c03224 	muli	r3,r2,200
     3c0:	e0bffd8b 	ldhu	r2,-10(fp)
     3c4:	1887883a 	add	r3,r3,r2
     3c8:	1805883a 	mov	r2,r3
     3cc:	1085883a 	add	r2,r2,r2
     3d0:	10c5883a 	add	r2,r2,r3
     3d4:	10c00084 	addi	r3,r2,2
     3d8:	00800074 	movhi	r2,1
     3dc:	109d5704 	addi	r2,r2,30044
     3e0:	10c5883a 	add	r2,r2,r3
     3e4:	10800003 	ldbu	r2,0(r2)
     3e8:	10803fcc 	andi	r2,r2,255
     3ec:	1004943a 	slli	r2,r2,16
     3f0:	2085883a 	add	r2,r4,r2
	  			pixel_x /= zoom_amount;

	  			// print image from array.
	  			if(pixel_y < 200 && pixel_x < 200)
	  			{
	  				uint32_t pixel = wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y * 200 + pixel_x) * 3)]
     3f4:	e0bffe15 	stw	r2,-8(fp)
	  								  + (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y * 200 + pixel_x) * 3) + 1] << 8)
	  								  + (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y * 200 + pixel_x) * 3) + 2] << 16);
	  				IOWR(VGA_IMAGE_VIEWER_0_BASE, 0, pixel);
     3f8:	e0fffe17 	ldw	r3,-8(fp)
     3fc:	00800134 	movhi	r2,4
     400:	10840604 	addi	r2,r2,4120
     404:	10c00035 	stwio	r3,0(r2)
	  			pixel_y /= zoom_amount;
	  			pixel_x /= zoom_amount;

	  			// print image from array.
	  			if(pixel_y < 200 && pixel_x < 200)
	  			{
     408:	00000406 	br	41c <task1+0x160>
	  								  + (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y * 200 + pixel_x) * 3) + 1] << 8)
	  								  + (wallpapersden_com_forest_minimal_mountain_landscape_640x480[((pixel_y * 200 + pixel_x) * 3) + 2] << 16);
	  				IOWR(VGA_IMAGE_VIEWER_0_BASE, 0, pixel);
	  			}
	  			else
	  				IOWR(VGA_IMAGE_VIEWER_0_BASE, 0, 0);
     40c:	0007883a 	mov	r3,zero
     410:	00800134 	movhi	r2,4
     414:	10840604 	addi	r2,r2,4120
     418:	10c00035 	stwio	r3,0(r2)
  }
     41c:	003fac06 	br	2d0 <_gp+0xfffc19c8>

00000420 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
     420:	defffc04 	addi	sp,sp,-16
     424:	dfc00315 	stw	ra,12(sp)
     428:	df000215 	stw	fp,8(sp)
     42c:	df000204 	addi	fp,sp,8
     430:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    if(button_flag == 1)
     434:	d0a70e17 	ldw	r2,-25544(gp)
     438:	10800058 	cmpnei	r2,r2,1
     43c:	103ffd1e 	bne	r2,zero,434 <_gp+0xfffc1b2c>
    {
    	int button = IORD(PIO_0_BASE, 0x00);
     440:	00800134 	movhi	r2,4
     444:	10840004 	addi	r2,r2,4096
     448:	10800037 	ldwio	r2,0(r2)
     44c:	e0bffe15 	stw	r2,-8(fp)

    	printf("button %d pressed\n", button);
     450:	e17ffe17 	ldw	r5,-8(fp)
     454:	010000f4 	movhi	r4,3
     458:	21128704 	addi	r4,r4,18972
     45c:	00007200 	call	720 <printf>
    	button_flag = 0;
     460:	d0270e15 	stw	zero,-25544(gp)
    }
  }
     464:	003ff306 	br	434 <_gp+0xfffc1b2c>

00000468 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
     468:	defff904 	addi	sp,sp,-28
     46c:	dfc00615 	stw	ra,24(sp)
     470:	df000515 	stw	fp,20(sp)
     474:	df000504 	addi	fp,sp,20
	alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ, button_interrupt, NULL, 0);
     478:	d8000015 	stw	zero,0(sp)
     47c:	000f883a 	mov	r7,zero
     480:	01800034 	movhi	r6,0
     484:	3180a404 	addi	r6,r6,656
     488:	014000c4 	movi	r5,3
     48c:	0009883a 	mov	r4,zero
     490:	000cfac0 	call	cfac <alt_ic_isr_register>
	alt_ic_irq_enable(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ);
     494:	014000c4 	movi	r5,3
     498:	0009883a 	mov	r4,zero
     49c:	000cffc0 	call	cffc <alt_ic_irq_enable>



  OSTaskCreateExt(task1,
     4a0:	d8000415 	stw	zero,16(sp)
     4a4:	d8000315 	stw	zero,12(sp)
     4a8:	00808004 	movi	r2,512
     4ac:	d8800215 	stw	r2,8(sp)
     4b0:	00800134 	movhi	r2,4
     4b4:	10a18304 	addi	r2,r2,-31220
     4b8:	d8800115 	stw	r2,4(sp)
     4bc:	00800044 	movi	r2,1
     4c0:	d8800015 	stw	r2,0(sp)
     4c4:	01c00044 	movi	r7,1
     4c8:	01800134 	movhi	r6,4
     4cc:	31a38204 	addi	r6,r6,-29176
     4d0:	000b883a 	mov	r5,zero
     4d4:	01000034 	movhi	r4,0
     4d8:	2100af04 	addi	r4,r4,700
     4dc:	0013e800 	call	13e80 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              
               
  OSTaskCreateExt(task2,
     4e0:	d8000415 	stw	zero,16(sp)
     4e4:	d8000315 	stw	zero,12(sp)
     4e8:	00808004 	movi	r2,512
     4ec:	d8800215 	stw	r2,8(sp)
     4f0:	00800134 	movhi	r2,4
     4f4:	10a38304 	addi	r2,r2,-29172
     4f8:	d8800115 	stw	r2,4(sp)
     4fc:	00800084 	movi	r2,2
     500:	d8800015 	stw	r2,0(sp)
     504:	01c00084 	movi	r7,2
     508:	01800134 	movhi	r6,4
     50c:	31a58204 	addi	r6,r6,-27128
     510:	000b883a 	mov	r5,zero
     514:	01000034 	movhi	r4,0
     518:	21010804 	addi	r4,r4,1056
     51c:	0013e800 	call	13e80 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
     520:	000e7e80 	call	e7e8 <OSStart>
  return 0;
     524:	0005883a 	mov	r2,zero
}
     528:	e037883a 	mov	sp,fp
     52c:	dfc00117 	ldw	ra,4(sp)
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00204 	addi	sp,sp,8
     538:	f800283a 	ret

0000053c <__divsi3>:
     53c:	20001b16 	blt	r4,zero,5ac <__divsi3+0x70>
     540:	000f883a 	mov	r7,zero
     544:	28001616 	blt	r5,zero,5a0 <__divsi3+0x64>
     548:	200d883a 	mov	r6,r4
     54c:	29001a2e 	bgeu	r5,r4,5b8 <__divsi3+0x7c>
     550:	00800804 	movi	r2,32
     554:	00c00044 	movi	r3,1
     558:	00000106 	br	560 <__divsi3+0x24>
     55c:	10000d26 	beq	r2,zero,594 <__divsi3+0x58>
     560:	294b883a 	add	r5,r5,r5
     564:	10bfffc4 	addi	r2,r2,-1
     568:	18c7883a 	add	r3,r3,r3
     56c:	293ffb36 	bltu	r5,r4,55c <_gp+0xfffc1c54>
     570:	0005883a 	mov	r2,zero
     574:	18000726 	beq	r3,zero,594 <__divsi3+0x58>
     578:	0005883a 	mov	r2,zero
     57c:	31400236 	bltu	r6,r5,588 <__divsi3+0x4c>
     580:	314dc83a 	sub	r6,r6,r5
     584:	10c4b03a 	or	r2,r2,r3
     588:	1806d07a 	srli	r3,r3,1
     58c:	280ad07a 	srli	r5,r5,1
     590:	183ffa1e 	bne	r3,zero,57c <_gp+0xfffc1c74>
     594:	38000126 	beq	r7,zero,59c <__divsi3+0x60>
     598:	0085c83a 	sub	r2,zero,r2
     59c:	f800283a 	ret
     5a0:	014bc83a 	sub	r5,zero,r5
     5a4:	39c0005c 	xori	r7,r7,1
     5a8:	003fe706 	br	548 <_gp+0xfffc1c40>
     5ac:	0109c83a 	sub	r4,zero,r4
     5b0:	01c00044 	movi	r7,1
     5b4:	003fe306 	br	544 <_gp+0xfffc1c3c>
     5b8:	00c00044 	movi	r3,1
     5bc:	003fee06 	br	578 <_gp+0xfffc1c70>

000005c0 <__modsi3>:
     5c0:	20001716 	blt	r4,zero,620 <__modsi3+0x60>
     5c4:	000f883a 	mov	r7,zero
     5c8:	2005883a 	mov	r2,r4
     5cc:	28001216 	blt	r5,zero,618 <__modsi3+0x58>
     5d0:	2900162e 	bgeu	r5,r4,62c <__modsi3+0x6c>
     5d4:	01800804 	movi	r6,32
     5d8:	00c00044 	movi	r3,1
     5dc:	00000106 	br	5e4 <__modsi3+0x24>
     5e0:	30000a26 	beq	r6,zero,60c <__modsi3+0x4c>
     5e4:	294b883a 	add	r5,r5,r5
     5e8:	31bfffc4 	addi	r6,r6,-1
     5ec:	18c7883a 	add	r3,r3,r3
     5f0:	293ffb36 	bltu	r5,r4,5e0 <_gp+0xfffc1cd8>
     5f4:	18000526 	beq	r3,zero,60c <__modsi3+0x4c>
     5f8:	1806d07a 	srli	r3,r3,1
     5fc:	11400136 	bltu	r2,r5,604 <__modsi3+0x44>
     600:	1145c83a 	sub	r2,r2,r5
     604:	280ad07a 	srli	r5,r5,1
     608:	183ffb1e 	bne	r3,zero,5f8 <_gp+0xfffc1cf0>
     60c:	38000126 	beq	r7,zero,614 <__modsi3+0x54>
     610:	0085c83a 	sub	r2,zero,r2
     614:	f800283a 	ret
     618:	014bc83a 	sub	r5,zero,r5
     61c:	003fec06 	br	5d0 <_gp+0xfffc1cc8>
     620:	0109c83a 	sub	r4,zero,r4
     624:	01c00044 	movi	r7,1
     628:	003fe706 	br	5c8 <_gp+0xfffc1cc0>
     62c:	00c00044 	movi	r3,1
     630:	003ff106 	br	5f8 <_gp+0xfffc1cf0>

00000634 <__udivsi3>:
     634:	200d883a 	mov	r6,r4
     638:	2900152e 	bgeu	r5,r4,690 <__udivsi3+0x5c>
     63c:	28001416 	blt	r5,zero,690 <__udivsi3+0x5c>
     640:	00800804 	movi	r2,32
     644:	00c00044 	movi	r3,1
     648:	00000206 	br	654 <__udivsi3+0x20>
     64c:	10000e26 	beq	r2,zero,688 <__udivsi3+0x54>
     650:	28000516 	blt	r5,zero,668 <__udivsi3+0x34>
     654:	294b883a 	add	r5,r5,r5
     658:	10bfffc4 	addi	r2,r2,-1
     65c:	18c7883a 	add	r3,r3,r3
     660:	293ffa36 	bltu	r5,r4,64c <_gp+0xfffc1d44>
     664:	18000826 	beq	r3,zero,688 <__udivsi3+0x54>
     668:	0005883a 	mov	r2,zero
     66c:	31400236 	bltu	r6,r5,678 <__udivsi3+0x44>
     670:	314dc83a 	sub	r6,r6,r5
     674:	10c4b03a 	or	r2,r2,r3
     678:	1806d07a 	srli	r3,r3,1
     67c:	280ad07a 	srli	r5,r5,1
     680:	183ffa1e 	bne	r3,zero,66c <_gp+0xfffc1d64>
     684:	f800283a 	ret
     688:	0005883a 	mov	r2,zero
     68c:	f800283a 	ret
     690:	00c00044 	movi	r3,1
     694:	003ff406 	br	668 <_gp+0xfffc1d60>

00000698 <__umodsi3>:
     698:	2005883a 	mov	r2,r4
     69c:	2900122e 	bgeu	r5,r4,6e8 <__umodsi3+0x50>
     6a0:	28001116 	blt	r5,zero,6e8 <__umodsi3+0x50>
     6a4:	01800804 	movi	r6,32
     6a8:	00c00044 	movi	r3,1
     6ac:	00000206 	br	6b8 <__umodsi3+0x20>
     6b0:	30000c26 	beq	r6,zero,6e4 <__umodsi3+0x4c>
     6b4:	28000516 	blt	r5,zero,6cc <__umodsi3+0x34>
     6b8:	294b883a 	add	r5,r5,r5
     6bc:	31bfffc4 	addi	r6,r6,-1
     6c0:	18c7883a 	add	r3,r3,r3
     6c4:	293ffa36 	bltu	r5,r4,6b0 <_gp+0xfffc1da8>
     6c8:	18000626 	beq	r3,zero,6e4 <__umodsi3+0x4c>
     6cc:	1806d07a 	srli	r3,r3,1
     6d0:	11400136 	bltu	r2,r5,6d8 <__umodsi3+0x40>
     6d4:	1145c83a 	sub	r2,r2,r5
     6d8:	280ad07a 	srli	r5,r5,1
     6dc:	183ffb1e 	bne	r3,zero,6cc <_gp+0xfffc1dc4>
     6e0:	f800283a 	ret
     6e4:	f800283a 	ret
     6e8:	00c00044 	movi	r3,1
     6ec:	003ff706 	br	6cc <_gp+0xfffc1dc4>

000006f0 <_printf_r>:
     6f0:	defffd04 	addi	sp,sp,-12
     6f4:	2805883a 	mov	r2,r5
     6f8:	dfc00015 	stw	ra,0(sp)
     6fc:	d9800115 	stw	r6,4(sp)
     700:	d9c00215 	stw	r7,8(sp)
     704:	21400217 	ldw	r5,8(r4)
     708:	d9c00104 	addi	r7,sp,4
     70c:	100d883a 	mov	r6,r2
     710:	000075c0 	call	75c <___vfprintf_internal_r>
     714:	dfc00017 	ldw	ra,0(sp)
     718:	dec00304 	addi	sp,sp,12
     71c:	f800283a 	ret

00000720 <printf>:
     720:	defffc04 	addi	sp,sp,-16
     724:	dfc00015 	stw	ra,0(sp)
     728:	d9400115 	stw	r5,4(sp)
     72c:	d9800215 	stw	r6,8(sp)
     730:	d9c00315 	stw	r7,12(sp)
     734:	008000f4 	movhi	r2,3
     738:	109a4404 	addi	r2,r2,26896
     73c:	10800017 	ldw	r2,0(r2)
     740:	200b883a 	mov	r5,r4
     744:	d9800104 	addi	r6,sp,4
     748:	11000217 	ldw	r4,8(r2)
     74c:	00029540 	call	2954 <__vfprintf_internal>
     750:	dfc00017 	ldw	ra,0(sp)
     754:	dec00404 	addi	sp,sp,16
     758:	f800283a 	ret

0000075c <___vfprintf_internal_r>:
     75c:	deffb804 	addi	sp,sp,-288
     760:	dfc04715 	stw	ra,284(sp)
     764:	ddc04515 	stw	r23,276(sp)
     768:	dd404315 	stw	r21,268(sp)
     76c:	d9002c15 	stw	r4,176(sp)
     770:	282f883a 	mov	r23,r5
     774:	302b883a 	mov	r21,r6
     778:	d9c02d15 	stw	r7,180(sp)
     77c:	df004615 	stw	fp,280(sp)
     780:	dd804415 	stw	r22,272(sp)
     784:	dd004215 	stw	r20,264(sp)
     788:	dcc04115 	stw	r19,260(sp)
     78c:	dc804015 	stw	r18,256(sp)
     790:	dc403f15 	stw	r17,252(sp)
     794:	dc003e15 	stw	r16,248(sp)
     798:	00050b80 	call	50b8 <_localeconv_r>
     79c:	10800017 	ldw	r2,0(r2)
     7a0:	1009883a 	mov	r4,r2
     7a4:	d8803415 	stw	r2,208(sp)
     7a8:	00070e00 	call	70e0 <strlen>
     7ac:	d8803715 	stw	r2,220(sp)
     7b0:	d8802c17 	ldw	r2,176(sp)
     7b4:	10000226 	beq	r2,zero,7c0 <___vfprintf_internal_r+0x64>
     7b8:	10800e17 	ldw	r2,56(r2)
     7bc:	1000f926 	beq	r2,zero,ba4 <___vfprintf_internal_r+0x448>
     7c0:	b880030b 	ldhu	r2,12(r23)
     7c4:	10c8000c 	andi	r3,r2,8192
     7c8:	1800061e 	bne	r3,zero,7e4 <___vfprintf_internal_r+0x88>
     7cc:	b9001917 	ldw	r4,100(r23)
     7d0:	00f7ffc4 	movi	r3,-8193
     7d4:	10880014 	ori	r2,r2,8192
     7d8:	20c6703a 	and	r3,r4,r3
     7dc:	b880030d 	sth	r2,12(r23)
     7e0:	b8c01915 	stw	r3,100(r23)
     7e4:	10c0020c 	andi	r3,r2,8
     7e8:	1800c126 	beq	r3,zero,af0 <___vfprintf_internal_r+0x394>
     7ec:	b8c00417 	ldw	r3,16(r23)
     7f0:	1800bf26 	beq	r3,zero,af0 <___vfprintf_internal_r+0x394>
     7f4:	1080068c 	andi	r2,r2,26
     7f8:	00c00284 	movi	r3,10
     7fc:	10c0c426 	beq	r2,r3,b10 <___vfprintf_internal_r+0x3b4>
     800:	d8c00404 	addi	r3,sp,16
     804:	050000f4 	movhi	r20,3
     808:	d9001e04 	addi	r4,sp,120
     80c:	a5129c84 	addi	r20,r20,19058
     810:	d8c01e15 	stw	r3,120(sp)
     814:	d8002015 	stw	zero,128(sp)
     818:	d8001f15 	stw	zero,124(sp)
     81c:	d8003315 	stw	zero,204(sp)
     820:	d8003615 	stw	zero,216(sp)
     824:	d8003815 	stw	zero,224(sp)
     828:	1811883a 	mov	r8,r3
     82c:	d8003915 	stw	zero,228(sp)
     830:	d8003a15 	stw	zero,232(sp)
     834:	d8002f15 	stw	zero,188(sp)
     838:	d9002815 	stw	r4,160(sp)
     83c:	a8800007 	ldb	r2,0(r21)
     840:	10027b26 	beq	r2,zero,1230 <___vfprintf_internal_r+0xad4>
     844:	00c00944 	movi	r3,37
     848:	a821883a 	mov	r16,r21
     84c:	10c0021e 	bne	r2,r3,858 <___vfprintf_internal_r+0xfc>
     850:	00001406 	br	8a4 <___vfprintf_internal_r+0x148>
     854:	10c00326 	beq	r2,r3,864 <___vfprintf_internal_r+0x108>
     858:	84000044 	addi	r16,r16,1
     85c:	80800007 	ldb	r2,0(r16)
     860:	103ffc1e 	bne	r2,zero,854 <_gp+0xfffc1f4c>
     864:	8563c83a 	sub	r17,r16,r21
     868:	88000e26 	beq	r17,zero,8a4 <___vfprintf_internal_r+0x148>
     86c:	d8c02017 	ldw	r3,128(sp)
     870:	d8801f17 	ldw	r2,124(sp)
     874:	45400015 	stw	r21,0(r8)
     878:	1c47883a 	add	r3,r3,r17
     87c:	10800044 	addi	r2,r2,1
     880:	d8c02015 	stw	r3,128(sp)
     884:	44400115 	stw	r17,4(r8)
     888:	d8801f15 	stw	r2,124(sp)
     88c:	00c001c4 	movi	r3,7
     890:	1880a716 	blt	r3,r2,b30 <___vfprintf_internal_r+0x3d4>
     894:	42000204 	addi	r8,r8,8
     898:	d9402f17 	ldw	r5,188(sp)
     89c:	2c4b883a 	add	r5,r5,r17
     8a0:	d9402f15 	stw	r5,188(sp)
     8a4:	80800007 	ldb	r2,0(r16)
     8a8:	1000a826 	beq	r2,zero,b4c <___vfprintf_internal_r+0x3f0>
     8ac:	84400047 	ldb	r17,1(r16)
     8b0:	00bfffc4 	movi	r2,-1
     8b4:	85400044 	addi	r21,r16,1
     8b8:	d8002785 	stb	zero,158(sp)
     8bc:	0007883a 	mov	r3,zero
     8c0:	000f883a 	mov	r7,zero
     8c4:	d8802915 	stw	r2,164(sp)
     8c8:	d8003115 	stw	zero,196(sp)
     8cc:	0025883a 	mov	r18,zero
     8d0:	01401604 	movi	r5,88
     8d4:	01800244 	movi	r6,9
     8d8:	02800a84 	movi	r10,42
     8dc:	02401b04 	movi	r9,108
     8e0:	ad400044 	addi	r21,r21,1
     8e4:	88bff804 	addi	r2,r17,-32
     8e8:	28830436 	bltu	r5,r2,14fc <___vfprintf_internal_r+0xda0>
     8ec:	100490ba 	slli	r2,r2,2
     8f0:	01000034 	movhi	r4,0
     8f4:	21024104 	addi	r4,r4,2308
     8f8:	1105883a 	add	r2,r2,r4
     8fc:	10800017 	ldw	r2,0(r2)
     900:	1000683a 	jmp	r2
     904:	0000141c 	xori	zero,zero,80
     908:	000014fc 	xorhi	zero,zero,83
     90c:	000014fc 	xorhi	zero,zero,83
     910:	0000143c 	xorhi	zero,zero,80
     914:	000014fc 	xorhi	zero,zero,83
     918:	000014fc 	xorhi	zero,zero,83
     91c:	000014fc 	xorhi	zero,zero,83
     920:	000014fc 	xorhi	zero,zero,83
     924:	000014fc 	xorhi	zero,zero,83
     928:	000014fc 	xorhi	zero,zero,83
     92c:	00000bb0 	cmpltui	zero,zero,46
     930:	00001358 	cmpnei	zero,zero,77
     934:	000014fc 	xorhi	zero,zero,83
     938:	00000a78 	rdprs	zero,zero,41
     93c:	00000bd8 	cmpnei	zero,zero,47
     940:	000014fc 	xorhi	zero,zero,83
     944:	00000c18 	cmpnei	zero,zero,48
     948:	00000c24 	muli	zero,zero,48
     94c:	00000c24 	muli	zero,zero,48
     950:	00000c24 	muli	zero,zero,48
     954:	00000c24 	muli	zero,zero,48
     958:	00000c24 	muli	zero,zero,48
     95c:	00000c24 	muli	zero,zero,48
     960:	00000c24 	muli	zero,zero,48
     964:	00000c24 	muli	zero,zero,48
     968:	00000c24 	muli	zero,zero,48
     96c:	000014fc 	xorhi	zero,zero,83
     970:	000014fc 	xorhi	zero,zero,83
     974:	000014fc 	xorhi	zero,zero,83
     978:	000014fc 	xorhi	zero,zero,83
     97c:	000014fc 	xorhi	zero,zero,83
     980:	000014fc 	xorhi	zero,zero,83
     984:	000014fc 	xorhi	zero,zero,83
     988:	000014fc 	xorhi	zero,zero,83
     98c:	000014fc 	xorhi	zero,zero,83
     990:	000014fc 	xorhi	zero,zero,83
     994:	00000c58 	cmpnei	zero,zero,49
     998:	00000d14 	movui	zero,52
     99c:	000014fc 	xorhi	zero,zero,83
     9a0:	00000d14 	movui	zero,52
     9a4:	000014fc 	xorhi	zero,zero,83
     9a8:	000014fc 	xorhi	zero,zero,83
     9ac:	000014fc 	xorhi	zero,zero,83
     9b0:	000014fc 	xorhi	zero,zero,83
     9b4:	00000db4 	movhi	zero,54
     9b8:	000014fc 	xorhi	zero,zero,83
     9bc:	000014fc 	xorhi	zero,zero,83
     9c0:	00000dc0 	call	dc <OSCtxSw_SWITCH_PC+0x9c>
     9c4:	000014fc 	xorhi	zero,zero,83
     9c8:	000014fc 	xorhi	zero,zero,83
     9cc:	000014fc 	xorhi	zero,zero,83
     9d0:	000014fc 	xorhi	zero,zero,83
     9d4:	000014fc 	xorhi	zero,zero,83
     9d8:	00001238 	rdprs	zero,zero,72
     9dc:	000014fc 	xorhi	zero,zero,83
     9e0:	000014fc 	xorhi	zero,zero,83
     9e4:	00001298 	cmpnei	zero,zero,74
     9e8:	000014fc 	xorhi	zero,zero,83
     9ec:	000014fc 	xorhi	zero,zero,83
     9f0:	000014fc 	xorhi	zero,zero,83
     9f4:	000014fc 	xorhi	zero,zero,83
     9f8:	000014fc 	xorhi	zero,zero,83
     9fc:	000014fc 	xorhi	zero,zero,83
     a00:	000014fc 	xorhi	zero,zero,83
     a04:	000014fc 	xorhi	zero,zero,83
     a08:	000014fc 	xorhi	zero,zero,83
     a0c:	000014fc 	xorhi	zero,zero,83
     a10:	000014a8 	cmpgeui	zero,zero,82
     a14:	00001448 	cmpgei	zero,zero,81
     a18:	00000d14 	movui	zero,52
     a1c:	00000d14 	movui	zero,52
     a20:	00000d14 	movui	zero,52
     a24:	00001458 	cmpnei	zero,zero,81
     a28:	00001448 	cmpgei	zero,zero,81
     a2c:	000014fc 	xorhi	zero,zero,83
     a30:	000014fc 	xorhi	zero,zero,83
     a34:	00001464 	muli	zero,zero,81
     a38:	000014fc 	xorhi	zero,zero,83
     a3c:	00001474 	movhi	zero,81
     a40:	00001348 	cmpgei	zero,zero,77
     a44:	00000a84 	movi	zero,42
     a48:	00001368 	cmpgeui	zero,zero,77
     a4c:	000014fc 	xorhi	zero,zero,83
     a50:	00001374 	movhi	zero,77
     a54:	000014fc 	xorhi	zero,zero,83
     a58:	000013d0 	cmplti	zero,zero,79
     a5c:	000014fc 	xorhi	zero,zero,83
     a60:	000014fc 	xorhi	zero,zero,83
     a64:	000013e0 	cmpeqi	zero,zero,79
     a68:	d9003117 	ldw	r4,196(sp)
     a6c:	d8802d15 	stw	r2,180(sp)
     a70:	0109c83a 	sub	r4,zero,r4
     a74:	d9003115 	stw	r4,196(sp)
     a78:	94800114 	ori	r18,r18,4
     a7c:	ac400007 	ldb	r17,0(r21)
     a80:	003f9706 	br	8e0 <_gp+0xfffc1fd8>
     a84:	00800c04 	movi	r2,48
     a88:	d9002d17 	ldw	r4,180(sp)
     a8c:	d9402917 	ldw	r5,164(sp)
     a90:	d8802705 	stb	r2,156(sp)
     a94:	00801e04 	movi	r2,120
     a98:	d8802745 	stb	r2,157(sp)
     a9c:	d8002785 	stb	zero,158(sp)
     aa0:	20c00104 	addi	r3,r4,4
     aa4:	24c00017 	ldw	r19,0(r4)
     aa8:	002d883a 	mov	r22,zero
     aac:	90800094 	ori	r2,r18,2
     ab0:	28029a16 	blt	r5,zero,151c <___vfprintf_internal_r+0xdc0>
     ab4:	00bfdfc4 	movi	r2,-129
     ab8:	90a4703a 	and	r18,r18,r2
     abc:	d8c02d15 	stw	r3,180(sp)
     ac0:	94800094 	ori	r18,r18,2
     ac4:	9802871e 	bne	r19,zero,14e4 <___vfprintf_internal_r+0xd88>
     ac8:	008000f4 	movhi	r2,3
     acc:	10929504 	addi	r2,r2,19028
     ad0:	d8803915 	stw	r2,228(sp)
     ad4:	04401e04 	movi	r17,120
     ad8:	d8802917 	ldw	r2,164(sp)
     adc:	0039883a 	mov	fp,zero
     ae0:	1001e926 	beq	r2,zero,1288 <___vfprintf_internal_r+0xb2c>
     ae4:	0027883a 	mov	r19,zero
     ae8:	002d883a 	mov	r22,zero
     aec:	00020506 	br	1304 <___vfprintf_internal_r+0xba8>
     af0:	d9002c17 	ldw	r4,176(sp)
     af4:	b80b883a 	mov	r5,r23
     af8:	0002a2c0 	call	2a2c <__swsetup_r>
     afc:	1005ac1e 	bne	r2,zero,21b0 <___vfprintf_internal_r+0x1a54>
     b00:	b880030b 	ldhu	r2,12(r23)
     b04:	00c00284 	movi	r3,10
     b08:	1080068c 	andi	r2,r2,26
     b0c:	10ff3c1e 	bne	r2,r3,800 <_gp+0xfffc1ef8>
     b10:	b880038f 	ldh	r2,14(r23)
     b14:	103f3a16 	blt	r2,zero,800 <_gp+0xfffc1ef8>
     b18:	d9c02d17 	ldw	r7,180(sp)
     b1c:	d9002c17 	ldw	r4,176(sp)
     b20:	a80d883a 	mov	r6,r21
     b24:	b80b883a 	mov	r5,r23
     b28:	00029700 	call	2970 <__sbprintf>
     b2c:	00001106 	br	b74 <___vfprintf_internal_r+0x418>
     b30:	d9002c17 	ldw	r4,176(sp)
     b34:	d9801e04 	addi	r6,sp,120
     b38:	b80b883a 	mov	r5,r23
     b3c:	00072740 	call	7274 <__sprint_r>
     b40:	1000081e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x408>
     b44:	da000404 	addi	r8,sp,16
     b48:	003f5306 	br	898 <_gp+0xfffc1f90>
     b4c:	d8802017 	ldw	r2,128(sp)
     b50:	10000426 	beq	r2,zero,b64 <___vfprintf_internal_r+0x408>
     b54:	d9002c17 	ldw	r4,176(sp)
     b58:	d9801e04 	addi	r6,sp,120
     b5c:	b80b883a 	mov	r5,r23
     b60:	00072740 	call	7274 <__sprint_r>
     b64:	b880030b 	ldhu	r2,12(r23)
     b68:	1080100c 	andi	r2,r2,64
     b6c:	1005901e 	bne	r2,zero,21b0 <___vfprintf_internal_r+0x1a54>
     b70:	d8802f17 	ldw	r2,188(sp)
     b74:	dfc04717 	ldw	ra,284(sp)
     b78:	df004617 	ldw	fp,280(sp)
     b7c:	ddc04517 	ldw	r23,276(sp)
     b80:	dd804417 	ldw	r22,272(sp)
     b84:	dd404317 	ldw	r21,268(sp)
     b88:	dd004217 	ldw	r20,264(sp)
     b8c:	dcc04117 	ldw	r19,260(sp)
     b90:	dc804017 	ldw	r18,256(sp)
     b94:	dc403f17 	ldw	r17,252(sp)
     b98:	dc003e17 	ldw	r16,248(sp)
     b9c:	dec04804 	addi	sp,sp,288
     ba0:	f800283a 	ret
     ba4:	d9002c17 	ldw	r4,176(sp)
     ba8:	0004a000 	call	4a00 <__sinit>
     bac:	003f0406 	br	7c0 <_gp+0xfffc1eb8>
     bb0:	d8802d17 	ldw	r2,180(sp)
     bb4:	d9002d17 	ldw	r4,180(sp)
     bb8:	10800017 	ldw	r2,0(r2)
     bbc:	d8803115 	stw	r2,196(sp)
     bc0:	20800104 	addi	r2,r4,4
     bc4:	d9003117 	ldw	r4,196(sp)
     bc8:	203fa716 	blt	r4,zero,a68 <_gp+0xfffc2160>
     bcc:	d8802d15 	stw	r2,180(sp)
     bd0:	ac400007 	ldb	r17,0(r21)
     bd4:	003f4206 	br	8e0 <_gp+0xfffc1fd8>
     bd8:	ac400007 	ldb	r17,0(r21)
     bdc:	aac00044 	addi	r11,r21,1
     be0:	8a872826 	beq	r17,r10,2884 <___vfprintf_internal_r+0x2128>
     be4:	88bff404 	addi	r2,r17,-48
     be8:	0009883a 	mov	r4,zero
     bec:	30867d36 	bltu	r6,r2,25e4 <___vfprintf_internal_r+0x1e88>
     bf0:	5c400007 	ldb	r17,0(r11)
     bf4:	210002a4 	muli	r4,r4,10
     bf8:	5d400044 	addi	r21,r11,1
     bfc:	a817883a 	mov	r11,r21
     c00:	2089883a 	add	r4,r4,r2
     c04:	88bff404 	addi	r2,r17,-48
     c08:	30bff92e 	bgeu	r6,r2,bf0 <_gp+0xfffc22e8>
     c0c:	2005c916 	blt	r4,zero,2334 <___vfprintf_internal_r+0x1bd8>
     c10:	d9002915 	stw	r4,164(sp)
     c14:	003f3306 	br	8e4 <_gp+0xfffc1fdc>
     c18:	94802014 	ori	r18,r18,128
     c1c:	ac400007 	ldb	r17,0(r21)
     c20:	003f2f06 	br	8e0 <_gp+0xfffc1fd8>
     c24:	a809883a 	mov	r4,r21
     c28:	d8003115 	stw	zero,196(sp)
     c2c:	88bff404 	addi	r2,r17,-48
     c30:	0017883a 	mov	r11,zero
     c34:	24400007 	ldb	r17,0(r4)
     c38:	5ac002a4 	muli	r11,r11,10
     c3c:	ad400044 	addi	r21,r21,1
     c40:	a809883a 	mov	r4,r21
     c44:	12d7883a 	add	r11,r2,r11
     c48:	88bff404 	addi	r2,r17,-48
     c4c:	30bff92e 	bgeu	r6,r2,c34 <_gp+0xfffc232c>
     c50:	dac03115 	stw	r11,196(sp)
     c54:	003f2306 	br	8e4 <_gp+0xfffc1fdc>
     c58:	18c03fcc 	andi	r3,r3,255
     c5c:	18072b1e 	bne	r3,zero,290c <___vfprintf_internal_r+0x21b0>
     c60:	94800414 	ori	r18,r18,16
     c64:	9080080c 	andi	r2,r18,32
     c68:	10037b26 	beq	r2,zero,1a58 <___vfprintf_internal_r+0x12fc>
     c6c:	d9402d17 	ldw	r5,180(sp)
     c70:	28800117 	ldw	r2,4(r5)
     c74:	2cc00017 	ldw	r19,0(r5)
     c78:	29400204 	addi	r5,r5,8
     c7c:	d9402d15 	stw	r5,180(sp)
     c80:	102d883a 	mov	r22,r2
     c84:	10044b16 	blt	r2,zero,1db4 <___vfprintf_internal_r+0x1658>
     c88:	d9402917 	ldw	r5,164(sp)
     c8c:	df002783 	ldbu	fp,158(sp)
     c90:	2803bc16 	blt	r5,zero,1b84 <___vfprintf_internal_r+0x1428>
     c94:	00ffdfc4 	movi	r3,-129
     c98:	9d84b03a 	or	r2,r19,r22
     c9c:	90e4703a 	and	r18,r18,r3
     ca0:	10017726 	beq	r2,zero,1280 <___vfprintf_internal_r+0xb24>
     ca4:	b0038326 	beq	r22,zero,1ab4 <___vfprintf_internal_r+0x1358>
     ca8:	dc402a15 	stw	r17,168(sp)
     cac:	dc001e04 	addi	r16,sp,120
     cb0:	b023883a 	mov	r17,r22
     cb4:	402d883a 	mov	r22,r8
     cb8:	9809883a 	mov	r4,r19
     cbc:	880b883a 	mov	r5,r17
     cc0:	01800284 	movi	r6,10
     cc4:	000f883a 	mov	r7,zero
     cc8:	000a1e80 	call	a1e8 <__umoddi3>
     ccc:	10800c04 	addi	r2,r2,48
     cd0:	843fffc4 	addi	r16,r16,-1
     cd4:	9809883a 	mov	r4,r19
     cd8:	880b883a 	mov	r5,r17
     cdc:	80800005 	stb	r2,0(r16)
     ce0:	01800284 	movi	r6,10
     ce4:	000f883a 	mov	r7,zero
     ce8:	0009c700 	call	9c70 <__udivdi3>
     cec:	1027883a 	mov	r19,r2
     cf0:	10c4b03a 	or	r2,r2,r3
     cf4:	1823883a 	mov	r17,r3
     cf8:	103fef1e 	bne	r2,zero,cb8 <_gp+0xfffc23b0>
     cfc:	d8c02817 	ldw	r3,160(sp)
     d00:	dc402a17 	ldw	r17,168(sp)
     d04:	b011883a 	mov	r8,r22
     d08:	1c07c83a 	sub	r3,r3,r16
     d0c:	d8c02e15 	stw	r3,184(sp)
     d10:	00005906 	br	e78 <___vfprintf_internal_r+0x71c>
     d14:	18c03fcc 	andi	r3,r3,255
     d18:	1806fa1e 	bne	r3,zero,2904 <___vfprintf_internal_r+0x21a8>
     d1c:	9080020c 	andi	r2,r18,8
     d20:	10048a26 	beq	r2,zero,1f4c <___vfprintf_internal_r+0x17f0>
     d24:	d8c02d17 	ldw	r3,180(sp)
     d28:	d9002d17 	ldw	r4,180(sp)
     d2c:	d9402d17 	ldw	r5,180(sp)
     d30:	18c00017 	ldw	r3,0(r3)
     d34:	21000117 	ldw	r4,4(r4)
     d38:	29400204 	addi	r5,r5,8
     d3c:	d8c03615 	stw	r3,216(sp)
     d40:	d9003815 	stw	r4,224(sp)
     d44:	d9402d15 	stw	r5,180(sp)
     d48:	d9003617 	ldw	r4,216(sp)
     d4c:	d9403817 	ldw	r5,224(sp)
     d50:	da003d15 	stw	r8,244(sp)
     d54:	04000044 	movi	r16,1
     d58:	0006e000 	call	6e00 <__fpclassifyd>
     d5c:	da003d17 	ldw	r8,244(sp)
     d60:	14041f1e 	bne	r2,r16,1de0 <___vfprintf_internal_r+0x1684>
     d64:	d9003617 	ldw	r4,216(sp)
     d68:	d9403817 	ldw	r5,224(sp)
     d6c:	000d883a 	mov	r6,zero
     d70:	000f883a 	mov	r7,zero
     d74:	000ba180 	call	ba18 <__ledf2>
     d78:	da003d17 	ldw	r8,244(sp)
     d7c:	1005be16 	blt	r2,zero,2478 <___vfprintf_internal_r+0x1d1c>
     d80:	df002783 	ldbu	fp,158(sp)
     d84:	008011c4 	movi	r2,71
     d88:	1445330e 	bge	r2,r17,2258 <___vfprintf_internal_r+0x1afc>
     d8c:	040000f4 	movhi	r16,3
     d90:	84128d04 	addi	r16,r16,18996
     d94:	00c000c4 	movi	r3,3
     d98:	00bfdfc4 	movi	r2,-129
     d9c:	d8c02a15 	stw	r3,168(sp)
     da0:	90a4703a 	and	r18,r18,r2
     da4:	d8c02e15 	stw	r3,184(sp)
     da8:	d8002915 	stw	zero,164(sp)
     dac:	d8003215 	stw	zero,200(sp)
     db0:	00003706 	br	e90 <___vfprintf_internal_r+0x734>
     db4:	94800214 	ori	r18,r18,8
     db8:	ac400007 	ldb	r17,0(r21)
     dbc:	003ec806 	br	8e0 <_gp+0xfffc1fd8>
     dc0:	18c03fcc 	andi	r3,r3,255
     dc4:	1806db1e 	bne	r3,zero,2934 <___vfprintf_internal_r+0x21d8>
     dc8:	94800414 	ori	r18,r18,16
     dcc:	9080080c 	andi	r2,r18,32
     dd0:	1002d826 	beq	r2,zero,1934 <___vfprintf_internal_r+0x11d8>
     dd4:	d9402d17 	ldw	r5,180(sp)
     dd8:	d8c02917 	ldw	r3,164(sp)
     ddc:	d8002785 	stb	zero,158(sp)
     de0:	28800204 	addi	r2,r5,8
     de4:	2cc00017 	ldw	r19,0(r5)
     de8:	2d800117 	ldw	r22,4(r5)
     dec:	18048f16 	blt	r3,zero,202c <___vfprintf_internal_r+0x18d0>
     df0:	013fdfc4 	movi	r4,-129
     df4:	9d86b03a 	or	r3,r19,r22
     df8:	d8802d15 	stw	r2,180(sp)
     dfc:	9124703a 	and	r18,r18,r4
     e00:	1802d91e 	bne	r3,zero,1968 <___vfprintf_internal_r+0x120c>
     e04:	d8c02917 	ldw	r3,164(sp)
     e08:	0039883a 	mov	fp,zero
     e0c:	1805c326 	beq	r3,zero,251c <___vfprintf_internal_r+0x1dc0>
     e10:	0027883a 	mov	r19,zero
     e14:	002d883a 	mov	r22,zero
     e18:	dc001e04 	addi	r16,sp,120
     e1c:	9806d0fa 	srli	r3,r19,3
     e20:	b008977a 	slli	r4,r22,29
     e24:	b02cd0fa 	srli	r22,r22,3
     e28:	9cc001cc 	andi	r19,r19,7
     e2c:	98800c04 	addi	r2,r19,48
     e30:	843fffc4 	addi	r16,r16,-1
     e34:	20e6b03a 	or	r19,r4,r3
     e38:	80800005 	stb	r2,0(r16)
     e3c:	9d86b03a 	or	r3,r19,r22
     e40:	183ff61e 	bne	r3,zero,e1c <_gp+0xfffc2514>
     e44:	90c0004c 	andi	r3,r18,1
     e48:	18013b26 	beq	r3,zero,1338 <___vfprintf_internal_r+0xbdc>
     e4c:	10803fcc 	andi	r2,r2,255
     e50:	1080201c 	xori	r2,r2,128
     e54:	10bfe004 	addi	r2,r2,-128
     e58:	00c00c04 	movi	r3,48
     e5c:	10c13626 	beq	r2,r3,1338 <___vfprintf_internal_r+0xbdc>
     e60:	80ffffc5 	stb	r3,-1(r16)
     e64:	d8c02817 	ldw	r3,160(sp)
     e68:	80bfffc4 	addi	r2,r16,-1
     e6c:	1021883a 	mov	r16,r2
     e70:	1887c83a 	sub	r3,r3,r2
     e74:	d8c02e15 	stw	r3,184(sp)
     e78:	d8802e17 	ldw	r2,184(sp)
     e7c:	d9002917 	ldw	r4,164(sp)
     e80:	1100010e 	bge	r2,r4,e88 <___vfprintf_internal_r+0x72c>
     e84:	2005883a 	mov	r2,r4
     e88:	d8802a15 	stw	r2,168(sp)
     e8c:	d8003215 	stw	zero,200(sp)
     e90:	e7003fcc 	andi	fp,fp,255
     e94:	e700201c 	xori	fp,fp,128
     e98:	e73fe004 	addi	fp,fp,-128
     e9c:	e0000326 	beq	fp,zero,eac <___vfprintf_internal_r+0x750>
     ea0:	d8c02a17 	ldw	r3,168(sp)
     ea4:	18c00044 	addi	r3,r3,1
     ea8:	d8c02a15 	stw	r3,168(sp)
     eac:	90c0008c 	andi	r3,r18,2
     eb0:	d8c02b15 	stw	r3,172(sp)
     eb4:	18000326 	beq	r3,zero,ec4 <___vfprintf_internal_r+0x768>
     eb8:	d8c02a17 	ldw	r3,168(sp)
     ebc:	18c00084 	addi	r3,r3,2
     ec0:	d8c02a15 	stw	r3,168(sp)
     ec4:	90c0210c 	andi	r3,r18,132
     ec8:	d8c03015 	stw	r3,192(sp)
     ecc:	1801a31e 	bne	r3,zero,155c <___vfprintf_internal_r+0xe00>
     ed0:	d9003117 	ldw	r4,196(sp)
     ed4:	d8c02a17 	ldw	r3,168(sp)
     ed8:	20e7c83a 	sub	r19,r4,r3
     edc:	04c19f0e 	bge	zero,r19,155c <___vfprintf_internal_r+0xe00>
     ee0:	02400404 	movi	r9,16
     ee4:	d8c02017 	ldw	r3,128(sp)
     ee8:	d8801f17 	ldw	r2,124(sp)
     eec:	4cc50d0e 	bge	r9,r19,2324 <___vfprintf_internal_r+0x1bc8>
     ef0:	014000f4 	movhi	r5,3
     ef4:	2952a084 	addi	r5,r5,19074
     ef8:	dc403b15 	stw	r17,236(sp)
     efc:	d9403515 	stw	r5,212(sp)
     f00:	9823883a 	mov	r17,r19
     f04:	482d883a 	mov	r22,r9
     f08:	9027883a 	mov	r19,r18
     f0c:	070001c4 	movi	fp,7
     f10:	8025883a 	mov	r18,r16
     f14:	dc002c17 	ldw	r16,176(sp)
     f18:	00000306 	br	f28 <___vfprintf_internal_r+0x7cc>
     f1c:	8c7ffc04 	addi	r17,r17,-16
     f20:	42000204 	addi	r8,r8,8
     f24:	b440130e 	bge	r22,r17,f74 <___vfprintf_internal_r+0x818>
     f28:	010000f4 	movhi	r4,3
     f2c:	18c00404 	addi	r3,r3,16
     f30:	10800044 	addi	r2,r2,1
     f34:	2112a084 	addi	r4,r4,19074
     f38:	41000015 	stw	r4,0(r8)
     f3c:	45800115 	stw	r22,4(r8)
     f40:	d8c02015 	stw	r3,128(sp)
     f44:	d8801f15 	stw	r2,124(sp)
     f48:	e0bff40e 	bge	fp,r2,f1c <_gp+0xfffc2614>
     f4c:	d9801e04 	addi	r6,sp,120
     f50:	b80b883a 	mov	r5,r23
     f54:	8009883a 	mov	r4,r16
     f58:	00072740 	call	7274 <__sprint_r>
     f5c:	103f011e 	bne	r2,zero,b64 <_gp+0xfffc225c>
     f60:	8c7ffc04 	addi	r17,r17,-16
     f64:	d8c02017 	ldw	r3,128(sp)
     f68:	d8801f17 	ldw	r2,124(sp)
     f6c:	da000404 	addi	r8,sp,16
     f70:	b47fed16 	blt	r22,r17,f28 <_gp+0xfffc2620>
     f74:	9021883a 	mov	r16,r18
     f78:	9825883a 	mov	r18,r19
     f7c:	8827883a 	mov	r19,r17
     f80:	dc403b17 	ldw	r17,236(sp)
     f84:	d9403517 	ldw	r5,212(sp)
     f88:	98c7883a 	add	r3,r19,r3
     f8c:	10800044 	addi	r2,r2,1
     f90:	41400015 	stw	r5,0(r8)
     f94:	44c00115 	stw	r19,4(r8)
     f98:	d8c02015 	stw	r3,128(sp)
     f9c:	d8801f15 	stw	r2,124(sp)
     fa0:	010001c4 	movi	r4,7
     fa4:	2082a316 	blt	r4,r2,1a34 <___vfprintf_internal_r+0x12d8>
     fa8:	df002787 	ldb	fp,158(sp)
     fac:	42000204 	addi	r8,r8,8
     fb0:	e0000c26 	beq	fp,zero,fe4 <___vfprintf_internal_r+0x888>
     fb4:	d8801f17 	ldw	r2,124(sp)
     fb8:	d9002784 	addi	r4,sp,158
     fbc:	18c00044 	addi	r3,r3,1
     fc0:	10800044 	addi	r2,r2,1
     fc4:	41000015 	stw	r4,0(r8)
     fc8:	01000044 	movi	r4,1
     fcc:	41000115 	stw	r4,4(r8)
     fd0:	d8c02015 	stw	r3,128(sp)
     fd4:	d8801f15 	stw	r2,124(sp)
     fd8:	010001c4 	movi	r4,7
     fdc:	20823c16 	blt	r4,r2,18d0 <___vfprintf_internal_r+0x1174>
     fe0:	42000204 	addi	r8,r8,8
     fe4:	d8802b17 	ldw	r2,172(sp)
     fe8:	10000c26 	beq	r2,zero,101c <___vfprintf_internal_r+0x8c0>
     fec:	d8801f17 	ldw	r2,124(sp)
     ff0:	d9002704 	addi	r4,sp,156
     ff4:	18c00084 	addi	r3,r3,2
     ff8:	10800044 	addi	r2,r2,1
     ffc:	41000015 	stw	r4,0(r8)
    1000:	01000084 	movi	r4,2
    1004:	41000115 	stw	r4,4(r8)
    1008:	d8c02015 	stw	r3,128(sp)
    100c:	d8801f15 	stw	r2,124(sp)
    1010:	010001c4 	movi	r4,7
    1014:	20823616 	blt	r4,r2,18f0 <___vfprintf_internal_r+0x1194>
    1018:	42000204 	addi	r8,r8,8
    101c:	d9003017 	ldw	r4,192(sp)
    1020:	00802004 	movi	r2,128
    1024:	20819926 	beq	r4,r2,168c <___vfprintf_internal_r+0xf30>
    1028:	d9402917 	ldw	r5,164(sp)
    102c:	d8802e17 	ldw	r2,184(sp)
    1030:	28adc83a 	sub	r22,r5,r2
    1034:	0580310e 	bge	zero,r22,10fc <___vfprintf_internal_r+0x9a0>
    1038:	07000404 	movi	fp,16
    103c:	d8801f17 	ldw	r2,124(sp)
    1040:	e584140e 	bge	fp,r22,2094 <___vfprintf_internal_r+0x1938>
    1044:	014000f4 	movhi	r5,3
    1048:	29529c84 	addi	r5,r5,19058
    104c:	dc402915 	stw	r17,164(sp)
    1050:	d9402b15 	stw	r5,172(sp)
    1054:	b023883a 	mov	r17,r22
    1058:	04c001c4 	movi	r19,7
    105c:	a82d883a 	mov	r22,r21
    1060:	902b883a 	mov	r21,r18
    1064:	8025883a 	mov	r18,r16
    1068:	dc002c17 	ldw	r16,176(sp)
    106c:	00000306 	br	107c <___vfprintf_internal_r+0x920>
    1070:	8c7ffc04 	addi	r17,r17,-16
    1074:	42000204 	addi	r8,r8,8
    1078:	e440110e 	bge	fp,r17,10c0 <___vfprintf_internal_r+0x964>
    107c:	18c00404 	addi	r3,r3,16
    1080:	10800044 	addi	r2,r2,1
    1084:	45000015 	stw	r20,0(r8)
    1088:	47000115 	stw	fp,4(r8)
    108c:	d8c02015 	stw	r3,128(sp)
    1090:	d8801f15 	stw	r2,124(sp)
    1094:	98bff60e 	bge	r19,r2,1070 <_gp+0xfffc2768>
    1098:	d9801e04 	addi	r6,sp,120
    109c:	b80b883a 	mov	r5,r23
    10a0:	8009883a 	mov	r4,r16
    10a4:	00072740 	call	7274 <__sprint_r>
    10a8:	103eae1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    10ac:	8c7ffc04 	addi	r17,r17,-16
    10b0:	d8c02017 	ldw	r3,128(sp)
    10b4:	d8801f17 	ldw	r2,124(sp)
    10b8:	da000404 	addi	r8,sp,16
    10bc:	e47fef16 	blt	fp,r17,107c <_gp+0xfffc2774>
    10c0:	9021883a 	mov	r16,r18
    10c4:	a825883a 	mov	r18,r21
    10c8:	b02b883a 	mov	r21,r22
    10cc:	882d883a 	mov	r22,r17
    10d0:	dc402917 	ldw	r17,164(sp)
    10d4:	d9002b17 	ldw	r4,172(sp)
    10d8:	1d87883a 	add	r3,r3,r22
    10dc:	10800044 	addi	r2,r2,1
    10e0:	41000015 	stw	r4,0(r8)
    10e4:	45800115 	stw	r22,4(r8)
    10e8:	d8c02015 	stw	r3,128(sp)
    10ec:	d8801f15 	stw	r2,124(sp)
    10f0:	010001c4 	movi	r4,7
    10f4:	2081ee16 	blt	r4,r2,18b0 <___vfprintf_internal_r+0x1154>
    10f8:	42000204 	addi	r8,r8,8
    10fc:	9080400c 	andi	r2,r18,256
    1100:	1001181e 	bne	r2,zero,1564 <___vfprintf_internal_r+0xe08>
    1104:	d9402e17 	ldw	r5,184(sp)
    1108:	d8801f17 	ldw	r2,124(sp)
    110c:	44000015 	stw	r16,0(r8)
    1110:	1947883a 	add	r3,r3,r5
    1114:	10800044 	addi	r2,r2,1
    1118:	41400115 	stw	r5,4(r8)
    111c:	d8c02015 	stw	r3,128(sp)
    1120:	d8801f15 	stw	r2,124(sp)
    1124:	010001c4 	movi	r4,7
    1128:	2081d316 	blt	r4,r2,1878 <___vfprintf_internal_r+0x111c>
    112c:	42000204 	addi	r8,r8,8
    1130:	9480010c 	andi	r18,r18,4
    1134:	90003226 	beq	r18,zero,1200 <___vfprintf_internal_r+0xaa4>
    1138:	d9403117 	ldw	r5,196(sp)
    113c:	d8802a17 	ldw	r2,168(sp)
    1140:	28a1c83a 	sub	r16,r5,r2
    1144:	04002e0e 	bge	zero,r16,1200 <___vfprintf_internal_r+0xaa4>
    1148:	04400404 	movi	r17,16
    114c:	d8801f17 	ldw	r2,124(sp)
    1150:	8c04a20e 	bge	r17,r16,23dc <___vfprintf_internal_r+0x1c80>
    1154:	014000f4 	movhi	r5,3
    1158:	2952a084 	addi	r5,r5,19074
    115c:	d9403515 	stw	r5,212(sp)
    1160:	048001c4 	movi	r18,7
    1164:	dcc02c17 	ldw	r19,176(sp)
    1168:	00000306 	br	1178 <___vfprintf_internal_r+0xa1c>
    116c:	843ffc04 	addi	r16,r16,-16
    1170:	42000204 	addi	r8,r8,8
    1174:	8c00130e 	bge	r17,r16,11c4 <___vfprintf_internal_r+0xa68>
    1178:	010000f4 	movhi	r4,3
    117c:	18c00404 	addi	r3,r3,16
    1180:	10800044 	addi	r2,r2,1
    1184:	2112a084 	addi	r4,r4,19074
    1188:	41000015 	stw	r4,0(r8)
    118c:	44400115 	stw	r17,4(r8)
    1190:	d8c02015 	stw	r3,128(sp)
    1194:	d8801f15 	stw	r2,124(sp)
    1198:	90bff40e 	bge	r18,r2,116c <_gp+0xfffc2864>
    119c:	d9801e04 	addi	r6,sp,120
    11a0:	b80b883a 	mov	r5,r23
    11a4:	9809883a 	mov	r4,r19
    11a8:	00072740 	call	7274 <__sprint_r>
    11ac:	103e6d1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    11b0:	843ffc04 	addi	r16,r16,-16
    11b4:	d8c02017 	ldw	r3,128(sp)
    11b8:	d8801f17 	ldw	r2,124(sp)
    11bc:	da000404 	addi	r8,sp,16
    11c0:	8c3fed16 	blt	r17,r16,1178 <_gp+0xfffc2870>
    11c4:	d9403517 	ldw	r5,212(sp)
    11c8:	1c07883a 	add	r3,r3,r16
    11cc:	10800044 	addi	r2,r2,1
    11d0:	41400015 	stw	r5,0(r8)
    11d4:	44000115 	stw	r16,4(r8)
    11d8:	d8c02015 	stw	r3,128(sp)
    11dc:	d8801f15 	stw	r2,124(sp)
    11e0:	010001c4 	movi	r4,7
    11e4:	2080060e 	bge	r4,r2,1200 <___vfprintf_internal_r+0xaa4>
    11e8:	d9002c17 	ldw	r4,176(sp)
    11ec:	d9801e04 	addi	r6,sp,120
    11f0:	b80b883a 	mov	r5,r23
    11f4:	00072740 	call	7274 <__sprint_r>
    11f8:	103e5a1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    11fc:	d8c02017 	ldw	r3,128(sp)
    1200:	d8803117 	ldw	r2,196(sp)
    1204:	d9002a17 	ldw	r4,168(sp)
    1208:	1100010e 	bge	r2,r4,1210 <___vfprintf_internal_r+0xab4>
    120c:	2005883a 	mov	r2,r4
    1210:	d9402f17 	ldw	r5,188(sp)
    1214:	288b883a 	add	r5,r5,r2
    1218:	d9402f15 	stw	r5,188(sp)
    121c:	18019e1e 	bne	r3,zero,1898 <___vfprintf_internal_r+0x113c>
    1220:	a8800007 	ldb	r2,0(r21)
    1224:	d8001f15 	stw	zero,124(sp)
    1228:	da000404 	addi	r8,sp,16
    122c:	103d851e 	bne	r2,zero,844 <_gp+0xfffc1f3c>
    1230:	a821883a 	mov	r16,r21
    1234:	003d9b06 	br	8a4 <_gp+0xfffc1f9c>
    1238:	18c03fcc 	andi	r3,r3,255
    123c:	1805c11e 	bne	r3,zero,2944 <___vfprintf_internal_r+0x21e8>
    1240:	94800414 	ori	r18,r18,16
    1244:	9080080c 	andi	r2,r18,32
    1248:	10020c26 	beq	r2,zero,1a7c <___vfprintf_internal_r+0x1320>
    124c:	d8802d17 	ldw	r2,180(sp)
    1250:	d9002917 	ldw	r4,164(sp)
    1254:	d8002785 	stb	zero,158(sp)
    1258:	10c00204 	addi	r3,r2,8
    125c:	14c00017 	ldw	r19,0(r2)
    1260:	15800117 	ldw	r22,4(r2)
    1264:	20040f16 	blt	r4,zero,22a4 <___vfprintf_internal_r+0x1b48>
    1268:	013fdfc4 	movi	r4,-129
    126c:	9d84b03a 	or	r2,r19,r22
    1270:	d8c02d15 	stw	r3,180(sp)
    1274:	9124703a 	and	r18,r18,r4
    1278:	0039883a 	mov	fp,zero
    127c:	103e891e 	bne	r2,zero,ca4 <_gp+0xfffc239c>
    1280:	d9002917 	ldw	r4,164(sp)
    1284:	2002c11e 	bne	r4,zero,1d8c <___vfprintf_internal_r+0x1630>
    1288:	d8002915 	stw	zero,164(sp)
    128c:	d8002e15 	stw	zero,184(sp)
    1290:	dc001e04 	addi	r16,sp,120
    1294:	003ef806 	br	e78 <_gp+0xfffc2570>
    1298:	18c03fcc 	andi	r3,r3,255
    129c:	18059d1e 	bne	r3,zero,2914 <___vfprintf_internal_r+0x21b8>
    12a0:	014000f4 	movhi	r5,3
    12a4:	29529004 	addi	r5,r5,19008
    12a8:	d9403915 	stw	r5,228(sp)
    12ac:	9080080c 	andi	r2,r18,32
    12b0:	10005226 	beq	r2,zero,13fc <___vfprintf_internal_r+0xca0>
    12b4:	d8802d17 	ldw	r2,180(sp)
    12b8:	14c00017 	ldw	r19,0(r2)
    12bc:	15800117 	ldw	r22,4(r2)
    12c0:	10800204 	addi	r2,r2,8
    12c4:	d8802d15 	stw	r2,180(sp)
    12c8:	9080004c 	andi	r2,r18,1
    12cc:	10019026 	beq	r2,zero,1910 <___vfprintf_internal_r+0x11b4>
    12d0:	9d84b03a 	or	r2,r19,r22
    12d4:	10036926 	beq	r2,zero,207c <___vfprintf_internal_r+0x1920>
    12d8:	d8c02917 	ldw	r3,164(sp)
    12dc:	00800c04 	movi	r2,48
    12e0:	d8802705 	stb	r2,156(sp)
    12e4:	dc402745 	stb	r17,157(sp)
    12e8:	d8002785 	stb	zero,158(sp)
    12ec:	90800094 	ori	r2,r18,2
    12f0:	18045d16 	blt	r3,zero,2468 <___vfprintf_internal_r+0x1d0c>
    12f4:	00bfdfc4 	movi	r2,-129
    12f8:	90a4703a 	and	r18,r18,r2
    12fc:	94800094 	ori	r18,r18,2
    1300:	0039883a 	mov	fp,zero
    1304:	d9003917 	ldw	r4,228(sp)
    1308:	dc001e04 	addi	r16,sp,120
    130c:	988003cc 	andi	r2,r19,15
    1310:	b006973a 	slli	r3,r22,28
    1314:	2085883a 	add	r2,r4,r2
    1318:	9826d13a 	srli	r19,r19,4
    131c:	10800003 	ldbu	r2,0(r2)
    1320:	b02cd13a 	srli	r22,r22,4
    1324:	843fffc4 	addi	r16,r16,-1
    1328:	1ce6b03a 	or	r19,r3,r19
    132c:	80800005 	stb	r2,0(r16)
    1330:	9d84b03a 	or	r2,r19,r22
    1334:	103ff51e 	bne	r2,zero,130c <_gp+0xfffc2a04>
    1338:	d8c02817 	ldw	r3,160(sp)
    133c:	1c07c83a 	sub	r3,r3,r16
    1340:	d8c02e15 	stw	r3,184(sp)
    1344:	003ecc06 	br	e78 <_gp+0xfffc2570>
    1348:	18c03fcc 	andi	r3,r3,255
    134c:	183e9f26 	beq	r3,zero,dcc <_gp+0xfffc24c4>
    1350:	d9c02785 	stb	r7,158(sp)
    1354:	003e9d06 	br	dcc <_gp+0xfffc24c4>
    1358:	00c00044 	movi	r3,1
    135c:	01c00ac4 	movi	r7,43
    1360:	ac400007 	ldb	r17,0(r21)
    1364:	003d5e06 	br	8e0 <_gp+0xfffc1fd8>
    1368:	94800814 	ori	r18,r18,32
    136c:	ac400007 	ldb	r17,0(r21)
    1370:	003d5b06 	br	8e0 <_gp+0xfffc1fd8>
    1374:	d8c02d17 	ldw	r3,180(sp)
    1378:	d8002785 	stb	zero,158(sp)
    137c:	1c000017 	ldw	r16,0(r3)
    1380:	1cc00104 	addi	r19,r3,4
    1384:	80041926 	beq	r16,zero,23ec <___vfprintf_internal_r+0x1c90>
    1388:	d9002917 	ldw	r4,164(sp)
    138c:	2003d016 	blt	r4,zero,22d0 <___vfprintf_internal_r+0x1b74>
    1390:	200d883a 	mov	r6,r4
    1394:	000b883a 	mov	r5,zero
    1398:	8009883a 	mov	r4,r16
    139c:	da003d15 	stw	r8,244(sp)
    13a0:	0005ab00 	call	5ab0 <memchr>
    13a4:	da003d17 	ldw	r8,244(sp)
    13a8:	10045426 	beq	r2,zero,24fc <___vfprintf_internal_r+0x1da0>
    13ac:	1405c83a 	sub	r2,r2,r16
    13b0:	d8802e15 	stw	r2,184(sp)
    13b4:	1003cc16 	blt	r2,zero,22e8 <___vfprintf_internal_r+0x1b8c>
    13b8:	df002783 	ldbu	fp,158(sp)
    13bc:	d8802a15 	stw	r2,168(sp)
    13c0:	dcc02d15 	stw	r19,180(sp)
    13c4:	d8002915 	stw	zero,164(sp)
    13c8:	d8003215 	stw	zero,200(sp)
    13cc:	003eb006 	br	e90 <_gp+0xfffc2588>
    13d0:	18c03fcc 	andi	r3,r3,255
    13d4:	183f9b26 	beq	r3,zero,1244 <_gp+0xfffc293c>
    13d8:	d9c02785 	stb	r7,158(sp)
    13dc:	003f9906 	br	1244 <_gp+0xfffc293c>
    13e0:	18c03fcc 	andi	r3,r3,255
    13e4:	1805551e 	bne	r3,zero,293c <___vfprintf_internal_r+0x21e0>
    13e8:	014000f4 	movhi	r5,3
    13ec:	29529504 	addi	r5,r5,19028
    13f0:	d9403915 	stw	r5,228(sp)
    13f4:	9080080c 	andi	r2,r18,32
    13f8:	103fae1e 	bne	r2,zero,12b4 <_gp+0xfffc29ac>
    13fc:	9080040c 	andi	r2,r18,16
    1400:	1002de26 	beq	r2,zero,1f7c <___vfprintf_internal_r+0x1820>
    1404:	d8c02d17 	ldw	r3,180(sp)
    1408:	002d883a 	mov	r22,zero
    140c:	1cc00017 	ldw	r19,0(r3)
    1410:	18c00104 	addi	r3,r3,4
    1414:	d8c02d15 	stw	r3,180(sp)
    1418:	003fab06 	br	12c8 <_gp+0xfffc29c0>
    141c:	38803fcc 	andi	r2,r7,255
    1420:	1080201c 	xori	r2,r2,128
    1424:	10bfe004 	addi	r2,r2,-128
    1428:	1002d21e 	bne	r2,zero,1f74 <___vfprintf_internal_r+0x1818>
    142c:	00c00044 	movi	r3,1
    1430:	01c00804 	movi	r7,32
    1434:	ac400007 	ldb	r17,0(r21)
    1438:	003d2906 	br	8e0 <_gp+0xfffc1fd8>
    143c:	94800054 	ori	r18,r18,1
    1440:	ac400007 	ldb	r17,0(r21)
    1444:	003d2606 	br	8e0 <_gp+0xfffc1fd8>
    1448:	18c03fcc 	andi	r3,r3,255
    144c:	183e0526 	beq	r3,zero,c64 <_gp+0xfffc235c>
    1450:	d9c02785 	stb	r7,158(sp)
    1454:	003e0306 	br	c64 <_gp+0xfffc235c>
    1458:	94801014 	ori	r18,r18,64
    145c:	ac400007 	ldb	r17,0(r21)
    1460:	003d1f06 	br	8e0 <_gp+0xfffc1fd8>
    1464:	ac400007 	ldb	r17,0(r21)
    1468:	8a438726 	beq	r17,r9,2288 <___vfprintf_internal_r+0x1b2c>
    146c:	94800414 	ori	r18,r18,16
    1470:	003d1b06 	br	8e0 <_gp+0xfffc1fd8>
    1474:	18c03fcc 	andi	r3,r3,255
    1478:	1805341e 	bne	r3,zero,294c <___vfprintf_internal_r+0x21f0>
    147c:	9080080c 	andi	r2,r18,32
    1480:	1002cd26 	beq	r2,zero,1fb8 <___vfprintf_internal_r+0x185c>
    1484:	d9402d17 	ldw	r5,180(sp)
    1488:	d9002f17 	ldw	r4,188(sp)
    148c:	28800017 	ldw	r2,0(r5)
    1490:	2007d7fa 	srai	r3,r4,31
    1494:	29400104 	addi	r5,r5,4
    1498:	d9402d15 	stw	r5,180(sp)
    149c:	11000015 	stw	r4,0(r2)
    14a0:	10c00115 	stw	r3,4(r2)
    14a4:	003ce506 	br	83c <_gp+0xfffc1f34>
    14a8:	d8c02d17 	ldw	r3,180(sp)
    14ac:	d9002d17 	ldw	r4,180(sp)
    14b0:	d8002785 	stb	zero,158(sp)
    14b4:	18800017 	ldw	r2,0(r3)
    14b8:	21000104 	addi	r4,r4,4
    14bc:	00c00044 	movi	r3,1
    14c0:	d8c02a15 	stw	r3,168(sp)
    14c4:	d8801405 	stb	r2,80(sp)
    14c8:	d9002d15 	stw	r4,180(sp)
    14cc:	d8c02e15 	stw	r3,184(sp)
    14d0:	d8002915 	stw	zero,164(sp)
    14d4:	d8003215 	stw	zero,200(sp)
    14d8:	dc001404 	addi	r16,sp,80
    14dc:	0039883a 	mov	fp,zero
    14e0:	003e7206 	br	eac <_gp+0xfffc25a4>
    14e4:	010000f4 	movhi	r4,3
    14e8:	21129504 	addi	r4,r4,19028
    14ec:	0039883a 	mov	fp,zero
    14f0:	d9003915 	stw	r4,228(sp)
    14f4:	04401e04 	movi	r17,120
    14f8:	003f8206 	br	1304 <_gp+0xfffc29fc>
    14fc:	18c03fcc 	andi	r3,r3,255
    1500:	1805061e 	bne	r3,zero,291c <___vfprintf_internal_r+0x21c0>
    1504:	883d9126 	beq	r17,zero,b4c <_gp+0xfffc2244>
    1508:	00c00044 	movi	r3,1
    150c:	d8c02a15 	stw	r3,168(sp)
    1510:	dc401405 	stb	r17,80(sp)
    1514:	d8002785 	stb	zero,158(sp)
    1518:	003fec06 	br	14cc <_gp+0xfffc2bc4>
    151c:	014000f4 	movhi	r5,3
    1520:	29529504 	addi	r5,r5,19028
    1524:	d9403915 	stw	r5,228(sp)
    1528:	d8c02d15 	stw	r3,180(sp)
    152c:	1025883a 	mov	r18,r2
    1530:	04401e04 	movi	r17,120
    1534:	9d84b03a 	or	r2,r19,r22
    1538:	1000fc1e 	bne	r2,zero,192c <___vfprintf_internal_r+0x11d0>
    153c:	0039883a 	mov	fp,zero
    1540:	00800084 	movi	r2,2
    1544:	10803fcc 	andi	r2,r2,255
    1548:	00c00044 	movi	r3,1
    154c:	10c20f26 	beq	r2,r3,1d8c <___vfprintf_internal_r+0x1630>
    1550:	00c00084 	movi	r3,2
    1554:	10fd6326 	beq	r2,r3,ae4 <_gp+0xfffc21dc>
    1558:	003e2d06 	br	e10 <_gp+0xfffc2508>
    155c:	d8c02017 	ldw	r3,128(sp)
    1560:	003e9306 	br	fb0 <_gp+0xfffc26a8>
    1564:	00801944 	movi	r2,101
    1568:	14407e0e 	bge	r2,r17,1764 <___vfprintf_internal_r+0x1008>
    156c:	d9003617 	ldw	r4,216(sp)
    1570:	d9403817 	ldw	r5,224(sp)
    1574:	000d883a 	mov	r6,zero
    1578:	000f883a 	mov	r7,zero
    157c:	d8c03c15 	stw	r3,240(sp)
    1580:	da003d15 	stw	r8,244(sp)
    1584:	000b8b40 	call	b8b4 <__eqdf2>
    1588:	d8c03c17 	ldw	r3,240(sp)
    158c:	da003d17 	ldw	r8,244(sp)
    1590:	1000f71e 	bne	r2,zero,1970 <___vfprintf_internal_r+0x1214>
    1594:	d8801f17 	ldw	r2,124(sp)
    1598:	010000f4 	movhi	r4,3
    159c:	21129c04 	addi	r4,r4,19056
    15a0:	18c00044 	addi	r3,r3,1
    15a4:	10800044 	addi	r2,r2,1
    15a8:	41000015 	stw	r4,0(r8)
    15ac:	01000044 	movi	r4,1
    15b0:	41000115 	stw	r4,4(r8)
    15b4:	d8c02015 	stw	r3,128(sp)
    15b8:	d8801f15 	stw	r2,124(sp)
    15bc:	010001c4 	movi	r4,7
    15c0:	2082b816 	blt	r4,r2,20a4 <___vfprintf_internal_r+0x1948>
    15c4:	42000204 	addi	r8,r8,8
    15c8:	d8802617 	ldw	r2,152(sp)
    15cc:	d9403317 	ldw	r5,204(sp)
    15d0:	11400216 	blt	r2,r5,15dc <___vfprintf_internal_r+0xe80>
    15d4:	9080004c 	andi	r2,r18,1
    15d8:	103ed526 	beq	r2,zero,1130 <_gp+0xfffc2828>
    15dc:	d8803717 	ldw	r2,220(sp)
    15e0:	d9003417 	ldw	r4,208(sp)
    15e4:	d9403717 	ldw	r5,220(sp)
    15e8:	1887883a 	add	r3,r3,r2
    15ec:	d8801f17 	ldw	r2,124(sp)
    15f0:	41000015 	stw	r4,0(r8)
    15f4:	41400115 	stw	r5,4(r8)
    15f8:	10800044 	addi	r2,r2,1
    15fc:	d8c02015 	stw	r3,128(sp)
    1600:	d8801f15 	stw	r2,124(sp)
    1604:	010001c4 	movi	r4,7
    1608:	20832916 	blt	r4,r2,22b0 <___vfprintf_internal_r+0x1b54>
    160c:	42000204 	addi	r8,r8,8
    1610:	d8803317 	ldw	r2,204(sp)
    1614:	143fffc4 	addi	r16,r2,-1
    1618:	043ec50e 	bge	zero,r16,1130 <_gp+0xfffc2828>
    161c:	04400404 	movi	r17,16
    1620:	d8801f17 	ldw	r2,124(sp)
    1624:	8c00880e 	bge	r17,r16,1848 <___vfprintf_internal_r+0x10ec>
    1628:	014000f4 	movhi	r5,3
    162c:	29529c84 	addi	r5,r5,19058
    1630:	d9402b15 	stw	r5,172(sp)
    1634:	058001c4 	movi	r22,7
    1638:	dcc02c17 	ldw	r19,176(sp)
    163c:	00000306 	br	164c <___vfprintf_internal_r+0xef0>
    1640:	42000204 	addi	r8,r8,8
    1644:	843ffc04 	addi	r16,r16,-16
    1648:	8c00820e 	bge	r17,r16,1854 <___vfprintf_internal_r+0x10f8>
    164c:	18c00404 	addi	r3,r3,16
    1650:	10800044 	addi	r2,r2,1
    1654:	45000015 	stw	r20,0(r8)
    1658:	44400115 	stw	r17,4(r8)
    165c:	d8c02015 	stw	r3,128(sp)
    1660:	d8801f15 	stw	r2,124(sp)
    1664:	b0bff60e 	bge	r22,r2,1640 <_gp+0xfffc2d38>
    1668:	d9801e04 	addi	r6,sp,120
    166c:	b80b883a 	mov	r5,r23
    1670:	9809883a 	mov	r4,r19
    1674:	00072740 	call	7274 <__sprint_r>
    1678:	103d3a1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    167c:	d8c02017 	ldw	r3,128(sp)
    1680:	d8801f17 	ldw	r2,124(sp)
    1684:	da000404 	addi	r8,sp,16
    1688:	003fee06 	br	1644 <_gp+0xfffc2d3c>
    168c:	d9403117 	ldw	r5,196(sp)
    1690:	d8802a17 	ldw	r2,168(sp)
    1694:	28adc83a 	sub	r22,r5,r2
    1698:	05be630e 	bge	zero,r22,1028 <_gp+0xfffc2720>
    169c:	07000404 	movi	fp,16
    16a0:	d8801f17 	ldw	r2,124(sp)
    16a4:	e5838f0e 	bge	fp,r22,24e4 <___vfprintf_internal_r+0x1d88>
    16a8:	014000f4 	movhi	r5,3
    16ac:	29529c84 	addi	r5,r5,19058
    16b0:	dc403015 	stw	r17,192(sp)
    16b4:	d9402b15 	stw	r5,172(sp)
    16b8:	b023883a 	mov	r17,r22
    16bc:	04c001c4 	movi	r19,7
    16c0:	a82d883a 	mov	r22,r21
    16c4:	902b883a 	mov	r21,r18
    16c8:	8025883a 	mov	r18,r16
    16cc:	dc002c17 	ldw	r16,176(sp)
    16d0:	00000306 	br	16e0 <___vfprintf_internal_r+0xf84>
    16d4:	8c7ffc04 	addi	r17,r17,-16
    16d8:	42000204 	addi	r8,r8,8
    16dc:	e440110e 	bge	fp,r17,1724 <___vfprintf_internal_r+0xfc8>
    16e0:	18c00404 	addi	r3,r3,16
    16e4:	10800044 	addi	r2,r2,1
    16e8:	45000015 	stw	r20,0(r8)
    16ec:	47000115 	stw	fp,4(r8)
    16f0:	d8c02015 	stw	r3,128(sp)
    16f4:	d8801f15 	stw	r2,124(sp)
    16f8:	98bff60e 	bge	r19,r2,16d4 <_gp+0xfffc2dcc>
    16fc:	d9801e04 	addi	r6,sp,120
    1700:	b80b883a 	mov	r5,r23
    1704:	8009883a 	mov	r4,r16
    1708:	00072740 	call	7274 <__sprint_r>
    170c:	103d151e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1710:	8c7ffc04 	addi	r17,r17,-16
    1714:	d8c02017 	ldw	r3,128(sp)
    1718:	d8801f17 	ldw	r2,124(sp)
    171c:	da000404 	addi	r8,sp,16
    1720:	e47fef16 	blt	fp,r17,16e0 <_gp+0xfffc2dd8>
    1724:	9021883a 	mov	r16,r18
    1728:	a825883a 	mov	r18,r21
    172c:	b02b883a 	mov	r21,r22
    1730:	882d883a 	mov	r22,r17
    1734:	dc403017 	ldw	r17,192(sp)
    1738:	d9002b17 	ldw	r4,172(sp)
    173c:	1d87883a 	add	r3,r3,r22
    1740:	10800044 	addi	r2,r2,1
    1744:	41000015 	stw	r4,0(r8)
    1748:	45800115 	stw	r22,4(r8)
    174c:	d8c02015 	stw	r3,128(sp)
    1750:	d8801f15 	stw	r2,124(sp)
    1754:	010001c4 	movi	r4,7
    1758:	20818e16 	blt	r4,r2,1d94 <___vfprintf_internal_r+0x1638>
    175c:	42000204 	addi	r8,r8,8
    1760:	003e3106 	br	1028 <_gp+0xfffc2720>
    1764:	d9403317 	ldw	r5,204(sp)
    1768:	00800044 	movi	r2,1
    176c:	18c00044 	addi	r3,r3,1
    1770:	1141530e 	bge	r2,r5,1cc0 <___vfprintf_internal_r+0x1564>
    1774:	dc401f17 	ldw	r17,124(sp)
    1778:	00800044 	movi	r2,1
    177c:	40800115 	stw	r2,4(r8)
    1780:	8c400044 	addi	r17,r17,1
    1784:	44000015 	stw	r16,0(r8)
    1788:	d8c02015 	stw	r3,128(sp)
    178c:	dc401f15 	stw	r17,124(sp)
    1790:	008001c4 	movi	r2,7
    1794:	14416b16 	blt	r2,r17,1d44 <___vfprintf_internal_r+0x15e8>
    1798:	42000204 	addi	r8,r8,8
    179c:	d8803717 	ldw	r2,220(sp)
    17a0:	d9003417 	ldw	r4,208(sp)
    17a4:	8c400044 	addi	r17,r17,1
    17a8:	10c7883a 	add	r3,r2,r3
    17ac:	40800115 	stw	r2,4(r8)
    17b0:	41000015 	stw	r4,0(r8)
    17b4:	d8c02015 	stw	r3,128(sp)
    17b8:	dc401f15 	stw	r17,124(sp)
    17bc:	008001c4 	movi	r2,7
    17c0:	14416916 	blt	r2,r17,1d68 <___vfprintf_internal_r+0x160c>
    17c4:	45800204 	addi	r22,r8,8
    17c8:	d9003617 	ldw	r4,216(sp)
    17cc:	d9403817 	ldw	r5,224(sp)
    17d0:	000d883a 	mov	r6,zero
    17d4:	000f883a 	mov	r7,zero
    17d8:	d8c03c15 	stw	r3,240(sp)
    17dc:	000b8b40 	call	b8b4 <__eqdf2>
    17e0:	d8c03c17 	ldw	r3,240(sp)
    17e4:	1000bc26 	beq	r2,zero,1ad8 <___vfprintf_internal_r+0x137c>
    17e8:	d9403317 	ldw	r5,204(sp)
    17ec:	84000044 	addi	r16,r16,1
    17f0:	8c400044 	addi	r17,r17,1
    17f4:	28bfffc4 	addi	r2,r5,-1
    17f8:	1887883a 	add	r3,r3,r2
    17fc:	b0800115 	stw	r2,4(r22)
    1800:	b4000015 	stw	r16,0(r22)
    1804:	d8c02015 	stw	r3,128(sp)
    1808:	dc401f15 	stw	r17,124(sp)
    180c:	008001c4 	movi	r2,7
    1810:	14414316 	blt	r2,r17,1d20 <___vfprintf_internal_r+0x15c4>
    1814:	b5800204 	addi	r22,r22,8
    1818:	d9003a17 	ldw	r4,232(sp)
    181c:	df0022c4 	addi	fp,sp,139
    1820:	8c400044 	addi	r17,r17,1
    1824:	20c7883a 	add	r3,r4,r3
    1828:	b7000015 	stw	fp,0(r22)
    182c:	b1000115 	stw	r4,4(r22)
    1830:	d8c02015 	stw	r3,128(sp)
    1834:	dc401f15 	stw	r17,124(sp)
    1838:	008001c4 	movi	r2,7
    183c:	14400e16 	blt	r2,r17,1878 <___vfprintf_internal_r+0x111c>
    1840:	b2000204 	addi	r8,r22,8
    1844:	003e3a06 	br	1130 <_gp+0xfffc2828>
    1848:	010000f4 	movhi	r4,3
    184c:	21129c84 	addi	r4,r4,19058
    1850:	d9002b15 	stw	r4,172(sp)
    1854:	d9002b17 	ldw	r4,172(sp)
    1858:	1c07883a 	add	r3,r3,r16
    185c:	44000115 	stw	r16,4(r8)
    1860:	41000015 	stw	r4,0(r8)
    1864:	10800044 	addi	r2,r2,1
    1868:	d8c02015 	stw	r3,128(sp)
    186c:	d8801f15 	stw	r2,124(sp)
    1870:	010001c4 	movi	r4,7
    1874:	20be2d0e 	bge	r4,r2,112c <_gp+0xfffc2824>
    1878:	d9002c17 	ldw	r4,176(sp)
    187c:	d9801e04 	addi	r6,sp,120
    1880:	b80b883a 	mov	r5,r23
    1884:	00072740 	call	7274 <__sprint_r>
    1888:	103cb61e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    188c:	d8c02017 	ldw	r3,128(sp)
    1890:	da000404 	addi	r8,sp,16
    1894:	003e2606 	br	1130 <_gp+0xfffc2828>
    1898:	d9002c17 	ldw	r4,176(sp)
    189c:	d9801e04 	addi	r6,sp,120
    18a0:	b80b883a 	mov	r5,r23
    18a4:	00072740 	call	7274 <__sprint_r>
    18a8:	103e5d26 	beq	r2,zero,1220 <_gp+0xfffc2918>
    18ac:	003cad06 	br	b64 <_gp+0xfffc225c>
    18b0:	d9002c17 	ldw	r4,176(sp)
    18b4:	d9801e04 	addi	r6,sp,120
    18b8:	b80b883a 	mov	r5,r23
    18bc:	00072740 	call	7274 <__sprint_r>
    18c0:	103ca81e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    18c4:	d8c02017 	ldw	r3,128(sp)
    18c8:	da000404 	addi	r8,sp,16
    18cc:	003e0b06 	br	10fc <_gp+0xfffc27f4>
    18d0:	d9002c17 	ldw	r4,176(sp)
    18d4:	d9801e04 	addi	r6,sp,120
    18d8:	b80b883a 	mov	r5,r23
    18dc:	00072740 	call	7274 <__sprint_r>
    18e0:	103ca01e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    18e4:	d8c02017 	ldw	r3,128(sp)
    18e8:	da000404 	addi	r8,sp,16
    18ec:	003dbd06 	br	fe4 <_gp+0xfffc26dc>
    18f0:	d9002c17 	ldw	r4,176(sp)
    18f4:	d9801e04 	addi	r6,sp,120
    18f8:	b80b883a 	mov	r5,r23
    18fc:	00072740 	call	7274 <__sprint_r>
    1900:	103c981e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1904:	d8c02017 	ldw	r3,128(sp)
    1908:	da000404 	addi	r8,sp,16
    190c:	003dc306 	br	101c <_gp+0xfffc2714>
    1910:	d8802917 	ldw	r2,164(sp)
    1914:	d8002785 	stb	zero,158(sp)
    1918:	103f0616 	blt	r2,zero,1534 <_gp+0xfffc2c2c>
    191c:	00ffdfc4 	movi	r3,-129
    1920:	9d84b03a 	or	r2,r19,r22
    1924:	90e4703a 	and	r18,r18,r3
    1928:	103c6b26 	beq	r2,zero,ad8 <_gp+0xfffc21d0>
    192c:	0039883a 	mov	fp,zero
    1930:	003e7406 	br	1304 <_gp+0xfffc29fc>
    1934:	9080040c 	andi	r2,r18,16
    1938:	1001b326 	beq	r2,zero,2008 <___vfprintf_internal_r+0x18ac>
    193c:	d9002d17 	ldw	r4,180(sp)
    1940:	d9402917 	ldw	r5,164(sp)
    1944:	d8002785 	stb	zero,158(sp)
    1948:	20800104 	addi	r2,r4,4
    194c:	24c00017 	ldw	r19,0(r4)
    1950:	002d883a 	mov	r22,zero
    1954:	2801b516 	blt	r5,zero,202c <___vfprintf_internal_r+0x18d0>
    1958:	00ffdfc4 	movi	r3,-129
    195c:	d8802d15 	stw	r2,180(sp)
    1960:	90e4703a 	and	r18,r18,r3
    1964:	983d2726 	beq	r19,zero,e04 <_gp+0xfffc24fc>
    1968:	0039883a 	mov	fp,zero
    196c:	003d2a06 	br	e18 <_gp+0xfffc2510>
    1970:	dc402617 	ldw	r17,152(sp)
    1974:	0441d30e 	bge	zero,r17,20c4 <___vfprintf_internal_r+0x1968>
    1978:	dc403217 	ldw	r17,200(sp)
    197c:	d8803317 	ldw	r2,204(sp)
    1980:	1440010e 	bge	r2,r17,1988 <___vfprintf_internal_r+0x122c>
    1984:	1023883a 	mov	r17,r2
    1988:	04400a0e 	bge	zero,r17,19b4 <___vfprintf_internal_r+0x1258>
    198c:	d8801f17 	ldw	r2,124(sp)
    1990:	1c47883a 	add	r3,r3,r17
    1994:	44000015 	stw	r16,0(r8)
    1998:	10800044 	addi	r2,r2,1
    199c:	44400115 	stw	r17,4(r8)
    19a0:	d8c02015 	stw	r3,128(sp)
    19a4:	d8801f15 	stw	r2,124(sp)
    19a8:	010001c4 	movi	r4,7
    19ac:	20826516 	blt	r4,r2,2344 <___vfprintf_internal_r+0x1be8>
    19b0:	42000204 	addi	r8,r8,8
    19b4:	88026116 	blt	r17,zero,233c <___vfprintf_internal_r+0x1be0>
    19b8:	d9003217 	ldw	r4,200(sp)
    19bc:	2463c83a 	sub	r17,r4,r17
    19c0:	04407b0e 	bge	zero,r17,1bb0 <___vfprintf_internal_r+0x1454>
    19c4:	05800404 	movi	r22,16
    19c8:	d8801f17 	ldw	r2,124(sp)
    19cc:	b4419d0e 	bge	r22,r17,2044 <___vfprintf_internal_r+0x18e8>
    19d0:	010000f4 	movhi	r4,3
    19d4:	21129c84 	addi	r4,r4,19058
    19d8:	d9002b15 	stw	r4,172(sp)
    19dc:	070001c4 	movi	fp,7
    19e0:	dcc02c17 	ldw	r19,176(sp)
    19e4:	00000306 	br	19f4 <___vfprintf_internal_r+0x1298>
    19e8:	42000204 	addi	r8,r8,8
    19ec:	8c7ffc04 	addi	r17,r17,-16
    19f0:	b441970e 	bge	r22,r17,2050 <___vfprintf_internal_r+0x18f4>
    19f4:	18c00404 	addi	r3,r3,16
    19f8:	10800044 	addi	r2,r2,1
    19fc:	45000015 	stw	r20,0(r8)
    1a00:	45800115 	stw	r22,4(r8)
    1a04:	d8c02015 	stw	r3,128(sp)
    1a08:	d8801f15 	stw	r2,124(sp)
    1a0c:	e0bff60e 	bge	fp,r2,19e8 <_gp+0xfffc30e0>
    1a10:	d9801e04 	addi	r6,sp,120
    1a14:	b80b883a 	mov	r5,r23
    1a18:	9809883a 	mov	r4,r19
    1a1c:	00072740 	call	7274 <__sprint_r>
    1a20:	103c501e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1a24:	d8c02017 	ldw	r3,128(sp)
    1a28:	d8801f17 	ldw	r2,124(sp)
    1a2c:	da000404 	addi	r8,sp,16
    1a30:	003fee06 	br	19ec <_gp+0xfffc30e4>
    1a34:	d9002c17 	ldw	r4,176(sp)
    1a38:	d9801e04 	addi	r6,sp,120
    1a3c:	b80b883a 	mov	r5,r23
    1a40:	00072740 	call	7274 <__sprint_r>
    1a44:	103c471e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1a48:	d8c02017 	ldw	r3,128(sp)
    1a4c:	df002787 	ldb	fp,158(sp)
    1a50:	da000404 	addi	r8,sp,16
    1a54:	003d5606 	br	fb0 <_gp+0xfffc26a8>
    1a58:	9080040c 	andi	r2,r18,16
    1a5c:	10016126 	beq	r2,zero,1fe4 <___vfprintf_internal_r+0x1888>
    1a60:	d8802d17 	ldw	r2,180(sp)
    1a64:	14c00017 	ldw	r19,0(r2)
    1a68:	10800104 	addi	r2,r2,4
    1a6c:	d8802d15 	stw	r2,180(sp)
    1a70:	982dd7fa 	srai	r22,r19,31
    1a74:	b005883a 	mov	r2,r22
    1a78:	003c8206 	br	c84 <_gp+0xfffc237c>
    1a7c:	9080040c 	andi	r2,r18,16
    1a80:	10003526 	beq	r2,zero,1b58 <___vfprintf_internal_r+0x13fc>
    1a84:	d9402d17 	ldw	r5,180(sp)
    1a88:	d8c02917 	ldw	r3,164(sp)
    1a8c:	d8002785 	stb	zero,158(sp)
    1a90:	28800104 	addi	r2,r5,4
    1a94:	2cc00017 	ldw	r19,0(r5)
    1a98:	002d883a 	mov	r22,zero
    1a9c:	18003716 	blt	r3,zero,1b7c <___vfprintf_internal_r+0x1420>
    1aa0:	00ffdfc4 	movi	r3,-129
    1aa4:	d8802d15 	stw	r2,180(sp)
    1aa8:	90e4703a 	and	r18,r18,r3
    1aac:	0039883a 	mov	fp,zero
    1ab0:	983df326 	beq	r19,zero,1280 <_gp+0xfffc2978>
    1ab4:	00800244 	movi	r2,9
    1ab8:	14fc7b36 	bltu	r2,r19,ca8 <_gp+0xfffc23a0>
    1abc:	d8c02817 	ldw	r3,160(sp)
    1ac0:	dc001dc4 	addi	r16,sp,119
    1ac4:	9cc00c04 	addi	r19,r19,48
    1ac8:	1c07c83a 	sub	r3,r3,r16
    1acc:	dcc01dc5 	stb	r19,119(sp)
    1ad0:	d8c02e15 	stw	r3,184(sp)
    1ad4:	003ce806 	br	e78 <_gp+0xfffc2570>
    1ad8:	d8803317 	ldw	r2,204(sp)
    1adc:	143fffc4 	addi	r16,r2,-1
    1ae0:	043f4d0e 	bge	zero,r16,1818 <_gp+0xfffc2f10>
    1ae4:	07000404 	movi	fp,16
    1ae8:	e400810e 	bge	fp,r16,1cf0 <___vfprintf_internal_r+0x1594>
    1aec:	014000f4 	movhi	r5,3
    1af0:	29529c84 	addi	r5,r5,19058
    1af4:	d9402b15 	stw	r5,172(sp)
    1af8:	01c001c4 	movi	r7,7
    1afc:	dcc02c17 	ldw	r19,176(sp)
    1b00:	00000306 	br	1b10 <___vfprintf_internal_r+0x13b4>
    1b04:	b5800204 	addi	r22,r22,8
    1b08:	843ffc04 	addi	r16,r16,-16
    1b0c:	e4007b0e 	bge	fp,r16,1cfc <___vfprintf_internal_r+0x15a0>
    1b10:	18c00404 	addi	r3,r3,16
    1b14:	8c400044 	addi	r17,r17,1
    1b18:	b5000015 	stw	r20,0(r22)
    1b1c:	b7000115 	stw	fp,4(r22)
    1b20:	d8c02015 	stw	r3,128(sp)
    1b24:	dc401f15 	stw	r17,124(sp)
    1b28:	3c7ff60e 	bge	r7,r17,1b04 <_gp+0xfffc31fc>
    1b2c:	d9801e04 	addi	r6,sp,120
    1b30:	b80b883a 	mov	r5,r23
    1b34:	9809883a 	mov	r4,r19
    1b38:	d9c03c15 	stw	r7,240(sp)
    1b3c:	00072740 	call	7274 <__sprint_r>
    1b40:	d9c03c17 	ldw	r7,240(sp)
    1b44:	103c071e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1b48:	d8c02017 	ldw	r3,128(sp)
    1b4c:	dc401f17 	ldw	r17,124(sp)
    1b50:	dd800404 	addi	r22,sp,16
    1b54:	003fec06 	br	1b08 <_gp+0xfffc3200>
    1b58:	9080100c 	andi	r2,r18,64
    1b5c:	d8002785 	stb	zero,158(sp)
    1b60:	10010e26 	beq	r2,zero,1f9c <___vfprintf_internal_r+0x1840>
    1b64:	d9002d17 	ldw	r4,180(sp)
    1b68:	d9402917 	ldw	r5,164(sp)
    1b6c:	002d883a 	mov	r22,zero
    1b70:	20800104 	addi	r2,r4,4
    1b74:	24c0000b 	ldhu	r19,0(r4)
    1b78:	283fc90e 	bge	r5,zero,1aa0 <_gp+0xfffc3198>
    1b7c:	d8802d15 	stw	r2,180(sp)
    1b80:	0039883a 	mov	fp,zero
    1b84:	9d84b03a 	or	r2,r19,r22
    1b88:	103c461e 	bne	r2,zero,ca4 <_gp+0xfffc239c>
    1b8c:	00800044 	movi	r2,1
    1b90:	003e6c06 	br	1544 <_gp+0xfffc2c3c>
    1b94:	d9002c17 	ldw	r4,176(sp)
    1b98:	d9801e04 	addi	r6,sp,120
    1b9c:	b80b883a 	mov	r5,r23
    1ba0:	00072740 	call	7274 <__sprint_r>
    1ba4:	103bef1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1ba8:	d8c02017 	ldw	r3,128(sp)
    1bac:	da000404 	addi	r8,sp,16
    1bb0:	d9003217 	ldw	r4,200(sp)
    1bb4:	d8802617 	ldw	r2,152(sp)
    1bb8:	d9403317 	ldw	r5,204(sp)
    1bbc:	8123883a 	add	r17,r16,r4
    1bc0:	11400216 	blt	r2,r5,1bcc <___vfprintf_internal_r+0x1470>
    1bc4:	9100004c 	andi	r4,r18,1
    1bc8:	20000d26 	beq	r4,zero,1c00 <___vfprintf_internal_r+0x14a4>
    1bcc:	d9003717 	ldw	r4,220(sp)
    1bd0:	d9403417 	ldw	r5,208(sp)
    1bd4:	1907883a 	add	r3,r3,r4
    1bd8:	d9001f17 	ldw	r4,124(sp)
    1bdc:	41400015 	stw	r5,0(r8)
    1be0:	d9403717 	ldw	r5,220(sp)
    1be4:	21000044 	addi	r4,r4,1
    1be8:	d8c02015 	stw	r3,128(sp)
    1bec:	41400115 	stw	r5,4(r8)
    1bf0:	d9001f15 	stw	r4,124(sp)
    1bf4:	014001c4 	movi	r5,7
    1bf8:	2901e816 	blt	r5,r4,239c <___vfprintf_internal_r+0x1c40>
    1bfc:	42000204 	addi	r8,r8,8
    1c00:	d9003317 	ldw	r4,204(sp)
    1c04:	8121883a 	add	r16,r16,r4
    1c08:	2085c83a 	sub	r2,r4,r2
    1c0c:	8461c83a 	sub	r16,r16,r17
    1c10:	1400010e 	bge	r2,r16,1c18 <___vfprintf_internal_r+0x14bc>
    1c14:	1021883a 	mov	r16,r2
    1c18:	04000a0e 	bge	zero,r16,1c44 <___vfprintf_internal_r+0x14e8>
    1c1c:	d9001f17 	ldw	r4,124(sp)
    1c20:	1c07883a 	add	r3,r3,r16
    1c24:	44400015 	stw	r17,0(r8)
    1c28:	21000044 	addi	r4,r4,1
    1c2c:	44000115 	stw	r16,4(r8)
    1c30:	d8c02015 	stw	r3,128(sp)
    1c34:	d9001f15 	stw	r4,124(sp)
    1c38:	014001c4 	movi	r5,7
    1c3c:	2901fb16 	blt	r5,r4,242c <___vfprintf_internal_r+0x1cd0>
    1c40:	42000204 	addi	r8,r8,8
    1c44:	8001f716 	blt	r16,zero,2424 <___vfprintf_internal_r+0x1cc8>
    1c48:	1421c83a 	sub	r16,r2,r16
    1c4c:	043d380e 	bge	zero,r16,1130 <_gp+0xfffc2828>
    1c50:	04400404 	movi	r17,16
    1c54:	d8801f17 	ldw	r2,124(sp)
    1c58:	8c3efb0e 	bge	r17,r16,1848 <_gp+0xfffc2f40>
    1c5c:	014000f4 	movhi	r5,3
    1c60:	29529c84 	addi	r5,r5,19058
    1c64:	d9402b15 	stw	r5,172(sp)
    1c68:	058001c4 	movi	r22,7
    1c6c:	dcc02c17 	ldw	r19,176(sp)
    1c70:	00000306 	br	1c80 <___vfprintf_internal_r+0x1524>
    1c74:	42000204 	addi	r8,r8,8
    1c78:	843ffc04 	addi	r16,r16,-16
    1c7c:	8c3ef50e 	bge	r17,r16,1854 <_gp+0xfffc2f4c>
    1c80:	18c00404 	addi	r3,r3,16
    1c84:	10800044 	addi	r2,r2,1
    1c88:	45000015 	stw	r20,0(r8)
    1c8c:	44400115 	stw	r17,4(r8)
    1c90:	d8c02015 	stw	r3,128(sp)
    1c94:	d8801f15 	stw	r2,124(sp)
    1c98:	b0bff60e 	bge	r22,r2,1c74 <_gp+0xfffc336c>
    1c9c:	d9801e04 	addi	r6,sp,120
    1ca0:	b80b883a 	mov	r5,r23
    1ca4:	9809883a 	mov	r4,r19
    1ca8:	00072740 	call	7274 <__sprint_r>
    1cac:	103bad1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1cb0:	d8c02017 	ldw	r3,128(sp)
    1cb4:	d8801f17 	ldw	r2,124(sp)
    1cb8:	da000404 	addi	r8,sp,16
    1cbc:	003fee06 	br	1c78 <_gp+0xfffc3370>
    1cc0:	9088703a 	and	r4,r18,r2
    1cc4:	203eab1e 	bne	r4,zero,1774 <_gp+0xfffc2e6c>
    1cc8:	dc401f17 	ldw	r17,124(sp)
    1ccc:	40800115 	stw	r2,4(r8)
    1cd0:	44000015 	stw	r16,0(r8)
    1cd4:	8c400044 	addi	r17,r17,1
    1cd8:	d8c02015 	stw	r3,128(sp)
    1cdc:	dc401f15 	stw	r17,124(sp)
    1ce0:	008001c4 	movi	r2,7
    1ce4:	14400e16 	blt	r2,r17,1d20 <___vfprintf_internal_r+0x15c4>
    1ce8:	45800204 	addi	r22,r8,8
    1cec:	003eca06 	br	1818 <_gp+0xfffc2f10>
    1cf0:	010000f4 	movhi	r4,3
    1cf4:	21129c84 	addi	r4,r4,19058
    1cf8:	d9002b15 	stw	r4,172(sp)
    1cfc:	d8802b17 	ldw	r2,172(sp)
    1d00:	1c07883a 	add	r3,r3,r16
    1d04:	8c400044 	addi	r17,r17,1
    1d08:	b0800015 	stw	r2,0(r22)
    1d0c:	b4000115 	stw	r16,4(r22)
    1d10:	d8c02015 	stw	r3,128(sp)
    1d14:	dc401f15 	stw	r17,124(sp)
    1d18:	008001c4 	movi	r2,7
    1d1c:	147ebd0e 	bge	r2,r17,1814 <_gp+0xfffc2f0c>
    1d20:	d9002c17 	ldw	r4,176(sp)
    1d24:	d9801e04 	addi	r6,sp,120
    1d28:	b80b883a 	mov	r5,r23
    1d2c:	00072740 	call	7274 <__sprint_r>
    1d30:	103b8c1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1d34:	d8c02017 	ldw	r3,128(sp)
    1d38:	dc401f17 	ldw	r17,124(sp)
    1d3c:	dd800404 	addi	r22,sp,16
    1d40:	003eb506 	br	1818 <_gp+0xfffc2f10>
    1d44:	d9002c17 	ldw	r4,176(sp)
    1d48:	d9801e04 	addi	r6,sp,120
    1d4c:	b80b883a 	mov	r5,r23
    1d50:	00072740 	call	7274 <__sprint_r>
    1d54:	103b831e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1d58:	d8c02017 	ldw	r3,128(sp)
    1d5c:	dc401f17 	ldw	r17,124(sp)
    1d60:	da000404 	addi	r8,sp,16
    1d64:	003e8d06 	br	179c <_gp+0xfffc2e94>
    1d68:	d9002c17 	ldw	r4,176(sp)
    1d6c:	d9801e04 	addi	r6,sp,120
    1d70:	b80b883a 	mov	r5,r23
    1d74:	00072740 	call	7274 <__sprint_r>
    1d78:	103b7a1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1d7c:	d8c02017 	ldw	r3,128(sp)
    1d80:	dc401f17 	ldw	r17,124(sp)
    1d84:	dd800404 	addi	r22,sp,16
    1d88:	003e8f06 	br	17c8 <_gp+0xfffc2ec0>
    1d8c:	0027883a 	mov	r19,zero
    1d90:	003f4a06 	br	1abc <_gp+0xfffc31b4>
    1d94:	d9002c17 	ldw	r4,176(sp)
    1d98:	d9801e04 	addi	r6,sp,120
    1d9c:	b80b883a 	mov	r5,r23
    1da0:	00072740 	call	7274 <__sprint_r>
    1da4:	103b6f1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    1da8:	d8c02017 	ldw	r3,128(sp)
    1dac:	da000404 	addi	r8,sp,16
    1db0:	003c9d06 	br	1028 <_gp+0xfffc2720>
    1db4:	04e7c83a 	sub	r19,zero,r19
    1db8:	9804c03a 	cmpne	r2,r19,zero
    1dbc:	05adc83a 	sub	r22,zero,r22
    1dc0:	b0adc83a 	sub	r22,r22,r2
    1dc4:	d8802917 	ldw	r2,164(sp)
    1dc8:	07000b44 	movi	fp,45
    1dcc:	df002785 	stb	fp,158(sp)
    1dd0:	10017b16 	blt	r2,zero,23c0 <___vfprintf_internal_r+0x1c64>
    1dd4:	00bfdfc4 	movi	r2,-129
    1dd8:	90a4703a 	and	r18,r18,r2
    1ddc:	003bb106 	br	ca4 <_gp+0xfffc239c>
    1de0:	d9003617 	ldw	r4,216(sp)
    1de4:	d9403817 	ldw	r5,224(sp)
    1de8:	da003d15 	stw	r8,244(sp)
    1dec:	0006e000 	call	6e00 <__fpclassifyd>
    1df0:	da003d17 	ldw	r8,244(sp)
    1df4:	1000f026 	beq	r2,zero,21b8 <___vfprintf_internal_r+0x1a5c>
    1df8:	d9002917 	ldw	r4,164(sp)
    1dfc:	05bff7c4 	movi	r22,-33
    1e00:	00bfffc4 	movi	r2,-1
    1e04:	8dac703a 	and	r22,r17,r22
    1e08:	20820026 	beq	r4,r2,260c <___vfprintf_internal_r+0x1eb0>
    1e0c:	008011c4 	movi	r2,71
    1e10:	b081f726 	beq	r22,r2,25f0 <___vfprintf_internal_r+0x1e94>
    1e14:	d9003817 	ldw	r4,224(sp)
    1e18:	90c04014 	ori	r3,r18,256
    1e1c:	d8c02b15 	stw	r3,172(sp)
    1e20:	20021516 	blt	r4,zero,2678 <___vfprintf_internal_r+0x1f1c>
    1e24:	dcc03817 	ldw	r19,224(sp)
    1e28:	d8002a05 	stb	zero,168(sp)
    1e2c:	00801984 	movi	r2,102
    1e30:	8881f926 	beq	r17,r2,2618 <___vfprintf_internal_r+0x1ebc>
    1e34:	00801184 	movi	r2,70
    1e38:	88821c26 	beq	r17,r2,26ac <___vfprintf_internal_r+0x1f50>
    1e3c:	00801144 	movi	r2,69
    1e40:	b081ef26 	beq	r22,r2,2600 <___vfprintf_internal_r+0x1ea4>
    1e44:	d8c02917 	ldw	r3,164(sp)
    1e48:	d8802104 	addi	r2,sp,132
    1e4c:	d8800315 	stw	r2,12(sp)
    1e50:	d9403617 	ldw	r5,216(sp)
    1e54:	d8802504 	addi	r2,sp,148
    1e58:	d9002c17 	ldw	r4,176(sp)
    1e5c:	d8800215 	stw	r2,8(sp)
    1e60:	d8802604 	addi	r2,sp,152
    1e64:	d8c00015 	stw	r3,0(sp)
    1e68:	d8800115 	stw	r2,4(sp)
    1e6c:	01c00084 	movi	r7,2
    1e70:	980d883a 	mov	r6,r19
    1e74:	d8c03c15 	stw	r3,240(sp)
    1e78:	da003d15 	stw	r8,244(sp)
    1e7c:	0002d800 	call	2d80 <_dtoa_r>
    1e80:	1021883a 	mov	r16,r2
    1e84:	008019c4 	movi	r2,103
    1e88:	d8c03c17 	ldw	r3,240(sp)
    1e8c:	da003d17 	ldw	r8,244(sp)
    1e90:	88817126 	beq	r17,r2,2458 <___vfprintf_internal_r+0x1cfc>
    1e94:	008011c4 	movi	r2,71
    1e98:	88829226 	beq	r17,r2,28e4 <___vfprintf_internal_r+0x2188>
    1e9c:	80f9883a 	add	fp,r16,r3
    1ea0:	d9003617 	ldw	r4,216(sp)
    1ea4:	000d883a 	mov	r6,zero
    1ea8:	000f883a 	mov	r7,zero
    1eac:	980b883a 	mov	r5,r19
    1eb0:	da003d15 	stw	r8,244(sp)
    1eb4:	000b8b40 	call	b8b4 <__eqdf2>
    1eb8:	da003d17 	ldw	r8,244(sp)
    1ebc:	10018d26 	beq	r2,zero,24f4 <___vfprintf_internal_r+0x1d98>
    1ec0:	d8802117 	ldw	r2,132(sp)
    1ec4:	1700062e 	bgeu	r2,fp,1ee0 <___vfprintf_internal_r+0x1784>
    1ec8:	01000c04 	movi	r4,48
    1ecc:	10c00044 	addi	r3,r2,1
    1ed0:	d8c02115 	stw	r3,132(sp)
    1ed4:	11000005 	stb	r4,0(r2)
    1ed8:	d8802117 	ldw	r2,132(sp)
    1edc:	173ffb36 	bltu	r2,fp,1ecc <_gp+0xfffc35c4>
    1ee0:	1405c83a 	sub	r2,r2,r16
    1ee4:	d8803315 	stw	r2,204(sp)
    1ee8:	008011c4 	movi	r2,71
    1eec:	b0817626 	beq	r22,r2,24c8 <___vfprintf_internal_r+0x1d6c>
    1ef0:	00801944 	movi	r2,101
    1ef4:	1442810e 	bge	r2,r17,28fc <___vfprintf_internal_r+0x21a0>
    1ef8:	d8c02617 	ldw	r3,152(sp)
    1efc:	00801984 	movi	r2,102
    1f00:	d8c03215 	stw	r3,200(sp)
    1f04:	8881fe26 	beq	r17,r2,2700 <___vfprintf_internal_r+0x1fa4>
    1f08:	d8c03217 	ldw	r3,200(sp)
    1f0c:	d9003317 	ldw	r4,204(sp)
    1f10:	1901dd16 	blt	r3,r4,2688 <___vfprintf_internal_r+0x1f2c>
    1f14:	9480004c 	andi	r18,r18,1
    1f18:	90022b1e 	bne	r18,zero,27c8 <___vfprintf_internal_r+0x206c>
    1f1c:	1805883a 	mov	r2,r3
    1f20:	18028016 	blt	r3,zero,2924 <___vfprintf_internal_r+0x21c8>
    1f24:	d8c03217 	ldw	r3,200(sp)
    1f28:	044019c4 	movi	r17,103
    1f2c:	d8c02e15 	stw	r3,184(sp)
    1f30:	df002a07 	ldb	fp,168(sp)
    1f34:	e001531e 	bne	fp,zero,2484 <___vfprintf_internal_r+0x1d28>
    1f38:	df002783 	ldbu	fp,158(sp)
    1f3c:	d8802a15 	stw	r2,168(sp)
    1f40:	dc802b17 	ldw	r18,172(sp)
    1f44:	d8002915 	stw	zero,164(sp)
    1f48:	003bd106 	br	e90 <_gp+0xfffc2588>
    1f4c:	d8802d17 	ldw	r2,180(sp)
    1f50:	d8c02d17 	ldw	r3,180(sp)
    1f54:	d9002d17 	ldw	r4,180(sp)
    1f58:	10800017 	ldw	r2,0(r2)
    1f5c:	18c00117 	ldw	r3,4(r3)
    1f60:	21000204 	addi	r4,r4,8
    1f64:	d8803615 	stw	r2,216(sp)
    1f68:	d8c03815 	stw	r3,224(sp)
    1f6c:	d9002d15 	stw	r4,180(sp)
    1f70:	003b7506 	br	d48 <_gp+0xfffc2440>
    1f74:	ac400007 	ldb	r17,0(r21)
    1f78:	003a5906 	br	8e0 <_gp+0xfffc1fd8>
    1f7c:	9080100c 	andi	r2,r18,64
    1f80:	1000a826 	beq	r2,zero,2224 <___vfprintf_internal_r+0x1ac8>
    1f84:	d9002d17 	ldw	r4,180(sp)
    1f88:	002d883a 	mov	r22,zero
    1f8c:	24c0000b 	ldhu	r19,0(r4)
    1f90:	21000104 	addi	r4,r4,4
    1f94:	d9002d15 	stw	r4,180(sp)
    1f98:	003ccb06 	br	12c8 <_gp+0xfffc29c0>
    1f9c:	d8c02d17 	ldw	r3,180(sp)
    1fa0:	d9002917 	ldw	r4,164(sp)
    1fa4:	002d883a 	mov	r22,zero
    1fa8:	18800104 	addi	r2,r3,4
    1fac:	1cc00017 	ldw	r19,0(r3)
    1fb0:	203ebb0e 	bge	r4,zero,1aa0 <_gp+0xfffc3198>
    1fb4:	003ef106 	br	1b7c <_gp+0xfffc3274>
    1fb8:	9080040c 	andi	r2,r18,16
    1fbc:	1000921e 	bne	r2,zero,2208 <___vfprintf_internal_r+0x1aac>
    1fc0:	9480100c 	andi	r18,r18,64
    1fc4:	90013926 	beq	r18,zero,24ac <___vfprintf_internal_r+0x1d50>
    1fc8:	d9002d17 	ldw	r4,180(sp)
    1fcc:	d9402f17 	ldw	r5,188(sp)
    1fd0:	20800017 	ldw	r2,0(r4)
    1fd4:	21000104 	addi	r4,r4,4
    1fd8:	d9002d15 	stw	r4,180(sp)
    1fdc:	1140000d 	sth	r5,0(r2)
    1fe0:	003a1606 	br	83c <_gp+0xfffc1f34>
    1fe4:	9080100c 	andi	r2,r18,64
    1fe8:	10008026 	beq	r2,zero,21ec <___vfprintf_internal_r+0x1a90>
    1fec:	d8c02d17 	ldw	r3,180(sp)
    1ff0:	1cc0000f 	ldh	r19,0(r3)
    1ff4:	18c00104 	addi	r3,r3,4
    1ff8:	d8c02d15 	stw	r3,180(sp)
    1ffc:	982dd7fa 	srai	r22,r19,31
    2000:	b005883a 	mov	r2,r22
    2004:	003b1f06 	br	c84 <_gp+0xfffc237c>
    2008:	9080100c 	andi	r2,r18,64
    200c:	d8002785 	stb	zero,158(sp)
    2010:	10008a1e 	bne	r2,zero,223c <___vfprintf_internal_r+0x1ae0>
    2014:	d9402d17 	ldw	r5,180(sp)
    2018:	d8c02917 	ldw	r3,164(sp)
    201c:	002d883a 	mov	r22,zero
    2020:	28800104 	addi	r2,r5,4
    2024:	2cc00017 	ldw	r19,0(r5)
    2028:	183e4b0e 	bge	r3,zero,1958 <_gp+0xfffc3050>
    202c:	9d86b03a 	or	r3,r19,r22
    2030:	d8802d15 	stw	r2,180(sp)
    2034:	183e4c1e 	bne	r3,zero,1968 <_gp+0xfffc3060>
    2038:	0039883a 	mov	fp,zero
    203c:	0005883a 	mov	r2,zero
    2040:	003d4006 	br	1544 <_gp+0xfffc2c3c>
    2044:	014000f4 	movhi	r5,3
    2048:	29529c84 	addi	r5,r5,19058
    204c:	d9402b15 	stw	r5,172(sp)
    2050:	d9402b17 	ldw	r5,172(sp)
    2054:	1c47883a 	add	r3,r3,r17
    2058:	10800044 	addi	r2,r2,1
    205c:	41400015 	stw	r5,0(r8)
    2060:	44400115 	stw	r17,4(r8)
    2064:	d8c02015 	stw	r3,128(sp)
    2068:	d8801f15 	stw	r2,124(sp)
    206c:	010001c4 	movi	r4,7
    2070:	20bec816 	blt	r4,r2,1b94 <_gp+0xfffc328c>
    2074:	42000204 	addi	r8,r8,8
    2078:	003ecd06 	br	1bb0 <_gp+0xfffc32a8>
    207c:	d9002917 	ldw	r4,164(sp)
    2080:	d8002785 	stb	zero,158(sp)
    2084:	203d2d16 	blt	r4,zero,153c <_gp+0xfffc2c34>
    2088:	00bfdfc4 	movi	r2,-129
    208c:	90a4703a 	and	r18,r18,r2
    2090:	003a9106 	br	ad8 <_gp+0xfffc21d0>
    2094:	010000f4 	movhi	r4,3
    2098:	21129c84 	addi	r4,r4,19058
    209c:	d9002b15 	stw	r4,172(sp)
    20a0:	003c0c06 	br	10d4 <_gp+0xfffc27cc>
    20a4:	d9002c17 	ldw	r4,176(sp)
    20a8:	d9801e04 	addi	r6,sp,120
    20ac:	b80b883a 	mov	r5,r23
    20b0:	00072740 	call	7274 <__sprint_r>
    20b4:	103aab1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    20b8:	d8c02017 	ldw	r3,128(sp)
    20bc:	da000404 	addi	r8,sp,16
    20c0:	003d4106 	br	15c8 <_gp+0xfffc2cc0>
    20c4:	d8801f17 	ldw	r2,124(sp)
    20c8:	014000f4 	movhi	r5,3
    20cc:	01000044 	movi	r4,1
    20d0:	18c00044 	addi	r3,r3,1
    20d4:	10800044 	addi	r2,r2,1
    20d8:	29529c04 	addi	r5,r5,19056
    20dc:	41000115 	stw	r4,4(r8)
    20e0:	41400015 	stw	r5,0(r8)
    20e4:	d8c02015 	stw	r3,128(sp)
    20e8:	d8801f15 	stw	r2,124(sp)
    20ec:	010001c4 	movi	r4,7
    20f0:	20805c16 	blt	r4,r2,2264 <___vfprintf_internal_r+0x1b08>
    20f4:	42000204 	addi	r8,r8,8
    20f8:	8800041e 	bne	r17,zero,210c <___vfprintf_internal_r+0x19b0>
    20fc:	d8803317 	ldw	r2,204(sp)
    2100:	1000021e 	bne	r2,zero,210c <___vfprintf_internal_r+0x19b0>
    2104:	9080004c 	andi	r2,r18,1
    2108:	103c0926 	beq	r2,zero,1130 <_gp+0xfffc2828>
    210c:	d9003717 	ldw	r4,220(sp)
    2110:	d8801f17 	ldw	r2,124(sp)
    2114:	d9403417 	ldw	r5,208(sp)
    2118:	20c7883a 	add	r3,r4,r3
    211c:	10800044 	addi	r2,r2,1
    2120:	41000115 	stw	r4,4(r8)
    2124:	41400015 	stw	r5,0(r8)
    2128:	d8c02015 	stw	r3,128(sp)
    212c:	d8801f15 	stw	r2,124(sp)
    2130:	010001c4 	movi	r4,7
    2134:	20812116 	blt	r4,r2,25bc <___vfprintf_internal_r+0x1e60>
    2138:	42000204 	addi	r8,r8,8
    213c:	0463c83a 	sub	r17,zero,r17
    2140:	0440730e 	bge	zero,r17,2310 <___vfprintf_internal_r+0x1bb4>
    2144:	05800404 	movi	r22,16
    2148:	b440860e 	bge	r22,r17,2364 <___vfprintf_internal_r+0x1c08>
    214c:	014000f4 	movhi	r5,3
    2150:	29529c84 	addi	r5,r5,19058
    2154:	d9402b15 	stw	r5,172(sp)
    2158:	070001c4 	movi	fp,7
    215c:	dcc02c17 	ldw	r19,176(sp)
    2160:	00000306 	br	2170 <___vfprintf_internal_r+0x1a14>
    2164:	42000204 	addi	r8,r8,8
    2168:	8c7ffc04 	addi	r17,r17,-16
    216c:	b440800e 	bge	r22,r17,2370 <___vfprintf_internal_r+0x1c14>
    2170:	18c00404 	addi	r3,r3,16
    2174:	10800044 	addi	r2,r2,1
    2178:	45000015 	stw	r20,0(r8)
    217c:	45800115 	stw	r22,4(r8)
    2180:	d8c02015 	stw	r3,128(sp)
    2184:	d8801f15 	stw	r2,124(sp)
    2188:	e0bff60e 	bge	fp,r2,2164 <_gp+0xfffc385c>
    218c:	d9801e04 	addi	r6,sp,120
    2190:	b80b883a 	mov	r5,r23
    2194:	9809883a 	mov	r4,r19
    2198:	00072740 	call	7274 <__sprint_r>
    219c:	103a711e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    21a0:	d8c02017 	ldw	r3,128(sp)
    21a4:	d8801f17 	ldw	r2,124(sp)
    21a8:	da000404 	addi	r8,sp,16
    21ac:	003fee06 	br	2168 <_gp+0xfffc3860>
    21b0:	00bfffc4 	movi	r2,-1
    21b4:	003a6f06 	br	b74 <_gp+0xfffc226c>
    21b8:	008011c4 	movi	r2,71
    21bc:	1440b816 	blt	r2,r17,24a0 <___vfprintf_internal_r+0x1d44>
    21c0:	040000f4 	movhi	r16,3
    21c4:	84128e04 	addi	r16,r16,19000
    21c8:	00c000c4 	movi	r3,3
    21cc:	00bfdfc4 	movi	r2,-129
    21d0:	d8c02a15 	stw	r3,168(sp)
    21d4:	90a4703a 	and	r18,r18,r2
    21d8:	df002783 	ldbu	fp,158(sp)
    21dc:	d8c02e15 	stw	r3,184(sp)
    21e0:	d8002915 	stw	zero,164(sp)
    21e4:	d8003215 	stw	zero,200(sp)
    21e8:	003b2906 	br	e90 <_gp+0xfffc2588>
    21ec:	d9002d17 	ldw	r4,180(sp)
    21f0:	24c00017 	ldw	r19,0(r4)
    21f4:	21000104 	addi	r4,r4,4
    21f8:	d9002d15 	stw	r4,180(sp)
    21fc:	982dd7fa 	srai	r22,r19,31
    2200:	b005883a 	mov	r2,r22
    2204:	003a9f06 	br	c84 <_gp+0xfffc237c>
    2208:	d9402d17 	ldw	r5,180(sp)
    220c:	d8c02f17 	ldw	r3,188(sp)
    2210:	28800017 	ldw	r2,0(r5)
    2214:	29400104 	addi	r5,r5,4
    2218:	d9402d15 	stw	r5,180(sp)
    221c:	10c00015 	stw	r3,0(r2)
    2220:	00398606 	br	83c <_gp+0xfffc1f34>
    2224:	d9402d17 	ldw	r5,180(sp)
    2228:	002d883a 	mov	r22,zero
    222c:	2cc00017 	ldw	r19,0(r5)
    2230:	29400104 	addi	r5,r5,4
    2234:	d9402d15 	stw	r5,180(sp)
    2238:	003c2306 	br	12c8 <_gp+0xfffc29c0>
    223c:	d8c02d17 	ldw	r3,180(sp)
    2240:	d9002917 	ldw	r4,164(sp)
    2244:	002d883a 	mov	r22,zero
    2248:	18800104 	addi	r2,r3,4
    224c:	1cc0000b 	ldhu	r19,0(r3)
    2250:	203dc10e 	bge	r4,zero,1958 <_gp+0xfffc3050>
    2254:	003f7506 	br	202c <_gp+0xfffc3724>
    2258:	040000f4 	movhi	r16,3
    225c:	84128c04 	addi	r16,r16,18992
    2260:	003acc06 	br	d94 <_gp+0xfffc248c>
    2264:	d9002c17 	ldw	r4,176(sp)
    2268:	d9801e04 	addi	r6,sp,120
    226c:	b80b883a 	mov	r5,r23
    2270:	00072740 	call	7274 <__sprint_r>
    2274:	103a3b1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    2278:	dc402617 	ldw	r17,152(sp)
    227c:	d8c02017 	ldw	r3,128(sp)
    2280:	da000404 	addi	r8,sp,16
    2284:	003f9c06 	br	20f8 <_gp+0xfffc37f0>
    2288:	ac400043 	ldbu	r17,1(r21)
    228c:	94800814 	ori	r18,r18,32
    2290:	ad400044 	addi	r21,r21,1
    2294:	8c403fcc 	andi	r17,r17,255
    2298:	8c40201c 	xori	r17,r17,128
    229c:	8c7fe004 	addi	r17,r17,-128
    22a0:	00398f06 	br	8e0 <_gp+0xfffc1fd8>
    22a4:	d8c02d15 	stw	r3,180(sp)
    22a8:	0039883a 	mov	fp,zero
    22ac:	003e3506 	br	1b84 <_gp+0xfffc327c>
    22b0:	d9002c17 	ldw	r4,176(sp)
    22b4:	d9801e04 	addi	r6,sp,120
    22b8:	b80b883a 	mov	r5,r23
    22bc:	00072740 	call	7274 <__sprint_r>
    22c0:	103a281e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    22c4:	d8c02017 	ldw	r3,128(sp)
    22c8:	da000404 	addi	r8,sp,16
    22cc:	003cd006 	br	1610 <_gp+0xfffc2d08>
    22d0:	8009883a 	mov	r4,r16
    22d4:	da003d15 	stw	r8,244(sp)
    22d8:	00070e00 	call	70e0 <strlen>
    22dc:	d8802e15 	stw	r2,184(sp)
    22e0:	da003d17 	ldw	r8,244(sp)
    22e4:	103c340e 	bge	r2,zero,13b8 <_gp+0xfffc2ab0>
    22e8:	0005883a 	mov	r2,zero
    22ec:	003c3206 	br	13b8 <_gp+0xfffc2ab0>
    22f0:	d9002c17 	ldw	r4,176(sp)
    22f4:	d9801e04 	addi	r6,sp,120
    22f8:	b80b883a 	mov	r5,r23
    22fc:	00072740 	call	7274 <__sprint_r>
    2300:	103a181e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    2304:	d8c02017 	ldw	r3,128(sp)
    2308:	d8801f17 	ldw	r2,124(sp)
    230c:	da000404 	addi	r8,sp,16
    2310:	d9403317 	ldw	r5,204(sp)
    2314:	10800044 	addi	r2,r2,1
    2318:	44000015 	stw	r16,0(r8)
    231c:	28c7883a 	add	r3,r5,r3
    2320:	003b7d06 	br	1118 <_gp+0xfffc2810>
    2324:	010000f4 	movhi	r4,3
    2328:	2112a084 	addi	r4,r4,19074
    232c:	d9003515 	stw	r4,212(sp)
    2330:	003b1406 	br	f84 <_gp+0xfffc267c>
    2334:	013fffc4 	movi	r4,-1
    2338:	003a3506 	br	c10 <_gp+0xfffc2308>
    233c:	0023883a 	mov	r17,zero
    2340:	003d9d06 	br	19b8 <_gp+0xfffc30b0>
    2344:	d9002c17 	ldw	r4,176(sp)
    2348:	d9801e04 	addi	r6,sp,120
    234c:	b80b883a 	mov	r5,r23
    2350:	00072740 	call	7274 <__sprint_r>
    2354:	103a031e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    2358:	d8c02017 	ldw	r3,128(sp)
    235c:	da000404 	addi	r8,sp,16
    2360:	003d9406 	br	19b4 <_gp+0xfffc30ac>
    2364:	010000f4 	movhi	r4,3
    2368:	21129c84 	addi	r4,r4,19058
    236c:	d9002b15 	stw	r4,172(sp)
    2370:	d9002b17 	ldw	r4,172(sp)
    2374:	1c47883a 	add	r3,r3,r17
    2378:	10800044 	addi	r2,r2,1
    237c:	41000015 	stw	r4,0(r8)
    2380:	44400115 	stw	r17,4(r8)
    2384:	d8c02015 	stw	r3,128(sp)
    2388:	d8801f15 	stw	r2,124(sp)
    238c:	010001c4 	movi	r4,7
    2390:	20bfd716 	blt	r4,r2,22f0 <_gp+0xfffc39e8>
    2394:	42000204 	addi	r8,r8,8
    2398:	003fdd06 	br	2310 <_gp+0xfffc3a08>
    239c:	d9002c17 	ldw	r4,176(sp)
    23a0:	d9801e04 	addi	r6,sp,120
    23a4:	b80b883a 	mov	r5,r23
    23a8:	00072740 	call	7274 <__sprint_r>
    23ac:	1039ed1e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    23b0:	d8802617 	ldw	r2,152(sp)
    23b4:	d8c02017 	ldw	r3,128(sp)
    23b8:	da000404 	addi	r8,sp,16
    23bc:	003e1006 	br	1c00 <_gp+0xfffc32f8>
    23c0:	00800044 	movi	r2,1
    23c4:	10803fcc 	andi	r2,r2,255
    23c8:	00c00044 	movi	r3,1
    23cc:	10fa3526 	beq	r2,r3,ca4 <_gp+0xfffc239c>
    23d0:	00c00084 	movi	r3,2
    23d4:	10fbcb26 	beq	r2,r3,1304 <_gp+0xfffc29fc>
    23d8:	003a8f06 	br	e18 <_gp+0xfffc2510>
    23dc:	010000f4 	movhi	r4,3
    23e0:	2112a084 	addi	r4,r4,19074
    23e4:	d9003515 	stw	r4,212(sp)
    23e8:	003b7606 	br	11c4 <_gp+0xfffc28bc>
    23ec:	d8802917 	ldw	r2,164(sp)
    23f0:	00c00184 	movi	r3,6
    23f4:	1880012e 	bgeu	r3,r2,23fc <___vfprintf_internal_r+0x1ca0>
    23f8:	1805883a 	mov	r2,r3
    23fc:	d8802e15 	stw	r2,184(sp)
    2400:	1000ef16 	blt	r2,zero,27c0 <___vfprintf_internal_r+0x2064>
    2404:	040000f4 	movhi	r16,3
    2408:	d8802a15 	stw	r2,168(sp)
    240c:	dcc02d15 	stw	r19,180(sp)
    2410:	d8002915 	stw	zero,164(sp)
    2414:	d8003215 	stw	zero,200(sp)
    2418:	84129a04 	addi	r16,r16,19048
    241c:	0039883a 	mov	fp,zero
    2420:	003aa206 	br	eac <_gp+0xfffc25a4>
    2424:	0021883a 	mov	r16,zero
    2428:	003e0706 	br	1c48 <_gp+0xfffc3340>
    242c:	d9002c17 	ldw	r4,176(sp)
    2430:	d9801e04 	addi	r6,sp,120
    2434:	b80b883a 	mov	r5,r23
    2438:	00072740 	call	7274 <__sprint_r>
    243c:	1039c91e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    2440:	d8802617 	ldw	r2,152(sp)
    2444:	d9403317 	ldw	r5,204(sp)
    2448:	d8c02017 	ldw	r3,128(sp)
    244c:	da000404 	addi	r8,sp,16
    2450:	2885c83a 	sub	r2,r5,r2
    2454:	003dfb06 	br	1c44 <_gp+0xfffc333c>
    2458:	9080004c 	andi	r2,r18,1
    245c:	103e8f1e 	bne	r2,zero,1e9c <_gp+0xfffc3594>
    2460:	d8802117 	ldw	r2,132(sp)
    2464:	003e9e06 	br	1ee0 <_gp+0xfffc35d8>
    2468:	1025883a 	mov	r18,r2
    246c:	0039883a 	mov	fp,zero
    2470:	00800084 	movi	r2,2
    2474:	003fd306 	br	23c4 <_gp+0xfffc3abc>
    2478:	07000b44 	movi	fp,45
    247c:	df002785 	stb	fp,158(sp)
    2480:	003a4006 	br	d84 <_gp+0xfffc247c>
    2484:	00c00b44 	movi	r3,45
    2488:	d8c02785 	stb	r3,158(sp)
    248c:	d8802a15 	stw	r2,168(sp)
    2490:	dc802b17 	ldw	r18,172(sp)
    2494:	d8002915 	stw	zero,164(sp)
    2498:	07000b44 	movi	fp,45
    249c:	003a8006 	br	ea0 <_gp+0xfffc2598>
    24a0:	040000f4 	movhi	r16,3
    24a4:	84128f04 	addi	r16,r16,19004
    24a8:	003f4706 	br	21c8 <_gp+0xfffc38c0>
    24ac:	d8c02d17 	ldw	r3,180(sp)
    24b0:	d9002f17 	ldw	r4,188(sp)
    24b4:	18800017 	ldw	r2,0(r3)
    24b8:	18c00104 	addi	r3,r3,4
    24bc:	d8c02d15 	stw	r3,180(sp)
    24c0:	11000015 	stw	r4,0(r2)
    24c4:	0038dd06 	br	83c <_gp+0xfffc1f34>
    24c8:	dd802617 	ldw	r22,152(sp)
    24cc:	00bfff44 	movi	r2,-3
    24d0:	b0801c16 	blt	r22,r2,2544 <___vfprintf_internal_r+0x1de8>
    24d4:	d9402917 	ldw	r5,164(sp)
    24d8:	2d801a16 	blt	r5,r22,2544 <___vfprintf_internal_r+0x1de8>
    24dc:	dd803215 	stw	r22,200(sp)
    24e0:	003e8906 	br	1f08 <_gp+0xfffc3600>
    24e4:	010000f4 	movhi	r4,3
    24e8:	21129c84 	addi	r4,r4,19058
    24ec:	d9002b15 	stw	r4,172(sp)
    24f0:	003c9106 	br	1738 <_gp+0xfffc2e30>
    24f4:	e005883a 	mov	r2,fp
    24f8:	003e7906 	br	1ee0 <_gp+0xfffc35d8>
    24fc:	d9402917 	ldw	r5,164(sp)
    2500:	df002783 	ldbu	fp,158(sp)
    2504:	dcc02d15 	stw	r19,180(sp)
    2508:	d9402a15 	stw	r5,168(sp)
    250c:	d9402e15 	stw	r5,184(sp)
    2510:	d8002915 	stw	zero,164(sp)
    2514:	d8003215 	stw	zero,200(sp)
    2518:	003a5d06 	br	e90 <_gp+0xfffc2588>
    251c:	9080004c 	andi	r2,r18,1
    2520:	0039883a 	mov	fp,zero
    2524:	10000426 	beq	r2,zero,2538 <___vfprintf_internal_r+0x1ddc>
    2528:	00800c04 	movi	r2,48
    252c:	dc001dc4 	addi	r16,sp,119
    2530:	d8801dc5 	stb	r2,119(sp)
    2534:	003b8006 	br	1338 <_gp+0xfffc2a30>
    2538:	d8002e15 	stw	zero,184(sp)
    253c:	dc001e04 	addi	r16,sp,120
    2540:	003a4d06 	br	e78 <_gp+0xfffc2570>
    2544:	8c7fff84 	addi	r17,r17,-2
    2548:	b5bfffc4 	addi	r22,r22,-1
    254c:	dd802615 	stw	r22,152(sp)
    2550:	dc4022c5 	stb	r17,139(sp)
    2554:	b000bf16 	blt	r22,zero,2854 <___vfprintf_internal_r+0x20f8>
    2558:	00800ac4 	movi	r2,43
    255c:	d8802305 	stb	r2,140(sp)
    2560:	00800244 	movi	r2,9
    2564:	15807016 	blt	r2,r22,2728 <___vfprintf_internal_r+0x1fcc>
    2568:	00800c04 	movi	r2,48
    256c:	b5800c04 	addi	r22,r22,48
    2570:	d8802345 	stb	r2,141(sp)
    2574:	dd802385 	stb	r22,142(sp)
    2578:	d88023c4 	addi	r2,sp,143
    257c:	df0022c4 	addi	fp,sp,139
    2580:	d8c03317 	ldw	r3,204(sp)
    2584:	1739c83a 	sub	fp,r2,fp
    2588:	d9003317 	ldw	r4,204(sp)
    258c:	e0c7883a 	add	r3,fp,r3
    2590:	df003a15 	stw	fp,232(sp)
    2594:	d8c02e15 	stw	r3,184(sp)
    2598:	00800044 	movi	r2,1
    259c:	1100b30e 	bge	r2,r4,286c <___vfprintf_internal_r+0x2110>
    25a0:	d8c02e17 	ldw	r3,184(sp)
    25a4:	18c00044 	addi	r3,r3,1
    25a8:	d8c02e15 	stw	r3,184(sp)
    25ac:	1805883a 	mov	r2,r3
    25b0:	1800ac16 	blt	r3,zero,2864 <___vfprintf_internal_r+0x2108>
    25b4:	d8003215 	stw	zero,200(sp)
    25b8:	003e5d06 	br	1f30 <_gp+0xfffc3628>
    25bc:	d9002c17 	ldw	r4,176(sp)
    25c0:	d9801e04 	addi	r6,sp,120
    25c4:	b80b883a 	mov	r5,r23
    25c8:	00072740 	call	7274 <__sprint_r>
    25cc:	1039651e 	bne	r2,zero,b64 <_gp+0xfffc225c>
    25d0:	dc402617 	ldw	r17,152(sp)
    25d4:	d8c02017 	ldw	r3,128(sp)
    25d8:	d8801f17 	ldw	r2,124(sp)
    25dc:	da000404 	addi	r8,sp,16
    25e0:	003ed606 	br	213c <_gp+0xfffc3834>
    25e4:	582b883a 	mov	r21,r11
    25e8:	d8002915 	stw	zero,164(sp)
    25ec:	0038bd06 	br	8e4 <_gp+0xfffc1fdc>
    25f0:	d8802917 	ldw	r2,164(sp)
    25f4:	103e071e 	bne	r2,zero,1e14 <_gp+0xfffc350c>
    25f8:	dc002915 	stw	r16,164(sp)
    25fc:	003e0506 	br	1e14 <_gp+0xfffc350c>
    2600:	d9002917 	ldw	r4,164(sp)
    2604:	20c00044 	addi	r3,r4,1
    2608:	003e0f06 	br	1e48 <_gp+0xfffc3540>
    260c:	01400184 	movi	r5,6
    2610:	d9402915 	stw	r5,164(sp)
    2614:	003dff06 	br	1e14 <_gp+0xfffc350c>
    2618:	d8802104 	addi	r2,sp,132
    261c:	d8800315 	stw	r2,12(sp)
    2620:	d8802504 	addi	r2,sp,148
    2624:	d8800215 	stw	r2,8(sp)
    2628:	d8802604 	addi	r2,sp,152
    262c:	d8800115 	stw	r2,4(sp)
    2630:	d8802917 	ldw	r2,164(sp)
    2634:	d9403617 	ldw	r5,216(sp)
    2638:	d9002c17 	ldw	r4,176(sp)
    263c:	d8800015 	stw	r2,0(sp)
    2640:	01c000c4 	movi	r7,3
    2644:	980d883a 	mov	r6,r19
    2648:	da003d15 	stw	r8,244(sp)
    264c:	0002d800 	call	2d80 <_dtoa_r>
    2650:	d8c02917 	ldw	r3,164(sp)
    2654:	da003d17 	ldw	r8,244(sp)
    2658:	1021883a 	mov	r16,r2
    265c:	10f9883a 	add	fp,r2,r3
    2660:	81000007 	ldb	r4,0(r16)
    2664:	00800c04 	movi	r2,48
    2668:	20805e26 	beq	r4,r2,27e4 <___vfprintf_internal_r+0x2088>
    266c:	d8c02617 	ldw	r3,152(sp)
    2670:	e0f9883a 	add	fp,fp,r3
    2674:	003e0a06 	br	1ea0 <_gp+0xfffc3598>
    2678:	00c00b44 	movi	r3,45
    267c:	24e0003c 	xorhi	r19,r4,32768
    2680:	d8c02a05 	stb	r3,168(sp)
    2684:	003de906 	br	1e2c <_gp+0xfffc3524>
    2688:	d8c03217 	ldw	r3,200(sp)
    268c:	00c07a0e 	bge	zero,r3,2878 <___vfprintf_internal_r+0x211c>
    2690:	00800044 	movi	r2,1
    2694:	d9003317 	ldw	r4,204(sp)
    2698:	1105883a 	add	r2,r2,r4
    269c:	d8802e15 	stw	r2,184(sp)
    26a0:	10004e16 	blt	r2,zero,27dc <___vfprintf_internal_r+0x2080>
    26a4:	044019c4 	movi	r17,103
    26a8:	003e2106 	br	1f30 <_gp+0xfffc3628>
    26ac:	d9002917 	ldw	r4,164(sp)
    26b0:	d8802104 	addi	r2,sp,132
    26b4:	d8800315 	stw	r2,12(sp)
    26b8:	d9000015 	stw	r4,0(sp)
    26bc:	d8802504 	addi	r2,sp,148
    26c0:	d9403617 	ldw	r5,216(sp)
    26c4:	d9002c17 	ldw	r4,176(sp)
    26c8:	d8800215 	stw	r2,8(sp)
    26cc:	d8802604 	addi	r2,sp,152
    26d0:	d8800115 	stw	r2,4(sp)
    26d4:	01c000c4 	movi	r7,3
    26d8:	980d883a 	mov	r6,r19
    26dc:	da003d15 	stw	r8,244(sp)
    26e0:	0002d800 	call	2d80 <_dtoa_r>
    26e4:	d8c02917 	ldw	r3,164(sp)
    26e8:	da003d17 	ldw	r8,244(sp)
    26ec:	1021883a 	mov	r16,r2
    26f0:	00801184 	movi	r2,70
    26f4:	80f9883a 	add	fp,r16,r3
    26f8:	88bfd926 	beq	r17,r2,2660 <_gp+0xfffc3d58>
    26fc:	003de806 	br	1ea0 <_gp+0xfffc3598>
    2700:	d9002917 	ldw	r4,164(sp)
    2704:	00c04d0e 	bge	zero,r3,283c <___vfprintf_internal_r+0x20e0>
    2708:	2000441e 	bne	r4,zero,281c <___vfprintf_internal_r+0x20c0>
    270c:	9480004c 	andi	r18,r18,1
    2710:	9000421e 	bne	r18,zero,281c <___vfprintf_internal_r+0x20c0>
    2714:	1805883a 	mov	r2,r3
    2718:	18007016 	blt	r3,zero,28dc <___vfprintf_internal_r+0x2180>
    271c:	d8c03217 	ldw	r3,200(sp)
    2720:	d8c02e15 	stw	r3,184(sp)
    2724:	003e0206 	br	1f30 <_gp+0xfffc3628>
    2728:	df0022c4 	addi	fp,sp,139
    272c:	dc002915 	stw	r16,164(sp)
    2730:	4027883a 	mov	r19,r8
    2734:	e021883a 	mov	r16,fp
    2738:	b009883a 	mov	r4,r22
    273c:	01400284 	movi	r5,10
    2740:	00005c00 	call	5c0 <__modsi3>
    2744:	10800c04 	addi	r2,r2,48
    2748:	843fffc4 	addi	r16,r16,-1
    274c:	b009883a 	mov	r4,r22
    2750:	01400284 	movi	r5,10
    2754:	80800005 	stb	r2,0(r16)
    2758:	000053c0 	call	53c <__divsi3>
    275c:	102d883a 	mov	r22,r2
    2760:	00800244 	movi	r2,9
    2764:	15bff416 	blt	r2,r22,2738 <_gp+0xfffc3e30>
    2768:	9811883a 	mov	r8,r19
    276c:	b0800c04 	addi	r2,r22,48
    2770:	8027883a 	mov	r19,r16
    2774:	997fffc4 	addi	r5,r19,-1
    2778:	98bfffc5 	stb	r2,-1(r19)
    277c:	dc002917 	ldw	r16,164(sp)
    2780:	2f006a2e 	bgeu	r5,fp,292c <___vfprintf_internal_r+0x21d0>
    2784:	d9c02384 	addi	r7,sp,142
    2788:	3ccfc83a 	sub	r7,r7,r19
    278c:	d9002344 	addi	r4,sp,141
    2790:	e1cf883a 	add	r7,fp,r7
    2794:	00000106 	br	279c <___vfprintf_internal_r+0x2040>
    2798:	28800003 	ldbu	r2,0(r5)
    279c:	20800005 	stb	r2,0(r4)
    27a0:	21000044 	addi	r4,r4,1
    27a4:	29400044 	addi	r5,r5,1
    27a8:	393ffb1e 	bne	r7,r4,2798 <_gp+0xfffc3e90>
    27ac:	d8802304 	addi	r2,sp,140
    27b0:	14c5c83a 	sub	r2,r2,r19
    27b4:	d8c02344 	addi	r3,sp,141
    27b8:	1885883a 	add	r2,r3,r2
    27bc:	003f7006 	br	2580 <_gp+0xfffc3c78>
    27c0:	0005883a 	mov	r2,zero
    27c4:	003f0f06 	br	2404 <_gp+0xfffc3afc>
    27c8:	d8c03217 	ldw	r3,200(sp)
    27cc:	18c00044 	addi	r3,r3,1
    27d0:	d8c02e15 	stw	r3,184(sp)
    27d4:	1805883a 	mov	r2,r3
    27d8:	183fb20e 	bge	r3,zero,26a4 <_gp+0xfffc3d9c>
    27dc:	0005883a 	mov	r2,zero
    27e0:	003fb006 	br	26a4 <_gp+0xfffc3d9c>
    27e4:	d9003617 	ldw	r4,216(sp)
    27e8:	000d883a 	mov	r6,zero
    27ec:	000f883a 	mov	r7,zero
    27f0:	980b883a 	mov	r5,r19
    27f4:	d8c03c15 	stw	r3,240(sp)
    27f8:	da003d15 	stw	r8,244(sp)
    27fc:	000b8b40 	call	b8b4 <__eqdf2>
    2800:	d8c03c17 	ldw	r3,240(sp)
    2804:	da003d17 	ldw	r8,244(sp)
    2808:	103f9826 	beq	r2,zero,266c <_gp+0xfffc3d64>
    280c:	00800044 	movi	r2,1
    2810:	10c7c83a 	sub	r3,r2,r3
    2814:	d8c02615 	stw	r3,152(sp)
    2818:	003f9506 	br	2670 <_gp+0xfffc3d68>
    281c:	d9002917 	ldw	r4,164(sp)
    2820:	d8c03217 	ldw	r3,200(sp)
    2824:	20800044 	addi	r2,r4,1
    2828:	1885883a 	add	r2,r3,r2
    282c:	d8802e15 	stw	r2,184(sp)
    2830:	103dbf0e 	bge	r2,zero,1f30 <_gp+0xfffc3628>
    2834:	0005883a 	mov	r2,zero
    2838:	003dbd06 	br	1f30 <_gp+0xfffc3628>
    283c:	2000211e 	bne	r4,zero,28c4 <___vfprintf_internal_r+0x2168>
    2840:	9480004c 	andi	r18,r18,1
    2844:	90001f1e 	bne	r18,zero,28c4 <___vfprintf_internal_r+0x2168>
    2848:	00800044 	movi	r2,1
    284c:	d8802e15 	stw	r2,184(sp)
    2850:	003db706 	br	1f30 <_gp+0xfffc3628>
    2854:	00800b44 	movi	r2,45
    2858:	05adc83a 	sub	r22,zero,r22
    285c:	d8802305 	stb	r2,140(sp)
    2860:	003f3f06 	br	2560 <_gp+0xfffc3c58>
    2864:	0005883a 	mov	r2,zero
    2868:	003f5206 	br	25b4 <_gp+0xfffc3cac>
    286c:	90a4703a 	and	r18,r18,r2
    2870:	903f4e26 	beq	r18,zero,25ac <_gp+0xfffc3ca4>
    2874:	003f4a06 	br	25a0 <_gp+0xfffc3c98>
    2878:	00800084 	movi	r2,2
    287c:	10c5c83a 	sub	r2,r2,r3
    2880:	003f8406 	br	2694 <_gp+0xfffc3d8c>
    2884:	d8802d17 	ldw	r2,180(sp)
    2888:	d9002d17 	ldw	r4,180(sp)
    288c:	ac400043 	ldbu	r17,1(r21)
    2890:	10800017 	ldw	r2,0(r2)
    2894:	582b883a 	mov	r21,r11
    2898:	d8802915 	stw	r2,164(sp)
    289c:	20800104 	addi	r2,r4,4
    28a0:	d9002917 	ldw	r4,164(sp)
    28a4:	d8802d15 	stw	r2,180(sp)
    28a8:	203e7a0e 	bge	r4,zero,2294 <_gp+0xfffc398c>
    28ac:	8c403fcc 	andi	r17,r17,255
    28b0:	00bfffc4 	movi	r2,-1
    28b4:	8c40201c 	xori	r17,r17,128
    28b8:	d8802915 	stw	r2,164(sp)
    28bc:	8c7fe004 	addi	r17,r17,-128
    28c0:	00380706 	br	8e0 <_gp+0xfffc1fd8>
    28c4:	d8c02917 	ldw	r3,164(sp)
    28c8:	18c00084 	addi	r3,r3,2
    28cc:	d8c02e15 	stw	r3,184(sp)
    28d0:	1805883a 	mov	r2,r3
    28d4:	183d960e 	bge	r3,zero,1f30 <_gp+0xfffc3628>
    28d8:	003fd606 	br	2834 <_gp+0xfffc3f2c>
    28dc:	0005883a 	mov	r2,zero
    28e0:	003f8e06 	br	271c <_gp+0xfffc3e14>
    28e4:	9080004c 	andi	r2,r18,1
    28e8:	103f811e 	bne	r2,zero,26f0 <_gp+0xfffc3de8>
    28ec:	d8802117 	ldw	r2,132(sp)
    28f0:	1405c83a 	sub	r2,r2,r16
    28f4:	d8803315 	stw	r2,204(sp)
    28f8:	b47ef326 	beq	r22,r17,24c8 <_gp+0xfffc3bc0>
    28fc:	dd802617 	ldw	r22,152(sp)
    2900:	003f1106 	br	2548 <_gp+0xfffc3c40>
    2904:	d9c02785 	stb	r7,158(sp)
    2908:	00390406 	br	d1c <_gp+0xfffc2414>
    290c:	d9c02785 	stb	r7,158(sp)
    2910:	0038d306 	br	c60 <_gp+0xfffc2358>
    2914:	d9c02785 	stb	r7,158(sp)
    2918:	003a6106 	br	12a0 <_gp+0xfffc2998>
    291c:	d9c02785 	stb	r7,158(sp)
    2920:	003af806 	br	1504 <_gp+0xfffc2bfc>
    2924:	0005883a 	mov	r2,zero
    2928:	003d7e06 	br	1f24 <_gp+0xfffc361c>
    292c:	d8802344 	addi	r2,sp,141
    2930:	003f1306 	br	2580 <_gp+0xfffc3c78>
    2934:	d9c02785 	stb	r7,158(sp)
    2938:	00392306 	br	dc8 <_gp+0xfffc24c0>
    293c:	d9c02785 	stb	r7,158(sp)
    2940:	003aa906 	br	13e8 <_gp+0xfffc2ae0>
    2944:	d9c02785 	stb	r7,158(sp)
    2948:	003a3d06 	br	1240 <_gp+0xfffc2938>
    294c:	d9c02785 	stb	r7,158(sp)
    2950:	003aca06 	br	147c <_gp+0xfffc2b74>

00002954 <__vfprintf_internal>:
    2954:	008000f4 	movhi	r2,3
    2958:	109a4404 	addi	r2,r2,26896
    295c:	300f883a 	mov	r7,r6
    2960:	280d883a 	mov	r6,r5
    2964:	200b883a 	mov	r5,r4
    2968:	11000017 	ldw	r4,0(r2)
    296c:	000075c1 	jmpi	75c <___vfprintf_internal_r>

00002970 <__sbprintf>:
    2970:	2880030b 	ldhu	r2,12(r5)
    2974:	2ac01917 	ldw	r11,100(r5)
    2978:	2a80038b 	ldhu	r10,14(r5)
    297c:	2a400717 	ldw	r9,28(r5)
    2980:	2a000917 	ldw	r8,36(r5)
    2984:	defee204 	addi	sp,sp,-1144
    2988:	00c10004 	movi	r3,1024
    298c:	dc011a15 	stw	r16,1128(sp)
    2990:	10bfff4c 	andi	r2,r2,65533
    2994:	2821883a 	mov	r16,r5
    2998:	d8cb883a 	add	r5,sp,r3
    299c:	dc811c15 	stw	r18,1136(sp)
    29a0:	dc411b15 	stw	r17,1132(sp)
    29a4:	dfc11d15 	stw	ra,1140(sp)
    29a8:	2025883a 	mov	r18,r4
    29ac:	d881030d 	sth	r2,1036(sp)
    29b0:	dac11915 	stw	r11,1124(sp)
    29b4:	da81038d 	sth	r10,1038(sp)
    29b8:	da410715 	stw	r9,1052(sp)
    29bc:	da010915 	stw	r8,1060(sp)
    29c0:	dec10015 	stw	sp,1024(sp)
    29c4:	dec10415 	stw	sp,1040(sp)
    29c8:	d8c10215 	stw	r3,1032(sp)
    29cc:	d8c10515 	stw	r3,1044(sp)
    29d0:	d8010615 	stw	zero,1048(sp)
    29d4:	000075c0 	call	75c <___vfprintf_internal_r>
    29d8:	1023883a 	mov	r17,r2
    29dc:	10000416 	blt	r2,zero,29f0 <__sbprintf+0x80>
    29e0:	d9410004 	addi	r5,sp,1024
    29e4:	9009883a 	mov	r4,r18
    29e8:	00046240 	call	4624 <_fflush_r>
    29ec:	10000d1e 	bne	r2,zero,2a24 <__sbprintf+0xb4>
    29f0:	d881030b 	ldhu	r2,1036(sp)
    29f4:	1080100c 	andi	r2,r2,64
    29f8:	10000326 	beq	r2,zero,2a08 <__sbprintf+0x98>
    29fc:	8080030b 	ldhu	r2,12(r16)
    2a00:	10801014 	ori	r2,r2,64
    2a04:	8080030d 	sth	r2,12(r16)
    2a08:	8805883a 	mov	r2,r17
    2a0c:	dfc11d17 	ldw	ra,1140(sp)
    2a10:	dc811c17 	ldw	r18,1136(sp)
    2a14:	dc411b17 	ldw	r17,1132(sp)
    2a18:	dc011a17 	ldw	r16,1128(sp)
    2a1c:	dec11e04 	addi	sp,sp,1144
    2a20:	f800283a 	ret
    2a24:	047fffc4 	movi	r17,-1
    2a28:	003ff106 	br	29f0 <_gp+0xfffc40e8>

00002a2c <__swsetup_r>:
    2a2c:	008000f4 	movhi	r2,3
    2a30:	defffd04 	addi	sp,sp,-12
    2a34:	109a4404 	addi	r2,r2,26896
    2a38:	dc400115 	stw	r17,4(sp)
    2a3c:	2023883a 	mov	r17,r4
    2a40:	11000017 	ldw	r4,0(r2)
    2a44:	dc000015 	stw	r16,0(sp)
    2a48:	dfc00215 	stw	ra,8(sp)
    2a4c:	2821883a 	mov	r16,r5
    2a50:	20000226 	beq	r4,zero,2a5c <__swsetup_r+0x30>
    2a54:	20800e17 	ldw	r2,56(r4)
    2a58:	10003126 	beq	r2,zero,2b20 <__swsetup_r+0xf4>
    2a5c:	8080030b 	ldhu	r2,12(r16)
    2a60:	10c0020c 	andi	r3,r2,8
    2a64:	1009883a 	mov	r4,r2
    2a68:	18000f26 	beq	r3,zero,2aa8 <__swsetup_r+0x7c>
    2a6c:	80c00417 	ldw	r3,16(r16)
    2a70:	18001526 	beq	r3,zero,2ac8 <__swsetup_r+0x9c>
    2a74:	1100004c 	andi	r4,r2,1
    2a78:	20001c1e 	bne	r4,zero,2aec <__swsetup_r+0xc0>
    2a7c:	1080008c 	andi	r2,r2,2
    2a80:	1000291e 	bne	r2,zero,2b28 <__swsetup_r+0xfc>
    2a84:	80800517 	ldw	r2,20(r16)
    2a88:	80800215 	stw	r2,8(r16)
    2a8c:	18001c26 	beq	r3,zero,2b00 <__swsetup_r+0xd4>
    2a90:	0005883a 	mov	r2,zero
    2a94:	dfc00217 	ldw	ra,8(sp)
    2a98:	dc400117 	ldw	r17,4(sp)
    2a9c:	dc000017 	ldw	r16,0(sp)
    2aa0:	dec00304 	addi	sp,sp,12
    2aa4:	f800283a 	ret
    2aa8:	2080040c 	andi	r2,r4,16
    2aac:	10002e26 	beq	r2,zero,2b68 <__swsetup_r+0x13c>
    2ab0:	2080010c 	andi	r2,r4,4
    2ab4:	10001e1e 	bne	r2,zero,2b30 <__swsetup_r+0x104>
    2ab8:	80c00417 	ldw	r3,16(r16)
    2abc:	20800214 	ori	r2,r4,8
    2ac0:	8080030d 	sth	r2,12(r16)
    2ac4:	183feb1e 	bne	r3,zero,2a74 <_gp+0xfffc416c>
    2ac8:	1100a00c 	andi	r4,r2,640
    2acc:	01408004 	movi	r5,512
    2ad0:	217fe826 	beq	r4,r5,2a74 <_gp+0xfffc416c>
    2ad4:	800b883a 	mov	r5,r16
    2ad8:	8809883a 	mov	r4,r17
    2adc:	00050e80 	call	50e8 <__smakebuf_r>
    2ae0:	8080030b 	ldhu	r2,12(r16)
    2ae4:	80c00417 	ldw	r3,16(r16)
    2ae8:	003fe206 	br	2a74 <_gp+0xfffc416c>
    2aec:	80800517 	ldw	r2,20(r16)
    2af0:	80000215 	stw	zero,8(r16)
    2af4:	0085c83a 	sub	r2,zero,r2
    2af8:	80800615 	stw	r2,24(r16)
    2afc:	183fe41e 	bne	r3,zero,2a90 <_gp+0xfffc4188>
    2b00:	80c0030b 	ldhu	r3,12(r16)
    2b04:	0005883a 	mov	r2,zero
    2b08:	1900200c 	andi	r4,r3,128
    2b0c:	203fe126 	beq	r4,zero,2a94 <_gp+0xfffc418c>
    2b10:	18c01014 	ori	r3,r3,64
    2b14:	80c0030d 	sth	r3,12(r16)
    2b18:	00bfffc4 	movi	r2,-1
    2b1c:	003fdd06 	br	2a94 <_gp+0xfffc418c>
    2b20:	0004a000 	call	4a00 <__sinit>
    2b24:	003fcd06 	br	2a5c <_gp+0xfffc4154>
    2b28:	0005883a 	mov	r2,zero
    2b2c:	003fd606 	br	2a88 <_gp+0xfffc4180>
    2b30:	81400c17 	ldw	r5,48(r16)
    2b34:	28000626 	beq	r5,zero,2b50 <__swsetup_r+0x124>
    2b38:	80801004 	addi	r2,r16,64
    2b3c:	28800326 	beq	r5,r2,2b4c <__swsetup_r+0x120>
    2b40:	8809883a 	mov	r4,r17
    2b44:	0004b740 	call	4b74 <_free_r>
    2b48:	8100030b 	ldhu	r4,12(r16)
    2b4c:	80000c15 	stw	zero,48(r16)
    2b50:	80c00417 	ldw	r3,16(r16)
    2b54:	00bff6c4 	movi	r2,-37
    2b58:	1108703a 	and	r4,r2,r4
    2b5c:	80000115 	stw	zero,4(r16)
    2b60:	80c00015 	stw	r3,0(r16)
    2b64:	003fd506 	br	2abc <_gp+0xfffc41b4>
    2b68:	00800244 	movi	r2,9
    2b6c:	88800015 	stw	r2,0(r17)
    2b70:	20801014 	ori	r2,r4,64
    2b74:	8080030d 	sth	r2,12(r16)
    2b78:	00bfffc4 	movi	r2,-1
    2b7c:	003fc506 	br	2a94 <_gp+0xfffc418c>

00002b80 <quorem>:
    2b80:	defff704 	addi	sp,sp,-36
    2b84:	dc800215 	stw	r18,8(sp)
    2b88:	20800417 	ldw	r2,16(r4)
    2b8c:	2c800417 	ldw	r18,16(r5)
    2b90:	dfc00815 	stw	ra,32(sp)
    2b94:	ddc00715 	stw	r23,28(sp)
    2b98:	dd800615 	stw	r22,24(sp)
    2b9c:	dd400515 	stw	r21,20(sp)
    2ba0:	dd000415 	stw	r20,16(sp)
    2ba4:	dcc00315 	stw	r19,12(sp)
    2ba8:	dc400115 	stw	r17,4(sp)
    2bac:	dc000015 	stw	r16,0(sp)
    2bb0:	14807116 	blt	r2,r18,2d78 <quorem+0x1f8>
    2bb4:	94bfffc4 	addi	r18,r18,-1
    2bb8:	94ad883a 	add	r22,r18,r18
    2bbc:	b5ad883a 	add	r22,r22,r22
    2bc0:	2c400504 	addi	r17,r5,20
    2bc4:	8da9883a 	add	r20,r17,r22
    2bc8:	25400504 	addi	r21,r4,20
    2bcc:	282f883a 	mov	r23,r5
    2bd0:	adad883a 	add	r22,r21,r22
    2bd4:	a1400017 	ldw	r5,0(r20)
    2bd8:	2021883a 	mov	r16,r4
    2bdc:	b1000017 	ldw	r4,0(r22)
    2be0:	29400044 	addi	r5,r5,1
    2be4:	00006340 	call	634 <__udivsi3>
    2be8:	1027883a 	mov	r19,r2
    2bec:	10002c26 	beq	r2,zero,2ca0 <quorem+0x120>
    2bf0:	a813883a 	mov	r9,r21
    2bf4:	880b883a 	mov	r5,r17
    2bf8:	0009883a 	mov	r4,zero
    2bfc:	000d883a 	mov	r6,zero
    2c00:	2a000017 	ldw	r8,0(r5)
    2c04:	49c00017 	ldw	r7,0(r9)
    2c08:	29400104 	addi	r5,r5,4
    2c0c:	40bfffcc 	andi	r2,r8,65535
    2c10:	14c5383a 	mul	r2,r2,r19
    2c14:	4010d43a 	srli	r8,r8,16
    2c18:	38ffffcc 	andi	r3,r7,65535
    2c1c:	1105883a 	add	r2,r2,r4
    2c20:	1008d43a 	srli	r4,r2,16
    2c24:	44d1383a 	mul	r8,r8,r19
    2c28:	198d883a 	add	r6,r3,r6
    2c2c:	10ffffcc 	andi	r3,r2,65535
    2c30:	30c7c83a 	sub	r3,r6,r3
    2c34:	380ed43a 	srli	r7,r7,16
    2c38:	4105883a 	add	r2,r8,r4
    2c3c:	180dd43a 	srai	r6,r3,16
    2c40:	113fffcc 	andi	r4,r2,65535
    2c44:	390fc83a 	sub	r7,r7,r4
    2c48:	398d883a 	add	r6,r7,r6
    2c4c:	300e943a 	slli	r7,r6,16
    2c50:	18ffffcc 	andi	r3,r3,65535
    2c54:	1008d43a 	srli	r4,r2,16
    2c58:	38ceb03a 	or	r7,r7,r3
    2c5c:	49c00015 	stw	r7,0(r9)
    2c60:	300dd43a 	srai	r6,r6,16
    2c64:	4a400104 	addi	r9,r9,4
    2c68:	a17fe52e 	bgeu	r20,r5,2c00 <_gp+0xfffc42f8>
    2c6c:	b0800017 	ldw	r2,0(r22)
    2c70:	10000b1e 	bne	r2,zero,2ca0 <quorem+0x120>
    2c74:	b0bfff04 	addi	r2,r22,-4
    2c78:	a880082e 	bgeu	r21,r2,2c9c <quorem+0x11c>
    2c7c:	b0ffff17 	ldw	r3,-4(r22)
    2c80:	18000326 	beq	r3,zero,2c90 <quorem+0x110>
    2c84:	00000506 	br	2c9c <quorem+0x11c>
    2c88:	10c00017 	ldw	r3,0(r2)
    2c8c:	1800031e 	bne	r3,zero,2c9c <quorem+0x11c>
    2c90:	10bfff04 	addi	r2,r2,-4
    2c94:	94bfffc4 	addi	r18,r18,-1
    2c98:	a8bffb36 	bltu	r21,r2,2c88 <_gp+0xfffc4380>
    2c9c:	84800415 	stw	r18,16(r16)
    2ca0:	b80b883a 	mov	r5,r23
    2ca4:	8009883a 	mov	r4,r16
    2ca8:	00066cc0 	call	66cc <__mcmp>
    2cac:	10002616 	blt	r2,zero,2d48 <quorem+0x1c8>
    2cb0:	9cc00044 	addi	r19,r19,1
    2cb4:	a805883a 	mov	r2,r21
    2cb8:	000b883a 	mov	r5,zero
    2cbc:	11000017 	ldw	r4,0(r2)
    2cc0:	89800017 	ldw	r6,0(r17)
    2cc4:	10800104 	addi	r2,r2,4
    2cc8:	20ffffcc 	andi	r3,r4,65535
    2ccc:	194b883a 	add	r5,r3,r5
    2cd0:	30ffffcc 	andi	r3,r6,65535
    2cd4:	28c7c83a 	sub	r3,r5,r3
    2cd8:	300cd43a 	srli	r6,r6,16
    2cdc:	2008d43a 	srli	r4,r4,16
    2ce0:	180bd43a 	srai	r5,r3,16
    2ce4:	18ffffcc 	andi	r3,r3,65535
    2ce8:	2189c83a 	sub	r4,r4,r6
    2cec:	2149883a 	add	r4,r4,r5
    2cf0:	200c943a 	slli	r6,r4,16
    2cf4:	8c400104 	addi	r17,r17,4
    2cf8:	200bd43a 	srai	r5,r4,16
    2cfc:	30c6b03a 	or	r3,r6,r3
    2d00:	10ffff15 	stw	r3,-4(r2)
    2d04:	a47fed2e 	bgeu	r20,r17,2cbc <_gp+0xfffc43b4>
    2d08:	9485883a 	add	r2,r18,r18
    2d0c:	1085883a 	add	r2,r2,r2
    2d10:	a887883a 	add	r3,r21,r2
    2d14:	18800017 	ldw	r2,0(r3)
    2d18:	10000b1e 	bne	r2,zero,2d48 <quorem+0x1c8>
    2d1c:	18bfff04 	addi	r2,r3,-4
    2d20:	a880082e 	bgeu	r21,r2,2d44 <quorem+0x1c4>
    2d24:	18ffff17 	ldw	r3,-4(r3)
    2d28:	18000326 	beq	r3,zero,2d38 <quorem+0x1b8>
    2d2c:	00000506 	br	2d44 <quorem+0x1c4>
    2d30:	10c00017 	ldw	r3,0(r2)
    2d34:	1800031e 	bne	r3,zero,2d44 <quorem+0x1c4>
    2d38:	10bfff04 	addi	r2,r2,-4
    2d3c:	94bfffc4 	addi	r18,r18,-1
    2d40:	a8bffb36 	bltu	r21,r2,2d30 <_gp+0xfffc4428>
    2d44:	84800415 	stw	r18,16(r16)
    2d48:	9805883a 	mov	r2,r19
    2d4c:	dfc00817 	ldw	ra,32(sp)
    2d50:	ddc00717 	ldw	r23,28(sp)
    2d54:	dd800617 	ldw	r22,24(sp)
    2d58:	dd400517 	ldw	r21,20(sp)
    2d5c:	dd000417 	ldw	r20,16(sp)
    2d60:	dcc00317 	ldw	r19,12(sp)
    2d64:	dc800217 	ldw	r18,8(sp)
    2d68:	dc400117 	ldw	r17,4(sp)
    2d6c:	dc000017 	ldw	r16,0(sp)
    2d70:	dec00904 	addi	sp,sp,36
    2d74:	f800283a 	ret
    2d78:	0005883a 	mov	r2,zero
    2d7c:	003ff306 	br	2d4c <_gp+0xfffc4444>

00002d80 <_dtoa_r>:
    2d80:	20801017 	ldw	r2,64(r4)
    2d84:	deffde04 	addi	sp,sp,-136
    2d88:	df002015 	stw	fp,128(sp)
    2d8c:	dcc01b15 	stw	r19,108(sp)
    2d90:	dc801a15 	stw	r18,104(sp)
    2d94:	dc401915 	stw	r17,100(sp)
    2d98:	dc001815 	stw	r16,96(sp)
    2d9c:	dfc02115 	stw	ra,132(sp)
    2da0:	ddc01f15 	stw	r23,124(sp)
    2da4:	dd801e15 	stw	r22,120(sp)
    2da8:	dd401d15 	stw	r21,116(sp)
    2dac:	dd001c15 	stw	r20,112(sp)
    2db0:	d9c00315 	stw	r7,12(sp)
    2db4:	2039883a 	mov	fp,r4
    2db8:	3023883a 	mov	r17,r6
    2dbc:	2825883a 	mov	r18,r5
    2dc0:	dc002417 	ldw	r16,144(sp)
    2dc4:	3027883a 	mov	r19,r6
    2dc8:	10000826 	beq	r2,zero,2dec <_dtoa_r+0x6c>
    2dcc:	21801117 	ldw	r6,68(r4)
    2dd0:	00c00044 	movi	r3,1
    2dd4:	100b883a 	mov	r5,r2
    2dd8:	1986983a 	sll	r3,r3,r6
    2ddc:	11800115 	stw	r6,4(r2)
    2de0:	10c00215 	stw	r3,8(r2)
    2de4:	0005eac0 	call	5eac <_Bfree>
    2de8:	e0001015 	stw	zero,64(fp)
    2dec:	88002e16 	blt	r17,zero,2ea8 <_dtoa_r+0x128>
    2df0:	80000015 	stw	zero,0(r16)
    2df4:	889ffc2c 	andhi	r2,r17,32752
    2df8:	00dffc34 	movhi	r3,32752
    2dfc:	10c01c26 	beq	r2,r3,2e70 <_dtoa_r+0xf0>
    2e00:	000d883a 	mov	r6,zero
    2e04:	000f883a 	mov	r7,zero
    2e08:	9009883a 	mov	r4,r18
    2e0c:	980b883a 	mov	r5,r19
    2e10:	000b8b40 	call	b8b4 <__eqdf2>
    2e14:	10002b1e 	bne	r2,zero,2ec4 <_dtoa_r+0x144>
    2e18:	d9c02317 	ldw	r7,140(sp)
    2e1c:	00800044 	movi	r2,1
    2e20:	38800015 	stw	r2,0(r7)
    2e24:	d8802517 	ldw	r2,148(sp)
    2e28:	10019e26 	beq	r2,zero,34a4 <_dtoa_r+0x724>
    2e2c:	d8c02517 	ldw	r3,148(sp)
    2e30:	008000f4 	movhi	r2,3
    2e34:	10929c44 	addi	r2,r2,19057
    2e38:	18800015 	stw	r2,0(r3)
    2e3c:	10bfffc4 	addi	r2,r2,-1
    2e40:	dfc02117 	ldw	ra,132(sp)
    2e44:	df002017 	ldw	fp,128(sp)
    2e48:	ddc01f17 	ldw	r23,124(sp)
    2e4c:	dd801e17 	ldw	r22,120(sp)
    2e50:	dd401d17 	ldw	r21,116(sp)
    2e54:	dd001c17 	ldw	r20,112(sp)
    2e58:	dcc01b17 	ldw	r19,108(sp)
    2e5c:	dc801a17 	ldw	r18,104(sp)
    2e60:	dc401917 	ldw	r17,100(sp)
    2e64:	dc001817 	ldw	r16,96(sp)
    2e68:	dec02204 	addi	sp,sp,136
    2e6c:	f800283a 	ret
    2e70:	d8c02317 	ldw	r3,140(sp)
    2e74:	0089c3c4 	movi	r2,9999
    2e78:	18800015 	stw	r2,0(r3)
    2e7c:	90017726 	beq	r18,zero,345c <_dtoa_r+0x6dc>
    2e80:	008000f4 	movhi	r2,3
    2e84:	1092a804 	addi	r2,r2,19104
    2e88:	d9002517 	ldw	r4,148(sp)
    2e8c:	203fec26 	beq	r4,zero,2e40 <_gp+0xfffc4538>
    2e90:	10c000c7 	ldb	r3,3(r2)
    2e94:	1801781e 	bne	r3,zero,3478 <_dtoa_r+0x6f8>
    2e98:	10c000c4 	addi	r3,r2,3
    2e9c:	d9802517 	ldw	r6,148(sp)
    2ea0:	30c00015 	stw	r3,0(r6)
    2ea4:	003fe606 	br	2e40 <_gp+0xfffc4538>
    2ea8:	04e00034 	movhi	r19,32768
    2eac:	9cffffc4 	addi	r19,r19,-1
    2eb0:	00800044 	movi	r2,1
    2eb4:	8ce6703a 	and	r19,r17,r19
    2eb8:	80800015 	stw	r2,0(r16)
    2ebc:	9823883a 	mov	r17,r19
    2ec0:	003fcc06 	br	2df4 <_gp+0xfffc44ec>
    2ec4:	d8800204 	addi	r2,sp,8
    2ec8:	d8800015 	stw	r2,0(sp)
    2ecc:	d9c00104 	addi	r7,sp,4
    2ed0:	900b883a 	mov	r5,r18
    2ed4:	980d883a 	mov	r6,r19
    2ed8:	e009883a 	mov	r4,fp
    2edc:	8820d53a 	srli	r16,r17,20
    2ee0:	0006a980 	call	6a98 <__d2b>
    2ee4:	d8800915 	stw	r2,36(sp)
    2ee8:	8001651e 	bne	r16,zero,3480 <_dtoa_r+0x700>
    2eec:	dd800217 	ldw	r22,8(sp)
    2ef0:	dc000117 	ldw	r16,4(sp)
    2ef4:	00800804 	movi	r2,32
    2ef8:	b421883a 	add	r16,r22,r16
    2efc:	80c10c84 	addi	r3,r16,1074
    2f00:	10c2d10e 	bge	r2,r3,3a48 <_dtoa_r+0xcc8>
    2f04:	00801004 	movi	r2,64
    2f08:	81010484 	addi	r4,r16,1042
    2f0c:	10c7c83a 	sub	r3,r2,r3
    2f10:	9108d83a 	srl	r4,r18,r4
    2f14:	88e2983a 	sll	r17,r17,r3
    2f18:	2448b03a 	or	r4,r4,r17
    2f1c:	000cc7c0 	call	cc7c <__floatunsidf>
    2f20:	017f8434 	movhi	r5,65040
    2f24:	01800044 	movi	r6,1
    2f28:	1009883a 	mov	r4,r2
    2f2c:	194b883a 	add	r5,r3,r5
    2f30:	843fffc4 	addi	r16,r16,-1
    2f34:	d9801115 	stw	r6,68(sp)
    2f38:	000d883a 	mov	r6,zero
    2f3c:	01cffe34 	movhi	r7,16376
    2f40:	000c2240 	call	c224 <__subdf3>
    2f44:	0198dbf4 	movhi	r6,25455
    2f48:	01cff4f4 	movhi	r7,16339
    2f4c:	3190d844 	addi	r6,r6,17249
    2f50:	39e1e9c4 	addi	r7,r7,-30809
    2f54:	1009883a 	mov	r4,r2
    2f58:	180b883a 	mov	r5,r3
    2f5c:	000bb0c0 	call	bb0c <__muldf3>
    2f60:	01a2d874 	movhi	r6,35681
    2f64:	01cff1f4 	movhi	r7,16327
    2f68:	31b22cc4 	addi	r6,r6,-14157
    2f6c:	39e28a04 	addi	r7,r7,-30168
    2f70:	180b883a 	mov	r5,r3
    2f74:	1009883a 	mov	r4,r2
    2f78:	000a7200 	call	a720 <__adddf3>
    2f7c:	8009883a 	mov	r4,r16
    2f80:	1029883a 	mov	r20,r2
    2f84:	1823883a 	mov	r17,r3
    2f88:	000cba00 	call	cba0 <__floatsidf>
    2f8c:	019427f4 	movhi	r6,20639
    2f90:	01cff4f4 	movhi	r7,16339
    2f94:	319e7ec4 	addi	r6,r6,31227
    2f98:	39d104c4 	addi	r7,r7,17427
    2f9c:	1009883a 	mov	r4,r2
    2fa0:	180b883a 	mov	r5,r3
    2fa4:	000bb0c0 	call	bb0c <__muldf3>
    2fa8:	100d883a 	mov	r6,r2
    2fac:	180f883a 	mov	r7,r3
    2fb0:	a009883a 	mov	r4,r20
    2fb4:	880b883a 	mov	r5,r17
    2fb8:	000a7200 	call	a720 <__adddf3>
    2fbc:	1009883a 	mov	r4,r2
    2fc0:	180b883a 	mov	r5,r3
    2fc4:	1029883a 	mov	r20,r2
    2fc8:	1823883a 	mov	r17,r3
    2fcc:	000cb200 	call	cb20 <__fixdfsi>
    2fd0:	000d883a 	mov	r6,zero
    2fd4:	000f883a 	mov	r7,zero
    2fd8:	a009883a 	mov	r4,r20
    2fdc:	880b883a 	mov	r5,r17
    2fe0:	d8800515 	stw	r2,20(sp)
    2fe4:	000ba180 	call	ba18 <__ledf2>
    2fe8:	10028716 	blt	r2,zero,3a08 <_dtoa_r+0xc88>
    2fec:	d8c00517 	ldw	r3,20(sp)
    2ff0:	00800584 	movi	r2,22
    2ff4:	10c27536 	bltu	r2,r3,39cc <_dtoa_r+0xc4c>
    2ff8:	180490fa 	slli	r2,r3,3
    2ffc:	00c000f4 	movhi	r3,3
    3000:	18d2c404 	addi	r3,r3,19216
    3004:	1885883a 	add	r2,r3,r2
    3008:	11000017 	ldw	r4,0(r2)
    300c:	11400117 	ldw	r5,4(r2)
    3010:	900d883a 	mov	r6,r18
    3014:	980f883a 	mov	r7,r19
    3018:	000b93c0 	call	b93c <__gedf2>
    301c:	00828d0e 	bge	zero,r2,3a54 <_dtoa_r+0xcd4>
    3020:	d9000517 	ldw	r4,20(sp)
    3024:	d8000e15 	stw	zero,56(sp)
    3028:	213fffc4 	addi	r4,r4,-1
    302c:	d9000515 	stw	r4,20(sp)
    3030:	b42dc83a 	sub	r22,r22,r16
    3034:	b5bfffc4 	addi	r22,r22,-1
    3038:	b0026f16 	blt	r22,zero,39f8 <_dtoa_r+0xc78>
    303c:	d8000815 	stw	zero,32(sp)
    3040:	d9c00517 	ldw	r7,20(sp)
    3044:	38026416 	blt	r7,zero,39d8 <_dtoa_r+0xc58>
    3048:	b1ed883a 	add	r22,r22,r7
    304c:	d9c00d15 	stw	r7,52(sp)
    3050:	d8000a15 	stw	zero,40(sp)
    3054:	d9800317 	ldw	r6,12(sp)
    3058:	00800244 	movi	r2,9
    305c:	11811436 	bltu	r2,r6,34b0 <_dtoa_r+0x730>
    3060:	00800144 	movi	r2,5
    3064:	1184e10e 	bge	r2,r6,43ec <_dtoa_r+0x166c>
    3068:	31bfff04 	addi	r6,r6,-4
    306c:	d9800315 	stw	r6,12(sp)
    3070:	0023883a 	mov	r17,zero
    3074:	d9800317 	ldw	r6,12(sp)
    3078:	008000c4 	movi	r2,3
    307c:	30836726 	beq	r6,r2,3e1c <_dtoa_r+0x109c>
    3080:	1183410e 	bge	r2,r6,3d88 <_dtoa_r+0x1008>
    3084:	d9c00317 	ldw	r7,12(sp)
    3088:	00800104 	movi	r2,4
    308c:	38827c26 	beq	r7,r2,3a80 <_dtoa_r+0xd00>
    3090:	00800144 	movi	r2,5
    3094:	3884c41e 	bne	r7,r2,43a8 <_dtoa_r+0x1628>
    3098:	00800044 	movi	r2,1
    309c:	d8800b15 	stw	r2,44(sp)
    30a0:	d8c00517 	ldw	r3,20(sp)
    30a4:	d9002217 	ldw	r4,136(sp)
    30a8:	1907883a 	add	r3,r3,r4
    30ac:	19800044 	addi	r6,r3,1
    30b0:	d8c00c15 	stw	r3,48(sp)
    30b4:	d9800615 	stw	r6,24(sp)
    30b8:	0183a40e 	bge	zero,r6,3f4c <_dtoa_r+0x11cc>
    30bc:	d9800617 	ldw	r6,24(sp)
    30c0:	3021883a 	mov	r16,r6
    30c4:	e0001115 	stw	zero,68(fp)
    30c8:	008005c4 	movi	r2,23
    30cc:	1184c92e 	bgeu	r2,r6,43f4 <_dtoa_r+0x1674>
    30d0:	00c00044 	movi	r3,1
    30d4:	00800104 	movi	r2,4
    30d8:	1085883a 	add	r2,r2,r2
    30dc:	11000504 	addi	r4,r2,20
    30e0:	180b883a 	mov	r5,r3
    30e4:	18c00044 	addi	r3,r3,1
    30e8:	313ffb2e 	bgeu	r6,r4,30d8 <_gp+0xfffc47d0>
    30ec:	e1401115 	stw	r5,68(fp)
    30f0:	e009883a 	mov	r4,fp
    30f4:	0005e040 	call	5e04 <_Balloc>
    30f8:	d8800715 	stw	r2,28(sp)
    30fc:	e0801015 	stw	r2,64(fp)
    3100:	00800384 	movi	r2,14
    3104:	1400f736 	bltu	r2,r16,34e4 <_dtoa_r+0x764>
    3108:	8800f626 	beq	r17,zero,34e4 <_dtoa_r+0x764>
    310c:	d9c00517 	ldw	r7,20(sp)
    3110:	01c39a0e 	bge	zero,r7,3f7c <_dtoa_r+0x11fc>
    3114:	388003cc 	andi	r2,r7,15
    3118:	100490fa 	slli	r2,r2,3
    311c:	382bd13a 	srai	r21,r7,4
    3120:	00c000f4 	movhi	r3,3
    3124:	18d2c404 	addi	r3,r3,19216
    3128:	1885883a 	add	r2,r3,r2
    312c:	a8c0040c 	andi	r3,r21,16
    3130:	12400017 	ldw	r9,0(r2)
    3134:	12000117 	ldw	r8,4(r2)
    3138:	18037926 	beq	r3,zero,3f20 <_dtoa_r+0x11a0>
    313c:	008000f4 	movhi	r2,3
    3140:	1092ba04 	addi	r2,r2,19176
    3144:	11800817 	ldw	r6,32(r2)
    3148:	11c00917 	ldw	r7,36(r2)
    314c:	9009883a 	mov	r4,r18
    3150:	980b883a 	mov	r5,r19
    3154:	da001715 	stw	r8,92(sp)
    3158:	da401615 	stw	r9,88(sp)
    315c:	000afcc0 	call	afcc <__divdf3>
    3160:	da001717 	ldw	r8,92(sp)
    3164:	da401617 	ldw	r9,88(sp)
    3168:	ad4003cc 	andi	r21,r21,15
    316c:	040000c4 	movi	r16,3
    3170:	1023883a 	mov	r17,r2
    3174:	1829883a 	mov	r20,r3
    3178:	a8001126 	beq	r21,zero,31c0 <_dtoa_r+0x440>
    317c:	05c000f4 	movhi	r23,3
    3180:	bdd2ba04 	addi	r23,r23,19176
    3184:	4805883a 	mov	r2,r9
    3188:	4007883a 	mov	r3,r8
    318c:	a980004c 	andi	r6,r21,1
    3190:	1009883a 	mov	r4,r2
    3194:	a82bd07a 	srai	r21,r21,1
    3198:	180b883a 	mov	r5,r3
    319c:	30000426 	beq	r6,zero,31b0 <_dtoa_r+0x430>
    31a0:	b9800017 	ldw	r6,0(r23)
    31a4:	b9c00117 	ldw	r7,4(r23)
    31a8:	84000044 	addi	r16,r16,1
    31ac:	000bb0c0 	call	bb0c <__muldf3>
    31b0:	bdc00204 	addi	r23,r23,8
    31b4:	a83ff51e 	bne	r21,zero,318c <_gp+0xfffc4884>
    31b8:	1013883a 	mov	r9,r2
    31bc:	1811883a 	mov	r8,r3
    31c0:	480d883a 	mov	r6,r9
    31c4:	400f883a 	mov	r7,r8
    31c8:	8809883a 	mov	r4,r17
    31cc:	a00b883a 	mov	r5,r20
    31d0:	000afcc0 	call	afcc <__divdf3>
    31d4:	d8800f15 	stw	r2,60(sp)
    31d8:	d8c01015 	stw	r3,64(sp)
    31dc:	d8c00e17 	ldw	r3,56(sp)
    31e0:	18000626 	beq	r3,zero,31fc <_dtoa_r+0x47c>
    31e4:	d9000f17 	ldw	r4,60(sp)
    31e8:	d9401017 	ldw	r5,64(sp)
    31ec:	000d883a 	mov	r6,zero
    31f0:	01cffc34 	movhi	r7,16368
    31f4:	000ba180 	call	ba18 <__ledf2>
    31f8:	10040b16 	blt	r2,zero,4228 <_dtoa_r+0x14a8>
    31fc:	8009883a 	mov	r4,r16
    3200:	000cba00 	call	cba0 <__floatsidf>
    3204:	d9800f17 	ldw	r6,60(sp)
    3208:	d9c01017 	ldw	r7,64(sp)
    320c:	1009883a 	mov	r4,r2
    3210:	180b883a 	mov	r5,r3
    3214:	000bb0c0 	call	bb0c <__muldf3>
    3218:	000d883a 	mov	r6,zero
    321c:	01d00734 	movhi	r7,16412
    3220:	1009883a 	mov	r4,r2
    3224:	180b883a 	mov	r5,r3
    3228:	000a7200 	call	a720 <__adddf3>
    322c:	1021883a 	mov	r16,r2
    3230:	d8800617 	ldw	r2,24(sp)
    3234:	047f3034 	movhi	r17,64704
    3238:	1c63883a 	add	r17,r3,r17
    323c:	10031826 	beq	r2,zero,3ea0 <_dtoa_r+0x1120>
    3240:	d8c00517 	ldw	r3,20(sp)
    3244:	db000617 	ldw	r12,24(sp)
    3248:	d8c01315 	stw	r3,76(sp)
    324c:	d9000b17 	ldw	r4,44(sp)
    3250:	20038f26 	beq	r4,zero,4090 <_dtoa_r+0x1310>
    3254:	60bfffc4 	addi	r2,r12,-1
    3258:	100490fa 	slli	r2,r2,3
    325c:	00c000f4 	movhi	r3,3
    3260:	18d2c404 	addi	r3,r3,19216
    3264:	1885883a 	add	r2,r3,r2
    3268:	11800017 	ldw	r6,0(r2)
    326c:	11c00117 	ldw	r7,4(r2)
    3270:	d8800717 	ldw	r2,28(sp)
    3274:	0009883a 	mov	r4,zero
    3278:	014ff834 	movhi	r5,16352
    327c:	db001615 	stw	r12,88(sp)
    3280:	15c00044 	addi	r23,r2,1
    3284:	000afcc0 	call	afcc <__divdf3>
    3288:	800d883a 	mov	r6,r16
    328c:	880f883a 	mov	r7,r17
    3290:	1009883a 	mov	r4,r2
    3294:	180b883a 	mov	r5,r3
    3298:	000c2240 	call	c224 <__subdf3>
    329c:	d9401017 	ldw	r5,64(sp)
    32a0:	d9000f17 	ldw	r4,60(sp)
    32a4:	102b883a 	mov	r21,r2
    32a8:	d8c01215 	stw	r3,72(sp)
    32ac:	000cb200 	call	cb20 <__fixdfsi>
    32b0:	1009883a 	mov	r4,r2
    32b4:	1029883a 	mov	r20,r2
    32b8:	000cba00 	call	cba0 <__floatsidf>
    32bc:	d9000f17 	ldw	r4,60(sp)
    32c0:	d9401017 	ldw	r5,64(sp)
    32c4:	100d883a 	mov	r6,r2
    32c8:	180f883a 	mov	r7,r3
    32cc:	000c2240 	call	c224 <__subdf3>
    32d0:	1823883a 	mov	r17,r3
    32d4:	d8c00717 	ldw	r3,28(sp)
    32d8:	d9401217 	ldw	r5,72(sp)
    32dc:	a2000c04 	addi	r8,r20,48
    32e0:	1021883a 	mov	r16,r2
    32e4:	1a000005 	stb	r8,0(r3)
    32e8:	800d883a 	mov	r6,r16
    32ec:	880f883a 	mov	r7,r17
    32f0:	a809883a 	mov	r4,r21
    32f4:	4029883a 	mov	r20,r8
    32f8:	000b93c0 	call	b93c <__gedf2>
    32fc:	00841d16 	blt	zero,r2,4374 <_dtoa_r+0x15f4>
    3300:	800d883a 	mov	r6,r16
    3304:	880f883a 	mov	r7,r17
    3308:	0009883a 	mov	r4,zero
    330c:	014ffc34 	movhi	r5,16368
    3310:	000c2240 	call	c224 <__subdf3>
    3314:	d9401217 	ldw	r5,72(sp)
    3318:	100d883a 	mov	r6,r2
    331c:	180f883a 	mov	r7,r3
    3320:	a809883a 	mov	r4,r21
    3324:	000b93c0 	call	b93c <__gedf2>
    3328:	db001617 	ldw	r12,88(sp)
    332c:	00840e16 	blt	zero,r2,4368 <_dtoa_r+0x15e8>
    3330:	00800044 	movi	r2,1
    3334:	13006b0e 	bge	r2,r12,34e4 <_dtoa_r+0x764>
    3338:	d9000717 	ldw	r4,28(sp)
    333c:	dd800f15 	stw	r22,60(sp)
    3340:	dcc01015 	stw	r19,64(sp)
    3344:	2319883a 	add	r12,r4,r12
    3348:	dcc01217 	ldw	r19,72(sp)
    334c:	602d883a 	mov	r22,r12
    3350:	dc801215 	stw	r18,72(sp)
    3354:	b825883a 	mov	r18,r23
    3358:	00000906 	br	3380 <_dtoa_r+0x600>
    335c:	000c2240 	call	c224 <__subdf3>
    3360:	a80d883a 	mov	r6,r21
    3364:	980f883a 	mov	r7,r19
    3368:	1009883a 	mov	r4,r2
    336c:	180b883a 	mov	r5,r3
    3370:	000ba180 	call	ba18 <__ledf2>
    3374:	1003e816 	blt	r2,zero,4318 <_dtoa_r+0x1598>
    3378:	b825883a 	mov	r18,r23
    337c:	bd83e926 	beq	r23,r22,4324 <_dtoa_r+0x15a4>
    3380:	a809883a 	mov	r4,r21
    3384:	980b883a 	mov	r5,r19
    3388:	000d883a 	mov	r6,zero
    338c:	01d00934 	movhi	r7,16420
    3390:	000bb0c0 	call	bb0c <__muldf3>
    3394:	000d883a 	mov	r6,zero
    3398:	01d00934 	movhi	r7,16420
    339c:	8009883a 	mov	r4,r16
    33a0:	880b883a 	mov	r5,r17
    33a4:	102b883a 	mov	r21,r2
    33a8:	1827883a 	mov	r19,r3
    33ac:	000bb0c0 	call	bb0c <__muldf3>
    33b0:	180b883a 	mov	r5,r3
    33b4:	1009883a 	mov	r4,r2
    33b8:	1821883a 	mov	r16,r3
    33bc:	1023883a 	mov	r17,r2
    33c0:	000cb200 	call	cb20 <__fixdfsi>
    33c4:	1009883a 	mov	r4,r2
    33c8:	1029883a 	mov	r20,r2
    33cc:	000cba00 	call	cba0 <__floatsidf>
    33d0:	8809883a 	mov	r4,r17
    33d4:	800b883a 	mov	r5,r16
    33d8:	100d883a 	mov	r6,r2
    33dc:	180f883a 	mov	r7,r3
    33e0:	000c2240 	call	c224 <__subdf3>
    33e4:	a5000c04 	addi	r20,r20,48
    33e8:	a80d883a 	mov	r6,r21
    33ec:	980f883a 	mov	r7,r19
    33f0:	1009883a 	mov	r4,r2
    33f4:	180b883a 	mov	r5,r3
    33f8:	95000005 	stb	r20,0(r18)
    33fc:	1021883a 	mov	r16,r2
    3400:	1823883a 	mov	r17,r3
    3404:	000ba180 	call	ba18 <__ledf2>
    3408:	bdc00044 	addi	r23,r23,1
    340c:	800d883a 	mov	r6,r16
    3410:	880f883a 	mov	r7,r17
    3414:	0009883a 	mov	r4,zero
    3418:	014ffc34 	movhi	r5,16368
    341c:	103fcf0e 	bge	r2,zero,335c <_gp+0xfffc4a54>
    3420:	d8c01317 	ldw	r3,76(sp)
    3424:	d8c00515 	stw	r3,20(sp)
    3428:	d9400917 	ldw	r5,36(sp)
    342c:	e009883a 	mov	r4,fp
    3430:	0005eac0 	call	5eac <_Bfree>
    3434:	d9000517 	ldw	r4,20(sp)
    3438:	d9802317 	ldw	r6,140(sp)
    343c:	d9c02517 	ldw	r7,148(sp)
    3440:	b8000005 	stb	zero,0(r23)
    3444:	20800044 	addi	r2,r4,1
    3448:	30800015 	stw	r2,0(r6)
    344c:	3802aa26 	beq	r7,zero,3ef8 <_dtoa_r+0x1178>
    3450:	3dc00015 	stw	r23,0(r7)
    3454:	d8800717 	ldw	r2,28(sp)
    3458:	003e7906 	br	2e40 <_gp+0xfffc4538>
    345c:	00800434 	movhi	r2,16
    3460:	10bfffc4 	addi	r2,r2,-1
    3464:	88a2703a 	and	r17,r17,r2
    3468:	883e851e 	bne	r17,zero,2e80 <_gp+0xfffc4578>
    346c:	008000f4 	movhi	r2,3
    3470:	1092a504 	addi	r2,r2,19092
    3474:	003e8406 	br	2e88 <_gp+0xfffc4580>
    3478:	10c00204 	addi	r3,r2,8
    347c:	003e8706 	br	2e9c <_gp+0xfffc4594>
    3480:	01400434 	movhi	r5,16
    3484:	297fffc4 	addi	r5,r5,-1
    3488:	994a703a 	and	r5,r19,r5
    348c:	9009883a 	mov	r4,r18
    3490:	843f0044 	addi	r16,r16,-1023
    3494:	294ffc34 	orhi	r5,r5,16368
    3498:	dd800217 	ldw	r22,8(sp)
    349c:	d8001115 	stw	zero,68(sp)
    34a0:	003ea506 	br	2f38 <_gp+0xfffc4630>
    34a4:	008000f4 	movhi	r2,3
    34a8:	10929c04 	addi	r2,r2,19056
    34ac:	003e6406 	br	2e40 <_gp+0xfffc4538>
    34b0:	e0001115 	stw	zero,68(fp)
    34b4:	000b883a 	mov	r5,zero
    34b8:	e009883a 	mov	r4,fp
    34bc:	0005e040 	call	5e04 <_Balloc>
    34c0:	01bfffc4 	movi	r6,-1
    34c4:	01c00044 	movi	r7,1
    34c8:	d8800715 	stw	r2,28(sp)
    34cc:	d9800c15 	stw	r6,48(sp)
    34d0:	e0801015 	stw	r2,64(fp)
    34d4:	d8000315 	stw	zero,12(sp)
    34d8:	d9c00b15 	stw	r7,44(sp)
    34dc:	d9800615 	stw	r6,24(sp)
    34e0:	d8002215 	stw	zero,136(sp)
    34e4:	d8800117 	ldw	r2,4(sp)
    34e8:	10008916 	blt	r2,zero,3710 <_dtoa_r+0x990>
    34ec:	d9000517 	ldw	r4,20(sp)
    34f0:	00c00384 	movi	r3,14
    34f4:	19008616 	blt	r3,r4,3710 <_dtoa_r+0x990>
    34f8:	200490fa 	slli	r2,r4,3
    34fc:	00c000f4 	movhi	r3,3
    3500:	d9802217 	ldw	r6,136(sp)
    3504:	18d2c404 	addi	r3,r3,19216
    3508:	1885883a 	add	r2,r3,r2
    350c:	14000017 	ldw	r16,0(r2)
    3510:	14400117 	ldw	r17,4(r2)
    3514:	30016316 	blt	r6,zero,3aa4 <_dtoa_r+0xd24>
    3518:	800d883a 	mov	r6,r16
    351c:	880f883a 	mov	r7,r17
    3520:	9009883a 	mov	r4,r18
    3524:	980b883a 	mov	r5,r19
    3528:	000afcc0 	call	afcc <__divdf3>
    352c:	180b883a 	mov	r5,r3
    3530:	1009883a 	mov	r4,r2
    3534:	000cb200 	call	cb20 <__fixdfsi>
    3538:	1009883a 	mov	r4,r2
    353c:	102b883a 	mov	r21,r2
    3540:	000cba00 	call	cba0 <__floatsidf>
    3544:	800d883a 	mov	r6,r16
    3548:	880f883a 	mov	r7,r17
    354c:	1009883a 	mov	r4,r2
    3550:	180b883a 	mov	r5,r3
    3554:	000bb0c0 	call	bb0c <__muldf3>
    3558:	100d883a 	mov	r6,r2
    355c:	180f883a 	mov	r7,r3
    3560:	9009883a 	mov	r4,r18
    3564:	980b883a 	mov	r5,r19
    3568:	000c2240 	call	c224 <__subdf3>
    356c:	d9c00717 	ldw	r7,28(sp)
    3570:	1009883a 	mov	r4,r2
    3574:	a8800c04 	addi	r2,r21,48
    3578:	38800005 	stb	r2,0(r7)
    357c:	3dc00044 	addi	r23,r7,1
    3580:	d9c00617 	ldw	r7,24(sp)
    3584:	01800044 	movi	r6,1
    3588:	180b883a 	mov	r5,r3
    358c:	2005883a 	mov	r2,r4
    3590:	39803826 	beq	r7,r6,3674 <_dtoa_r+0x8f4>
    3594:	000d883a 	mov	r6,zero
    3598:	01d00934 	movhi	r7,16420
    359c:	000bb0c0 	call	bb0c <__muldf3>
    35a0:	000d883a 	mov	r6,zero
    35a4:	000f883a 	mov	r7,zero
    35a8:	1009883a 	mov	r4,r2
    35ac:	180b883a 	mov	r5,r3
    35b0:	1025883a 	mov	r18,r2
    35b4:	1827883a 	mov	r19,r3
    35b8:	000b8b40 	call	b8b4 <__eqdf2>
    35bc:	103f9a26 	beq	r2,zero,3428 <_gp+0xfffc4b20>
    35c0:	d9c00617 	ldw	r7,24(sp)
    35c4:	d8c00717 	ldw	r3,28(sp)
    35c8:	b829883a 	mov	r20,r23
    35cc:	38bfffc4 	addi	r2,r7,-1
    35d0:	18ad883a 	add	r22,r3,r2
    35d4:	00000a06 	br	3600 <_dtoa_r+0x880>
    35d8:	000bb0c0 	call	bb0c <__muldf3>
    35dc:	000d883a 	mov	r6,zero
    35e0:	000f883a 	mov	r7,zero
    35e4:	1009883a 	mov	r4,r2
    35e8:	180b883a 	mov	r5,r3
    35ec:	1025883a 	mov	r18,r2
    35f0:	1827883a 	mov	r19,r3
    35f4:	b829883a 	mov	r20,r23
    35f8:	000b8b40 	call	b8b4 <__eqdf2>
    35fc:	103f8a26 	beq	r2,zero,3428 <_gp+0xfffc4b20>
    3600:	800d883a 	mov	r6,r16
    3604:	880f883a 	mov	r7,r17
    3608:	9009883a 	mov	r4,r18
    360c:	980b883a 	mov	r5,r19
    3610:	000afcc0 	call	afcc <__divdf3>
    3614:	180b883a 	mov	r5,r3
    3618:	1009883a 	mov	r4,r2
    361c:	000cb200 	call	cb20 <__fixdfsi>
    3620:	1009883a 	mov	r4,r2
    3624:	102b883a 	mov	r21,r2
    3628:	000cba00 	call	cba0 <__floatsidf>
    362c:	800d883a 	mov	r6,r16
    3630:	880f883a 	mov	r7,r17
    3634:	1009883a 	mov	r4,r2
    3638:	180b883a 	mov	r5,r3
    363c:	000bb0c0 	call	bb0c <__muldf3>
    3640:	100d883a 	mov	r6,r2
    3644:	180f883a 	mov	r7,r3
    3648:	9009883a 	mov	r4,r18
    364c:	980b883a 	mov	r5,r19
    3650:	000c2240 	call	c224 <__subdf3>
    3654:	aa000c04 	addi	r8,r21,48
    3658:	a2000005 	stb	r8,0(r20)
    365c:	000d883a 	mov	r6,zero
    3660:	01d00934 	movhi	r7,16420
    3664:	1009883a 	mov	r4,r2
    3668:	180b883a 	mov	r5,r3
    366c:	a5c00044 	addi	r23,r20,1
    3670:	b53fd91e 	bne	r22,r20,35d8 <_gp+0xfffc4cd0>
    3674:	100d883a 	mov	r6,r2
    3678:	180f883a 	mov	r7,r3
    367c:	1009883a 	mov	r4,r2
    3680:	180b883a 	mov	r5,r3
    3684:	000a7200 	call	a720 <__adddf3>
    3688:	100d883a 	mov	r6,r2
    368c:	180f883a 	mov	r7,r3
    3690:	8009883a 	mov	r4,r16
    3694:	880b883a 	mov	r5,r17
    3698:	1027883a 	mov	r19,r2
    369c:	1825883a 	mov	r18,r3
    36a0:	000ba180 	call	ba18 <__ledf2>
    36a4:	10000816 	blt	r2,zero,36c8 <_dtoa_r+0x948>
    36a8:	980d883a 	mov	r6,r19
    36ac:	900f883a 	mov	r7,r18
    36b0:	8009883a 	mov	r4,r16
    36b4:	880b883a 	mov	r5,r17
    36b8:	000b8b40 	call	b8b4 <__eqdf2>
    36bc:	103f5a1e 	bne	r2,zero,3428 <_gp+0xfffc4b20>
    36c0:	ad40004c 	andi	r21,r21,1
    36c4:	a83f5826 	beq	r21,zero,3428 <_gp+0xfffc4b20>
    36c8:	bd3fffc3 	ldbu	r20,-1(r23)
    36cc:	b8bfffc4 	addi	r2,r23,-1
    36d0:	1007883a 	mov	r3,r2
    36d4:	01400e44 	movi	r5,57
    36d8:	d9800717 	ldw	r6,28(sp)
    36dc:	00000506 	br	36f4 <_dtoa_r+0x974>
    36e0:	18ffffc4 	addi	r3,r3,-1
    36e4:	11824726 	beq	r2,r6,4004 <_dtoa_r+0x1284>
    36e8:	1d000003 	ldbu	r20,0(r3)
    36ec:	102f883a 	mov	r23,r2
    36f0:	10bfffc4 	addi	r2,r2,-1
    36f4:	a1003fcc 	andi	r4,r20,255
    36f8:	2100201c 	xori	r4,r4,128
    36fc:	213fe004 	addi	r4,r4,-128
    3700:	217ff726 	beq	r4,r5,36e0 <_gp+0xfffc4dd8>
    3704:	a2000044 	addi	r8,r20,1
    3708:	12000005 	stb	r8,0(r2)
    370c:	003f4606 	br	3428 <_gp+0xfffc4b20>
    3710:	d9000b17 	ldw	r4,44(sp)
    3714:	2000c826 	beq	r4,zero,3a38 <_dtoa_r+0xcb8>
    3718:	d9800317 	ldw	r6,12(sp)
    371c:	00c00044 	movi	r3,1
    3720:	1980f90e 	bge	r3,r6,3b08 <_dtoa_r+0xd88>
    3724:	d8800617 	ldw	r2,24(sp)
    3728:	d8c00a17 	ldw	r3,40(sp)
    372c:	157fffc4 	addi	r21,r2,-1
    3730:	1d41f316 	blt	r3,r21,3f00 <_dtoa_r+0x1180>
    3734:	1d6bc83a 	sub	r21,r3,r21
    3738:	d9c00617 	ldw	r7,24(sp)
    373c:	3802aa16 	blt	r7,zero,41e8 <_dtoa_r+0x1468>
    3740:	dd000817 	ldw	r20,32(sp)
    3744:	d8800617 	ldw	r2,24(sp)
    3748:	d8c00817 	ldw	r3,32(sp)
    374c:	01400044 	movi	r5,1
    3750:	e009883a 	mov	r4,fp
    3754:	1887883a 	add	r3,r3,r2
    3758:	d8c00815 	stw	r3,32(sp)
    375c:	b0ad883a 	add	r22,r22,r2
    3760:	00062100 	call	6210 <__i2b>
    3764:	1023883a 	mov	r17,r2
    3768:	a0000826 	beq	r20,zero,378c <_dtoa_r+0xa0c>
    376c:	0580070e 	bge	zero,r22,378c <_dtoa_r+0xa0c>
    3770:	a005883a 	mov	r2,r20
    3774:	b500b916 	blt	r22,r20,3a5c <_dtoa_r+0xcdc>
    3778:	d9000817 	ldw	r4,32(sp)
    377c:	a0a9c83a 	sub	r20,r20,r2
    3780:	b0adc83a 	sub	r22,r22,r2
    3784:	2089c83a 	sub	r4,r4,r2
    3788:	d9000815 	stw	r4,32(sp)
    378c:	d9800a17 	ldw	r6,40(sp)
    3790:	0181810e 	bge	zero,r6,3d98 <_dtoa_r+0x1018>
    3794:	d9c00b17 	ldw	r7,44(sp)
    3798:	3800b326 	beq	r7,zero,3a68 <_dtoa_r+0xce8>
    379c:	a800b226 	beq	r21,zero,3a68 <_dtoa_r+0xce8>
    37a0:	880b883a 	mov	r5,r17
    37a4:	a80d883a 	mov	r6,r21
    37a8:	e009883a 	mov	r4,fp
    37ac:	00064440 	call	6444 <__pow5mult>
    37b0:	d9800917 	ldw	r6,36(sp)
    37b4:	100b883a 	mov	r5,r2
    37b8:	e009883a 	mov	r4,fp
    37bc:	1023883a 	mov	r17,r2
    37c0:	000624c0 	call	624c <__multiply>
    37c4:	1021883a 	mov	r16,r2
    37c8:	d8800a17 	ldw	r2,40(sp)
    37cc:	d9400917 	ldw	r5,36(sp)
    37d0:	e009883a 	mov	r4,fp
    37d4:	1545c83a 	sub	r2,r2,r21
    37d8:	d8800a15 	stw	r2,40(sp)
    37dc:	0005eac0 	call	5eac <_Bfree>
    37e0:	d8c00a17 	ldw	r3,40(sp)
    37e4:	18009f1e 	bne	r3,zero,3a64 <_dtoa_r+0xce4>
    37e8:	05c00044 	movi	r23,1
    37ec:	e009883a 	mov	r4,fp
    37f0:	b80b883a 	mov	r5,r23
    37f4:	00062100 	call	6210 <__i2b>
    37f8:	d9000d17 	ldw	r4,52(sp)
    37fc:	102b883a 	mov	r21,r2
    3800:	2000ce26 	beq	r4,zero,3b3c <_dtoa_r+0xdbc>
    3804:	200d883a 	mov	r6,r4
    3808:	100b883a 	mov	r5,r2
    380c:	e009883a 	mov	r4,fp
    3810:	00064440 	call	6444 <__pow5mult>
    3814:	d9800317 	ldw	r6,12(sp)
    3818:	102b883a 	mov	r21,r2
    381c:	b981810e 	bge	r23,r6,3e24 <_dtoa_r+0x10a4>
    3820:	0027883a 	mov	r19,zero
    3824:	a8800417 	ldw	r2,16(r21)
    3828:	05c00804 	movi	r23,32
    382c:	10800104 	addi	r2,r2,4
    3830:	1085883a 	add	r2,r2,r2
    3834:	1085883a 	add	r2,r2,r2
    3838:	a885883a 	add	r2,r21,r2
    383c:	11000017 	ldw	r4,0(r2)
    3840:	00060f80 	call	60f8 <__hi0bits>
    3844:	b885c83a 	sub	r2,r23,r2
    3848:	1585883a 	add	r2,r2,r22
    384c:	108007cc 	andi	r2,r2,31
    3850:	1000b326 	beq	r2,zero,3b20 <_dtoa_r+0xda0>
    3854:	00c00804 	movi	r3,32
    3858:	1887c83a 	sub	r3,r3,r2
    385c:	01000104 	movi	r4,4
    3860:	20c2cd0e 	bge	r4,r3,4398 <_dtoa_r+0x1618>
    3864:	00c00704 	movi	r3,28
    3868:	1885c83a 	sub	r2,r3,r2
    386c:	d8c00817 	ldw	r3,32(sp)
    3870:	a0a9883a 	add	r20,r20,r2
    3874:	b0ad883a 	add	r22,r22,r2
    3878:	1887883a 	add	r3,r3,r2
    387c:	d8c00815 	stw	r3,32(sp)
    3880:	d9800817 	ldw	r6,32(sp)
    3884:	0180040e 	bge	zero,r6,3898 <_dtoa_r+0xb18>
    3888:	800b883a 	mov	r5,r16
    388c:	e009883a 	mov	r4,fp
    3890:	00065840 	call	6584 <__lshift>
    3894:	1021883a 	mov	r16,r2
    3898:	0580050e 	bge	zero,r22,38b0 <_dtoa_r+0xb30>
    389c:	a80b883a 	mov	r5,r21
    38a0:	b00d883a 	mov	r6,r22
    38a4:	e009883a 	mov	r4,fp
    38a8:	00065840 	call	6584 <__lshift>
    38ac:	102b883a 	mov	r21,r2
    38b0:	d9c00e17 	ldw	r7,56(sp)
    38b4:	3801211e 	bne	r7,zero,3d3c <_dtoa_r+0xfbc>
    38b8:	d9800617 	ldw	r6,24(sp)
    38bc:	0181380e 	bge	zero,r6,3da0 <_dtoa_r+0x1020>
    38c0:	d8c00b17 	ldw	r3,44(sp)
    38c4:	1800ab1e 	bne	r3,zero,3b74 <_dtoa_r+0xdf4>
    38c8:	dc800717 	ldw	r18,28(sp)
    38cc:	dcc00617 	ldw	r19,24(sp)
    38d0:	9029883a 	mov	r20,r18
    38d4:	00000206 	br	38e0 <_dtoa_r+0xb60>
    38d8:	0005ed40 	call	5ed4 <__multadd>
    38dc:	1021883a 	mov	r16,r2
    38e0:	a80b883a 	mov	r5,r21
    38e4:	8009883a 	mov	r4,r16
    38e8:	0002b800 	call	2b80 <quorem>
    38ec:	10800c04 	addi	r2,r2,48
    38f0:	90800005 	stb	r2,0(r18)
    38f4:	94800044 	addi	r18,r18,1
    38f8:	9507c83a 	sub	r3,r18,r20
    38fc:	000f883a 	mov	r7,zero
    3900:	01800284 	movi	r6,10
    3904:	800b883a 	mov	r5,r16
    3908:	e009883a 	mov	r4,fp
    390c:	1cfff216 	blt	r3,r19,38d8 <_gp+0xfffc4fd0>
    3910:	1011883a 	mov	r8,r2
    3914:	d8800617 	ldw	r2,24(sp)
    3918:	0082370e 	bge	zero,r2,41f8 <_dtoa_r+0x1478>
    391c:	d9000717 	ldw	r4,28(sp)
    3920:	0025883a 	mov	r18,zero
    3924:	20af883a 	add	r23,r4,r2
    3928:	01800044 	movi	r6,1
    392c:	800b883a 	mov	r5,r16
    3930:	e009883a 	mov	r4,fp
    3934:	da001715 	stw	r8,92(sp)
    3938:	00065840 	call	6584 <__lshift>
    393c:	a80b883a 	mov	r5,r21
    3940:	1009883a 	mov	r4,r2
    3944:	d8800915 	stw	r2,36(sp)
    3948:	00066cc0 	call	66cc <__mcmp>
    394c:	da001717 	ldw	r8,92(sp)
    3950:	0081800e 	bge	zero,r2,3f54 <_dtoa_r+0x11d4>
    3954:	b93fffc3 	ldbu	r4,-1(r23)
    3958:	b8bfffc4 	addi	r2,r23,-1
    395c:	1007883a 	mov	r3,r2
    3960:	01800e44 	movi	r6,57
    3964:	d9c00717 	ldw	r7,28(sp)
    3968:	00000506 	br	3980 <_dtoa_r+0xc00>
    396c:	18ffffc4 	addi	r3,r3,-1
    3970:	11c12326 	beq	r2,r7,3e00 <_dtoa_r+0x1080>
    3974:	19000003 	ldbu	r4,0(r3)
    3978:	102f883a 	mov	r23,r2
    397c:	10bfffc4 	addi	r2,r2,-1
    3980:	21403fcc 	andi	r5,r4,255
    3984:	2940201c 	xori	r5,r5,128
    3988:	297fe004 	addi	r5,r5,-128
    398c:	29bff726 	beq	r5,r6,396c <_gp+0xfffc5064>
    3990:	21000044 	addi	r4,r4,1
    3994:	11000005 	stb	r4,0(r2)
    3998:	a80b883a 	mov	r5,r21
    399c:	e009883a 	mov	r4,fp
    39a0:	0005eac0 	call	5eac <_Bfree>
    39a4:	883ea026 	beq	r17,zero,3428 <_gp+0xfffc4b20>
    39a8:	90000426 	beq	r18,zero,39bc <_dtoa_r+0xc3c>
    39ac:	94400326 	beq	r18,r17,39bc <_dtoa_r+0xc3c>
    39b0:	900b883a 	mov	r5,r18
    39b4:	e009883a 	mov	r4,fp
    39b8:	0005eac0 	call	5eac <_Bfree>
    39bc:	880b883a 	mov	r5,r17
    39c0:	e009883a 	mov	r4,fp
    39c4:	0005eac0 	call	5eac <_Bfree>
    39c8:	003e9706 	br	3428 <_gp+0xfffc4b20>
    39cc:	01800044 	movi	r6,1
    39d0:	d9800e15 	stw	r6,56(sp)
    39d4:	003d9606 	br	3030 <_gp+0xfffc4728>
    39d8:	d8800817 	ldw	r2,32(sp)
    39dc:	d8c00517 	ldw	r3,20(sp)
    39e0:	d8000d15 	stw	zero,52(sp)
    39e4:	10c5c83a 	sub	r2,r2,r3
    39e8:	00c9c83a 	sub	r4,zero,r3
    39ec:	d8800815 	stw	r2,32(sp)
    39f0:	d9000a15 	stw	r4,40(sp)
    39f4:	003d9706 	br	3054 <_gp+0xfffc474c>
    39f8:	05adc83a 	sub	r22,zero,r22
    39fc:	dd800815 	stw	r22,32(sp)
    3a00:	002d883a 	mov	r22,zero
    3a04:	003d8e06 	br	3040 <_gp+0xfffc4738>
    3a08:	d9000517 	ldw	r4,20(sp)
    3a0c:	000cba00 	call	cba0 <__floatsidf>
    3a10:	100d883a 	mov	r6,r2
    3a14:	180f883a 	mov	r7,r3
    3a18:	a009883a 	mov	r4,r20
    3a1c:	880b883a 	mov	r5,r17
    3a20:	000b8b40 	call	b8b4 <__eqdf2>
    3a24:	103d7126 	beq	r2,zero,2fec <_gp+0xfffc46e4>
    3a28:	d9c00517 	ldw	r7,20(sp)
    3a2c:	39ffffc4 	addi	r7,r7,-1
    3a30:	d9c00515 	stw	r7,20(sp)
    3a34:	003d6d06 	br	2fec <_gp+0xfffc46e4>
    3a38:	dd400a17 	ldw	r21,40(sp)
    3a3c:	dd000817 	ldw	r20,32(sp)
    3a40:	0023883a 	mov	r17,zero
    3a44:	003f4806 	br	3768 <_gp+0xfffc4e60>
    3a48:	10e3c83a 	sub	r17,r2,r3
    3a4c:	9448983a 	sll	r4,r18,r17
    3a50:	003d3206 	br	2f1c <_gp+0xfffc4614>
    3a54:	d8000e15 	stw	zero,56(sp)
    3a58:	003d7506 	br	3030 <_gp+0xfffc4728>
    3a5c:	b005883a 	mov	r2,r22
    3a60:	003f4506 	br	3778 <_gp+0xfffc4e70>
    3a64:	dc000915 	stw	r16,36(sp)
    3a68:	d9800a17 	ldw	r6,40(sp)
    3a6c:	d9400917 	ldw	r5,36(sp)
    3a70:	e009883a 	mov	r4,fp
    3a74:	00064440 	call	6444 <__pow5mult>
    3a78:	1021883a 	mov	r16,r2
    3a7c:	003f5a06 	br	37e8 <_gp+0xfffc4ee0>
    3a80:	01c00044 	movi	r7,1
    3a84:	d9c00b15 	stw	r7,44(sp)
    3a88:	d8802217 	ldw	r2,136(sp)
    3a8c:	0081280e 	bge	zero,r2,3f30 <_dtoa_r+0x11b0>
    3a90:	100d883a 	mov	r6,r2
    3a94:	1021883a 	mov	r16,r2
    3a98:	d8800c15 	stw	r2,48(sp)
    3a9c:	d8800615 	stw	r2,24(sp)
    3aa0:	003d8806 	br	30c4 <_gp+0xfffc47bc>
    3aa4:	d8800617 	ldw	r2,24(sp)
    3aa8:	00be9b16 	blt	zero,r2,3518 <_gp+0xfffc4c10>
    3aac:	10010f1e 	bne	r2,zero,3eec <_dtoa_r+0x116c>
    3ab0:	880b883a 	mov	r5,r17
    3ab4:	000d883a 	mov	r6,zero
    3ab8:	01d00534 	movhi	r7,16404
    3abc:	8009883a 	mov	r4,r16
    3ac0:	000bb0c0 	call	bb0c <__muldf3>
    3ac4:	900d883a 	mov	r6,r18
    3ac8:	980f883a 	mov	r7,r19
    3acc:	1009883a 	mov	r4,r2
    3ad0:	180b883a 	mov	r5,r3
    3ad4:	000b93c0 	call	b93c <__gedf2>
    3ad8:	002b883a 	mov	r21,zero
    3adc:	0023883a 	mov	r17,zero
    3ae0:	1000bf16 	blt	r2,zero,3de0 <_dtoa_r+0x1060>
    3ae4:	d9802217 	ldw	r6,136(sp)
    3ae8:	ddc00717 	ldw	r23,28(sp)
    3aec:	018c303a 	nor	r6,zero,r6
    3af0:	d9800515 	stw	r6,20(sp)
    3af4:	a80b883a 	mov	r5,r21
    3af8:	e009883a 	mov	r4,fp
    3afc:	0005eac0 	call	5eac <_Bfree>
    3b00:	883e4926 	beq	r17,zero,3428 <_gp+0xfffc4b20>
    3b04:	003fad06 	br	39bc <_gp+0xfffc50b4>
    3b08:	d9c01117 	ldw	r7,68(sp)
    3b0c:	3801bc26 	beq	r7,zero,4200 <_dtoa_r+0x1480>
    3b10:	10810cc4 	addi	r2,r2,1075
    3b14:	dd400a17 	ldw	r21,40(sp)
    3b18:	dd000817 	ldw	r20,32(sp)
    3b1c:	003f0a06 	br	3748 <_gp+0xfffc4e40>
    3b20:	00800704 	movi	r2,28
    3b24:	d9000817 	ldw	r4,32(sp)
    3b28:	a0a9883a 	add	r20,r20,r2
    3b2c:	b0ad883a 	add	r22,r22,r2
    3b30:	2089883a 	add	r4,r4,r2
    3b34:	d9000815 	stw	r4,32(sp)
    3b38:	003f5106 	br	3880 <_gp+0xfffc4f78>
    3b3c:	d8c00317 	ldw	r3,12(sp)
    3b40:	b8c1fc0e 	bge	r23,r3,4334 <_dtoa_r+0x15b4>
    3b44:	0027883a 	mov	r19,zero
    3b48:	b805883a 	mov	r2,r23
    3b4c:	003f3e06 	br	3848 <_gp+0xfffc4f40>
    3b50:	880b883a 	mov	r5,r17
    3b54:	e009883a 	mov	r4,fp
    3b58:	000f883a 	mov	r7,zero
    3b5c:	01800284 	movi	r6,10
    3b60:	0005ed40 	call	5ed4 <__multadd>
    3b64:	d9000c17 	ldw	r4,48(sp)
    3b68:	1023883a 	mov	r17,r2
    3b6c:	0102040e 	bge	zero,r4,4380 <_dtoa_r+0x1600>
    3b70:	d9000615 	stw	r4,24(sp)
    3b74:	0500050e 	bge	zero,r20,3b8c <_dtoa_r+0xe0c>
    3b78:	880b883a 	mov	r5,r17
    3b7c:	a00d883a 	mov	r6,r20
    3b80:	e009883a 	mov	r4,fp
    3b84:	00065840 	call	6584 <__lshift>
    3b88:	1023883a 	mov	r17,r2
    3b8c:	9801241e 	bne	r19,zero,4020 <_dtoa_r+0x12a0>
    3b90:	8829883a 	mov	r20,r17
    3b94:	d9000617 	ldw	r4,24(sp)
    3b98:	dcc00717 	ldw	r19,28(sp)
    3b9c:	9480004c 	andi	r18,r18,1
    3ba0:	20bfffc4 	addi	r2,r4,-1
    3ba4:	9885883a 	add	r2,r19,r2
    3ba8:	d8800415 	stw	r2,16(sp)
    3bac:	dc800615 	stw	r18,24(sp)
    3bb0:	a80b883a 	mov	r5,r21
    3bb4:	8009883a 	mov	r4,r16
    3bb8:	0002b800 	call	2b80 <quorem>
    3bbc:	880b883a 	mov	r5,r17
    3bc0:	8009883a 	mov	r4,r16
    3bc4:	102f883a 	mov	r23,r2
    3bc8:	00066cc0 	call	66cc <__mcmp>
    3bcc:	a80b883a 	mov	r5,r21
    3bd0:	a00d883a 	mov	r6,r20
    3bd4:	e009883a 	mov	r4,fp
    3bd8:	102d883a 	mov	r22,r2
    3bdc:	000672c0 	call	672c <__mdiff>
    3be0:	1007883a 	mov	r3,r2
    3be4:	10800317 	ldw	r2,12(r2)
    3be8:	bc800c04 	addi	r18,r23,48
    3bec:	180b883a 	mov	r5,r3
    3bf0:	10004e1e 	bne	r2,zero,3d2c <_dtoa_r+0xfac>
    3bf4:	8009883a 	mov	r4,r16
    3bf8:	d8c01615 	stw	r3,88(sp)
    3bfc:	00066cc0 	call	66cc <__mcmp>
    3c00:	d8c01617 	ldw	r3,88(sp)
    3c04:	e009883a 	mov	r4,fp
    3c08:	d8801615 	stw	r2,88(sp)
    3c0c:	180b883a 	mov	r5,r3
    3c10:	0005eac0 	call	5eac <_Bfree>
    3c14:	d8801617 	ldw	r2,88(sp)
    3c18:	1000041e 	bne	r2,zero,3c2c <_dtoa_r+0xeac>
    3c1c:	d9800317 	ldw	r6,12(sp)
    3c20:	3000021e 	bne	r6,zero,3c2c <_dtoa_r+0xeac>
    3c24:	d8c00617 	ldw	r3,24(sp)
    3c28:	18003726 	beq	r3,zero,3d08 <_dtoa_r+0xf88>
    3c2c:	b0002016 	blt	r22,zero,3cb0 <_dtoa_r+0xf30>
    3c30:	b000041e 	bne	r22,zero,3c44 <_dtoa_r+0xec4>
    3c34:	d9000317 	ldw	r4,12(sp)
    3c38:	2000021e 	bne	r4,zero,3c44 <_dtoa_r+0xec4>
    3c3c:	d8c00617 	ldw	r3,24(sp)
    3c40:	18001b26 	beq	r3,zero,3cb0 <_dtoa_r+0xf30>
    3c44:	00810716 	blt	zero,r2,4064 <_dtoa_r+0x12e4>
    3c48:	d8c00417 	ldw	r3,16(sp)
    3c4c:	9d800044 	addi	r22,r19,1
    3c50:	9c800005 	stb	r18,0(r19)
    3c54:	b02f883a 	mov	r23,r22
    3c58:	98c10626 	beq	r19,r3,4074 <_dtoa_r+0x12f4>
    3c5c:	800b883a 	mov	r5,r16
    3c60:	000f883a 	mov	r7,zero
    3c64:	01800284 	movi	r6,10
    3c68:	e009883a 	mov	r4,fp
    3c6c:	0005ed40 	call	5ed4 <__multadd>
    3c70:	1021883a 	mov	r16,r2
    3c74:	000f883a 	mov	r7,zero
    3c78:	01800284 	movi	r6,10
    3c7c:	880b883a 	mov	r5,r17
    3c80:	e009883a 	mov	r4,fp
    3c84:	8d002526 	beq	r17,r20,3d1c <_dtoa_r+0xf9c>
    3c88:	0005ed40 	call	5ed4 <__multadd>
    3c8c:	a00b883a 	mov	r5,r20
    3c90:	000f883a 	mov	r7,zero
    3c94:	01800284 	movi	r6,10
    3c98:	e009883a 	mov	r4,fp
    3c9c:	1023883a 	mov	r17,r2
    3ca0:	0005ed40 	call	5ed4 <__multadd>
    3ca4:	1029883a 	mov	r20,r2
    3ca8:	b027883a 	mov	r19,r22
    3cac:	003fc006 	br	3bb0 <_gp+0xfffc52a8>
    3cb0:	9011883a 	mov	r8,r18
    3cb4:	00800e0e 	bge	zero,r2,3cf0 <_dtoa_r+0xf70>
    3cb8:	800b883a 	mov	r5,r16
    3cbc:	01800044 	movi	r6,1
    3cc0:	e009883a 	mov	r4,fp
    3cc4:	da001715 	stw	r8,92(sp)
    3cc8:	00065840 	call	6584 <__lshift>
    3ccc:	a80b883a 	mov	r5,r21
    3cd0:	1009883a 	mov	r4,r2
    3cd4:	1021883a 	mov	r16,r2
    3cd8:	00066cc0 	call	66cc <__mcmp>
    3cdc:	da001717 	ldw	r8,92(sp)
    3ce0:	0081960e 	bge	zero,r2,433c <_dtoa_r+0x15bc>
    3ce4:	00800e44 	movi	r2,57
    3ce8:	40817026 	beq	r8,r2,42ac <_dtoa_r+0x152c>
    3cec:	ba000c44 	addi	r8,r23,49
    3cf0:	8825883a 	mov	r18,r17
    3cf4:	9dc00044 	addi	r23,r19,1
    3cf8:	9a000005 	stb	r8,0(r19)
    3cfc:	a023883a 	mov	r17,r20
    3d00:	dc000915 	stw	r16,36(sp)
    3d04:	003f2406 	br	3998 <_gp+0xfffc5090>
    3d08:	00800e44 	movi	r2,57
    3d0c:	9011883a 	mov	r8,r18
    3d10:	90816626 	beq	r18,r2,42ac <_dtoa_r+0x152c>
    3d14:	05bff516 	blt	zero,r22,3cec <_gp+0xfffc53e4>
    3d18:	003ff506 	br	3cf0 <_gp+0xfffc53e8>
    3d1c:	0005ed40 	call	5ed4 <__multadd>
    3d20:	1023883a 	mov	r17,r2
    3d24:	1029883a 	mov	r20,r2
    3d28:	003fdf06 	br	3ca8 <_gp+0xfffc53a0>
    3d2c:	e009883a 	mov	r4,fp
    3d30:	0005eac0 	call	5eac <_Bfree>
    3d34:	00800044 	movi	r2,1
    3d38:	003fbc06 	br	3c2c <_gp+0xfffc5324>
    3d3c:	a80b883a 	mov	r5,r21
    3d40:	8009883a 	mov	r4,r16
    3d44:	00066cc0 	call	66cc <__mcmp>
    3d48:	103edb0e 	bge	r2,zero,38b8 <_gp+0xfffc4fb0>
    3d4c:	800b883a 	mov	r5,r16
    3d50:	000f883a 	mov	r7,zero
    3d54:	01800284 	movi	r6,10
    3d58:	e009883a 	mov	r4,fp
    3d5c:	0005ed40 	call	5ed4 <__multadd>
    3d60:	1021883a 	mov	r16,r2
    3d64:	d8800517 	ldw	r2,20(sp)
    3d68:	d8c00b17 	ldw	r3,44(sp)
    3d6c:	10bfffc4 	addi	r2,r2,-1
    3d70:	d8800515 	stw	r2,20(sp)
    3d74:	183f761e 	bne	r3,zero,3b50 <_gp+0xfffc5248>
    3d78:	d9000c17 	ldw	r4,48(sp)
    3d7c:	0101730e 	bge	zero,r4,434c <_dtoa_r+0x15cc>
    3d80:	d9000615 	stw	r4,24(sp)
    3d84:	003ed006 	br	38c8 <_gp+0xfffc4fc0>
    3d88:	00800084 	movi	r2,2
    3d8c:	3081861e 	bne	r6,r2,43a8 <_dtoa_r+0x1628>
    3d90:	d8000b15 	stw	zero,44(sp)
    3d94:	003f3c06 	br	3a88 <_gp+0xfffc5180>
    3d98:	dc000917 	ldw	r16,36(sp)
    3d9c:	003e9206 	br	37e8 <_gp+0xfffc4ee0>
    3da0:	d9c00317 	ldw	r7,12(sp)
    3da4:	00800084 	movi	r2,2
    3da8:	11fec50e 	bge	r2,r7,38c0 <_gp+0xfffc4fb8>
    3dac:	d9000617 	ldw	r4,24(sp)
    3db0:	20013c1e 	bne	r4,zero,42a4 <_dtoa_r+0x1524>
    3db4:	a80b883a 	mov	r5,r21
    3db8:	000f883a 	mov	r7,zero
    3dbc:	01800144 	movi	r6,5
    3dc0:	e009883a 	mov	r4,fp
    3dc4:	0005ed40 	call	5ed4 <__multadd>
    3dc8:	100b883a 	mov	r5,r2
    3dcc:	8009883a 	mov	r4,r16
    3dd0:	102b883a 	mov	r21,r2
    3dd4:	00066cc0 	call	66cc <__mcmp>
    3dd8:	dc000915 	stw	r16,36(sp)
    3ddc:	00bf410e 	bge	zero,r2,3ae4 <_gp+0xfffc51dc>
    3de0:	d9c00717 	ldw	r7,28(sp)
    3de4:	00800c44 	movi	r2,49
    3de8:	38800005 	stb	r2,0(r7)
    3dec:	d8800517 	ldw	r2,20(sp)
    3df0:	3dc00044 	addi	r23,r7,1
    3df4:	10800044 	addi	r2,r2,1
    3df8:	d8800515 	stw	r2,20(sp)
    3dfc:	003f3d06 	br	3af4 <_gp+0xfffc51ec>
    3e00:	d9800517 	ldw	r6,20(sp)
    3e04:	d9c00717 	ldw	r7,28(sp)
    3e08:	00800c44 	movi	r2,49
    3e0c:	31800044 	addi	r6,r6,1
    3e10:	d9800515 	stw	r6,20(sp)
    3e14:	38800005 	stb	r2,0(r7)
    3e18:	003edf06 	br	3998 <_gp+0xfffc5090>
    3e1c:	d8000b15 	stw	zero,44(sp)
    3e20:	003c9f06 	br	30a0 <_gp+0xfffc4798>
    3e24:	903e7e1e 	bne	r18,zero,3820 <_gp+0xfffc4f18>
    3e28:	00800434 	movhi	r2,16
    3e2c:	10bfffc4 	addi	r2,r2,-1
    3e30:	9884703a 	and	r2,r19,r2
    3e34:	1000ea1e 	bne	r2,zero,41e0 <_dtoa_r+0x1460>
    3e38:	9cdffc2c 	andhi	r19,r19,32752
    3e3c:	9800e826 	beq	r19,zero,41e0 <_dtoa_r+0x1460>
    3e40:	d9c00817 	ldw	r7,32(sp)
    3e44:	b5800044 	addi	r22,r22,1
    3e48:	04c00044 	movi	r19,1
    3e4c:	39c00044 	addi	r7,r7,1
    3e50:	d9c00815 	stw	r7,32(sp)
    3e54:	d8800d17 	ldw	r2,52(sp)
    3e58:	103e721e 	bne	r2,zero,3824 <_gp+0xfffc4f1c>
    3e5c:	00800044 	movi	r2,1
    3e60:	003e7906 	br	3848 <_gp+0xfffc4f40>
    3e64:	8009883a 	mov	r4,r16
    3e68:	000cba00 	call	cba0 <__floatsidf>
    3e6c:	d9800f17 	ldw	r6,60(sp)
    3e70:	d9c01017 	ldw	r7,64(sp)
    3e74:	1009883a 	mov	r4,r2
    3e78:	180b883a 	mov	r5,r3
    3e7c:	000bb0c0 	call	bb0c <__muldf3>
    3e80:	000d883a 	mov	r6,zero
    3e84:	01d00734 	movhi	r7,16412
    3e88:	1009883a 	mov	r4,r2
    3e8c:	180b883a 	mov	r5,r3
    3e90:	000a7200 	call	a720 <__adddf3>
    3e94:	047f3034 	movhi	r17,64704
    3e98:	1021883a 	mov	r16,r2
    3e9c:	1c63883a 	add	r17,r3,r17
    3ea0:	d9000f17 	ldw	r4,60(sp)
    3ea4:	d9401017 	ldw	r5,64(sp)
    3ea8:	000d883a 	mov	r6,zero
    3eac:	01d00534 	movhi	r7,16404
    3eb0:	000c2240 	call	c224 <__subdf3>
    3eb4:	800d883a 	mov	r6,r16
    3eb8:	880f883a 	mov	r7,r17
    3ebc:	1009883a 	mov	r4,r2
    3ec0:	180b883a 	mov	r5,r3
    3ec4:	102b883a 	mov	r21,r2
    3ec8:	1829883a 	mov	r20,r3
    3ecc:	000b93c0 	call	b93c <__gedf2>
    3ed0:	00806c16 	blt	zero,r2,4084 <_dtoa_r+0x1304>
    3ed4:	89e0003c 	xorhi	r7,r17,32768
    3ed8:	800d883a 	mov	r6,r16
    3edc:	a809883a 	mov	r4,r21
    3ee0:	a00b883a 	mov	r5,r20
    3ee4:	000ba180 	call	ba18 <__ledf2>
    3ee8:	103d7e0e 	bge	r2,zero,34e4 <_gp+0xfffc4bdc>
    3eec:	002b883a 	mov	r21,zero
    3ef0:	0023883a 	mov	r17,zero
    3ef4:	003efb06 	br	3ae4 <_gp+0xfffc51dc>
    3ef8:	d8800717 	ldw	r2,28(sp)
    3efc:	003bd006 	br	2e40 <_gp+0xfffc4538>
    3f00:	d9000a17 	ldw	r4,40(sp)
    3f04:	d9800d17 	ldw	r6,52(sp)
    3f08:	dd400a15 	stw	r21,40(sp)
    3f0c:	a905c83a 	sub	r2,r21,r4
    3f10:	308d883a 	add	r6,r6,r2
    3f14:	d9800d15 	stw	r6,52(sp)
    3f18:	002b883a 	mov	r21,zero
    3f1c:	003e0606 	br	3738 <_gp+0xfffc4e30>
    3f20:	9023883a 	mov	r17,r18
    3f24:	9829883a 	mov	r20,r19
    3f28:	04000084 	movi	r16,2
    3f2c:	003c9206 	br	3178 <_gp+0xfffc4870>
    3f30:	04000044 	movi	r16,1
    3f34:	dc000c15 	stw	r16,48(sp)
    3f38:	dc000615 	stw	r16,24(sp)
    3f3c:	dc002215 	stw	r16,136(sp)
    3f40:	e0001115 	stw	zero,68(fp)
    3f44:	000b883a 	mov	r5,zero
    3f48:	003c6906 	br	30f0 <_gp+0xfffc47e8>
    3f4c:	3021883a 	mov	r16,r6
    3f50:	003ffb06 	br	3f40 <_gp+0xfffc5638>
    3f54:	1000021e 	bne	r2,zero,3f60 <_dtoa_r+0x11e0>
    3f58:	4200004c 	andi	r8,r8,1
    3f5c:	403e7d1e 	bne	r8,zero,3954 <_gp+0xfffc504c>
    3f60:	01000c04 	movi	r4,48
    3f64:	00000106 	br	3f6c <_dtoa_r+0x11ec>
    3f68:	102f883a 	mov	r23,r2
    3f6c:	b8bfffc4 	addi	r2,r23,-1
    3f70:	10c00007 	ldb	r3,0(r2)
    3f74:	193ffc26 	beq	r3,r4,3f68 <_gp+0xfffc5660>
    3f78:	003e8706 	br	3998 <_gp+0xfffc5090>
    3f7c:	d8800517 	ldw	r2,20(sp)
    3f80:	00a3c83a 	sub	r17,zero,r2
    3f84:	8800a426 	beq	r17,zero,4218 <_dtoa_r+0x1498>
    3f88:	888003cc 	andi	r2,r17,15
    3f8c:	100490fa 	slli	r2,r2,3
    3f90:	00c000f4 	movhi	r3,3
    3f94:	18d2c404 	addi	r3,r3,19216
    3f98:	1885883a 	add	r2,r3,r2
    3f9c:	11800017 	ldw	r6,0(r2)
    3fa0:	11c00117 	ldw	r7,4(r2)
    3fa4:	9009883a 	mov	r4,r18
    3fa8:	980b883a 	mov	r5,r19
    3fac:	8823d13a 	srai	r17,r17,4
    3fb0:	000bb0c0 	call	bb0c <__muldf3>
    3fb4:	d8800f15 	stw	r2,60(sp)
    3fb8:	d8c01015 	stw	r3,64(sp)
    3fbc:	8800e826 	beq	r17,zero,4360 <_dtoa_r+0x15e0>
    3fc0:	050000f4 	movhi	r20,3
    3fc4:	a512ba04 	addi	r20,r20,19176
    3fc8:	04000084 	movi	r16,2
    3fcc:	8980004c 	andi	r6,r17,1
    3fd0:	1009883a 	mov	r4,r2
    3fd4:	8823d07a 	srai	r17,r17,1
    3fd8:	180b883a 	mov	r5,r3
    3fdc:	30000426 	beq	r6,zero,3ff0 <_dtoa_r+0x1270>
    3fe0:	a1800017 	ldw	r6,0(r20)
    3fe4:	a1c00117 	ldw	r7,4(r20)
    3fe8:	84000044 	addi	r16,r16,1
    3fec:	000bb0c0 	call	bb0c <__muldf3>
    3ff0:	a5000204 	addi	r20,r20,8
    3ff4:	883ff51e 	bne	r17,zero,3fcc <_gp+0xfffc56c4>
    3ff8:	d8800f15 	stw	r2,60(sp)
    3ffc:	d8c01015 	stw	r3,64(sp)
    4000:	003c7606 	br	31dc <_gp+0xfffc48d4>
    4004:	00c00c04 	movi	r3,48
    4008:	10c00005 	stb	r3,0(r2)
    400c:	d8c00517 	ldw	r3,20(sp)
    4010:	bd3fffc3 	ldbu	r20,-1(r23)
    4014:	18c00044 	addi	r3,r3,1
    4018:	d8c00515 	stw	r3,20(sp)
    401c:	003db906 	br	3704 <_gp+0xfffc4dfc>
    4020:	89400117 	ldw	r5,4(r17)
    4024:	e009883a 	mov	r4,fp
    4028:	0005e040 	call	5e04 <_Balloc>
    402c:	89800417 	ldw	r6,16(r17)
    4030:	89400304 	addi	r5,r17,12
    4034:	11000304 	addi	r4,r2,12
    4038:	31800084 	addi	r6,r6,2
    403c:	318d883a 	add	r6,r6,r6
    4040:	318d883a 	add	r6,r6,r6
    4044:	1027883a 	mov	r19,r2
    4048:	0005b940 	call	5b94 <memcpy>
    404c:	01800044 	movi	r6,1
    4050:	980b883a 	mov	r5,r19
    4054:	e009883a 	mov	r4,fp
    4058:	00065840 	call	6584 <__lshift>
    405c:	1029883a 	mov	r20,r2
    4060:	003ecc06 	br	3b94 <_gp+0xfffc528c>
    4064:	00800e44 	movi	r2,57
    4068:	90809026 	beq	r18,r2,42ac <_dtoa_r+0x152c>
    406c:	92000044 	addi	r8,r18,1
    4070:	003f1f06 	br	3cf0 <_gp+0xfffc53e8>
    4074:	9011883a 	mov	r8,r18
    4078:	8825883a 	mov	r18,r17
    407c:	a023883a 	mov	r17,r20
    4080:	003e2906 	br	3928 <_gp+0xfffc5020>
    4084:	002b883a 	mov	r21,zero
    4088:	0023883a 	mov	r17,zero
    408c:	003f5406 	br	3de0 <_gp+0xfffc54d8>
    4090:	61bfffc4 	addi	r6,r12,-1
    4094:	300490fa 	slli	r2,r6,3
    4098:	00c000f4 	movhi	r3,3
    409c:	18d2c404 	addi	r3,r3,19216
    40a0:	1885883a 	add	r2,r3,r2
    40a4:	11000017 	ldw	r4,0(r2)
    40a8:	11400117 	ldw	r5,4(r2)
    40ac:	d8800717 	ldw	r2,28(sp)
    40b0:	880f883a 	mov	r7,r17
    40b4:	d9801215 	stw	r6,72(sp)
    40b8:	800d883a 	mov	r6,r16
    40bc:	db001615 	stw	r12,88(sp)
    40c0:	15c00044 	addi	r23,r2,1
    40c4:	000bb0c0 	call	bb0c <__muldf3>
    40c8:	d9401017 	ldw	r5,64(sp)
    40cc:	d9000f17 	ldw	r4,60(sp)
    40d0:	d8c01515 	stw	r3,84(sp)
    40d4:	d8801415 	stw	r2,80(sp)
    40d8:	000cb200 	call	cb20 <__fixdfsi>
    40dc:	1009883a 	mov	r4,r2
    40e0:	1021883a 	mov	r16,r2
    40e4:	000cba00 	call	cba0 <__floatsidf>
    40e8:	d9000f17 	ldw	r4,60(sp)
    40ec:	d9401017 	ldw	r5,64(sp)
    40f0:	100d883a 	mov	r6,r2
    40f4:	180f883a 	mov	r7,r3
    40f8:	000c2240 	call	c224 <__subdf3>
    40fc:	1829883a 	mov	r20,r3
    4100:	d8c00717 	ldw	r3,28(sp)
    4104:	84000c04 	addi	r16,r16,48
    4108:	1023883a 	mov	r17,r2
    410c:	1c000005 	stb	r16,0(r3)
    4110:	db001617 	ldw	r12,88(sp)
    4114:	00800044 	movi	r2,1
    4118:	60802226 	beq	r12,r2,41a4 <_dtoa_r+0x1424>
    411c:	d9c00717 	ldw	r7,28(sp)
    4120:	8805883a 	mov	r2,r17
    4124:	b82b883a 	mov	r21,r23
    4128:	3b19883a 	add	r12,r7,r12
    412c:	6023883a 	mov	r17,r12
    4130:	a007883a 	mov	r3,r20
    4134:	dc800f15 	stw	r18,60(sp)
    4138:	000d883a 	mov	r6,zero
    413c:	01d00934 	movhi	r7,16420
    4140:	1009883a 	mov	r4,r2
    4144:	180b883a 	mov	r5,r3
    4148:	000bb0c0 	call	bb0c <__muldf3>
    414c:	180b883a 	mov	r5,r3
    4150:	1009883a 	mov	r4,r2
    4154:	1829883a 	mov	r20,r3
    4158:	1025883a 	mov	r18,r2
    415c:	000cb200 	call	cb20 <__fixdfsi>
    4160:	1009883a 	mov	r4,r2
    4164:	1021883a 	mov	r16,r2
    4168:	000cba00 	call	cba0 <__floatsidf>
    416c:	100d883a 	mov	r6,r2
    4170:	180f883a 	mov	r7,r3
    4174:	9009883a 	mov	r4,r18
    4178:	a00b883a 	mov	r5,r20
    417c:	84000c04 	addi	r16,r16,48
    4180:	000c2240 	call	c224 <__subdf3>
    4184:	ad400044 	addi	r21,r21,1
    4188:	ac3fffc5 	stb	r16,-1(r21)
    418c:	ac7fea1e 	bne	r21,r17,4138 <_gp+0xfffc5830>
    4190:	1023883a 	mov	r17,r2
    4194:	d8801217 	ldw	r2,72(sp)
    4198:	dc800f17 	ldw	r18,60(sp)
    419c:	1829883a 	mov	r20,r3
    41a0:	b8af883a 	add	r23,r23,r2
    41a4:	d9001417 	ldw	r4,80(sp)
    41a8:	d9401517 	ldw	r5,84(sp)
    41ac:	000d883a 	mov	r6,zero
    41b0:	01cff834 	movhi	r7,16352
    41b4:	000a7200 	call	a720 <__adddf3>
    41b8:	880d883a 	mov	r6,r17
    41bc:	a00f883a 	mov	r7,r20
    41c0:	1009883a 	mov	r4,r2
    41c4:	180b883a 	mov	r5,r3
    41c8:	000ba180 	call	ba18 <__ledf2>
    41cc:	10003e0e 	bge	r2,zero,42c8 <_dtoa_r+0x1548>
    41d0:	d9001317 	ldw	r4,76(sp)
    41d4:	bd3fffc3 	ldbu	r20,-1(r23)
    41d8:	d9000515 	stw	r4,20(sp)
    41dc:	003d3b06 	br	36cc <_gp+0xfffc4dc4>
    41e0:	0027883a 	mov	r19,zero
    41e4:	003f1b06 	br	3e54 <_gp+0xfffc554c>
    41e8:	d8800817 	ldw	r2,32(sp)
    41ec:	11e9c83a 	sub	r20,r2,r7
    41f0:	0005883a 	mov	r2,zero
    41f4:	003d5406 	br	3748 <_gp+0xfffc4e40>
    41f8:	00800044 	movi	r2,1
    41fc:	003dc706 	br	391c <_gp+0xfffc5014>
    4200:	d8c00217 	ldw	r3,8(sp)
    4204:	00800d84 	movi	r2,54
    4208:	dd400a17 	ldw	r21,40(sp)
    420c:	10c5c83a 	sub	r2,r2,r3
    4210:	dd000817 	ldw	r20,32(sp)
    4214:	003d4c06 	br	3748 <_gp+0xfffc4e40>
    4218:	dc800f15 	stw	r18,60(sp)
    421c:	dcc01015 	stw	r19,64(sp)
    4220:	04000084 	movi	r16,2
    4224:	003bed06 	br	31dc <_gp+0xfffc48d4>
    4228:	d9000617 	ldw	r4,24(sp)
    422c:	203f0d26 	beq	r4,zero,3e64 <_gp+0xfffc555c>
    4230:	d9800c17 	ldw	r6,48(sp)
    4234:	01bcab0e 	bge	zero,r6,34e4 <_gp+0xfffc4bdc>
    4238:	d9401017 	ldw	r5,64(sp)
    423c:	d9000f17 	ldw	r4,60(sp)
    4240:	000d883a 	mov	r6,zero
    4244:	01d00934 	movhi	r7,16420
    4248:	000bb0c0 	call	bb0c <__muldf3>
    424c:	81000044 	addi	r4,r16,1
    4250:	d8800f15 	stw	r2,60(sp)
    4254:	d8c01015 	stw	r3,64(sp)
    4258:	000cba00 	call	cba0 <__floatsidf>
    425c:	d9800f17 	ldw	r6,60(sp)
    4260:	d9c01017 	ldw	r7,64(sp)
    4264:	1009883a 	mov	r4,r2
    4268:	180b883a 	mov	r5,r3
    426c:	000bb0c0 	call	bb0c <__muldf3>
    4270:	01d00734 	movhi	r7,16412
    4274:	000d883a 	mov	r6,zero
    4278:	1009883a 	mov	r4,r2
    427c:	180b883a 	mov	r5,r3
    4280:	000a7200 	call	a720 <__adddf3>
    4284:	d9c00517 	ldw	r7,20(sp)
    4288:	047f3034 	movhi	r17,64704
    428c:	1021883a 	mov	r16,r2
    4290:	39ffffc4 	addi	r7,r7,-1
    4294:	d9c01315 	stw	r7,76(sp)
    4298:	1c63883a 	add	r17,r3,r17
    429c:	db000c17 	ldw	r12,48(sp)
    42a0:	003bea06 	br	324c <_gp+0xfffc4944>
    42a4:	dc000915 	stw	r16,36(sp)
    42a8:	003e0e06 	br	3ae4 <_gp+0xfffc51dc>
    42ac:	01000e44 	movi	r4,57
    42b0:	8825883a 	mov	r18,r17
    42b4:	9dc00044 	addi	r23,r19,1
    42b8:	99000005 	stb	r4,0(r19)
    42bc:	a023883a 	mov	r17,r20
    42c0:	dc000915 	stw	r16,36(sp)
    42c4:	003da406 	br	3958 <_gp+0xfffc5050>
    42c8:	d9801417 	ldw	r6,80(sp)
    42cc:	d9c01517 	ldw	r7,84(sp)
    42d0:	0009883a 	mov	r4,zero
    42d4:	014ff834 	movhi	r5,16352
    42d8:	000c2240 	call	c224 <__subdf3>
    42dc:	880d883a 	mov	r6,r17
    42e0:	a00f883a 	mov	r7,r20
    42e4:	1009883a 	mov	r4,r2
    42e8:	180b883a 	mov	r5,r3
    42ec:	000b93c0 	call	b93c <__gedf2>
    42f0:	00bc7c0e 	bge	zero,r2,34e4 <_gp+0xfffc4bdc>
    42f4:	01000c04 	movi	r4,48
    42f8:	00000106 	br	4300 <_dtoa_r+0x1580>
    42fc:	102f883a 	mov	r23,r2
    4300:	b8bfffc4 	addi	r2,r23,-1
    4304:	10c00007 	ldb	r3,0(r2)
    4308:	193ffc26 	beq	r3,r4,42fc <_gp+0xfffc59f4>
    430c:	d9801317 	ldw	r6,76(sp)
    4310:	d9800515 	stw	r6,20(sp)
    4314:	003c4406 	br	3428 <_gp+0xfffc4b20>
    4318:	d9801317 	ldw	r6,76(sp)
    431c:	d9800515 	stw	r6,20(sp)
    4320:	003cea06 	br	36cc <_gp+0xfffc4dc4>
    4324:	dd800f17 	ldw	r22,60(sp)
    4328:	dcc01017 	ldw	r19,64(sp)
    432c:	dc801217 	ldw	r18,72(sp)
    4330:	003c6c06 	br	34e4 <_gp+0xfffc4bdc>
    4334:	903e031e 	bne	r18,zero,3b44 <_gp+0xfffc523c>
    4338:	003ebb06 	br	3e28 <_gp+0xfffc5520>
    433c:	103e6c1e 	bne	r2,zero,3cf0 <_gp+0xfffc53e8>
    4340:	4080004c 	andi	r2,r8,1
    4344:	103e6a26 	beq	r2,zero,3cf0 <_gp+0xfffc53e8>
    4348:	003e6606 	br	3ce4 <_gp+0xfffc53dc>
    434c:	d8c00317 	ldw	r3,12(sp)
    4350:	00800084 	movi	r2,2
    4354:	10c02916 	blt	r2,r3,43fc <_dtoa_r+0x167c>
    4358:	d9000c17 	ldw	r4,48(sp)
    435c:	003e8806 	br	3d80 <_gp+0xfffc5478>
    4360:	04000084 	movi	r16,2
    4364:	003b9d06 	br	31dc <_gp+0xfffc48d4>
    4368:	d9001317 	ldw	r4,76(sp)
    436c:	d9000515 	stw	r4,20(sp)
    4370:	003cd606 	br	36cc <_gp+0xfffc4dc4>
    4374:	d8801317 	ldw	r2,76(sp)
    4378:	d8800515 	stw	r2,20(sp)
    437c:	003c2a06 	br	3428 <_gp+0xfffc4b20>
    4380:	d9800317 	ldw	r6,12(sp)
    4384:	00800084 	movi	r2,2
    4388:	11801516 	blt	r2,r6,43e0 <_dtoa_r+0x1660>
    438c:	d9c00c17 	ldw	r7,48(sp)
    4390:	d9c00615 	stw	r7,24(sp)
    4394:	003df706 	br	3b74 <_gp+0xfffc526c>
    4398:	193d3926 	beq	r3,r4,3880 <_gp+0xfffc4f78>
    439c:	00c00f04 	movi	r3,60
    43a0:	1885c83a 	sub	r2,r3,r2
    43a4:	003ddf06 	br	3b24 <_gp+0xfffc521c>
    43a8:	e009883a 	mov	r4,fp
    43ac:	e0001115 	stw	zero,68(fp)
    43b0:	000b883a 	mov	r5,zero
    43b4:	0005e040 	call	5e04 <_Balloc>
    43b8:	d8800715 	stw	r2,28(sp)
    43bc:	d8c00717 	ldw	r3,28(sp)
    43c0:	00bfffc4 	movi	r2,-1
    43c4:	01000044 	movi	r4,1
    43c8:	d8800c15 	stw	r2,48(sp)
    43cc:	e0c01015 	stw	r3,64(fp)
    43d0:	d9000b15 	stw	r4,44(sp)
    43d4:	d8800615 	stw	r2,24(sp)
    43d8:	d8002215 	stw	zero,136(sp)
    43dc:	003c4106 	br	34e4 <_gp+0xfffc4bdc>
    43e0:	d8c00c17 	ldw	r3,48(sp)
    43e4:	d8c00615 	stw	r3,24(sp)
    43e8:	003e7006 	br	3dac <_gp+0xfffc54a4>
    43ec:	04400044 	movi	r17,1
    43f0:	003b2006 	br	3074 <_gp+0xfffc476c>
    43f4:	000b883a 	mov	r5,zero
    43f8:	003b3d06 	br	30f0 <_gp+0xfffc47e8>
    43fc:	d8800c17 	ldw	r2,48(sp)
    4400:	d8800615 	stw	r2,24(sp)
    4404:	003e6906 	br	3dac <_gp+0xfffc54a4>

00004408 <__sflush_r>:
    4408:	2880030b 	ldhu	r2,12(r5)
    440c:	defffb04 	addi	sp,sp,-20
    4410:	dcc00315 	stw	r19,12(sp)
    4414:	dc400115 	stw	r17,4(sp)
    4418:	dfc00415 	stw	ra,16(sp)
    441c:	dc800215 	stw	r18,8(sp)
    4420:	dc000015 	stw	r16,0(sp)
    4424:	10c0020c 	andi	r3,r2,8
    4428:	2823883a 	mov	r17,r5
    442c:	2027883a 	mov	r19,r4
    4430:	1800311e 	bne	r3,zero,44f8 <__sflush_r+0xf0>
    4434:	28c00117 	ldw	r3,4(r5)
    4438:	10820014 	ori	r2,r2,2048
    443c:	2880030d 	sth	r2,12(r5)
    4440:	00c04b0e 	bge	zero,r3,4570 <__sflush_r+0x168>
    4444:	8a000a17 	ldw	r8,40(r17)
    4448:	40002326 	beq	r8,zero,44d8 <__sflush_r+0xd0>
    444c:	9c000017 	ldw	r16,0(r19)
    4450:	10c4000c 	andi	r3,r2,4096
    4454:	98000015 	stw	zero,0(r19)
    4458:	18004826 	beq	r3,zero,457c <__sflush_r+0x174>
    445c:	89801417 	ldw	r6,80(r17)
    4460:	10c0010c 	andi	r3,r2,4
    4464:	18000626 	beq	r3,zero,4480 <__sflush_r+0x78>
    4468:	88c00117 	ldw	r3,4(r17)
    446c:	88800c17 	ldw	r2,48(r17)
    4470:	30cdc83a 	sub	r6,r6,r3
    4474:	10000226 	beq	r2,zero,4480 <__sflush_r+0x78>
    4478:	88800f17 	ldw	r2,60(r17)
    447c:	308dc83a 	sub	r6,r6,r2
    4480:	89400717 	ldw	r5,28(r17)
    4484:	000f883a 	mov	r7,zero
    4488:	9809883a 	mov	r4,r19
    448c:	403ee83a 	callr	r8
    4490:	00ffffc4 	movi	r3,-1
    4494:	10c04426 	beq	r2,r3,45a8 <__sflush_r+0x1a0>
    4498:	88c0030b 	ldhu	r3,12(r17)
    449c:	89000417 	ldw	r4,16(r17)
    44a0:	88000115 	stw	zero,4(r17)
    44a4:	197dffcc 	andi	r5,r3,63487
    44a8:	8940030d 	sth	r5,12(r17)
    44ac:	89000015 	stw	r4,0(r17)
    44b0:	18c4000c 	andi	r3,r3,4096
    44b4:	18002c1e 	bne	r3,zero,4568 <__sflush_r+0x160>
    44b8:	89400c17 	ldw	r5,48(r17)
    44bc:	9c000015 	stw	r16,0(r19)
    44c0:	28000526 	beq	r5,zero,44d8 <__sflush_r+0xd0>
    44c4:	88801004 	addi	r2,r17,64
    44c8:	28800226 	beq	r5,r2,44d4 <__sflush_r+0xcc>
    44cc:	9809883a 	mov	r4,r19
    44d0:	0004b740 	call	4b74 <_free_r>
    44d4:	88000c15 	stw	zero,48(r17)
    44d8:	0005883a 	mov	r2,zero
    44dc:	dfc00417 	ldw	ra,16(sp)
    44e0:	dcc00317 	ldw	r19,12(sp)
    44e4:	dc800217 	ldw	r18,8(sp)
    44e8:	dc400117 	ldw	r17,4(sp)
    44ec:	dc000017 	ldw	r16,0(sp)
    44f0:	dec00504 	addi	sp,sp,20
    44f4:	f800283a 	ret
    44f8:	2c800417 	ldw	r18,16(r5)
    44fc:	903ff626 	beq	r18,zero,44d8 <_gp+0xfffc5bd0>
    4500:	2c000017 	ldw	r16,0(r5)
    4504:	108000cc 	andi	r2,r2,3
    4508:	2c800015 	stw	r18,0(r5)
    450c:	84a1c83a 	sub	r16,r16,r18
    4510:	1000131e 	bne	r2,zero,4560 <__sflush_r+0x158>
    4514:	28800517 	ldw	r2,20(r5)
    4518:	88800215 	stw	r2,8(r17)
    451c:	04000316 	blt	zero,r16,452c <__sflush_r+0x124>
    4520:	003fed06 	br	44d8 <_gp+0xfffc5bd0>
    4524:	90a5883a 	add	r18,r18,r2
    4528:	043feb0e 	bge	zero,r16,44d8 <_gp+0xfffc5bd0>
    452c:	88800917 	ldw	r2,36(r17)
    4530:	89400717 	ldw	r5,28(r17)
    4534:	800f883a 	mov	r7,r16
    4538:	900d883a 	mov	r6,r18
    453c:	9809883a 	mov	r4,r19
    4540:	103ee83a 	callr	r2
    4544:	80a1c83a 	sub	r16,r16,r2
    4548:	00bff616 	blt	zero,r2,4524 <_gp+0xfffc5c1c>
    454c:	88c0030b 	ldhu	r3,12(r17)
    4550:	00bfffc4 	movi	r2,-1
    4554:	18c01014 	ori	r3,r3,64
    4558:	88c0030d 	sth	r3,12(r17)
    455c:	003fdf06 	br	44dc <_gp+0xfffc5bd4>
    4560:	0005883a 	mov	r2,zero
    4564:	003fec06 	br	4518 <_gp+0xfffc5c10>
    4568:	88801415 	stw	r2,80(r17)
    456c:	003fd206 	br	44b8 <_gp+0xfffc5bb0>
    4570:	28c00f17 	ldw	r3,60(r5)
    4574:	00ffb316 	blt	zero,r3,4444 <_gp+0xfffc5b3c>
    4578:	003fd706 	br	44d8 <_gp+0xfffc5bd0>
    457c:	89400717 	ldw	r5,28(r17)
    4580:	000d883a 	mov	r6,zero
    4584:	01c00044 	movi	r7,1
    4588:	9809883a 	mov	r4,r19
    458c:	403ee83a 	callr	r8
    4590:	100d883a 	mov	r6,r2
    4594:	00bfffc4 	movi	r2,-1
    4598:	30801426 	beq	r6,r2,45ec <__sflush_r+0x1e4>
    459c:	8880030b 	ldhu	r2,12(r17)
    45a0:	8a000a17 	ldw	r8,40(r17)
    45a4:	003fae06 	br	4460 <_gp+0xfffc5b58>
    45a8:	98c00017 	ldw	r3,0(r19)
    45ac:	183fba26 	beq	r3,zero,4498 <_gp+0xfffc5b90>
    45b0:	01000744 	movi	r4,29
    45b4:	19000626 	beq	r3,r4,45d0 <__sflush_r+0x1c8>
    45b8:	01000584 	movi	r4,22
    45bc:	19000426 	beq	r3,r4,45d0 <__sflush_r+0x1c8>
    45c0:	88c0030b 	ldhu	r3,12(r17)
    45c4:	18c01014 	ori	r3,r3,64
    45c8:	88c0030d 	sth	r3,12(r17)
    45cc:	003fc306 	br	44dc <_gp+0xfffc5bd4>
    45d0:	8880030b 	ldhu	r2,12(r17)
    45d4:	88c00417 	ldw	r3,16(r17)
    45d8:	88000115 	stw	zero,4(r17)
    45dc:	10bdffcc 	andi	r2,r2,63487
    45e0:	8880030d 	sth	r2,12(r17)
    45e4:	88c00015 	stw	r3,0(r17)
    45e8:	003fb306 	br	44b8 <_gp+0xfffc5bb0>
    45ec:	98800017 	ldw	r2,0(r19)
    45f0:	103fea26 	beq	r2,zero,459c <_gp+0xfffc5c94>
    45f4:	00c00744 	movi	r3,29
    45f8:	10c00226 	beq	r2,r3,4604 <__sflush_r+0x1fc>
    45fc:	00c00584 	movi	r3,22
    4600:	10c0031e 	bne	r2,r3,4610 <__sflush_r+0x208>
    4604:	9c000015 	stw	r16,0(r19)
    4608:	0005883a 	mov	r2,zero
    460c:	003fb306 	br	44dc <_gp+0xfffc5bd4>
    4610:	88c0030b 	ldhu	r3,12(r17)
    4614:	3005883a 	mov	r2,r6
    4618:	18c01014 	ori	r3,r3,64
    461c:	88c0030d 	sth	r3,12(r17)
    4620:	003fae06 	br	44dc <_gp+0xfffc5bd4>

00004624 <_fflush_r>:
    4624:	defffd04 	addi	sp,sp,-12
    4628:	dc000115 	stw	r16,4(sp)
    462c:	dfc00215 	stw	ra,8(sp)
    4630:	2021883a 	mov	r16,r4
    4634:	20000226 	beq	r4,zero,4640 <_fflush_r+0x1c>
    4638:	20800e17 	ldw	r2,56(r4)
    463c:	10000c26 	beq	r2,zero,4670 <_fflush_r+0x4c>
    4640:	2880030f 	ldh	r2,12(r5)
    4644:	1000051e 	bne	r2,zero,465c <_fflush_r+0x38>
    4648:	0005883a 	mov	r2,zero
    464c:	dfc00217 	ldw	ra,8(sp)
    4650:	dc000117 	ldw	r16,4(sp)
    4654:	dec00304 	addi	sp,sp,12
    4658:	f800283a 	ret
    465c:	8009883a 	mov	r4,r16
    4660:	dfc00217 	ldw	ra,8(sp)
    4664:	dc000117 	ldw	r16,4(sp)
    4668:	dec00304 	addi	sp,sp,12
    466c:	00044081 	jmpi	4408 <__sflush_r>
    4670:	d9400015 	stw	r5,0(sp)
    4674:	0004a000 	call	4a00 <__sinit>
    4678:	d9400017 	ldw	r5,0(sp)
    467c:	003ff006 	br	4640 <_gp+0xfffc5d38>

00004680 <fflush>:
    4680:	20000526 	beq	r4,zero,4698 <fflush+0x18>
    4684:	008000f4 	movhi	r2,3
    4688:	109a4404 	addi	r2,r2,26896
    468c:	200b883a 	mov	r5,r4
    4690:	11000017 	ldw	r4,0(r2)
    4694:	00046241 	jmpi	4624 <_fflush_r>
    4698:	008000f4 	movhi	r2,3
    469c:	109a4304 	addi	r2,r2,26892
    46a0:	11000017 	ldw	r4,0(r2)
    46a4:	01400034 	movhi	r5,0
    46a8:	29518904 	addi	r5,r5,17956
    46ac:	0004f481 	jmpi	4f48 <_fwalk_reent>

000046b0 <__fp_unlock>:
    46b0:	0005883a 	mov	r2,zero
    46b4:	f800283a 	ret

000046b8 <_cleanup_r>:
    46b8:	01400074 	movhi	r5,1
    46bc:	29624e04 	addi	r5,r5,-30408
    46c0:	0004f481 	jmpi	4f48 <_fwalk_reent>

000046c4 <__sinit.part.1>:
    46c4:	defff704 	addi	sp,sp,-36
    46c8:	00c00034 	movhi	r3,0
    46cc:	dfc00815 	stw	ra,32(sp)
    46d0:	ddc00715 	stw	r23,28(sp)
    46d4:	dd800615 	stw	r22,24(sp)
    46d8:	dd400515 	stw	r21,20(sp)
    46dc:	dd000415 	stw	r20,16(sp)
    46e0:	dcc00315 	stw	r19,12(sp)
    46e4:	dc800215 	stw	r18,8(sp)
    46e8:	dc400115 	stw	r17,4(sp)
    46ec:	dc000015 	stw	r16,0(sp)
    46f0:	18d1ae04 	addi	r3,r3,18104
    46f4:	24000117 	ldw	r16,4(r4)
    46f8:	20c00f15 	stw	r3,60(r4)
    46fc:	2080bb04 	addi	r2,r4,748
    4700:	00c000c4 	movi	r3,3
    4704:	20c0b915 	stw	r3,740(r4)
    4708:	2080ba15 	stw	r2,744(r4)
    470c:	2000b815 	stw	zero,736(r4)
    4710:	05c00204 	movi	r23,8
    4714:	00800104 	movi	r2,4
    4718:	2025883a 	mov	r18,r4
    471c:	b80d883a 	mov	r6,r23
    4720:	81001704 	addi	r4,r16,92
    4724:	000b883a 	mov	r5,zero
    4728:	80000015 	stw	zero,0(r16)
    472c:	80000115 	stw	zero,4(r16)
    4730:	80000215 	stw	zero,8(r16)
    4734:	8080030d 	sth	r2,12(r16)
    4738:	80001915 	stw	zero,100(r16)
    473c:	8000038d 	sth	zero,14(r16)
    4740:	80000415 	stw	zero,16(r16)
    4744:	80000515 	stw	zero,20(r16)
    4748:	80000615 	stw	zero,24(r16)
    474c:	0005cdc0 	call	5cdc <memset>
    4750:	05800034 	movhi	r22,0
    4754:	94400217 	ldw	r17,8(r18)
    4758:	05400034 	movhi	r21,0
    475c:	05000034 	movhi	r20,0
    4760:	04c00034 	movhi	r19,0
    4764:	b59bb204 	addi	r22,r22,28360
    4768:	ad5bc904 	addi	r21,r21,28452
    476c:	a51be804 	addi	r20,r20,28576
    4770:	9cdbff04 	addi	r19,r19,28668
    4774:	85800815 	stw	r22,32(r16)
    4778:	85400915 	stw	r21,36(r16)
    477c:	85000a15 	stw	r20,40(r16)
    4780:	84c00b15 	stw	r19,44(r16)
    4784:	84000715 	stw	r16,28(r16)
    4788:	00800284 	movi	r2,10
    478c:	8880030d 	sth	r2,12(r17)
    4790:	00800044 	movi	r2,1
    4794:	b80d883a 	mov	r6,r23
    4798:	89001704 	addi	r4,r17,92
    479c:	000b883a 	mov	r5,zero
    47a0:	88000015 	stw	zero,0(r17)
    47a4:	88000115 	stw	zero,4(r17)
    47a8:	88000215 	stw	zero,8(r17)
    47ac:	88001915 	stw	zero,100(r17)
    47b0:	8880038d 	sth	r2,14(r17)
    47b4:	88000415 	stw	zero,16(r17)
    47b8:	88000515 	stw	zero,20(r17)
    47bc:	88000615 	stw	zero,24(r17)
    47c0:	0005cdc0 	call	5cdc <memset>
    47c4:	94000317 	ldw	r16,12(r18)
    47c8:	00800484 	movi	r2,18
    47cc:	8c400715 	stw	r17,28(r17)
    47d0:	8d800815 	stw	r22,32(r17)
    47d4:	8d400915 	stw	r21,36(r17)
    47d8:	8d000a15 	stw	r20,40(r17)
    47dc:	8cc00b15 	stw	r19,44(r17)
    47e0:	8080030d 	sth	r2,12(r16)
    47e4:	00800084 	movi	r2,2
    47e8:	80000015 	stw	zero,0(r16)
    47ec:	80000115 	stw	zero,4(r16)
    47f0:	80000215 	stw	zero,8(r16)
    47f4:	80001915 	stw	zero,100(r16)
    47f8:	8080038d 	sth	r2,14(r16)
    47fc:	80000415 	stw	zero,16(r16)
    4800:	80000515 	stw	zero,20(r16)
    4804:	80000615 	stw	zero,24(r16)
    4808:	b80d883a 	mov	r6,r23
    480c:	000b883a 	mov	r5,zero
    4810:	81001704 	addi	r4,r16,92
    4814:	0005cdc0 	call	5cdc <memset>
    4818:	00800044 	movi	r2,1
    481c:	84000715 	stw	r16,28(r16)
    4820:	85800815 	stw	r22,32(r16)
    4824:	85400915 	stw	r21,36(r16)
    4828:	85000a15 	stw	r20,40(r16)
    482c:	84c00b15 	stw	r19,44(r16)
    4830:	90800e15 	stw	r2,56(r18)
    4834:	dfc00817 	ldw	ra,32(sp)
    4838:	ddc00717 	ldw	r23,28(sp)
    483c:	dd800617 	ldw	r22,24(sp)
    4840:	dd400517 	ldw	r21,20(sp)
    4844:	dd000417 	ldw	r20,16(sp)
    4848:	dcc00317 	ldw	r19,12(sp)
    484c:	dc800217 	ldw	r18,8(sp)
    4850:	dc400117 	ldw	r17,4(sp)
    4854:	dc000017 	ldw	r16,0(sp)
    4858:	dec00904 	addi	sp,sp,36
    485c:	f800283a 	ret

00004860 <__fp_lock>:
    4860:	0005883a 	mov	r2,zero
    4864:	f800283a 	ret

00004868 <__sfmoreglue>:
    4868:	defffc04 	addi	sp,sp,-16
    486c:	dc400115 	stw	r17,4(sp)
    4870:	2c7fffc4 	addi	r17,r5,-1
    4874:	8c401a24 	muli	r17,r17,104
    4878:	dc800215 	stw	r18,8(sp)
    487c:	2825883a 	mov	r18,r5
    4880:	89401d04 	addi	r5,r17,116
    4884:	dc000015 	stw	r16,0(sp)
    4888:	dfc00315 	stw	ra,12(sp)
    488c:	00052a40 	call	52a4 <_malloc_r>
    4890:	1021883a 	mov	r16,r2
    4894:	10000726 	beq	r2,zero,48b4 <__sfmoreglue+0x4c>
    4898:	11000304 	addi	r4,r2,12
    489c:	10000015 	stw	zero,0(r2)
    48a0:	14800115 	stw	r18,4(r2)
    48a4:	11000215 	stw	r4,8(r2)
    48a8:	89801a04 	addi	r6,r17,104
    48ac:	000b883a 	mov	r5,zero
    48b0:	0005cdc0 	call	5cdc <memset>
    48b4:	8005883a 	mov	r2,r16
    48b8:	dfc00317 	ldw	ra,12(sp)
    48bc:	dc800217 	ldw	r18,8(sp)
    48c0:	dc400117 	ldw	r17,4(sp)
    48c4:	dc000017 	ldw	r16,0(sp)
    48c8:	dec00404 	addi	sp,sp,16
    48cc:	f800283a 	ret

000048d0 <__sfp>:
    48d0:	defffb04 	addi	sp,sp,-20
    48d4:	dc000015 	stw	r16,0(sp)
    48d8:	040000f4 	movhi	r16,3
    48dc:	841a4304 	addi	r16,r16,26892
    48e0:	dcc00315 	stw	r19,12(sp)
    48e4:	2027883a 	mov	r19,r4
    48e8:	81000017 	ldw	r4,0(r16)
    48ec:	dfc00415 	stw	ra,16(sp)
    48f0:	dc800215 	stw	r18,8(sp)
    48f4:	20800e17 	ldw	r2,56(r4)
    48f8:	dc400115 	stw	r17,4(sp)
    48fc:	1000021e 	bne	r2,zero,4908 <__sfp+0x38>
    4900:	00046c40 	call	46c4 <__sinit.part.1>
    4904:	81000017 	ldw	r4,0(r16)
    4908:	2480b804 	addi	r18,r4,736
    490c:	047fffc4 	movi	r17,-1
    4910:	91000117 	ldw	r4,4(r18)
    4914:	94000217 	ldw	r16,8(r18)
    4918:	213fffc4 	addi	r4,r4,-1
    491c:	20000a16 	blt	r4,zero,4948 <__sfp+0x78>
    4920:	8080030f 	ldh	r2,12(r16)
    4924:	10000c26 	beq	r2,zero,4958 <__sfp+0x88>
    4928:	80c01d04 	addi	r3,r16,116
    492c:	00000206 	br	4938 <__sfp+0x68>
    4930:	18bfe60f 	ldh	r2,-104(r3)
    4934:	10000826 	beq	r2,zero,4958 <__sfp+0x88>
    4938:	213fffc4 	addi	r4,r4,-1
    493c:	1c3ffd04 	addi	r16,r3,-12
    4940:	18c01a04 	addi	r3,r3,104
    4944:	247ffa1e 	bne	r4,r17,4930 <_gp+0xfffc6028>
    4948:	90800017 	ldw	r2,0(r18)
    494c:	10001d26 	beq	r2,zero,49c4 <__sfp+0xf4>
    4950:	1025883a 	mov	r18,r2
    4954:	003fee06 	br	4910 <_gp+0xfffc6008>
    4958:	00bfffc4 	movi	r2,-1
    495c:	8080038d 	sth	r2,14(r16)
    4960:	00800044 	movi	r2,1
    4964:	8080030d 	sth	r2,12(r16)
    4968:	80001915 	stw	zero,100(r16)
    496c:	80000015 	stw	zero,0(r16)
    4970:	80000215 	stw	zero,8(r16)
    4974:	80000115 	stw	zero,4(r16)
    4978:	80000415 	stw	zero,16(r16)
    497c:	80000515 	stw	zero,20(r16)
    4980:	80000615 	stw	zero,24(r16)
    4984:	01800204 	movi	r6,8
    4988:	000b883a 	mov	r5,zero
    498c:	81001704 	addi	r4,r16,92
    4990:	0005cdc0 	call	5cdc <memset>
    4994:	8005883a 	mov	r2,r16
    4998:	80000c15 	stw	zero,48(r16)
    499c:	80000d15 	stw	zero,52(r16)
    49a0:	80001115 	stw	zero,68(r16)
    49a4:	80001215 	stw	zero,72(r16)
    49a8:	dfc00417 	ldw	ra,16(sp)
    49ac:	dcc00317 	ldw	r19,12(sp)
    49b0:	dc800217 	ldw	r18,8(sp)
    49b4:	dc400117 	ldw	r17,4(sp)
    49b8:	dc000017 	ldw	r16,0(sp)
    49bc:	dec00504 	addi	sp,sp,20
    49c0:	f800283a 	ret
    49c4:	01400104 	movi	r5,4
    49c8:	9809883a 	mov	r4,r19
    49cc:	00048680 	call	4868 <__sfmoreglue>
    49d0:	90800015 	stw	r2,0(r18)
    49d4:	103fde1e 	bne	r2,zero,4950 <_gp+0xfffc6048>
    49d8:	00800304 	movi	r2,12
    49dc:	98800015 	stw	r2,0(r19)
    49e0:	0005883a 	mov	r2,zero
    49e4:	003ff006 	br	49a8 <_gp+0xfffc60a0>

000049e8 <_cleanup>:
    49e8:	008000f4 	movhi	r2,3
    49ec:	109a4304 	addi	r2,r2,26892
    49f0:	11000017 	ldw	r4,0(r2)
    49f4:	01400074 	movhi	r5,1
    49f8:	29624e04 	addi	r5,r5,-30408
    49fc:	0004f481 	jmpi	4f48 <_fwalk_reent>

00004a00 <__sinit>:
    4a00:	20800e17 	ldw	r2,56(r4)
    4a04:	10000126 	beq	r2,zero,4a0c <__sinit+0xc>
    4a08:	f800283a 	ret
    4a0c:	00046c41 	jmpi	46c4 <__sinit.part.1>

00004a10 <__sfp_lock_acquire>:
    4a10:	f800283a 	ret

00004a14 <__sfp_lock_release>:
    4a14:	f800283a 	ret

00004a18 <__sinit_lock_acquire>:
    4a18:	f800283a 	ret

00004a1c <__sinit_lock_release>:
    4a1c:	f800283a 	ret

00004a20 <__fp_lock_all>:
    4a20:	008000f4 	movhi	r2,3
    4a24:	109a4404 	addi	r2,r2,26896
    4a28:	11000017 	ldw	r4,0(r2)
    4a2c:	01400034 	movhi	r5,0
    4a30:	29521804 	addi	r5,r5,18528
    4a34:	0004e841 	jmpi	4e84 <_fwalk>

00004a38 <__fp_unlock_all>:
    4a38:	008000f4 	movhi	r2,3
    4a3c:	109a4404 	addi	r2,r2,26896
    4a40:	11000017 	ldw	r4,0(r2)
    4a44:	01400034 	movhi	r5,0
    4a48:	2951ac04 	addi	r5,r5,18096
    4a4c:	0004e841 	jmpi	4e84 <_fwalk>

00004a50 <_malloc_trim_r>:
    4a50:	defffb04 	addi	sp,sp,-20
    4a54:	dcc00315 	stw	r19,12(sp)
    4a58:	04c000f4 	movhi	r19,3
    4a5c:	dc800215 	stw	r18,8(sp)
    4a60:	dc400115 	stw	r17,4(sp)
    4a64:	dc000015 	stw	r16,0(sp)
    4a68:	dfc00415 	stw	ra,16(sp)
    4a6c:	2821883a 	mov	r16,r5
    4a70:	9cd4bb04 	addi	r19,r19,21228
    4a74:	2025883a 	mov	r18,r4
    4a78:	000da880 	call	da88 <__malloc_lock>
    4a7c:	98800217 	ldw	r2,8(r19)
    4a80:	14400117 	ldw	r17,4(r2)
    4a84:	00bfff04 	movi	r2,-4
    4a88:	88a2703a 	and	r17,r17,r2
    4a8c:	8c21c83a 	sub	r16,r17,r16
    4a90:	8403fbc4 	addi	r16,r16,4079
    4a94:	8020d33a 	srli	r16,r16,12
    4a98:	0083ffc4 	movi	r2,4095
    4a9c:	843fffc4 	addi	r16,r16,-1
    4aa0:	8020933a 	slli	r16,r16,12
    4aa4:	1400060e 	bge	r2,r16,4ac0 <_malloc_trim_r+0x70>
    4aa8:	000b883a 	mov	r5,zero
    4aac:	9009883a 	mov	r4,r18
    4ab0:	0006e740 	call	6e74 <_sbrk_r>
    4ab4:	98c00217 	ldw	r3,8(r19)
    4ab8:	1c47883a 	add	r3,r3,r17
    4abc:	10c00a26 	beq	r2,r3,4ae8 <_malloc_trim_r+0x98>
    4ac0:	9009883a 	mov	r4,r18
    4ac4:	000dba80 	call	dba8 <__malloc_unlock>
    4ac8:	0005883a 	mov	r2,zero
    4acc:	dfc00417 	ldw	ra,16(sp)
    4ad0:	dcc00317 	ldw	r19,12(sp)
    4ad4:	dc800217 	ldw	r18,8(sp)
    4ad8:	dc400117 	ldw	r17,4(sp)
    4adc:	dc000017 	ldw	r16,0(sp)
    4ae0:	dec00504 	addi	sp,sp,20
    4ae4:	f800283a 	ret
    4ae8:	040bc83a 	sub	r5,zero,r16
    4aec:	9009883a 	mov	r4,r18
    4af0:	0006e740 	call	6e74 <_sbrk_r>
    4af4:	00ffffc4 	movi	r3,-1
    4af8:	10c00d26 	beq	r2,r3,4b30 <_malloc_trim_r+0xe0>
    4afc:	00c00134 	movhi	r3,4
    4b00:	18e17904 	addi	r3,r3,-31260
    4b04:	18800017 	ldw	r2,0(r3)
    4b08:	99000217 	ldw	r4,8(r19)
    4b0c:	8c23c83a 	sub	r17,r17,r16
    4b10:	8c400054 	ori	r17,r17,1
    4b14:	1421c83a 	sub	r16,r2,r16
    4b18:	24400115 	stw	r17,4(r4)
    4b1c:	9009883a 	mov	r4,r18
    4b20:	1c000015 	stw	r16,0(r3)
    4b24:	000dba80 	call	dba8 <__malloc_unlock>
    4b28:	00800044 	movi	r2,1
    4b2c:	003fe706 	br	4acc <_gp+0xfffc61c4>
    4b30:	000b883a 	mov	r5,zero
    4b34:	9009883a 	mov	r4,r18
    4b38:	0006e740 	call	6e74 <_sbrk_r>
    4b3c:	99000217 	ldw	r4,8(r19)
    4b40:	014003c4 	movi	r5,15
    4b44:	1107c83a 	sub	r3,r2,r4
    4b48:	28ffdd0e 	bge	r5,r3,4ac0 <_gp+0xfffc61b8>
    4b4c:	014000f4 	movhi	r5,3
    4b50:	295a4604 	addi	r5,r5,26904
    4b54:	29400017 	ldw	r5,0(r5)
    4b58:	18c00054 	ori	r3,r3,1
    4b5c:	20c00115 	stw	r3,4(r4)
    4b60:	00c00134 	movhi	r3,4
    4b64:	1145c83a 	sub	r2,r2,r5
    4b68:	18e17904 	addi	r3,r3,-31260
    4b6c:	18800015 	stw	r2,0(r3)
    4b70:	003fd306 	br	4ac0 <_gp+0xfffc61b8>

00004b74 <_free_r>:
    4b74:	28004126 	beq	r5,zero,4c7c <_free_r+0x108>
    4b78:	defffd04 	addi	sp,sp,-12
    4b7c:	dc400115 	stw	r17,4(sp)
    4b80:	dc000015 	stw	r16,0(sp)
    4b84:	2023883a 	mov	r17,r4
    4b88:	2821883a 	mov	r16,r5
    4b8c:	dfc00215 	stw	ra,8(sp)
    4b90:	000da880 	call	da88 <__malloc_lock>
    4b94:	81ffff17 	ldw	r7,-4(r16)
    4b98:	00bfff84 	movi	r2,-2
    4b9c:	010000f4 	movhi	r4,3
    4ba0:	81bffe04 	addi	r6,r16,-8
    4ba4:	3884703a 	and	r2,r7,r2
    4ba8:	2114bb04 	addi	r4,r4,21228
    4bac:	308b883a 	add	r5,r6,r2
    4bb0:	2a400117 	ldw	r9,4(r5)
    4bb4:	22000217 	ldw	r8,8(r4)
    4bb8:	00ffff04 	movi	r3,-4
    4bbc:	48c6703a 	and	r3,r9,r3
    4bc0:	2a005726 	beq	r5,r8,4d20 <_free_r+0x1ac>
    4bc4:	28c00115 	stw	r3,4(r5)
    4bc8:	39c0004c 	andi	r7,r7,1
    4bcc:	3800091e 	bne	r7,zero,4bf4 <_free_r+0x80>
    4bd0:	823ffe17 	ldw	r8,-8(r16)
    4bd4:	22400204 	addi	r9,r4,8
    4bd8:	320dc83a 	sub	r6,r6,r8
    4bdc:	31c00217 	ldw	r7,8(r6)
    4be0:	1205883a 	add	r2,r2,r8
    4be4:	3a406526 	beq	r7,r9,4d7c <_free_r+0x208>
    4be8:	32000317 	ldw	r8,12(r6)
    4bec:	3a000315 	stw	r8,12(r7)
    4bf0:	41c00215 	stw	r7,8(r8)
    4bf4:	28cf883a 	add	r7,r5,r3
    4bf8:	39c00117 	ldw	r7,4(r7)
    4bfc:	39c0004c 	andi	r7,r7,1
    4c00:	38003a26 	beq	r7,zero,4cec <_free_r+0x178>
    4c04:	10c00054 	ori	r3,r2,1
    4c08:	30c00115 	stw	r3,4(r6)
    4c0c:	3087883a 	add	r3,r6,r2
    4c10:	18800015 	stw	r2,0(r3)
    4c14:	00c07fc4 	movi	r3,511
    4c18:	18801936 	bltu	r3,r2,4c80 <_free_r+0x10c>
    4c1c:	1004d0fa 	srli	r2,r2,3
    4c20:	01c00044 	movi	r7,1
    4c24:	21400117 	ldw	r5,4(r4)
    4c28:	10c00044 	addi	r3,r2,1
    4c2c:	18c7883a 	add	r3,r3,r3
    4c30:	1005d0ba 	srai	r2,r2,2
    4c34:	18c7883a 	add	r3,r3,r3
    4c38:	18c7883a 	add	r3,r3,r3
    4c3c:	1907883a 	add	r3,r3,r4
    4c40:	3884983a 	sll	r2,r7,r2
    4c44:	19c00017 	ldw	r7,0(r3)
    4c48:	1a3ffe04 	addi	r8,r3,-8
    4c4c:	1144b03a 	or	r2,r2,r5
    4c50:	32000315 	stw	r8,12(r6)
    4c54:	31c00215 	stw	r7,8(r6)
    4c58:	20800115 	stw	r2,4(r4)
    4c5c:	19800015 	stw	r6,0(r3)
    4c60:	39800315 	stw	r6,12(r7)
    4c64:	8809883a 	mov	r4,r17
    4c68:	dfc00217 	ldw	ra,8(sp)
    4c6c:	dc400117 	ldw	r17,4(sp)
    4c70:	dc000017 	ldw	r16,0(sp)
    4c74:	dec00304 	addi	sp,sp,12
    4c78:	000dba81 	jmpi	dba8 <__malloc_unlock>
    4c7c:	f800283a 	ret
    4c80:	100ad27a 	srli	r5,r2,9
    4c84:	00c00104 	movi	r3,4
    4c88:	19404a36 	bltu	r3,r5,4db4 <_free_r+0x240>
    4c8c:	100ad1ba 	srli	r5,r2,6
    4c90:	28c00e44 	addi	r3,r5,57
    4c94:	18c7883a 	add	r3,r3,r3
    4c98:	29400e04 	addi	r5,r5,56
    4c9c:	18c7883a 	add	r3,r3,r3
    4ca0:	18c7883a 	add	r3,r3,r3
    4ca4:	1909883a 	add	r4,r3,r4
    4ca8:	20c00017 	ldw	r3,0(r4)
    4cac:	01c000f4 	movhi	r7,3
    4cb0:	213ffe04 	addi	r4,r4,-8
    4cb4:	39d4bb04 	addi	r7,r7,21228
    4cb8:	20c04426 	beq	r4,r3,4dcc <_free_r+0x258>
    4cbc:	01ffff04 	movi	r7,-4
    4cc0:	19400117 	ldw	r5,4(r3)
    4cc4:	29ca703a 	and	r5,r5,r7
    4cc8:	1140022e 	bgeu	r2,r5,4cd4 <_free_r+0x160>
    4ccc:	18c00217 	ldw	r3,8(r3)
    4cd0:	20fffb1e 	bne	r4,r3,4cc0 <_gp+0xfffc63b8>
    4cd4:	19000317 	ldw	r4,12(r3)
    4cd8:	31000315 	stw	r4,12(r6)
    4cdc:	30c00215 	stw	r3,8(r6)
    4ce0:	21800215 	stw	r6,8(r4)
    4ce4:	19800315 	stw	r6,12(r3)
    4ce8:	003fde06 	br	4c64 <_gp+0xfffc635c>
    4cec:	29c00217 	ldw	r7,8(r5)
    4cf0:	10c5883a 	add	r2,r2,r3
    4cf4:	00c000f4 	movhi	r3,3
    4cf8:	18d4bd04 	addi	r3,r3,21236
    4cfc:	38c03b26 	beq	r7,r3,4dec <_free_r+0x278>
    4d00:	2a000317 	ldw	r8,12(r5)
    4d04:	11400054 	ori	r5,r2,1
    4d08:	3087883a 	add	r3,r6,r2
    4d0c:	3a000315 	stw	r8,12(r7)
    4d10:	41c00215 	stw	r7,8(r8)
    4d14:	31400115 	stw	r5,4(r6)
    4d18:	18800015 	stw	r2,0(r3)
    4d1c:	003fbd06 	br	4c14 <_gp+0xfffc630c>
    4d20:	39c0004c 	andi	r7,r7,1
    4d24:	10c5883a 	add	r2,r2,r3
    4d28:	3800071e 	bne	r7,zero,4d48 <_free_r+0x1d4>
    4d2c:	81fffe17 	ldw	r7,-8(r16)
    4d30:	31cdc83a 	sub	r6,r6,r7
    4d34:	30c00317 	ldw	r3,12(r6)
    4d38:	31400217 	ldw	r5,8(r6)
    4d3c:	11c5883a 	add	r2,r2,r7
    4d40:	28c00315 	stw	r3,12(r5)
    4d44:	19400215 	stw	r5,8(r3)
    4d48:	10c00054 	ori	r3,r2,1
    4d4c:	30c00115 	stw	r3,4(r6)
    4d50:	00c000f4 	movhi	r3,3
    4d54:	18da4704 	addi	r3,r3,26908
    4d58:	18c00017 	ldw	r3,0(r3)
    4d5c:	21800215 	stw	r6,8(r4)
    4d60:	10ffc036 	bltu	r2,r3,4c64 <_gp+0xfffc635c>
    4d64:	00800134 	movhi	r2,4
    4d68:	10a15704 	addi	r2,r2,-31396
    4d6c:	11400017 	ldw	r5,0(r2)
    4d70:	8809883a 	mov	r4,r17
    4d74:	0004a500 	call	4a50 <_malloc_trim_r>
    4d78:	003fba06 	br	4c64 <_gp+0xfffc635c>
    4d7c:	28c9883a 	add	r4,r5,r3
    4d80:	21000117 	ldw	r4,4(r4)
    4d84:	2100004c 	andi	r4,r4,1
    4d88:	2000391e 	bne	r4,zero,4e70 <_free_r+0x2fc>
    4d8c:	29c00217 	ldw	r7,8(r5)
    4d90:	29000317 	ldw	r4,12(r5)
    4d94:	1885883a 	add	r2,r3,r2
    4d98:	10c00054 	ori	r3,r2,1
    4d9c:	39000315 	stw	r4,12(r7)
    4da0:	21c00215 	stw	r7,8(r4)
    4da4:	30c00115 	stw	r3,4(r6)
    4da8:	308d883a 	add	r6,r6,r2
    4dac:	30800015 	stw	r2,0(r6)
    4db0:	003fac06 	br	4c64 <_gp+0xfffc635c>
    4db4:	00c00504 	movi	r3,20
    4db8:	19401536 	bltu	r3,r5,4e10 <_free_r+0x29c>
    4dbc:	28c01704 	addi	r3,r5,92
    4dc0:	18c7883a 	add	r3,r3,r3
    4dc4:	294016c4 	addi	r5,r5,91
    4dc8:	003fb406 	br	4c9c <_gp+0xfffc6394>
    4dcc:	280bd0ba 	srai	r5,r5,2
    4dd0:	00c00044 	movi	r3,1
    4dd4:	38800117 	ldw	r2,4(r7)
    4dd8:	194a983a 	sll	r5,r3,r5
    4ddc:	2007883a 	mov	r3,r4
    4de0:	2884b03a 	or	r2,r5,r2
    4de4:	38800115 	stw	r2,4(r7)
    4de8:	003fbb06 	br	4cd8 <_gp+0xfffc63d0>
    4dec:	21800515 	stw	r6,20(r4)
    4df0:	21800415 	stw	r6,16(r4)
    4df4:	10c00054 	ori	r3,r2,1
    4df8:	31c00315 	stw	r7,12(r6)
    4dfc:	31c00215 	stw	r7,8(r6)
    4e00:	30c00115 	stw	r3,4(r6)
    4e04:	308d883a 	add	r6,r6,r2
    4e08:	30800015 	stw	r2,0(r6)
    4e0c:	003f9506 	br	4c64 <_gp+0xfffc635c>
    4e10:	00c01504 	movi	r3,84
    4e14:	19400536 	bltu	r3,r5,4e2c <_free_r+0x2b8>
    4e18:	100ad33a 	srli	r5,r2,12
    4e1c:	28c01bc4 	addi	r3,r5,111
    4e20:	18c7883a 	add	r3,r3,r3
    4e24:	29401b84 	addi	r5,r5,110
    4e28:	003f9c06 	br	4c9c <_gp+0xfffc6394>
    4e2c:	00c05504 	movi	r3,340
    4e30:	19400536 	bltu	r3,r5,4e48 <_free_r+0x2d4>
    4e34:	100ad3fa 	srli	r5,r2,15
    4e38:	28c01e04 	addi	r3,r5,120
    4e3c:	18c7883a 	add	r3,r3,r3
    4e40:	29401dc4 	addi	r5,r5,119
    4e44:	003f9506 	br	4c9c <_gp+0xfffc6394>
    4e48:	00c15504 	movi	r3,1364
    4e4c:	19400536 	bltu	r3,r5,4e64 <_free_r+0x2f0>
    4e50:	100ad4ba 	srli	r5,r2,18
    4e54:	28c01f44 	addi	r3,r5,125
    4e58:	18c7883a 	add	r3,r3,r3
    4e5c:	29401f04 	addi	r5,r5,124
    4e60:	003f8e06 	br	4c9c <_gp+0xfffc6394>
    4e64:	00c03f84 	movi	r3,254
    4e68:	01401f84 	movi	r5,126
    4e6c:	003f8b06 	br	4c9c <_gp+0xfffc6394>
    4e70:	10c00054 	ori	r3,r2,1
    4e74:	30c00115 	stw	r3,4(r6)
    4e78:	308d883a 	add	r6,r6,r2
    4e7c:	30800015 	stw	r2,0(r6)
    4e80:	003f7806 	br	4c64 <_gp+0xfffc635c>

00004e84 <_fwalk>:
    4e84:	defff704 	addi	sp,sp,-36
    4e88:	dd000415 	stw	r20,16(sp)
    4e8c:	dfc00815 	stw	ra,32(sp)
    4e90:	ddc00715 	stw	r23,28(sp)
    4e94:	dd800615 	stw	r22,24(sp)
    4e98:	dd400515 	stw	r21,20(sp)
    4e9c:	dcc00315 	stw	r19,12(sp)
    4ea0:	dc800215 	stw	r18,8(sp)
    4ea4:	dc400115 	stw	r17,4(sp)
    4ea8:	dc000015 	stw	r16,0(sp)
    4eac:	2500b804 	addi	r20,r4,736
    4eb0:	a0002326 	beq	r20,zero,4f40 <_fwalk+0xbc>
    4eb4:	282b883a 	mov	r21,r5
    4eb8:	002f883a 	mov	r23,zero
    4ebc:	05800044 	movi	r22,1
    4ec0:	04ffffc4 	movi	r19,-1
    4ec4:	a4400117 	ldw	r17,4(r20)
    4ec8:	a4800217 	ldw	r18,8(r20)
    4ecc:	8c7fffc4 	addi	r17,r17,-1
    4ed0:	88000d16 	blt	r17,zero,4f08 <_fwalk+0x84>
    4ed4:	94000304 	addi	r16,r18,12
    4ed8:	94800384 	addi	r18,r18,14
    4edc:	8080000b 	ldhu	r2,0(r16)
    4ee0:	8c7fffc4 	addi	r17,r17,-1
    4ee4:	813ffd04 	addi	r4,r16,-12
    4ee8:	b080042e 	bgeu	r22,r2,4efc <_fwalk+0x78>
    4eec:	9080000f 	ldh	r2,0(r18)
    4ef0:	14c00226 	beq	r2,r19,4efc <_fwalk+0x78>
    4ef4:	a83ee83a 	callr	r21
    4ef8:	b8aeb03a 	or	r23,r23,r2
    4efc:	84001a04 	addi	r16,r16,104
    4f00:	94801a04 	addi	r18,r18,104
    4f04:	8cfff51e 	bne	r17,r19,4edc <_gp+0xfffc65d4>
    4f08:	a5000017 	ldw	r20,0(r20)
    4f0c:	a03fed1e 	bne	r20,zero,4ec4 <_gp+0xfffc65bc>
    4f10:	b805883a 	mov	r2,r23
    4f14:	dfc00817 	ldw	ra,32(sp)
    4f18:	ddc00717 	ldw	r23,28(sp)
    4f1c:	dd800617 	ldw	r22,24(sp)
    4f20:	dd400517 	ldw	r21,20(sp)
    4f24:	dd000417 	ldw	r20,16(sp)
    4f28:	dcc00317 	ldw	r19,12(sp)
    4f2c:	dc800217 	ldw	r18,8(sp)
    4f30:	dc400117 	ldw	r17,4(sp)
    4f34:	dc000017 	ldw	r16,0(sp)
    4f38:	dec00904 	addi	sp,sp,36
    4f3c:	f800283a 	ret
    4f40:	002f883a 	mov	r23,zero
    4f44:	003ff206 	br	4f10 <_gp+0xfffc6608>

00004f48 <_fwalk_reent>:
    4f48:	defff704 	addi	sp,sp,-36
    4f4c:	dd000415 	stw	r20,16(sp)
    4f50:	dfc00815 	stw	ra,32(sp)
    4f54:	ddc00715 	stw	r23,28(sp)
    4f58:	dd800615 	stw	r22,24(sp)
    4f5c:	dd400515 	stw	r21,20(sp)
    4f60:	dcc00315 	stw	r19,12(sp)
    4f64:	dc800215 	stw	r18,8(sp)
    4f68:	dc400115 	stw	r17,4(sp)
    4f6c:	dc000015 	stw	r16,0(sp)
    4f70:	2500b804 	addi	r20,r4,736
    4f74:	a0002326 	beq	r20,zero,5004 <_fwalk_reent+0xbc>
    4f78:	282b883a 	mov	r21,r5
    4f7c:	2027883a 	mov	r19,r4
    4f80:	002f883a 	mov	r23,zero
    4f84:	05800044 	movi	r22,1
    4f88:	04bfffc4 	movi	r18,-1
    4f8c:	a4400117 	ldw	r17,4(r20)
    4f90:	a4000217 	ldw	r16,8(r20)
    4f94:	8c7fffc4 	addi	r17,r17,-1
    4f98:	88000c16 	blt	r17,zero,4fcc <_fwalk_reent+0x84>
    4f9c:	84000304 	addi	r16,r16,12
    4fa0:	8080000b 	ldhu	r2,0(r16)
    4fa4:	8c7fffc4 	addi	r17,r17,-1
    4fa8:	817ffd04 	addi	r5,r16,-12
    4fac:	b080052e 	bgeu	r22,r2,4fc4 <_fwalk_reent+0x7c>
    4fb0:	8080008f 	ldh	r2,2(r16)
    4fb4:	9809883a 	mov	r4,r19
    4fb8:	14800226 	beq	r2,r18,4fc4 <_fwalk_reent+0x7c>
    4fbc:	a83ee83a 	callr	r21
    4fc0:	b8aeb03a 	or	r23,r23,r2
    4fc4:	84001a04 	addi	r16,r16,104
    4fc8:	8cbff51e 	bne	r17,r18,4fa0 <_gp+0xfffc6698>
    4fcc:	a5000017 	ldw	r20,0(r20)
    4fd0:	a03fee1e 	bne	r20,zero,4f8c <_gp+0xfffc6684>
    4fd4:	b805883a 	mov	r2,r23
    4fd8:	dfc00817 	ldw	ra,32(sp)
    4fdc:	ddc00717 	ldw	r23,28(sp)
    4fe0:	dd800617 	ldw	r22,24(sp)
    4fe4:	dd400517 	ldw	r21,20(sp)
    4fe8:	dd000417 	ldw	r20,16(sp)
    4fec:	dcc00317 	ldw	r19,12(sp)
    4ff0:	dc800217 	ldw	r18,8(sp)
    4ff4:	dc400117 	ldw	r17,4(sp)
    4ff8:	dc000017 	ldw	r16,0(sp)
    4ffc:	dec00904 	addi	sp,sp,36
    5000:	f800283a 	ret
    5004:	002f883a 	mov	r23,zero
    5008:	003ff206 	br	4fd4 <_gp+0xfffc66cc>

0000500c <_setlocale_r>:
    500c:	30001b26 	beq	r6,zero,507c <_setlocale_r+0x70>
    5010:	014000f4 	movhi	r5,3
    5014:	defffe04 	addi	sp,sp,-8
    5018:	2952aa04 	addi	r5,r5,19112
    501c:	3009883a 	mov	r4,r6
    5020:	dc000015 	stw	r16,0(sp)
    5024:	dfc00115 	stw	ra,4(sp)
    5028:	3021883a 	mov	r16,r6
    502c:	00070040 	call	7004 <strcmp>
    5030:	1000061e 	bne	r2,zero,504c <_setlocale_r+0x40>
    5034:	008000f4 	movhi	r2,3
    5038:	1092a904 	addi	r2,r2,19108
    503c:	dfc00117 	ldw	ra,4(sp)
    5040:	dc000017 	ldw	r16,0(sp)
    5044:	dec00204 	addi	sp,sp,8
    5048:	f800283a 	ret
    504c:	014000f4 	movhi	r5,3
    5050:	2952a904 	addi	r5,r5,19108
    5054:	8009883a 	mov	r4,r16
    5058:	00070040 	call	7004 <strcmp>
    505c:	103ff526 	beq	r2,zero,5034 <_gp+0xfffc672c>
    5060:	014000f4 	movhi	r5,3
    5064:	29529404 	addi	r5,r5,19024
    5068:	8009883a 	mov	r4,r16
    506c:	00070040 	call	7004 <strcmp>
    5070:	103ff026 	beq	r2,zero,5034 <_gp+0xfffc672c>
    5074:	0005883a 	mov	r2,zero
    5078:	003ff006 	br	503c <_gp+0xfffc6734>
    507c:	008000f4 	movhi	r2,3
    5080:	1092a904 	addi	r2,r2,19108
    5084:	f800283a 	ret

00005088 <__locale_charset>:
    5088:	008000f4 	movhi	r2,3
    508c:	1094a504 	addi	r2,r2,21140
    5090:	f800283a 	ret

00005094 <__locale_mb_cur_max>:
    5094:	008000f4 	movhi	r2,3
    5098:	109a4504 	addi	r2,r2,26900
    509c:	10800017 	ldw	r2,0(r2)
    50a0:	f800283a 	ret

000050a4 <__locale_msgcharset>:
    50a4:	008000f4 	movhi	r2,3
    50a8:	10949d04 	addi	r2,r2,21108
    50ac:	f800283a 	ret

000050b0 <__locale_cjk_lang>:
    50b0:	0005883a 	mov	r2,zero
    50b4:	f800283a 	ret

000050b8 <_localeconv_r>:
    50b8:	008000f4 	movhi	r2,3
    50bc:	1094ad04 	addi	r2,r2,21172
    50c0:	f800283a 	ret

000050c4 <setlocale>:
    50c4:	008000f4 	movhi	r2,3
    50c8:	109a4404 	addi	r2,r2,26896
    50cc:	280d883a 	mov	r6,r5
    50d0:	200b883a 	mov	r5,r4
    50d4:	11000017 	ldw	r4,0(r2)
    50d8:	000500c1 	jmpi	500c <_setlocale_r>

000050dc <localeconv>:
    50dc:	008000f4 	movhi	r2,3
    50e0:	1094ad04 	addi	r2,r2,21172
    50e4:	f800283a 	ret

000050e8 <__smakebuf_r>:
    50e8:	2880030b 	ldhu	r2,12(r5)
    50ec:	10c0008c 	andi	r3,r2,2
    50f0:	1800411e 	bne	r3,zero,51f8 <__smakebuf_r+0x110>
    50f4:	deffec04 	addi	sp,sp,-80
    50f8:	dc000f15 	stw	r16,60(sp)
    50fc:	2821883a 	mov	r16,r5
    5100:	2940038f 	ldh	r5,14(r5)
    5104:	dc401015 	stw	r17,64(sp)
    5108:	dfc01315 	stw	ra,76(sp)
    510c:	dcc01215 	stw	r19,72(sp)
    5110:	dc801115 	stw	r18,68(sp)
    5114:	2023883a 	mov	r17,r4
    5118:	28001c16 	blt	r5,zero,518c <__smakebuf_r+0xa4>
    511c:	d80d883a 	mov	r6,sp
    5120:	0008c440 	call	8c44 <_fstat_r>
    5124:	10001816 	blt	r2,zero,5188 <__smakebuf_r+0xa0>
    5128:	d8800117 	ldw	r2,4(sp)
    512c:	00e00014 	movui	r3,32768
    5130:	10bc000c 	andi	r2,r2,61440
    5134:	14c80020 	cmpeqi	r19,r2,8192
    5138:	10c03726 	beq	r2,r3,5218 <__smakebuf_r+0x130>
    513c:	80c0030b 	ldhu	r3,12(r16)
    5140:	18c20014 	ori	r3,r3,2048
    5144:	80c0030d 	sth	r3,12(r16)
    5148:	00c80004 	movi	r3,8192
    514c:	10c0521e 	bne	r2,r3,5298 <__smakebuf_r+0x1b0>
    5150:	8140038f 	ldh	r5,14(r16)
    5154:	8809883a 	mov	r4,r17
    5158:	000915c0 	call	915c <_isatty_r>
    515c:	10004c26 	beq	r2,zero,5290 <__smakebuf_r+0x1a8>
    5160:	8080030b 	ldhu	r2,12(r16)
    5164:	80c010c4 	addi	r3,r16,67
    5168:	80c00015 	stw	r3,0(r16)
    516c:	10800054 	ori	r2,r2,1
    5170:	8080030d 	sth	r2,12(r16)
    5174:	00800044 	movi	r2,1
    5178:	80c00415 	stw	r3,16(r16)
    517c:	80800515 	stw	r2,20(r16)
    5180:	04810004 	movi	r18,1024
    5184:	00000706 	br	51a4 <__smakebuf_r+0xbc>
    5188:	8080030b 	ldhu	r2,12(r16)
    518c:	10c0200c 	andi	r3,r2,128
    5190:	18001f1e 	bne	r3,zero,5210 <__smakebuf_r+0x128>
    5194:	04810004 	movi	r18,1024
    5198:	10820014 	ori	r2,r2,2048
    519c:	8080030d 	sth	r2,12(r16)
    51a0:	0027883a 	mov	r19,zero
    51a4:	900b883a 	mov	r5,r18
    51a8:	8809883a 	mov	r4,r17
    51ac:	00052a40 	call	52a4 <_malloc_r>
    51b0:	10002c26 	beq	r2,zero,5264 <__smakebuf_r+0x17c>
    51b4:	80c0030b 	ldhu	r3,12(r16)
    51b8:	01000034 	movhi	r4,0
    51bc:	2111ae04 	addi	r4,r4,18104
    51c0:	89000f15 	stw	r4,60(r17)
    51c4:	18c02014 	ori	r3,r3,128
    51c8:	80c0030d 	sth	r3,12(r16)
    51cc:	80800015 	stw	r2,0(r16)
    51d0:	80800415 	stw	r2,16(r16)
    51d4:	84800515 	stw	r18,20(r16)
    51d8:	98001a1e 	bne	r19,zero,5244 <__smakebuf_r+0x15c>
    51dc:	dfc01317 	ldw	ra,76(sp)
    51e0:	dcc01217 	ldw	r19,72(sp)
    51e4:	dc801117 	ldw	r18,68(sp)
    51e8:	dc401017 	ldw	r17,64(sp)
    51ec:	dc000f17 	ldw	r16,60(sp)
    51f0:	dec01404 	addi	sp,sp,80
    51f4:	f800283a 	ret
    51f8:	288010c4 	addi	r2,r5,67
    51fc:	28800015 	stw	r2,0(r5)
    5200:	28800415 	stw	r2,16(r5)
    5204:	00800044 	movi	r2,1
    5208:	28800515 	stw	r2,20(r5)
    520c:	f800283a 	ret
    5210:	04801004 	movi	r18,64
    5214:	003fe006 	br	5198 <_gp+0xfffc6890>
    5218:	81000a17 	ldw	r4,40(r16)
    521c:	00c00034 	movhi	r3,0
    5220:	18dbe804 	addi	r3,r3,28576
    5224:	20ffc51e 	bne	r4,r3,513c <_gp+0xfffc6834>
    5228:	8080030b 	ldhu	r2,12(r16)
    522c:	04810004 	movi	r18,1024
    5230:	84801315 	stw	r18,76(r16)
    5234:	1484b03a 	or	r2,r2,r18
    5238:	8080030d 	sth	r2,12(r16)
    523c:	0027883a 	mov	r19,zero
    5240:	003fd806 	br	51a4 <_gp+0xfffc689c>
    5244:	8140038f 	ldh	r5,14(r16)
    5248:	8809883a 	mov	r4,r17
    524c:	000915c0 	call	915c <_isatty_r>
    5250:	103fe226 	beq	r2,zero,51dc <_gp+0xfffc68d4>
    5254:	8080030b 	ldhu	r2,12(r16)
    5258:	10800054 	ori	r2,r2,1
    525c:	8080030d 	sth	r2,12(r16)
    5260:	003fde06 	br	51dc <_gp+0xfffc68d4>
    5264:	8080030b 	ldhu	r2,12(r16)
    5268:	10c0800c 	andi	r3,r2,512
    526c:	183fdb1e 	bne	r3,zero,51dc <_gp+0xfffc68d4>
    5270:	10800094 	ori	r2,r2,2
    5274:	80c010c4 	addi	r3,r16,67
    5278:	8080030d 	sth	r2,12(r16)
    527c:	00800044 	movi	r2,1
    5280:	80c00015 	stw	r3,0(r16)
    5284:	80c00415 	stw	r3,16(r16)
    5288:	80800515 	stw	r2,20(r16)
    528c:	003fd306 	br	51dc <_gp+0xfffc68d4>
    5290:	04810004 	movi	r18,1024
    5294:	003fc306 	br	51a4 <_gp+0xfffc689c>
    5298:	0027883a 	mov	r19,zero
    529c:	04810004 	movi	r18,1024
    52a0:	003fc006 	br	51a4 <_gp+0xfffc689c>

000052a4 <_malloc_r>:
    52a4:	defff504 	addi	sp,sp,-44
    52a8:	dc800315 	stw	r18,12(sp)
    52ac:	dfc00a15 	stw	ra,40(sp)
    52b0:	df000915 	stw	fp,36(sp)
    52b4:	ddc00815 	stw	r23,32(sp)
    52b8:	dd800715 	stw	r22,28(sp)
    52bc:	dd400615 	stw	r21,24(sp)
    52c0:	dd000515 	stw	r20,20(sp)
    52c4:	dcc00415 	stw	r19,16(sp)
    52c8:	dc400215 	stw	r17,8(sp)
    52cc:	dc000115 	stw	r16,4(sp)
    52d0:	288002c4 	addi	r2,r5,11
    52d4:	00c00584 	movi	r3,22
    52d8:	2025883a 	mov	r18,r4
    52dc:	18807f2e 	bgeu	r3,r2,54dc <_malloc_r+0x238>
    52e0:	047ffe04 	movi	r17,-8
    52e4:	1462703a 	and	r17,r2,r17
    52e8:	8800a316 	blt	r17,zero,5578 <_malloc_r+0x2d4>
    52ec:	8940a236 	bltu	r17,r5,5578 <_malloc_r+0x2d4>
    52f0:	000da880 	call	da88 <__malloc_lock>
    52f4:	00807dc4 	movi	r2,503
    52f8:	1441e92e 	bgeu	r2,r17,5aa0 <_malloc_r+0x7fc>
    52fc:	8804d27a 	srli	r2,r17,9
    5300:	1000a126 	beq	r2,zero,5588 <_malloc_r+0x2e4>
    5304:	00c00104 	movi	r3,4
    5308:	18811e36 	bltu	r3,r2,5784 <_malloc_r+0x4e0>
    530c:	8804d1ba 	srli	r2,r17,6
    5310:	12000e44 	addi	r8,r2,57
    5314:	11c00e04 	addi	r7,r2,56
    5318:	4209883a 	add	r4,r8,r8
    531c:	04c000f4 	movhi	r19,3
    5320:	2109883a 	add	r4,r4,r4
    5324:	9cd4bb04 	addi	r19,r19,21228
    5328:	2109883a 	add	r4,r4,r4
    532c:	9909883a 	add	r4,r19,r4
    5330:	24000117 	ldw	r16,4(r4)
    5334:	213ffe04 	addi	r4,r4,-8
    5338:	24009726 	beq	r4,r16,5598 <_malloc_r+0x2f4>
    533c:	80800117 	ldw	r2,4(r16)
    5340:	01bfff04 	movi	r6,-4
    5344:	014003c4 	movi	r5,15
    5348:	1184703a 	and	r2,r2,r6
    534c:	1447c83a 	sub	r3,r2,r17
    5350:	28c00716 	blt	r5,r3,5370 <_malloc_r+0xcc>
    5354:	1800920e 	bge	r3,zero,55a0 <_malloc_r+0x2fc>
    5358:	84000317 	ldw	r16,12(r16)
    535c:	24008e26 	beq	r4,r16,5598 <_malloc_r+0x2f4>
    5360:	80800117 	ldw	r2,4(r16)
    5364:	1184703a 	and	r2,r2,r6
    5368:	1447c83a 	sub	r3,r2,r17
    536c:	28fff90e 	bge	r5,r3,5354 <_gp+0xfffc6a4c>
    5370:	3809883a 	mov	r4,r7
    5374:	018000f4 	movhi	r6,3
    5378:	9c000417 	ldw	r16,16(r19)
    537c:	3194bb04 	addi	r6,r6,21228
    5380:	32000204 	addi	r8,r6,8
    5384:	82013426 	beq	r16,r8,5858 <_malloc_r+0x5b4>
    5388:	80c00117 	ldw	r3,4(r16)
    538c:	00bfff04 	movi	r2,-4
    5390:	188e703a 	and	r7,r3,r2
    5394:	3c45c83a 	sub	r2,r7,r17
    5398:	00c003c4 	movi	r3,15
    539c:	18811f16 	blt	r3,r2,581c <_malloc_r+0x578>
    53a0:	32000515 	stw	r8,20(r6)
    53a4:	32000415 	stw	r8,16(r6)
    53a8:	10007f0e 	bge	r2,zero,55a8 <_malloc_r+0x304>
    53ac:	00807fc4 	movi	r2,511
    53b0:	11c0fd36 	bltu	r2,r7,57a8 <_malloc_r+0x504>
    53b4:	3806d0fa 	srli	r3,r7,3
    53b8:	01c00044 	movi	r7,1
    53bc:	30800117 	ldw	r2,4(r6)
    53c0:	19400044 	addi	r5,r3,1
    53c4:	294b883a 	add	r5,r5,r5
    53c8:	1807d0ba 	srai	r3,r3,2
    53cc:	294b883a 	add	r5,r5,r5
    53d0:	294b883a 	add	r5,r5,r5
    53d4:	298b883a 	add	r5,r5,r6
    53d8:	38c6983a 	sll	r3,r7,r3
    53dc:	29c00017 	ldw	r7,0(r5)
    53e0:	2a7ffe04 	addi	r9,r5,-8
    53e4:	1886b03a 	or	r3,r3,r2
    53e8:	82400315 	stw	r9,12(r16)
    53ec:	81c00215 	stw	r7,8(r16)
    53f0:	30c00115 	stw	r3,4(r6)
    53f4:	2c000015 	stw	r16,0(r5)
    53f8:	3c000315 	stw	r16,12(r7)
    53fc:	2005d0ba 	srai	r2,r4,2
    5400:	01400044 	movi	r5,1
    5404:	288a983a 	sll	r5,r5,r2
    5408:	19406f36 	bltu	r3,r5,55c8 <_malloc_r+0x324>
    540c:	28c4703a 	and	r2,r5,r3
    5410:	10000a1e 	bne	r2,zero,543c <_malloc_r+0x198>
    5414:	00bfff04 	movi	r2,-4
    5418:	294b883a 	add	r5,r5,r5
    541c:	2088703a 	and	r4,r4,r2
    5420:	28c4703a 	and	r2,r5,r3
    5424:	21000104 	addi	r4,r4,4
    5428:	1000041e 	bne	r2,zero,543c <_malloc_r+0x198>
    542c:	294b883a 	add	r5,r5,r5
    5430:	28c4703a 	and	r2,r5,r3
    5434:	21000104 	addi	r4,r4,4
    5438:	103ffc26 	beq	r2,zero,542c <_gp+0xfffc6b24>
    543c:	02bfff04 	movi	r10,-4
    5440:	024003c4 	movi	r9,15
    5444:	21800044 	addi	r6,r4,1
    5448:	318d883a 	add	r6,r6,r6
    544c:	318d883a 	add	r6,r6,r6
    5450:	318d883a 	add	r6,r6,r6
    5454:	998d883a 	add	r6,r19,r6
    5458:	333ffe04 	addi	r12,r6,-8
    545c:	2017883a 	mov	r11,r4
    5460:	31800104 	addi	r6,r6,4
    5464:	34000017 	ldw	r16,0(r6)
    5468:	31fffd04 	addi	r7,r6,-12
    546c:	81c0041e 	bne	r16,r7,5480 <_malloc_r+0x1dc>
    5470:	0000fb06 	br	5860 <_malloc_r+0x5bc>
    5474:	1801030e 	bge	r3,zero,5884 <_malloc_r+0x5e0>
    5478:	84000317 	ldw	r16,12(r16)
    547c:	81c0f826 	beq	r16,r7,5860 <_malloc_r+0x5bc>
    5480:	80800117 	ldw	r2,4(r16)
    5484:	1284703a 	and	r2,r2,r10
    5488:	1447c83a 	sub	r3,r2,r17
    548c:	48fff90e 	bge	r9,r3,5474 <_gp+0xfffc6b6c>
    5490:	80800317 	ldw	r2,12(r16)
    5494:	81000217 	ldw	r4,8(r16)
    5498:	89400054 	ori	r5,r17,1
    549c:	81400115 	stw	r5,4(r16)
    54a0:	20800315 	stw	r2,12(r4)
    54a4:	11000215 	stw	r4,8(r2)
    54a8:	8463883a 	add	r17,r16,r17
    54ac:	9c400515 	stw	r17,20(r19)
    54b0:	9c400415 	stw	r17,16(r19)
    54b4:	18800054 	ori	r2,r3,1
    54b8:	88800115 	stw	r2,4(r17)
    54bc:	8a000315 	stw	r8,12(r17)
    54c0:	8a000215 	stw	r8,8(r17)
    54c4:	88e3883a 	add	r17,r17,r3
    54c8:	88c00015 	stw	r3,0(r17)
    54cc:	9009883a 	mov	r4,r18
    54d0:	000dba80 	call	dba8 <__malloc_unlock>
    54d4:	80800204 	addi	r2,r16,8
    54d8:	00001b06 	br	5548 <_malloc_r+0x2a4>
    54dc:	04400404 	movi	r17,16
    54e0:	89402536 	bltu	r17,r5,5578 <_malloc_r+0x2d4>
    54e4:	000da880 	call	da88 <__malloc_lock>
    54e8:	00800184 	movi	r2,6
    54ec:	01000084 	movi	r4,2
    54f0:	04c000f4 	movhi	r19,3
    54f4:	1085883a 	add	r2,r2,r2
    54f8:	9cd4bb04 	addi	r19,r19,21228
    54fc:	1085883a 	add	r2,r2,r2
    5500:	9885883a 	add	r2,r19,r2
    5504:	14000117 	ldw	r16,4(r2)
    5508:	10fffe04 	addi	r3,r2,-8
    550c:	80c0d926 	beq	r16,r3,5874 <_malloc_r+0x5d0>
    5510:	80c00117 	ldw	r3,4(r16)
    5514:	81000317 	ldw	r4,12(r16)
    5518:	00bfff04 	movi	r2,-4
    551c:	1884703a 	and	r2,r3,r2
    5520:	81400217 	ldw	r5,8(r16)
    5524:	8085883a 	add	r2,r16,r2
    5528:	10c00117 	ldw	r3,4(r2)
    552c:	29000315 	stw	r4,12(r5)
    5530:	21400215 	stw	r5,8(r4)
    5534:	18c00054 	ori	r3,r3,1
    5538:	10c00115 	stw	r3,4(r2)
    553c:	9009883a 	mov	r4,r18
    5540:	000dba80 	call	dba8 <__malloc_unlock>
    5544:	80800204 	addi	r2,r16,8
    5548:	dfc00a17 	ldw	ra,40(sp)
    554c:	df000917 	ldw	fp,36(sp)
    5550:	ddc00817 	ldw	r23,32(sp)
    5554:	dd800717 	ldw	r22,28(sp)
    5558:	dd400617 	ldw	r21,24(sp)
    555c:	dd000517 	ldw	r20,20(sp)
    5560:	dcc00417 	ldw	r19,16(sp)
    5564:	dc800317 	ldw	r18,12(sp)
    5568:	dc400217 	ldw	r17,8(sp)
    556c:	dc000117 	ldw	r16,4(sp)
    5570:	dec00b04 	addi	sp,sp,44
    5574:	f800283a 	ret
    5578:	00800304 	movi	r2,12
    557c:	90800015 	stw	r2,0(r18)
    5580:	0005883a 	mov	r2,zero
    5584:	003ff006 	br	5548 <_gp+0xfffc6c40>
    5588:	01002004 	movi	r4,128
    558c:	02001004 	movi	r8,64
    5590:	01c00fc4 	movi	r7,63
    5594:	003f6106 	br	531c <_gp+0xfffc6a14>
    5598:	4009883a 	mov	r4,r8
    559c:	003f7506 	br	5374 <_gp+0xfffc6a6c>
    55a0:	81000317 	ldw	r4,12(r16)
    55a4:	003fde06 	br	5520 <_gp+0xfffc6c18>
    55a8:	81c5883a 	add	r2,r16,r7
    55ac:	11400117 	ldw	r5,4(r2)
    55b0:	9009883a 	mov	r4,r18
    55b4:	29400054 	ori	r5,r5,1
    55b8:	11400115 	stw	r5,4(r2)
    55bc:	000dba80 	call	dba8 <__malloc_unlock>
    55c0:	80800204 	addi	r2,r16,8
    55c4:	003fe006 	br	5548 <_gp+0xfffc6c40>
    55c8:	9c000217 	ldw	r16,8(r19)
    55cc:	00bfff04 	movi	r2,-4
    55d0:	85800117 	ldw	r22,4(r16)
    55d4:	b0ac703a 	and	r22,r22,r2
    55d8:	b4400336 	bltu	r22,r17,55e8 <_malloc_r+0x344>
    55dc:	b445c83a 	sub	r2,r22,r17
    55e0:	00c003c4 	movi	r3,15
    55e4:	18805d16 	blt	r3,r2,575c <_malloc_r+0x4b8>
    55e8:	05c000f4 	movhi	r23,3
    55ec:	00800134 	movhi	r2,4
    55f0:	10a15704 	addi	r2,r2,-31396
    55f4:	bdda4604 	addi	r23,r23,26904
    55f8:	15400017 	ldw	r21,0(r2)
    55fc:	b8c00017 	ldw	r3,0(r23)
    5600:	00bfffc4 	movi	r2,-1
    5604:	858d883a 	add	r6,r16,r22
    5608:	8d6b883a 	add	r21,r17,r21
    560c:	1880ea26 	beq	r3,r2,59b8 <_malloc_r+0x714>
    5610:	ad4403c4 	addi	r21,r21,4111
    5614:	00bc0004 	movi	r2,-4096
    5618:	a8aa703a 	and	r21,r21,r2
    561c:	a80b883a 	mov	r5,r21
    5620:	9009883a 	mov	r4,r18
    5624:	d9800015 	stw	r6,0(sp)
    5628:	0006e740 	call	6e74 <_sbrk_r>
    562c:	1029883a 	mov	r20,r2
    5630:	00bfffc4 	movi	r2,-1
    5634:	d9800017 	ldw	r6,0(sp)
    5638:	a080e826 	beq	r20,r2,59dc <_malloc_r+0x738>
    563c:	a180a636 	bltu	r20,r6,58d8 <_malloc_r+0x634>
    5640:	07000134 	movhi	fp,4
    5644:	e7217904 	addi	fp,fp,-31260
    5648:	e0800017 	ldw	r2,0(fp)
    564c:	a887883a 	add	r3,r21,r2
    5650:	e0c00015 	stw	r3,0(fp)
    5654:	3500e626 	beq	r6,r20,59f0 <_malloc_r+0x74c>
    5658:	b9000017 	ldw	r4,0(r23)
    565c:	00bfffc4 	movi	r2,-1
    5660:	2080ee26 	beq	r4,r2,5a1c <_malloc_r+0x778>
    5664:	a185c83a 	sub	r2,r20,r6
    5668:	10c5883a 	add	r2,r2,r3
    566c:	e0800015 	stw	r2,0(fp)
    5670:	a0c001cc 	andi	r3,r20,7
    5674:	1800bc26 	beq	r3,zero,5968 <_malloc_r+0x6c4>
    5678:	a0e9c83a 	sub	r20,r20,r3
    567c:	00840204 	movi	r2,4104
    5680:	a5000204 	addi	r20,r20,8
    5684:	10c7c83a 	sub	r3,r2,r3
    5688:	a545883a 	add	r2,r20,r21
    568c:	1083ffcc 	andi	r2,r2,4095
    5690:	18abc83a 	sub	r21,r3,r2
    5694:	a80b883a 	mov	r5,r21
    5698:	9009883a 	mov	r4,r18
    569c:	0006e740 	call	6e74 <_sbrk_r>
    56a0:	00ffffc4 	movi	r3,-1
    56a4:	10c0e126 	beq	r2,r3,5a2c <_malloc_r+0x788>
    56a8:	1505c83a 	sub	r2,r2,r20
    56ac:	1545883a 	add	r2,r2,r21
    56b0:	10800054 	ori	r2,r2,1
    56b4:	e0c00017 	ldw	r3,0(fp)
    56b8:	9d000215 	stw	r20,8(r19)
    56bc:	a0800115 	stw	r2,4(r20)
    56c0:	a8c7883a 	add	r3,r21,r3
    56c4:	e0c00015 	stw	r3,0(fp)
    56c8:	84c00e26 	beq	r16,r19,5704 <_malloc_r+0x460>
    56cc:	018003c4 	movi	r6,15
    56d0:	3580a72e 	bgeu	r6,r22,5970 <_malloc_r+0x6cc>
    56d4:	81400117 	ldw	r5,4(r16)
    56d8:	013ffe04 	movi	r4,-8
    56dc:	b0bffd04 	addi	r2,r22,-12
    56e0:	1104703a 	and	r2,r2,r4
    56e4:	2900004c 	andi	r4,r5,1
    56e8:	2088b03a 	or	r4,r4,r2
    56ec:	81000115 	stw	r4,4(r16)
    56f0:	01400144 	movi	r5,5
    56f4:	8089883a 	add	r4,r16,r2
    56f8:	21400115 	stw	r5,4(r4)
    56fc:	21400215 	stw	r5,8(r4)
    5700:	3080cd36 	bltu	r6,r2,5a38 <_malloc_r+0x794>
    5704:	00800134 	movhi	r2,4
    5708:	10a15604 	addi	r2,r2,-31400
    570c:	11000017 	ldw	r4,0(r2)
    5710:	20c0012e 	bgeu	r4,r3,5718 <_malloc_r+0x474>
    5714:	10c00015 	stw	r3,0(r2)
    5718:	00800134 	movhi	r2,4
    571c:	10a15504 	addi	r2,r2,-31404
    5720:	11000017 	ldw	r4,0(r2)
    5724:	9c000217 	ldw	r16,8(r19)
    5728:	20c0012e 	bgeu	r4,r3,5730 <_malloc_r+0x48c>
    572c:	10c00015 	stw	r3,0(r2)
    5730:	80c00117 	ldw	r3,4(r16)
    5734:	00bfff04 	movi	r2,-4
    5738:	1886703a 	and	r3,r3,r2
    573c:	1c45c83a 	sub	r2,r3,r17
    5740:	1c400236 	bltu	r3,r17,574c <_malloc_r+0x4a8>
    5744:	00c003c4 	movi	r3,15
    5748:	18800416 	blt	r3,r2,575c <_malloc_r+0x4b8>
    574c:	9009883a 	mov	r4,r18
    5750:	000dba80 	call	dba8 <__malloc_unlock>
    5754:	0005883a 	mov	r2,zero
    5758:	003f7b06 	br	5548 <_gp+0xfffc6c40>
    575c:	88c00054 	ori	r3,r17,1
    5760:	80c00115 	stw	r3,4(r16)
    5764:	8463883a 	add	r17,r16,r17
    5768:	10800054 	ori	r2,r2,1
    576c:	9c400215 	stw	r17,8(r19)
    5770:	88800115 	stw	r2,4(r17)
    5774:	9009883a 	mov	r4,r18
    5778:	000dba80 	call	dba8 <__malloc_unlock>
    577c:	80800204 	addi	r2,r16,8
    5780:	003f7106 	br	5548 <_gp+0xfffc6c40>
    5784:	00c00504 	movi	r3,20
    5788:	18804a2e 	bgeu	r3,r2,58b4 <_malloc_r+0x610>
    578c:	00c01504 	movi	r3,84
    5790:	18806e36 	bltu	r3,r2,594c <_malloc_r+0x6a8>
    5794:	8804d33a 	srli	r2,r17,12
    5798:	12001bc4 	addi	r8,r2,111
    579c:	11c01b84 	addi	r7,r2,110
    57a0:	4209883a 	add	r4,r8,r8
    57a4:	003edd06 	br	531c <_gp+0xfffc6a14>
    57a8:	3804d27a 	srli	r2,r7,9
    57ac:	00c00104 	movi	r3,4
    57b0:	1880442e 	bgeu	r3,r2,58c4 <_malloc_r+0x620>
    57b4:	00c00504 	movi	r3,20
    57b8:	18808136 	bltu	r3,r2,59c0 <_malloc_r+0x71c>
    57bc:	11401704 	addi	r5,r2,92
    57c0:	10c016c4 	addi	r3,r2,91
    57c4:	294b883a 	add	r5,r5,r5
    57c8:	294b883a 	add	r5,r5,r5
    57cc:	294b883a 	add	r5,r5,r5
    57d0:	994b883a 	add	r5,r19,r5
    57d4:	28800017 	ldw	r2,0(r5)
    57d8:	018000f4 	movhi	r6,3
    57dc:	297ffe04 	addi	r5,r5,-8
    57e0:	3194bb04 	addi	r6,r6,21228
    57e4:	28806526 	beq	r5,r2,597c <_malloc_r+0x6d8>
    57e8:	01bfff04 	movi	r6,-4
    57ec:	10c00117 	ldw	r3,4(r2)
    57f0:	1986703a 	and	r3,r3,r6
    57f4:	38c0022e 	bgeu	r7,r3,5800 <_malloc_r+0x55c>
    57f8:	10800217 	ldw	r2,8(r2)
    57fc:	28bffb1e 	bne	r5,r2,57ec <_gp+0xfffc6ee4>
    5800:	11400317 	ldw	r5,12(r2)
    5804:	98c00117 	ldw	r3,4(r19)
    5808:	81400315 	stw	r5,12(r16)
    580c:	80800215 	stw	r2,8(r16)
    5810:	2c000215 	stw	r16,8(r5)
    5814:	14000315 	stw	r16,12(r2)
    5818:	003ef806 	br	53fc <_gp+0xfffc6af4>
    581c:	88c00054 	ori	r3,r17,1
    5820:	80c00115 	stw	r3,4(r16)
    5824:	8463883a 	add	r17,r16,r17
    5828:	34400515 	stw	r17,20(r6)
    582c:	34400415 	stw	r17,16(r6)
    5830:	10c00054 	ori	r3,r2,1
    5834:	8a000315 	stw	r8,12(r17)
    5838:	8a000215 	stw	r8,8(r17)
    583c:	88c00115 	stw	r3,4(r17)
    5840:	88a3883a 	add	r17,r17,r2
    5844:	88800015 	stw	r2,0(r17)
    5848:	9009883a 	mov	r4,r18
    584c:	000dba80 	call	dba8 <__malloc_unlock>
    5850:	80800204 	addi	r2,r16,8
    5854:	003f3c06 	br	5548 <_gp+0xfffc6c40>
    5858:	30c00117 	ldw	r3,4(r6)
    585c:	003ee706 	br	53fc <_gp+0xfffc6af4>
    5860:	5ac00044 	addi	r11,r11,1
    5864:	588000cc 	andi	r2,r11,3
    5868:	31800204 	addi	r6,r6,8
    586c:	103efd1e 	bne	r2,zero,5464 <_gp+0xfffc6b5c>
    5870:	00002406 	br	5904 <_malloc_r+0x660>
    5874:	14000317 	ldw	r16,12(r2)
    5878:	143f251e 	bne	r2,r16,5510 <_gp+0xfffc6c08>
    587c:	21000084 	addi	r4,r4,2
    5880:	003ebc06 	br	5374 <_gp+0xfffc6a6c>
    5884:	8085883a 	add	r2,r16,r2
    5888:	10c00117 	ldw	r3,4(r2)
    588c:	81000317 	ldw	r4,12(r16)
    5890:	81400217 	ldw	r5,8(r16)
    5894:	18c00054 	ori	r3,r3,1
    5898:	10c00115 	stw	r3,4(r2)
    589c:	29000315 	stw	r4,12(r5)
    58a0:	21400215 	stw	r5,8(r4)
    58a4:	9009883a 	mov	r4,r18
    58a8:	000dba80 	call	dba8 <__malloc_unlock>
    58ac:	80800204 	addi	r2,r16,8
    58b0:	003f2506 	br	5548 <_gp+0xfffc6c40>
    58b4:	12001704 	addi	r8,r2,92
    58b8:	11c016c4 	addi	r7,r2,91
    58bc:	4209883a 	add	r4,r8,r8
    58c0:	003e9606 	br	531c <_gp+0xfffc6a14>
    58c4:	3804d1ba 	srli	r2,r7,6
    58c8:	11400e44 	addi	r5,r2,57
    58cc:	10c00e04 	addi	r3,r2,56
    58d0:	294b883a 	add	r5,r5,r5
    58d4:	003fbc06 	br	57c8 <_gp+0xfffc6ec0>
    58d8:	84ff5926 	beq	r16,r19,5640 <_gp+0xfffc6d38>
    58dc:	008000f4 	movhi	r2,3
    58e0:	1094bb04 	addi	r2,r2,21228
    58e4:	14000217 	ldw	r16,8(r2)
    58e8:	00bfff04 	movi	r2,-4
    58ec:	80c00117 	ldw	r3,4(r16)
    58f0:	1886703a 	and	r3,r3,r2
    58f4:	003f9106 	br	573c <_gp+0xfffc6e34>
    58f8:	60800217 	ldw	r2,8(r12)
    58fc:	213fffc4 	addi	r4,r4,-1
    5900:	1300651e 	bne	r2,r12,5a98 <_malloc_r+0x7f4>
    5904:	208000cc 	andi	r2,r4,3
    5908:	633ffe04 	addi	r12,r12,-8
    590c:	103ffa1e 	bne	r2,zero,58f8 <_gp+0xfffc6ff0>
    5910:	98800117 	ldw	r2,4(r19)
    5914:	0146303a 	nor	r3,zero,r5
    5918:	1884703a 	and	r2,r3,r2
    591c:	98800115 	stw	r2,4(r19)
    5920:	294b883a 	add	r5,r5,r5
    5924:	117f2836 	bltu	r2,r5,55c8 <_gp+0xfffc6cc0>
    5928:	283f2726 	beq	r5,zero,55c8 <_gp+0xfffc6cc0>
    592c:	2886703a 	and	r3,r5,r2
    5930:	5809883a 	mov	r4,r11
    5934:	183ec31e 	bne	r3,zero,5444 <_gp+0xfffc6b3c>
    5938:	294b883a 	add	r5,r5,r5
    593c:	2886703a 	and	r3,r5,r2
    5940:	21000104 	addi	r4,r4,4
    5944:	183ffc26 	beq	r3,zero,5938 <_gp+0xfffc7030>
    5948:	003ebe06 	br	5444 <_gp+0xfffc6b3c>
    594c:	00c05504 	movi	r3,340
    5950:	18801236 	bltu	r3,r2,599c <_malloc_r+0x6f8>
    5954:	8804d3fa 	srli	r2,r17,15
    5958:	12001e04 	addi	r8,r2,120
    595c:	11c01dc4 	addi	r7,r2,119
    5960:	4209883a 	add	r4,r8,r8
    5964:	003e6d06 	br	531c <_gp+0xfffc6a14>
    5968:	00c40004 	movi	r3,4096
    596c:	003f4606 	br	5688 <_gp+0xfffc6d80>
    5970:	00800044 	movi	r2,1
    5974:	a0800115 	stw	r2,4(r20)
    5978:	003f7406 	br	574c <_gp+0xfffc6e44>
    597c:	1805d0ba 	srai	r2,r3,2
    5980:	01c00044 	movi	r7,1
    5984:	30c00117 	ldw	r3,4(r6)
    5988:	388e983a 	sll	r7,r7,r2
    598c:	2805883a 	mov	r2,r5
    5990:	38c6b03a 	or	r3,r7,r3
    5994:	30c00115 	stw	r3,4(r6)
    5998:	003f9b06 	br	5808 <_gp+0xfffc6f00>
    599c:	00c15504 	movi	r3,1364
    59a0:	18801a36 	bltu	r3,r2,5a0c <_malloc_r+0x768>
    59a4:	8804d4ba 	srli	r2,r17,18
    59a8:	12001f44 	addi	r8,r2,125
    59ac:	11c01f04 	addi	r7,r2,124
    59b0:	4209883a 	add	r4,r8,r8
    59b4:	003e5906 	br	531c <_gp+0xfffc6a14>
    59b8:	ad400404 	addi	r21,r21,16
    59bc:	003f1706 	br	561c <_gp+0xfffc6d14>
    59c0:	00c01504 	movi	r3,84
    59c4:	18802336 	bltu	r3,r2,5a54 <_malloc_r+0x7b0>
    59c8:	3804d33a 	srli	r2,r7,12
    59cc:	11401bc4 	addi	r5,r2,111
    59d0:	10c01b84 	addi	r3,r2,110
    59d4:	294b883a 	add	r5,r5,r5
    59d8:	003f7b06 	br	57c8 <_gp+0xfffc6ec0>
    59dc:	9c000217 	ldw	r16,8(r19)
    59e0:	00bfff04 	movi	r2,-4
    59e4:	80c00117 	ldw	r3,4(r16)
    59e8:	1886703a 	and	r3,r3,r2
    59ec:	003f5306 	br	573c <_gp+0xfffc6e34>
    59f0:	3083ffcc 	andi	r2,r6,4095
    59f4:	103f181e 	bne	r2,zero,5658 <_gp+0xfffc6d50>
    59f8:	99000217 	ldw	r4,8(r19)
    59fc:	b545883a 	add	r2,r22,r21
    5a00:	10800054 	ori	r2,r2,1
    5a04:	20800115 	stw	r2,4(r4)
    5a08:	003f3e06 	br	5704 <_gp+0xfffc6dfc>
    5a0c:	01003f84 	movi	r4,254
    5a10:	02001fc4 	movi	r8,127
    5a14:	01c01f84 	movi	r7,126
    5a18:	003e4006 	br	531c <_gp+0xfffc6a14>
    5a1c:	008000f4 	movhi	r2,3
    5a20:	109a4604 	addi	r2,r2,26904
    5a24:	15000015 	stw	r20,0(r2)
    5a28:	003f1106 	br	5670 <_gp+0xfffc6d68>
    5a2c:	00800044 	movi	r2,1
    5a30:	002b883a 	mov	r21,zero
    5a34:	003f1f06 	br	56b4 <_gp+0xfffc6dac>
    5a38:	81400204 	addi	r5,r16,8
    5a3c:	9009883a 	mov	r4,r18
    5a40:	0004b740 	call	4b74 <_free_r>
    5a44:	00800134 	movhi	r2,4
    5a48:	10a17904 	addi	r2,r2,-31260
    5a4c:	10c00017 	ldw	r3,0(r2)
    5a50:	003f2c06 	br	5704 <_gp+0xfffc6dfc>
    5a54:	00c05504 	movi	r3,340
    5a58:	18800536 	bltu	r3,r2,5a70 <_malloc_r+0x7cc>
    5a5c:	3804d3fa 	srli	r2,r7,15
    5a60:	11401e04 	addi	r5,r2,120
    5a64:	10c01dc4 	addi	r3,r2,119
    5a68:	294b883a 	add	r5,r5,r5
    5a6c:	003f5606 	br	57c8 <_gp+0xfffc6ec0>
    5a70:	00c15504 	movi	r3,1364
    5a74:	18800536 	bltu	r3,r2,5a8c <_malloc_r+0x7e8>
    5a78:	3804d4ba 	srli	r2,r7,18
    5a7c:	11401f44 	addi	r5,r2,125
    5a80:	10c01f04 	addi	r3,r2,124
    5a84:	294b883a 	add	r5,r5,r5
    5a88:	003f4f06 	br	57c8 <_gp+0xfffc6ec0>
    5a8c:	01403f84 	movi	r5,254
    5a90:	00c01f84 	movi	r3,126
    5a94:	003f4c06 	br	57c8 <_gp+0xfffc6ec0>
    5a98:	98800117 	ldw	r2,4(r19)
    5a9c:	003fa006 	br	5920 <_gp+0xfffc7018>
    5aa0:	8808d0fa 	srli	r4,r17,3
    5aa4:	20800044 	addi	r2,r4,1
    5aa8:	1085883a 	add	r2,r2,r2
    5aac:	003e9006 	br	54f0 <_gp+0xfffc6be8>

00005ab0 <memchr>:
    5ab0:	208000cc 	andi	r2,r4,3
    5ab4:	280f883a 	mov	r7,r5
    5ab8:	10003426 	beq	r2,zero,5b8c <memchr+0xdc>
    5abc:	30bfffc4 	addi	r2,r6,-1
    5ac0:	30001a26 	beq	r6,zero,5b2c <memchr+0x7c>
    5ac4:	20c00003 	ldbu	r3,0(r4)
    5ac8:	29803fcc 	andi	r6,r5,255
    5acc:	30c0051e 	bne	r6,r3,5ae4 <memchr+0x34>
    5ad0:	00001806 	br	5b34 <memchr+0x84>
    5ad4:	10001526 	beq	r2,zero,5b2c <memchr+0x7c>
    5ad8:	20c00003 	ldbu	r3,0(r4)
    5adc:	10bfffc4 	addi	r2,r2,-1
    5ae0:	30c01426 	beq	r6,r3,5b34 <memchr+0x84>
    5ae4:	21000044 	addi	r4,r4,1
    5ae8:	20c000cc 	andi	r3,r4,3
    5aec:	183ff91e 	bne	r3,zero,5ad4 <_gp+0xfffc71cc>
    5af0:	020000c4 	movi	r8,3
    5af4:	40801136 	bltu	r8,r2,5b3c <memchr+0x8c>
    5af8:	10000c26 	beq	r2,zero,5b2c <memchr+0x7c>
    5afc:	20c00003 	ldbu	r3,0(r4)
    5b00:	29403fcc 	andi	r5,r5,255
    5b04:	28c00b26 	beq	r5,r3,5b34 <memchr+0x84>
    5b08:	20c00044 	addi	r3,r4,1
    5b0c:	39803fcc 	andi	r6,r7,255
    5b10:	2089883a 	add	r4,r4,r2
    5b14:	00000306 	br	5b24 <memchr+0x74>
    5b18:	18c00044 	addi	r3,r3,1
    5b1c:	197fffc3 	ldbu	r5,-1(r3)
    5b20:	31400526 	beq	r6,r5,5b38 <memchr+0x88>
    5b24:	1805883a 	mov	r2,r3
    5b28:	20fffb1e 	bne	r4,r3,5b18 <_gp+0xfffc7210>
    5b2c:	0005883a 	mov	r2,zero
    5b30:	f800283a 	ret
    5b34:	2005883a 	mov	r2,r4
    5b38:	f800283a 	ret
    5b3c:	28c03fcc 	andi	r3,r5,255
    5b40:	1812923a 	slli	r9,r3,8
    5b44:	02ffbff4 	movhi	r11,65279
    5b48:	02a02074 	movhi	r10,32897
    5b4c:	48d2b03a 	or	r9,r9,r3
    5b50:	4806943a 	slli	r3,r9,16
    5b54:	5affbfc4 	addi	r11,r11,-257
    5b58:	52a02004 	addi	r10,r10,-32640
    5b5c:	48d2b03a 	or	r9,r9,r3
    5b60:	20c00017 	ldw	r3,0(r4)
    5b64:	48c6f03a 	xor	r3,r9,r3
    5b68:	1acd883a 	add	r6,r3,r11
    5b6c:	00c6303a 	nor	r3,zero,r3
    5b70:	30c6703a 	and	r3,r6,r3
    5b74:	1a86703a 	and	r3,r3,r10
    5b78:	183fe01e 	bne	r3,zero,5afc <_gp+0xfffc71f4>
    5b7c:	10bfff04 	addi	r2,r2,-4
    5b80:	21000104 	addi	r4,r4,4
    5b84:	40bff636 	bltu	r8,r2,5b60 <_gp+0xfffc7258>
    5b88:	003fdb06 	br	5af8 <_gp+0xfffc71f0>
    5b8c:	3005883a 	mov	r2,r6
    5b90:	003fd706 	br	5af0 <_gp+0xfffc71e8>

00005b94 <memcpy>:
    5b94:	defffd04 	addi	sp,sp,-12
    5b98:	dfc00215 	stw	ra,8(sp)
    5b9c:	dc400115 	stw	r17,4(sp)
    5ba0:	dc000015 	stw	r16,0(sp)
    5ba4:	00c003c4 	movi	r3,15
    5ba8:	2005883a 	mov	r2,r4
    5bac:	1980452e 	bgeu	r3,r6,5cc4 <memcpy+0x130>
    5bb0:	2906b03a 	or	r3,r5,r4
    5bb4:	18c000cc 	andi	r3,r3,3
    5bb8:	1800441e 	bne	r3,zero,5ccc <memcpy+0x138>
    5bbc:	347ffc04 	addi	r17,r6,-16
    5bc0:	8822d13a 	srli	r17,r17,4
    5bc4:	28c00104 	addi	r3,r5,4
    5bc8:	23400104 	addi	r13,r4,4
    5bcc:	8820913a 	slli	r16,r17,4
    5bd0:	2b000204 	addi	r12,r5,8
    5bd4:	22c00204 	addi	r11,r4,8
    5bd8:	84000504 	addi	r16,r16,20
    5bdc:	2a800304 	addi	r10,r5,12
    5be0:	22400304 	addi	r9,r4,12
    5be4:	2c21883a 	add	r16,r5,r16
    5be8:	2811883a 	mov	r8,r5
    5bec:	200f883a 	mov	r7,r4
    5bf0:	41000017 	ldw	r4,0(r8)
    5bf4:	1fc00017 	ldw	ra,0(r3)
    5bf8:	63c00017 	ldw	r15,0(r12)
    5bfc:	39000015 	stw	r4,0(r7)
    5c00:	53800017 	ldw	r14,0(r10)
    5c04:	6fc00015 	stw	ra,0(r13)
    5c08:	5bc00015 	stw	r15,0(r11)
    5c0c:	4b800015 	stw	r14,0(r9)
    5c10:	18c00404 	addi	r3,r3,16
    5c14:	39c00404 	addi	r7,r7,16
    5c18:	42000404 	addi	r8,r8,16
    5c1c:	6b400404 	addi	r13,r13,16
    5c20:	63000404 	addi	r12,r12,16
    5c24:	5ac00404 	addi	r11,r11,16
    5c28:	52800404 	addi	r10,r10,16
    5c2c:	4a400404 	addi	r9,r9,16
    5c30:	1c3fef1e 	bne	r3,r16,5bf0 <_gp+0xfffc72e8>
    5c34:	89c00044 	addi	r7,r17,1
    5c38:	380e913a 	slli	r7,r7,4
    5c3c:	310003cc 	andi	r4,r6,15
    5c40:	02c000c4 	movi	r11,3
    5c44:	11c7883a 	add	r3,r2,r7
    5c48:	29cb883a 	add	r5,r5,r7
    5c4c:	5900212e 	bgeu	r11,r4,5cd4 <memcpy+0x140>
    5c50:	1813883a 	mov	r9,r3
    5c54:	2811883a 	mov	r8,r5
    5c58:	200f883a 	mov	r7,r4
    5c5c:	42800017 	ldw	r10,0(r8)
    5c60:	4a400104 	addi	r9,r9,4
    5c64:	39ffff04 	addi	r7,r7,-4
    5c68:	4abfff15 	stw	r10,-4(r9)
    5c6c:	42000104 	addi	r8,r8,4
    5c70:	59fffa36 	bltu	r11,r7,5c5c <_gp+0xfffc7354>
    5c74:	213fff04 	addi	r4,r4,-4
    5c78:	2008d0ba 	srli	r4,r4,2
    5c7c:	318000cc 	andi	r6,r6,3
    5c80:	21000044 	addi	r4,r4,1
    5c84:	2109883a 	add	r4,r4,r4
    5c88:	2109883a 	add	r4,r4,r4
    5c8c:	1907883a 	add	r3,r3,r4
    5c90:	290b883a 	add	r5,r5,r4
    5c94:	30000626 	beq	r6,zero,5cb0 <memcpy+0x11c>
    5c98:	198d883a 	add	r6,r3,r6
    5c9c:	29c00003 	ldbu	r7,0(r5)
    5ca0:	18c00044 	addi	r3,r3,1
    5ca4:	29400044 	addi	r5,r5,1
    5ca8:	19ffffc5 	stb	r7,-1(r3)
    5cac:	19bffb1e 	bne	r3,r6,5c9c <_gp+0xfffc7394>
    5cb0:	dfc00217 	ldw	ra,8(sp)
    5cb4:	dc400117 	ldw	r17,4(sp)
    5cb8:	dc000017 	ldw	r16,0(sp)
    5cbc:	dec00304 	addi	sp,sp,12
    5cc0:	f800283a 	ret
    5cc4:	2007883a 	mov	r3,r4
    5cc8:	003ff206 	br	5c94 <_gp+0xfffc738c>
    5ccc:	2007883a 	mov	r3,r4
    5cd0:	003ff106 	br	5c98 <_gp+0xfffc7390>
    5cd4:	200d883a 	mov	r6,r4
    5cd8:	003fee06 	br	5c94 <_gp+0xfffc738c>

00005cdc <memset>:
    5cdc:	20c000cc 	andi	r3,r4,3
    5ce0:	2005883a 	mov	r2,r4
    5ce4:	18004426 	beq	r3,zero,5df8 <memset+0x11c>
    5ce8:	31ffffc4 	addi	r7,r6,-1
    5cec:	30004026 	beq	r6,zero,5df0 <memset+0x114>
    5cf0:	2813883a 	mov	r9,r5
    5cf4:	200d883a 	mov	r6,r4
    5cf8:	2007883a 	mov	r3,r4
    5cfc:	00000406 	br	5d10 <memset+0x34>
    5d00:	3a3fffc4 	addi	r8,r7,-1
    5d04:	31800044 	addi	r6,r6,1
    5d08:	38003926 	beq	r7,zero,5df0 <memset+0x114>
    5d0c:	400f883a 	mov	r7,r8
    5d10:	18c00044 	addi	r3,r3,1
    5d14:	32400005 	stb	r9,0(r6)
    5d18:	1a0000cc 	andi	r8,r3,3
    5d1c:	403ff81e 	bne	r8,zero,5d00 <_gp+0xfffc73f8>
    5d20:	010000c4 	movi	r4,3
    5d24:	21c02d2e 	bgeu	r4,r7,5ddc <memset+0x100>
    5d28:	29003fcc 	andi	r4,r5,255
    5d2c:	200c923a 	slli	r6,r4,8
    5d30:	3108b03a 	or	r4,r6,r4
    5d34:	200c943a 	slli	r6,r4,16
    5d38:	218cb03a 	or	r6,r4,r6
    5d3c:	010003c4 	movi	r4,15
    5d40:	21c0182e 	bgeu	r4,r7,5da4 <memset+0xc8>
    5d44:	3b3ffc04 	addi	r12,r7,-16
    5d48:	6018d13a 	srli	r12,r12,4
    5d4c:	1a000104 	addi	r8,r3,4
    5d50:	1ac00204 	addi	r11,r3,8
    5d54:	6008913a 	slli	r4,r12,4
    5d58:	1a800304 	addi	r10,r3,12
    5d5c:	1813883a 	mov	r9,r3
    5d60:	21000504 	addi	r4,r4,20
    5d64:	1909883a 	add	r4,r3,r4
    5d68:	49800015 	stw	r6,0(r9)
    5d6c:	41800015 	stw	r6,0(r8)
    5d70:	59800015 	stw	r6,0(r11)
    5d74:	51800015 	stw	r6,0(r10)
    5d78:	42000404 	addi	r8,r8,16
    5d7c:	4a400404 	addi	r9,r9,16
    5d80:	5ac00404 	addi	r11,r11,16
    5d84:	52800404 	addi	r10,r10,16
    5d88:	413ff71e 	bne	r8,r4,5d68 <_gp+0xfffc7460>
    5d8c:	63000044 	addi	r12,r12,1
    5d90:	6018913a 	slli	r12,r12,4
    5d94:	39c003cc 	andi	r7,r7,15
    5d98:	010000c4 	movi	r4,3
    5d9c:	1b07883a 	add	r3,r3,r12
    5da0:	21c00e2e 	bgeu	r4,r7,5ddc <memset+0x100>
    5da4:	1813883a 	mov	r9,r3
    5da8:	3811883a 	mov	r8,r7
    5dac:	010000c4 	movi	r4,3
    5db0:	49800015 	stw	r6,0(r9)
    5db4:	423fff04 	addi	r8,r8,-4
    5db8:	4a400104 	addi	r9,r9,4
    5dbc:	223ffc36 	bltu	r4,r8,5db0 <_gp+0xfffc74a8>
    5dc0:	393fff04 	addi	r4,r7,-4
    5dc4:	2008d0ba 	srli	r4,r4,2
    5dc8:	39c000cc 	andi	r7,r7,3
    5dcc:	21000044 	addi	r4,r4,1
    5dd0:	2109883a 	add	r4,r4,r4
    5dd4:	2109883a 	add	r4,r4,r4
    5dd8:	1907883a 	add	r3,r3,r4
    5ddc:	38000526 	beq	r7,zero,5df4 <memset+0x118>
    5de0:	19cf883a 	add	r7,r3,r7
    5de4:	19400005 	stb	r5,0(r3)
    5de8:	18c00044 	addi	r3,r3,1
    5dec:	38fffd1e 	bne	r7,r3,5de4 <_gp+0xfffc74dc>
    5df0:	f800283a 	ret
    5df4:	f800283a 	ret
    5df8:	2007883a 	mov	r3,r4
    5dfc:	300f883a 	mov	r7,r6
    5e00:	003fc706 	br	5d20 <_gp+0xfffc7418>

00005e04 <_Balloc>:
    5e04:	20801317 	ldw	r2,76(r4)
    5e08:	defffc04 	addi	sp,sp,-16
    5e0c:	dc400115 	stw	r17,4(sp)
    5e10:	dc000015 	stw	r16,0(sp)
    5e14:	dfc00315 	stw	ra,12(sp)
    5e18:	dc800215 	stw	r18,8(sp)
    5e1c:	2023883a 	mov	r17,r4
    5e20:	2821883a 	mov	r16,r5
    5e24:	10000f26 	beq	r2,zero,5e64 <_Balloc+0x60>
    5e28:	8407883a 	add	r3,r16,r16
    5e2c:	18c7883a 	add	r3,r3,r3
    5e30:	10c7883a 	add	r3,r2,r3
    5e34:	18800017 	ldw	r2,0(r3)
    5e38:	10001126 	beq	r2,zero,5e80 <_Balloc+0x7c>
    5e3c:	11000017 	ldw	r4,0(r2)
    5e40:	19000015 	stw	r4,0(r3)
    5e44:	10000415 	stw	zero,16(r2)
    5e48:	10000315 	stw	zero,12(r2)
    5e4c:	dfc00317 	ldw	ra,12(sp)
    5e50:	dc800217 	ldw	r18,8(sp)
    5e54:	dc400117 	ldw	r17,4(sp)
    5e58:	dc000017 	ldw	r16,0(sp)
    5e5c:	dec00404 	addi	sp,sp,16
    5e60:	f800283a 	ret
    5e64:	01800844 	movi	r6,33
    5e68:	01400104 	movi	r5,4
    5e6c:	00088740 	call	8874 <_calloc_r>
    5e70:	88801315 	stw	r2,76(r17)
    5e74:	103fec1e 	bne	r2,zero,5e28 <_gp+0xfffc7520>
    5e78:	0005883a 	mov	r2,zero
    5e7c:	003ff306 	br	5e4c <_gp+0xfffc7544>
    5e80:	01400044 	movi	r5,1
    5e84:	2c24983a 	sll	r18,r5,r16
    5e88:	8809883a 	mov	r4,r17
    5e8c:	91800144 	addi	r6,r18,5
    5e90:	318d883a 	add	r6,r6,r6
    5e94:	318d883a 	add	r6,r6,r6
    5e98:	00088740 	call	8874 <_calloc_r>
    5e9c:	103ff626 	beq	r2,zero,5e78 <_gp+0xfffc7570>
    5ea0:	14000115 	stw	r16,4(r2)
    5ea4:	14800215 	stw	r18,8(r2)
    5ea8:	003fe606 	br	5e44 <_gp+0xfffc753c>

00005eac <_Bfree>:
    5eac:	28000826 	beq	r5,zero,5ed0 <_Bfree+0x24>
    5eb0:	28c00117 	ldw	r3,4(r5)
    5eb4:	20801317 	ldw	r2,76(r4)
    5eb8:	18c7883a 	add	r3,r3,r3
    5ebc:	18c7883a 	add	r3,r3,r3
    5ec0:	10c5883a 	add	r2,r2,r3
    5ec4:	10c00017 	ldw	r3,0(r2)
    5ec8:	28c00015 	stw	r3,0(r5)
    5ecc:	11400015 	stw	r5,0(r2)
    5ed0:	f800283a 	ret

00005ed4 <__multadd>:
    5ed4:	defffa04 	addi	sp,sp,-24
    5ed8:	dc800315 	stw	r18,12(sp)
    5edc:	dc400215 	stw	r17,8(sp)
    5ee0:	dc000115 	stw	r16,4(sp)
    5ee4:	2823883a 	mov	r17,r5
    5ee8:	2c000417 	ldw	r16,16(r5)
    5eec:	dfc00515 	stw	ra,20(sp)
    5ef0:	dcc00415 	stw	r19,16(sp)
    5ef4:	2025883a 	mov	r18,r4
    5ef8:	29400504 	addi	r5,r5,20
    5efc:	0011883a 	mov	r8,zero
    5f00:	28c00017 	ldw	r3,0(r5)
    5f04:	29400104 	addi	r5,r5,4
    5f08:	42000044 	addi	r8,r8,1
    5f0c:	18bfffcc 	andi	r2,r3,65535
    5f10:	1185383a 	mul	r2,r2,r6
    5f14:	1806d43a 	srli	r3,r3,16
    5f18:	11cf883a 	add	r7,r2,r7
    5f1c:	3808d43a 	srli	r4,r7,16
    5f20:	1987383a 	mul	r3,r3,r6
    5f24:	38bfffcc 	andi	r2,r7,65535
    5f28:	1907883a 	add	r3,r3,r4
    5f2c:	1808943a 	slli	r4,r3,16
    5f30:	180ed43a 	srli	r7,r3,16
    5f34:	2085883a 	add	r2,r4,r2
    5f38:	28bfff15 	stw	r2,-4(r5)
    5f3c:	443ff016 	blt	r8,r16,5f00 <_gp+0xfffc75f8>
    5f40:	38000926 	beq	r7,zero,5f68 <__multadd+0x94>
    5f44:	88800217 	ldw	r2,8(r17)
    5f48:	80800f0e 	bge	r16,r2,5f88 <__multadd+0xb4>
    5f4c:	80800144 	addi	r2,r16,5
    5f50:	1085883a 	add	r2,r2,r2
    5f54:	1085883a 	add	r2,r2,r2
    5f58:	8885883a 	add	r2,r17,r2
    5f5c:	11c00015 	stw	r7,0(r2)
    5f60:	84000044 	addi	r16,r16,1
    5f64:	8c000415 	stw	r16,16(r17)
    5f68:	8805883a 	mov	r2,r17
    5f6c:	dfc00517 	ldw	ra,20(sp)
    5f70:	dcc00417 	ldw	r19,16(sp)
    5f74:	dc800317 	ldw	r18,12(sp)
    5f78:	dc400217 	ldw	r17,8(sp)
    5f7c:	dc000117 	ldw	r16,4(sp)
    5f80:	dec00604 	addi	sp,sp,24
    5f84:	f800283a 	ret
    5f88:	89400117 	ldw	r5,4(r17)
    5f8c:	9009883a 	mov	r4,r18
    5f90:	d9c00015 	stw	r7,0(sp)
    5f94:	29400044 	addi	r5,r5,1
    5f98:	0005e040 	call	5e04 <_Balloc>
    5f9c:	89800417 	ldw	r6,16(r17)
    5fa0:	89400304 	addi	r5,r17,12
    5fa4:	11000304 	addi	r4,r2,12
    5fa8:	31800084 	addi	r6,r6,2
    5fac:	318d883a 	add	r6,r6,r6
    5fb0:	318d883a 	add	r6,r6,r6
    5fb4:	1027883a 	mov	r19,r2
    5fb8:	0005b940 	call	5b94 <memcpy>
    5fbc:	d9c00017 	ldw	r7,0(sp)
    5fc0:	88000a26 	beq	r17,zero,5fec <__multadd+0x118>
    5fc4:	88c00117 	ldw	r3,4(r17)
    5fc8:	90801317 	ldw	r2,76(r18)
    5fcc:	18c7883a 	add	r3,r3,r3
    5fd0:	18c7883a 	add	r3,r3,r3
    5fd4:	10c5883a 	add	r2,r2,r3
    5fd8:	10c00017 	ldw	r3,0(r2)
    5fdc:	88c00015 	stw	r3,0(r17)
    5fe0:	14400015 	stw	r17,0(r2)
    5fe4:	9823883a 	mov	r17,r19
    5fe8:	003fd806 	br	5f4c <_gp+0xfffc7644>
    5fec:	9823883a 	mov	r17,r19
    5ff0:	003fd606 	br	5f4c <_gp+0xfffc7644>

00005ff4 <__s2b>:
    5ff4:	defff904 	addi	sp,sp,-28
    5ff8:	dc400115 	stw	r17,4(sp)
    5ffc:	dc000015 	stw	r16,0(sp)
    6000:	2023883a 	mov	r17,r4
    6004:	2821883a 	mov	r16,r5
    6008:	39000204 	addi	r4,r7,8
    600c:	01400244 	movi	r5,9
    6010:	dcc00315 	stw	r19,12(sp)
    6014:	dc800215 	stw	r18,8(sp)
    6018:	dfc00615 	stw	ra,24(sp)
    601c:	dd400515 	stw	r21,20(sp)
    6020:	dd000415 	stw	r20,16(sp)
    6024:	3825883a 	mov	r18,r7
    6028:	3027883a 	mov	r19,r6
    602c:	000053c0 	call	53c <__divsi3>
    6030:	00c00044 	movi	r3,1
    6034:	000b883a 	mov	r5,zero
    6038:	1880030e 	bge	r3,r2,6048 <__s2b+0x54>
    603c:	18c7883a 	add	r3,r3,r3
    6040:	29400044 	addi	r5,r5,1
    6044:	18bffd16 	blt	r3,r2,603c <_gp+0xfffc7734>
    6048:	8809883a 	mov	r4,r17
    604c:	0005e040 	call	5e04 <_Balloc>
    6050:	d8c00717 	ldw	r3,28(sp)
    6054:	10c00515 	stw	r3,20(r2)
    6058:	00c00044 	movi	r3,1
    605c:	10c00415 	stw	r3,16(r2)
    6060:	00c00244 	movi	r3,9
    6064:	1cc0210e 	bge	r3,r19,60ec <__s2b+0xf8>
    6068:	80eb883a 	add	r21,r16,r3
    606c:	a829883a 	mov	r20,r21
    6070:	84e1883a 	add	r16,r16,r19
    6074:	a1c00007 	ldb	r7,0(r20)
    6078:	01800284 	movi	r6,10
    607c:	a5000044 	addi	r20,r20,1
    6080:	100b883a 	mov	r5,r2
    6084:	39fff404 	addi	r7,r7,-48
    6088:	8809883a 	mov	r4,r17
    608c:	0005ed40 	call	5ed4 <__multadd>
    6090:	a43ff81e 	bne	r20,r16,6074 <_gp+0xfffc776c>
    6094:	ace1883a 	add	r16,r21,r19
    6098:	843ffe04 	addi	r16,r16,-8
    609c:	9c800a0e 	bge	r19,r18,60c8 <__s2b+0xd4>
    60a0:	94e5c83a 	sub	r18,r18,r19
    60a4:	84a5883a 	add	r18,r16,r18
    60a8:	81c00007 	ldb	r7,0(r16)
    60ac:	01800284 	movi	r6,10
    60b0:	84000044 	addi	r16,r16,1
    60b4:	100b883a 	mov	r5,r2
    60b8:	39fff404 	addi	r7,r7,-48
    60bc:	8809883a 	mov	r4,r17
    60c0:	0005ed40 	call	5ed4 <__multadd>
    60c4:	84bff81e 	bne	r16,r18,60a8 <_gp+0xfffc77a0>
    60c8:	dfc00617 	ldw	ra,24(sp)
    60cc:	dd400517 	ldw	r21,20(sp)
    60d0:	dd000417 	ldw	r20,16(sp)
    60d4:	dcc00317 	ldw	r19,12(sp)
    60d8:	dc800217 	ldw	r18,8(sp)
    60dc:	dc400117 	ldw	r17,4(sp)
    60e0:	dc000017 	ldw	r16,0(sp)
    60e4:	dec00704 	addi	sp,sp,28
    60e8:	f800283a 	ret
    60ec:	84000284 	addi	r16,r16,10
    60f0:	1827883a 	mov	r19,r3
    60f4:	003fe906 	br	609c <_gp+0xfffc7794>

000060f8 <__hi0bits>:
    60f8:	20bfffec 	andhi	r2,r4,65535
    60fc:	1000141e 	bne	r2,zero,6150 <__hi0bits+0x58>
    6100:	2008943a 	slli	r4,r4,16
    6104:	00800404 	movi	r2,16
    6108:	20ffc02c 	andhi	r3,r4,65280
    610c:	1800021e 	bne	r3,zero,6118 <__hi0bits+0x20>
    6110:	2008923a 	slli	r4,r4,8
    6114:	10800204 	addi	r2,r2,8
    6118:	20fc002c 	andhi	r3,r4,61440
    611c:	1800021e 	bne	r3,zero,6128 <__hi0bits+0x30>
    6120:	2008913a 	slli	r4,r4,4
    6124:	10800104 	addi	r2,r2,4
    6128:	20f0002c 	andhi	r3,r4,49152
    612c:	1800031e 	bne	r3,zero,613c <__hi0bits+0x44>
    6130:	2109883a 	add	r4,r4,r4
    6134:	10800084 	addi	r2,r2,2
    6138:	2109883a 	add	r4,r4,r4
    613c:	20000316 	blt	r4,zero,614c <__hi0bits+0x54>
    6140:	2110002c 	andhi	r4,r4,16384
    6144:	2000041e 	bne	r4,zero,6158 <__hi0bits+0x60>
    6148:	00800804 	movi	r2,32
    614c:	f800283a 	ret
    6150:	0005883a 	mov	r2,zero
    6154:	003fec06 	br	6108 <_gp+0xfffc7800>
    6158:	10800044 	addi	r2,r2,1
    615c:	f800283a 	ret

00006160 <__lo0bits>:
    6160:	20c00017 	ldw	r3,0(r4)
    6164:	188001cc 	andi	r2,r3,7
    6168:	10000826 	beq	r2,zero,618c <__lo0bits+0x2c>
    616c:	1880004c 	andi	r2,r3,1
    6170:	1000211e 	bne	r2,zero,61f8 <__lo0bits+0x98>
    6174:	1880008c 	andi	r2,r3,2
    6178:	1000211e 	bne	r2,zero,6200 <__lo0bits+0xa0>
    617c:	1806d0ba 	srli	r3,r3,2
    6180:	00800084 	movi	r2,2
    6184:	20c00015 	stw	r3,0(r4)
    6188:	f800283a 	ret
    618c:	18bfffcc 	andi	r2,r3,65535
    6190:	10001326 	beq	r2,zero,61e0 <__lo0bits+0x80>
    6194:	0005883a 	mov	r2,zero
    6198:	19403fcc 	andi	r5,r3,255
    619c:	2800021e 	bne	r5,zero,61a8 <__lo0bits+0x48>
    61a0:	1806d23a 	srli	r3,r3,8
    61a4:	10800204 	addi	r2,r2,8
    61a8:	194003cc 	andi	r5,r3,15
    61ac:	2800021e 	bne	r5,zero,61b8 <__lo0bits+0x58>
    61b0:	1806d13a 	srli	r3,r3,4
    61b4:	10800104 	addi	r2,r2,4
    61b8:	194000cc 	andi	r5,r3,3
    61bc:	2800021e 	bne	r5,zero,61c8 <__lo0bits+0x68>
    61c0:	1806d0ba 	srli	r3,r3,2
    61c4:	10800084 	addi	r2,r2,2
    61c8:	1940004c 	andi	r5,r3,1
    61cc:	2800081e 	bne	r5,zero,61f0 <__lo0bits+0x90>
    61d0:	1806d07a 	srli	r3,r3,1
    61d4:	1800051e 	bne	r3,zero,61ec <__lo0bits+0x8c>
    61d8:	00800804 	movi	r2,32
    61dc:	f800283a 	ret
    61e0:	1806d43a 	srli	r3,r3,16
    61e4:	00800404 	movi	r2,16
    61e8:	003feb06 	br	6198 <_gp+0xfffc7890>
    61ec:	10800044 	addi	r2,r2,1
    61f0:	20c00015 	stw	r3,0(r4)
    61f4:	f800283a 	ret
    61f8:	0005883a 	mov	r2,zero
    61fc:	f800283a 	ret
    6200:	1806d07a 	srli	r3,r3,1
    6204:	00800044 	movi	r2,1
    6208:	20c00015 	stw	r3,0(r4)
    620c:	f800283a 	ret

00006210 <__i2b>:
    6210:	defffd04 	addi	sp,sp,-12
    6214:	dc000015 	stw	r16,0(sp)
    6218:	04000044 	movi	r16,1
    621c:	dc400115 	stw	r17,4(sp)
    6220:	2823883a 	mov	r17,r5
    6224:	800b883a 	mov	r5,r16
    6228:	dfc00215 	stw	ra,8(sp)
    622c:	0005e040 	call	5e04 <_Balloc>
    6230:	14400515 	stw	r17,20(r2)
    6234:	14000415 	stw	r16,16(r2)
    6238:	dfc00217 	ldw	ra,8(sp)
    623c:	dc400117 	ldw	r17,4(sp)
    6240:	dc000017 	ldw	r16,0(sp)
    6244:	dec00304 	addi	sp,sp,12
    6248:	f800283a 	ret

0000624c <__multiply>:
    624c:	defffa04 	addi	sp,sp,-24
    6250:	dcc00315 	stw	r19,12(sp)
    6254:	dc800215 	stw	r18,8(sp)
    6258:	34c00417 	ldw	r19,16(r6)
    625c:	2c800417 	ldw	r18,16(r5)
    6260:	dd000415 	stw	r20,16(sp)
    6264:	dc400115 	stw	r17,4(sp)
    6268:	dfc00515 	stw	ra,20(sp)
    626c:	dc000015 	stw	r16,0(sp)
    6270:	2829883a 	mov	r20,r5
    6274:	3023883a 	mov	r17,r6
    6278:	94c0050e 	bge	r18,r19,6290 <__multiply+0x44>
    627c:	9007883a 	mov	r3,r18
    6280:	3029883a 	mov	r20,r6
    6284:	9825883a 	mov	r18,r19
    6288:	2823883a 	mov	r17,r5
    628c:	1827883a 	mov	r19,r3
    6290:	a0800217 	ldw	r2,8(r20)
    6294:	94e1883a 	add	r16,r18,r19
    6298:	a1400117 	ldw	r5,4(r20)
    629c:	1400010e 	bge	r2,r16,62a4 <__multiply+0x58>
    62a0:	29400044 	addi	r5,r5,1
    62a4:	0005e040 	call	5e04 <_Balloc>
    62a8:	8415883a 	add	r10,r16,r16
    62ac:	12c00504 	addi	r11,r2,20
    62b0:	5295883a 	add	r10,r10,r10
    62b4:	5a95883a 	add	r10,r11,r10
    62b8:	5807883a 	mov	r3,r11
    62bc:	5a80032e 	bgeu	r11,r10,62cc <__multiply+0x80>
    62c0:	18000015 	stw	zero,0(r3)
    62c4:	18c00104 	addi	r3,r3,4
    62c8:	1abffd36 	bltu	r3,r10,62c0 <_gp+0xfffc79b8>
    62cc:	9ce7883a 	add	r19,r19,r19
    62d0:	94a5883a 	add	r18,r18,r18
    62d4:	89800504 	addi	r6,r17,20
    62d8:	9ce7883a 	add	r19,r19,r19
    62dc:	a3400504 	addi	r13,r20,20
    62e0:	94a5883a 	add	r18,r18,r18
    62e4:	34d9883a 	add	r12,r6,r19
    62e8:	6c93883a 	add	r9,r13,r18
    62ec:	3300422e 	bgeu	r6,r12,63f8 <__multiply+0x1ac>
    62f0:	37c00017 	ldw	ra,0(r6)
    62f4:	fbffffcc 	andi	r15,ra,65535
    62f8:	78001b26 	beq	r15,zero,6368 <__multiply+0x11c>
    62fc:	5811883a 	mov	r8,r11
    6300:	681d883a 	mov	r14,r13
    6304:	000f883a 	mov	r7,zero
    6308:	71000017 	ldw	r4,0(r14)
    630c:	40c00017 	ldw	r3,0(r8)
    6310:	73800104 	addi	r14,r14,4
    6314:	217fffcc 	andi	r5,r4,65535
    6318:	2bcb383a 	mul	r5,r5,r15
    631c:	2008d43a 	srli	r4,r4,16
    6320:	1c7fffcc 	andi	r17,r3,65535
    6324:	2c4b883a 	add	r5,r5,r17
    6328:	29cb883a 	add	r5,r5,r7
    632c:	23c9383a 	mul	r4,r4,r15
    6330:	1806d43a 	srli	r3,r3,16
    6334:	280ed43a 	srli	r7,r5,16
    6338:	297fffcc 	andi	r5,r5,65535
    633c:	20c7883a 	add	r3,r4,r3
    6340:	19c7883a 	add	r3,r3,r7
    6344:	1808943a 	slli	r4,r3,16
    6348:	4023883a 	mov	r17,r8
    634c:	180ed43a 	srli	r7,r3,16
    6350:	214ab03a 	or	r5,r4,r5
    6354:	41400015 	stw	r5,0(r8)
    6358:	42000104 	addi	r8,r8,4
    635c:	727fea36 	bltu	r14,r9,6308 <_gp+0xfffc7a00>
    6360:	89c00115 	stw	r7,4(r17)
    6364:	37c00017 	ldw	ra,0(r6)
    6368:	f83ed43a 	srli	ra,ra,16
    636c:	f8001f26 	beq	ra,zero,63ec <__multiply+0x1a0>
    6370:	58c00017 	ldw	r3,0(r11)
    6374:	681d883a 	mov	r14,r13
    6378:	581f883a 	mov	r15,r11
    637c:	1811883a 	mov	r8,r3
    6380:	5825883a 	mov	r18,r11
    6384:	000f883a 	mov	r7,zero
    6388:	00000106 	br	6390 <__multiply+0x144>
    638c:	8825883a 	mov	r18,r17
    6390:	7140000b 	ldhu	r5,0(r14)
    6394:	4010d43a 	srli	r8,r8,16
    6398:	193fffcc 	andi	r4,r3,65535
    639c:	2fcb383a 	mul	r5,r5,ra
    63a0:	7bc00104 	addi	r15,r15,4
    63a4:	73800104 	addi	r14,r14,4
    63a8:	2a0b883a 	add	r5,r5,r8
    63ac:	29cb883a 	add	r5,r5,r7
    63b0:	2806943a 	slli	r3,r5,16
    63b4:	94400104 	addi	r17,r18,4
    63b8:	280ad43a 	srli	r5,r5,16
    63bc:	1908b03a 	or	r4,r3,r4
    63c0:	793fff15 	stw	r4,-4(r15)
    63c4:	70ffff17 	ldw	r3,-4(r14)
    63c8:	8a000017 	ldw	r8,0(r17)
    63cc:	1806d43a 	srli	r3,r3,16
    63d0:	413fffcc 	andi	r4,r8,65535
    63d4:	1fc7383a 	mul	r3,r3,ra
    63d8:	1907883a 	add	r3,r3,r4
    63dc:	1947883a 	add	r3,r3,r5
    63e0:	180ed43a 	srli	r7,r3,16
    63e4:	727fe936 	bltu	r14,r9,638c <_gp+0xfffc7a84>
    63e8:	90c00115 	stw	r3,4(r18)
    63ec:	31800104 	addi	r6,r6,4
    63f0:	5ac00104 	addi	r11,r11,4
    63f4:	333fbe36 	bltu	r6,r12,62f0 <_gp+0xfffc79e8>
    63f8:	0400090e 	bge	zero,r16,6420 <__multiply+0x1d4>
    63fc:	50ffff17 	ldw	r3,-4(r10)
    6400:	52bfff04 	addi	r10,r10,-4
    6404:	18000326 	beq	r3,zero,6414 <__multiply+0x1c8>
    6408:	00000506 	br	6420 <__multiply+0x1d4>
    640c:	50c00017 	ldw	r3,0(r10)
    6410:	1800031e 	bne	r3,zero,6420 <__multiply+0x1d4>
    6414:	843fffc4 	addi	r16,r16,-1
    6418:	52bfff04 	addi	r10,r10,-4
    641c:	803ffb1e 	bne	r16,zero,640c <_gp+0xfffc7b04>
    6420:	14000415 	stw	r16,16(r2)
    6424:	dfc00517 	ldw	ra,20(sp)
    6428:	dd000417 	ldw	r20,16(sp)
    642c:	dcc00317 	ldw	r19,12(sp)
    6430:	dc800217 	ldw	r18,8(sp)
    6434:	dc400117 	ldw	r17,4(sp)
    6438:	dc000017 	ldw	r16,0(sp)
    643c:	dec00604 	addi	sp,sp,24
    6440:	f800283a 	ret

00006444 <__pow5mult>:
    6444:	defffa04 	addi	sp,sp,-24
    6448:	dcc00315 	stw	r19,12(sp)
    644c:	dc000015 	stw	r16,0(sp)
    6450:	dfc00515 	stw	ra,20(sp)
    6454:	dd000415 	stw	r20,16(sp)
    6458:	dc800215 	stw	r18,8(sp)
    645c:	dc400115 	stw	r17,4(sp)
    6460:	308000cc 	andi	r2,r6,3
    6464:	3021883a 	mov	r16,r6
    6468:	2027883a 	mov	r19,r4
    646c:	10002f1e 	bne	r2,zero,652c <__pow5mult+0xe8>
    6470:	2825883a 	mov	r18,r5
    6474:	8021d0ba 	srai	r16,r16,2
    6478:	80001a26 	beq	r16,zero,64e4 <__pow5mult+0xa0>
    647c:	9c401217 	ldw	r17,72(r19)
    6480:	8800061e 	bne	r17,zero,649c <__pow5mult+0x58>
    6484:	00003406 	br	6558 <__pow5mult+0x114>
    6488:	8021d07a 	srai	r16,r16,1
    648c:	80001526 	beq	r16,zero,64e4 <__pow5mult+0xa0>
    6490:	88800017 	ldw	r2,0(r17)
    6494:	10001c26 	beq	r2,zero,6508 <__pow5mult+0xc4>
    6498:	1023883a 	mov	r17,r2
    649c:	8080004c 	andi	r2,r16,1
    64a0:	103ff926 	beq	r2,zero,6488 <_gp+0xfffc7b80>
    64a4:	880d883a 	mov	r6,r17
    64a8:	900b883a 	mov	r5,r18
    64ac:	9809883a 	mov	r4,r19
    64b0:	000624c0 	call	624c <__multiply>
    64b4:	90001b26 	beq	r18,zero,6524 <__pow5mult+0xe0>
    64b8:	91000117 	ldw	r4,4(r18)
    64bc:	98c01317 	ldw	r3,76(r19)
    64c0:	8021d07a 	srai	r16,r16,1
    64c4:	2109883a 	add	r4,r4,r4
    64c8:	2109883a 	add	r4,r4,r4
    64cc:	1907883a 	add	r3,r3,r4
    64d0:	19000017 	ldw	r4,0(r3)
    64d4:	91000015 	stw	r4,0(r18)
    64d8:	1c800015 	stw	r18,0(r3)
    64dc:	1025883a 	mov	r18,r2
    64e0:	803feb1e 	bne	r16,zero,6490 <_gp+0xfffc7b88>
    64e4:	9005883a 	mov	r2,r18
    64e8:	dfc00517 	ldw	ra,20(sp)
    64ec:	dd000417 	ldw	r20,16(sp)
    64f0:	dcc00317 	ldw	r19,12(sp)
    64f4:	dc800217 	ldw	r18,8(sp)
    64f8:	dc400117 	ldw	r17,4(sp)
    64fc:	dc000017 	ldw	r16,0(sp)
    6500:	dec00604 	addi	sp,sp,24
    6504:	f800283a 	ret
    6508:	880d883a 	mov	r6,r17
    650c:	880b883a 	mov	r5,r17
    6510:	9809883a 	mov	r4,r19
    6514:	000624c0 	call	624c <__multiply>
    6518:	88800015 	stw	r2,0(r17)
    651c:	10000015 	stw	zero,0(r2)
    6520:	003fdd06 	br	6498 <_gp+0xfffc7b90>
    6524:	1025883a 	mov	r18,r2
    6528:	003fd706 	br	6488 <_gp+0xfffc7b80>
    652c:	10bfffc4 	addi	r2,r2,-1
    6530:	1085883a 	add	r2,r2,r2
    6534:	00c000f4 	movhi	r3,3
    6538:	18d2ad04 	addi	r3,r3,19124
    653c:	1085883a 	add	r2,r2,r2
    6540:	1885883a 	add	r2,r3,r2
    6544:	11800017 	ldw	r6,0(r2)
    6548:	000f883a 	mov	r7,zero
    654c:	0005ed40 	call	5ed4 <__multadd>
    6550:	1025883a 	mov	r18,r2
    6554:	003fc706 	br	6474 <_gp+0xfffc7b6c>
    6558:	05000044 	movi	r20,1
    655c:	a00b883a 	mov	r5,r20
    6560:	9809883a 	mov	r4,r19
    6564:	0005e040 	call	5e04 <_Balloc>
    6568:	1023883a 	mov	r17,r2
    656c:	00809c44 	movi	r2,625
    6570:	88800515 	stw	r2,20(r17)
    6574:	8d000415 	stw	r20,16(r17)
    6578:	9c401215 	stw	r17,72(r19)
    657c:	88000015 	stw	zero,0(r17)
    6580:	003fc606 	br	649c <_gp+0xfffc7b94>

00006584 <__lshift>:
    6584:	defff904 	addi	sp,sp,-28
    6588:	dd400515 	stw	r21,20(sp)
    658c:	dcc00315 	stw	r19,12(sp)
    6590:	302bd17a 	srai	r21,r6,5
    6594:	2cc00417 	ldw	r19,16(r5)
    6598:	28800217 	ldw	r2,8(r5)
    659c:	dd000415 	stw	r20,16(sp)
    65a0:	ace7883a 	add	r19,r21,r19
    65a4:	dc800215 	stw	r18,8(sp)
    65a8:	dc400115 	stw	r17,4(sp)
    65ac:	dc000015 	stw	r16,0(sp)
    65b0:	dfc00615 	stw	ra,24(sp)
    65b4:	9c000044 	addi	r16,r19,1
    65b8:	2823883a 	mov	r17,r5
    65bc:	3029883a 	mov	r20,r6
    65c0:	2025883a 	mov	r18,r4
    65c4:	29400117 	ldw	r5,4(r5)
    65c8:	1400030e 	bge	r2,r16,65d8 <__lshift+0x54>
    65cc:	1085883a 	add	r2,r2,r2
    65d0:	29400044 	addi	r5,r5,1
    65d4:	143ffd16 	blt	r2,r16,65cc <_gp+0xfffc7cc4>
    65d8:	9009883a 	mov	r4,r18
    65dc:	0005e040 	call	5e04 <_Balloc>
    65e0:	10c00504 	addi	r3,r2,20
    65e4:	0540070e 	bge	zero,r21,6604 <__lshift+0x80>
    65e8:	ad6b883a 	add	r21,r21,r21
    65ec:	ad6b883a 	add	r21,r21,r21
    65f0:	1809883a 	mov	r4,r3
    65f4:	1d47883a 	add	r3,r3,r21
    65f8:	20000015 	stw	zero,0(r4)
    65fc:	21000104 	addi	r4,r4,4
    6600:	193ffd1e 	bne	r3,r4,65f8 <_gp+0xfffc7cf0>
    6604:	8a000417 	ldw	r8,16(r17)
    6608:	89000504 	addi	r4,r17,20
    660c:	a18007cc 	andi	r6,r20,31
    6610:	4211883a 	add	r8,r8,r8
    6614:	4211883a 	add	r8,r8,r8
    6618:	2211883a 	add	r8,r4,r8
    661c:	30002326 	beq	r6,zero,66ac <__lshift+0x128>
    6620:	02400804 	movi	r9,32
    6624:	4993c83a 	sub	r9,r9,r6
    6628:	000b883a 	mov	r5,zero
    662c:	21c00017 	ldw	r7,0(r4)
    6630:	1815883a 	mov	r10,r3
    6634:	18c00104 	addi	r3,r3,4
    6638:	398e983a 	sll	r7,r7,r6
    663c:	21000104 	addi	r4,r4,4
    6640:	394ab03a 	or	r5,r7,r5
    6644:	197fff15 	stw	r5,-4(r3)
    6648:	217fff17 	ldw	r5,-4(r4)
    664c:	2a4ad83a 	srl	r5,r5,r9
    6650:	223ff636 	bltu	r4,r8,662c <_gp+0xfffc7d24>
    6654:	51400115 	stw	r5,4(r10)
    6658:	28001a1e 	bne	r5,zero,66c4 <__lshift+0x140>
    665c:	843fffc4 	addi	r16,r16,-1
    6660:	14000415 	stw	r16,16(r2)
    6664:	88000826 	beq	r17,zero,6688 <__lshift+0x104>
    6668:	89000117 	ldw	r4,4(r17)
    666c:	90c01317 	ldw	r3,76(r18)
    6670:	2109883a 	add	r4,r4,r4
    6674:	2109883a 	add	r4,r4,r4
    6678:	1907883a 	add	r3,r3,r4
    667c:	19000017 	ldw	r4,0(r3)
    6680:	89000015 	stw	r4,0(r17)
    6684:	1c400015 	stw	r17,0(r3)
    6688:	dfc00617 	ldw	ra,24(sp)
    668c:	dd400517 	ldw	r21,20(sp)
    6690:	dd000417 	ldw	r20,16(sp)
    6694:	dcc00317 	ldw	r19,12(sp)
    6698:	dc800217 	ldw	r18,8(sp)
    669c:	dc400117 	ldw	r17,4(sp)
    66a0:	dc000017 	ldw	r16,0(sp)
    66a4:	dec00704 	addi	sp,sp,28
    66a8:	f800283a 	ret
    66ac:	21400017 	ldw	r5,0(r4)
    66b0:	18c00104 	addi	r3,r3,4
    66b4:	21000104 	addi	r4,r4,4
    66b8:	197fff15 	stw	r5,-4(r3)
    66bc:	223ffb36 	bltu	r4,r8,66ac <_gp+0xfffc7da4>
    66c0:	003fe606 	br	665c <_gp+0xfffc7d54>
    66c4:	9c000084 	addi	r16,r19,2
    66c8:	003fe406 	br	665c <_gp+0xfffc7d54>

000066cc <__mcmp>:
    66cc:	20800417 	ldw	r2,16(r4)
    66d0:	28c00417 	ldw	r3,16(r5)
    66d4:	10c5c83a 	sub	r2,r2,r3
    66d8:	1000111e 	bne	r2,zero,6720 <__mcmp+0x54>
    66dc:	18c7883a 	add	r3,r3,r3
    66e0:	18c7883a 	add	r3,r3,r3
    66e4:	21000504 	addi	r4,r4,20
    66e8:	29400504 	addi	r5,r5,20
    66ec:	20c5883a 	add	r2,r4,r3
    66f0:	28cb883a 	add	r5,r5,r3
    66f4:	00000106 	br	66fc <__mcmp+0x30>
    66f8:	20800a2e 	bgeu	r4,r2,6724 <__mcmp+0x58>
    66fc:	10bfff04 	addi	r2,r2,-4
    6700:	297fff04 	addi	r5,r5,-4
    6704:	11800017 	ldw	r6,0(r2)
    6708:	28c00017 	ldw	r3,0(r5)
    670c:	30fffa26 	beq	r6,r3,66f8 <_gp+0xfffc7df0>
    6710:	30c00236 	bltu	r6,r3,671c <__mcmp+0x50>
    6714:	00800044 	movi	r2,1
    6718:	f800283a 	ret
    671c:	00bfffc4 	movi	r2,-1
    6720:	f800283a 	ret
    6724:	0005883a 	mov	r2,zero
    6728:	f800283a 	ret

0000672c <__mdiff>:
    672c:	28c00417 	ldw	r3,16(r5)
    6730:	30800417 	ldw	r2,16(r6)
    6734:	defffa04 	addi	sp,sp,-24
    6738:	dcc00315 	stw	r19,12(sp)
    673c:	dc800215 	stw	r18,8(sp)
    6740:	dfc00515 	stw	ra,20(sp)
    6744:	dd000415 	stw	r20,16(sp)
    6748:	dc400115 	stw	r17,4(sp)
    674c:	dc000015 	stw	r16,0(sp)
    6750:	1887c83a 	sub	r3,r3,r2
    6754:	2825883a 	mov	r18,r5
    6758:	3027883a 	mov	r19,r6
    675c:	1800141e 	bne	r3,zero,67b0 <__mdiff+0x84>
    6760:	1085883a 	add	r2,r2,r2
    6764:	1085883a 	add	r2,r2,r2
    6768:	2a000504 	addi	r8,r5,20
    676c:	34000504 	addi	r16,r6,20
    6770:	4087883a 	add	r3,r8,r2
    6774:	8085883a 	add	r2,r16,r2
    6778:	00000106 	br	6780 <__mdiff+0x54>
    677c:	40c0592e 	bgeu	r8,r3,68e4 <__mdiff+0x1b8>
    6780:	18ffff04 	addi	r3,r3,-4
    6784:	10bfff04 	addi	r2,r2,-4
    6788:	19c00017 	ldw	r7,0(r3)
    678c:	11400017 	ldw	r5,0(r2)
    6790:	397ffa26 	beq	r7,r5,677c <_gp+0xfffc7e74>
    6794:	3940592e 	bgeu	r7,r5,68fc <__mdiff+0x1d0>
    6798:	9005883a 	mov	r2,r18
    679c:	4023883a 	mov	r17,r8
    67a0:	9825883a 	mov	r18,r19
    67a4:	05000044 	movi	r20,1
    67a8:	1027883a 	mov	r19,r2
    67ac:	00000406 	br	67c0 <__mdiff+0x94>
    67b0:	18005616 	blt	r3,zero,690c <__mdiff+0x1e0>
    67b4:	34400504 	addi	r17,r6,20
    67b8:	2c000504 	addi	r16,r5,20
    67bc:	0029883a 	mov	r20,zero
    67c0:	91400117 	ldw	r5,4(r18)
    67c4:	0005e040 	call	5e04 <_Balloc>
    67c8:	92400417 	ldw	r9,16(r18)
    67cc:	9b000417 	ldw	r12,16(r19)
    67d0:	12c00504 	addi	r11,r2,20
    67d4:	4a51883a 	add	r8,r9,r9
    67d8:	6319883a 	add	r12,r12,r12
    67dc:	4211883a 	add	r8,r8,r8
    67e0:	6319883a 	add	r12,r12,r12
    67e4:	15000315 	stw	r20,12(r2)
    67e8:	8211883a 	add	r8,r16,r8
    67ec:	8b19883a 	add	r12,r17,r12
    67f0:	0007883a 	mov	r3,zero
    67f4:	81400017 	ldw	r5,0(r16)
    67f8:	89c00017 	ldw	r7,0(r17)
    67fc:	59800104 	addi	r6,r11,4
    6800:	293fffcc 	andi	r4,r5,65535
    6804:	20c7883a 	add	r3,r4,r3
    6808:	393fffcc 	andi	r4,r7,65535
    680c:	1909c83a 	sub	r4,r3,r4
    6810:	280ad43a 	srli	r5,r5,16
    6814:	380ed43a 	srli	r7,r7,16
    6818:	2007d43a 	srai	r3,r4,16
    681c:	213fffcc 	andi	r4,r4,65535
    6820:	29cbc83a 	sub	r5,r5,r7
    6824:	28c7883a 	add	r3,r5,r3
    6828:	180a943a 	slli	r5,r3,16
    682c:	8c400104 	addi	r17,r17,4
    6830:	84000104 	addi	r16,r16,4
    6834:	2908b03a 	or	r4,r5,r4
    6838:	59000015 	stw	r4,0(r11)
    683c:	1807d43a 	srai	r3,r3,16
    6840:	3015883a 	mov	r10,r6
    6844:	3017883a 	mov	r11,r6
    6848:	8b3fea36 	bltu	r17,r12,67f4 <_gp+0xfffc7eec>
    684c:	8200162e 	bgeu	r16,r8,68a8 <__mdiff+0x17c>
    6850:	8017883a 	mov	r11,r16
    6854:	59400017 	ldw	r5,0(r11)
    6858:	31800104 	addi	r6,r6,4
    685c:	5ac00104 	addi	r11,r11,4
    6860:	293fffcc 	andi	r4,r5,65535
    6864:	20c7883a 	add	r3,r4,r3
    6868:	280ed43a 	srli	r7,r5,16
    686c:	180bd43a 	srai	r5,r3,16
    6870:	193fffcc 	andi	r4,r3,65535
    6874:	3947883a 	add	r3,r7,r5
    6878:	180a943a 	slli	r5,r3,16
    687c:	1807d43a 	srai	r3,r3,16
    6880:	2908b03a 	or	r4,r5,r4
    6884:	313fff15 	stw	r4,-4(r6)
    6888:	5a3ff236 	bltu	r11,r8,6854 <_gp+0xfffc7f4c>
    688c:	0406303a 	nor	r3,zero,r16
    6890:	1a07883a 	add	r3,r3,r8
    6894:	1806d0ba 	srli	r3,r3,2
    6898:	18c00044 	addi	r3,r3,1
    689c:	18c7883a 	add	r3,r3,r3
    68a0:	18c7883a 	add	r3,r3,r3
    68a4:	50d5883a 	add	r10,r10,r3
    68a8:	50ffff04 	addi	r3,r10,-4
    68ac:	2000041e 	bne	r4,zero,68c0 <__mdiff+0x194>
    68b0:	18ffff04 	addi	r3,r3,-4
    68b4:	19000017 	ldw	r4,0(r3)
    68b8:	4a7fffc4 	addi	r9,r9,-1
    68bc:	203ffc26 	beq	r4,zero,68b0 <_gp+0xfffc7fa8>
    68c0:	12400415 	stw	r9,16(r2)
    68c4:	dfc00517 	ldw	ra,20(sp)
    68c8:	dd000417 	ldw	r20,16(sp)
    68cc:	dcc00317 	ldw	r19,12(sp)
    68d0:	dc800217 	ldw	r18,8(sp)
    68d4:	dc400117 	ldw	r17,4(sp)
    68d8:	dc000017 	ldw	r16,0(sp)
    68dc:	dec00604 	addi	sp,sp,24
    68e0:	f800283a 	ret
    68e4:	000b883a 	mov	r5,zero
    68e8:	0005e040 	call	5e04 <_Balloc>
    68ec:	00c00044 	movi	r3,1
    68f0:	10c00415 	stw	r3,16(r2)
    68f4:	10000515 	stw	zero,20(r2)
    68f8:	003ff206 	br	68c4 <_gp+0xfffc7fbc>
    68fc:	8023883a 	mov	r17,r16
    6900:	0029883a 	mov	r20,zero
    6904:	4021883a 	mov	r16,r8
    6908:	003fad06 	br	67c0 <_gp+0xfffc7eb8>
    690c:	9005883a 	mov	r2,r18
    6910:	94400504 	addi	r17,r18,20
    6914:	9c000504 	addi	r16,r19,20
    6918:	9825883a 	mov	r18,r19
    691c:	05000044 	movi	r20,1
    6920:	1027883a 	mov	r19,r2
    6924:	003fa606 	br	67c0 <_gp+0xfffc7eb8>

00006928 <__ulp>:
    6928:	295ffc2c 	andhi	r5,r5,32752
    692c:	00bf3034 	movhi	r2,64704
    6930:	2887883a 	add	r3,r5,r2
    6934:	00c0020e 	bge	zero,r3,6940 <__ulp+0x18>
    6938:	0005883a 	mov	r2,zero
    693c:	f800283a 	ret
    6940:	00c7c83a 	sub	r3,zero,r3
    6944:	1807d53a 	srai	r3,r3,20
    6948:	008004c4 	movi	r2,19
    694c:	10c00b0e 	bge	r2,r3,697c <__ulp+0x54>
    6950:	18bffb04 	addi	r2,r3,-20
    6954:	01000784 	movi	r4,30
    6958:	0007883a 	mov	r3,zero
    695c:	20800516 	blt	r4,r2,6974 <__ulp+0x4c>
    6960:	010007c4 	movi	r4,31
    6964:	2089c83a 	sub	r4,r4,r2
    6968:	00800044 	movi	r2,1
    696c:	1104983a 	sll	r2,r2,r4
    6970:	f800283a 	ret
    6974:	00800044 	movi	r2,1
    6978:	f800283a 	ret
    697c:	01400234 	movhi	r5,8
    6980:	28c7d83a 	sra	r3,r5,r3
    6984:	0005883a 	mov	r2,zero
    6988:	f800283a 	ret

0000698c <__b2d>:
    698c:	defffa04 	addi	sp,sp,-24
    6990:	dc000015 	stw	r16,0(sp)
    6994:	24000417 	ldw	r16,16(r4)
    6998:	dc400115 	stw	r17,4(sp)
    699c:	24400504 	addi	r17,r4,20
    69a0:	8421883a 	add	r16,r16,r16
    69a4:	8421883a 	add	r16,r16,r16
    69a8:	8c21883a 	add	r16,r17,r16
    69ac:	dc800215 	stw	r18,8(sp)
    69b0:	84bfff17 	ldw	r18,-4(r16)
    69b4:	dd000415 	stw	r20,16(sp)
    69b8:	dcc00315 	stw	r19,12(sp)
    69bc:	9009883a 	mov	r4,r18
    69c0:	2829883a 	mov	r20,r5
    69c4:	dfc00515 	stw	ra,20(sp)
    69c8:	00060f80 	call	60f8 <__hi0bits>
    69cc:	00c00804 	movi	r3,32
    69d0:	1889c83a 	sub	r4,r3,r2
    69d4:	a1000015 	stw	r4,0(r20)
    69d8:	01000284 	movi	r4,10
    69dc:	84ffff04 	addi	r19,r16,-4
    69e0:	20801216 	blt	r4,r2,6a2c <__b2d+0xa0>
    69e4:	018002c4 	movi	r6,11
    69e8:	308dc83a 	sub	r6,r6,r2
    69ec:	9186d83a 	srl	r3,r18,r6
    69f0:	18cffc34 	orhi	r3,r3,16368
    69f4:	8cc0212e 	bgeu	r17,r19,6a7c <__b2d+0xf0>
    69f8:	813ffe17 	ldw	r4,-8(r16)
    69fc:	218cd83a 	srl	r6,r4,r6
    6a00:	10800544 	addi	r2,r2,21
    6a04:	9084983a 	sll	r2,r18,r2
    6a08:	1184b03a 	or	r2,r2,r6
    6a0c:	dfc00517 	ldw	ra,20(sp)
    6a10:	dd000417 	ldw	r20,16(sp)
    6a14:	dcc00317 	ldw	r19,12(sp)
    6a18:	dc800217 	ldw	r18,8(sp)
    6a1c:	dc400117 	ldw	r17,4(sp)
    6a20:	dc000017 	ldw	r16,0(sp)
    6a24:	dec00604 	addi	sp,sp,24
    6a28:	f800283a 	ret
    6a2c:	8cc00f2e 	bgeu	r17,r19,6a6c <__b2d+0xe0>
    6a30:	117ffd44 	addi	r5,r2,-11
    6a34:	80bffe17 	ldw	r2,-8(r16)
    6a38:	28000e26 	beq	r5,zero,6a74 <__b2d+0xe8>
    6a3c:	1949c83a 	sub	r4,r3,r5
    6a40:	9164983a 	sll	r18,r18,r5
    6a44:	1106d83a 	srl	r3,r2,r4
    6a48:	81bffe04 	addi	r6,r16,-8
    6a4c:	948ffc34 	orhi	r18,r18,16368
    6a50:	90c6b03a 	or	r3,r18,r3
    6a54:	89800e2e 	bgeu	r17,r6,6a90 <__b2d+0x104>
    6a58:	81bffd17 	ldw	r6,-12(r16)
    6a5c:	1144983a 	sll	r2,r2,r5
    6a60:	310ad83a 	srl	r5,r6,r4
    6a64:	2884b03a 	or	r2,r5,r2
    6a68:	003fe806 	br	6a0c <_gp+0xfffc8104>
    6a6c:	10bffd44 	addi	r2,r2,-11
    6a70:	1000041e 	bne	r2,zero,6a84 <__b2d+0xf8>
    6a74:	90cffc34 	orhi	r3,r18,16368
    6a78:	003fe406 	br	6a0c <_gp+0xfffc8104>
    6a7c:	000d883a 	mov	r6,zero
    6a80:	003fdf06 	br	6a00 <_gp+0xfffc80f8>
    6a84:	90a4983a 	sll	r18,r18,r2
    6a88:	0005883a 	mov	r2,zero
    6a8c:	003ff906 	br	6a74 <_gp+0xfffc816c>
    6a90:	1144983a 	sll	r2,r2,r5
    6a94:	003fdd06 	br	6a0c <_gp+0xfffc8104>

00006a98 <__d2b>:
    6a98:	defff804 	addi	sp,sp,-32
    6a9c:	dc000215 	stw	r16,8(sp)
    6aa0:	3021883a 	mov	r16,r6
    6aa4:	dc400315 	stw	r17,12(sp)
    6aa8:	8022907a 	slli	r17,r16,1
    6aac:	dd000615 	stw	r20,24(sp)
    6ab0:	2829883a 	mov	r20,r5
    6ab4:	01400044 	movi	r5,1
    6ab8:	dcc00515 	stw	r19,20(sp)
    6abc:	dc800415 	stw	r18,16(sp)
    6ac0:	dfc00715 	stw	ra,28(sp)
    6ac4:	3825883a 	mov	r18,r7
    6ac8:	8822d57a 	srli	r17,r17,21
    6acc:	0005e040 	call	5e04 <_Balloc>
    6ad0:	1027883a 	mov	r19,r2
    6ad4:	00800434 	movhi	r2,16
    6ad8:	10bfffc4 	addi	r2,r2,-1
    6adc:	808c703a 	and	r6,r16,r2
    6ae0:	88000126 	beq	r17,zero,6ae8 <__d2b+0x50>
    6ae4:	31800434 	orhi	r6,r6,16
    6ae8:	d9800015 	stw	r6,0(sp)
    6aec:	a0002426 	beq	r20,zero,6b80 <__d2b+0xe8>
    6af0:	d9000104 	addi	r4,sp,4
    6af4:	dd000115 	stw	r20,4(sp)
    6af8:	00061600 	call	6160 <__lo0bits>
    6afc:	d8c00017 	ldw	r3,0(sp)
    6b00:	10002f1e 	bne	r2,zero,6bc0 <__d2b+0x128>
    6b04:	d9000117 	ldw	r4,4(sp)
    6b08:	99000515 	stw	r4,20(r19)
    6b0c:	1821003a 	cmpeq	r16,r3,zero
    6b10:	01000084 	movi	r4,2
    6b14:	2421c83a 	sub	r16,r4,r16
    6b18:	98c00615 	stw	r3,24(r19)
    6b1c:	9c000415 	stw	r16,16(r19)
    6b20:	88001f1e 	bne	r17,zero,6ba0 <__d2b+0x108>
    6b24:	10bef384 	addi	r2,r2,-1074
    6b28:	90800015 	stw	r2,0(r18)
    6b2c:	00900034 	movhi	r2,16384
    6b30:	10bfffc4 	addi	r2,r2,-1
    6b34:	8085883a 	add	r2,r16,r2
    6b38:	1085883a 	add	r2,r2,r2
    6b3c:	1085883a 	add	r2,r2,r2
    6b40:	9885883a 	add	r2,r19,r2
    6b44:	11000517 	ldw	r4,20(r2)
    6b48:	8020917a 	slli	r16,r16,5
    6b4c:	00060f80 	call	60f8 <__hi0bits>
    6b50:	d8c00817 	ldw	r3,32(sp)
    6b54:	8085c83a 	sub	r2,r16,r2
    6b58:	18800015 	stw	r2,0(r3)
    6b5c:	9805883a 	mov	r2,r19
    6b60:	dfc00717 	ldw	ra,28(sp)
    6b64:	dd000617 	ldw	r20,24(sp)
    6b68:	dcc00517 	ldw	r19,20(sp)
    6b6c:	dc800417 	ldw	r18,16(sp)
    6b70:	dc400317 	ldw	r17,12(sp)
    6b74:	dc000217 	ldw	r16,8(sp)
    6b78:	dec00804 	addi	sp,sp,32
    6b7c:	f800283a 	ret
    6b80:	d809883a 	mov	r4,sp
    6b84:	00061600 	call	6160 <__lo0bits>
    6b88:	d8c00017 	ldw	r3,0(sp)
    6b8c:	04000044 	movi	r16,1
    6b90:	9c000415 	stw	r16,16(r19)
    6b94:	98c00515 	stw	r3,20(r19)
    6b98:	10800804 	addi	r2,r2,32
    6b9c:	883fe126 	beq	r17,zero,6b24 <_gp+0xfffc821c>
    6ba0:	00c00d44 	movi	r3,53
    6ba4:	8c7ef344 	addi	r17,r17,-1075
    6ba8:	88a3883a 	add	r17,r17,r2
    6bac:	1885c83a 	sub	r2,r3,r2
    6bb0:	d8c00817 	ldw	r3,32(sp)
    6bb4:	94400015 	stw	r17,0(r18)
    6bb8:	18800015 	stw	r2,0(r3)
    6bbc:	003fe706 	br	6b5c <_gp+0xfffc8254>
    6bc0:	01000804 	movi	r4,32
    6bc4:	2089c83a 	sub	r4,r4,r2
    6bc8:	1908983a 	sll	r4,r3,r4
    6bcc:	d9400117 	ldw	r5,4(sp)
    6bd0:	1886d83a 	srl	r3,r3,r2
    6bd4:	2148b03a 	or	r4,r4,r5
    6bd8:	99000515 	stw	r4,20(r19)
    6bdc:	d8c00015 	stw	r3,0(sp)
    6be0:	003fca06 	br	6b0c <_gp+0xfffc8204>

00006be4 <__ratio>:
    6be4:	defff904 	addi	sp,sp,-28
    6be8:	dc400315 	stw	r17,12(sp)
    6bec:	2823883a 	mov	r17,r5
    6bf0:	d9400104 	addi	r5,sp,4
    6bf4:	dfc00615 	stw	ra,24(sp)
    6bf8:	dcc00515 	stw	r19,20(sp)
    6bfc:	dc800415 	stw	r18,16(sp)
    6c00:	2027883a 	mov	r19,r4
    6c04:	dc000215 	stw	r16,8(sp)
    6c08:	000698c0 	call	698c <__b2d>
    6c0c:	d80b883a 	mov	r5,sp
    6c10:	8809883a 	mov	r4,r17
    6c14:	1025883a 	mov	r18,r2
    6c18:	1821883a 	mov	r16,r3
    6c1c:	000698c0 	call	698c <__b2d>
    6c20:	8a000417 	ldw	r8,16(r17)
    6c24:	99000417 	ldw	r4,16(r19)
    6c28:	d9400117 	ldw	r5,4(sp)
    6c2c:	2209c83a 	sub	r4,r4,r8
    6c30:	2010917a 	slli	r8,r4,5
    6c34:	d9000017 	ldw	r4,0(sp)
    6c38:	2909c83a 	sub	r4,r5,r4
    6c3c:	4109883a 	add	r4,r8,r4
    6c40:	01000e0e 	bge	zero,r4,6c7c <__ratio+0x98>
    6c44:	2008953a 	slli	r4,r4,20
    6c48:	2421883a 	add	r16,r4,r16
    6c4c:	100d883a 	mov	r6,r2
    6c50:	180f883a 	mov	r7,r3
    6c54:	9009883a 	mov	r4,r18
    6c58:	800b883a 	mov	r5,r16
    6c5c:	000afcc0 	call	afcc <__divdf3>
    6c60:	dfc00617 	ldw	ra,24(sp)
    6c64:	dcc00517 	ldw	r19,20(sp)
    6c68:	dc800417 	ldw	r18,16(sp)
    6c6c:	dc400317 	ldw	r17,12(sp)
    6c70:	dc000217 	ldw	r16,8(sp)
    6c74:	dec00704 	addi	sp,sp,28
    6c78:	f800283a 	ret
    6c7c:	2008953a 	slli	r4,r4,20
    6c80:	1907c83a 	sub	r3,r3,r4
    6c84:	003ff106 	br	6c4c <_gp+0xfffc8344>

00006c88 <_mprec_log10>:
    6c88:	defffe04 	addi	sp,sp,-8
    6c8c:	dc000015 	stw	r16,0(sp)
    6c90:	dfc00115 	stw	ra,4(sp)
    6c94:	008005c4 	movi	r2,23
    6c98:	2021883a 	mov	r16,r4
    6c9c:	11000d0e 	bge	r2,r4,6cd4 <_mprec_log10+0x4c>
    6ca0:	0005883a 	mov	r2,zero
    6ca4:	00cffc34 	movhi	r3,16368
    6ca8:	843fffc4 	addi	r16,r16,-1
    6cac:	000d883a 	mov	r6,zero
    6cb0:	01d00934 	movhi	r7,16420
    6cb4:	1009883a 	mov	r4,r2
    6cb8:	180b883a 	mov	r5,r3
    6cbc:	000bb0c0 	call	bb0c <__muldf3>
    6cc0:	803ff91e 	bne	r16,zero,6ca8 <_gp+0xfffc83a0>
    6cc4:	dfc00117 	ldw	ra,4(sp)
    6cc8:	dc000017 	ldw	r16,0(sp)
    6ccc:	dec00204 	addi	sp,sp,8
    6cd0:	f800283a 	ret
    6cd4:	202090fa 	slli	r16,r4,3
    6cd8:	008000f4 	movhi	r2,3
    6cdc:	1092c404 	addi	r2,r2,19216
    6ce0:	1421883a 	add	r16,r2,r16
    6ce4:	80800017 	ldw	r2,0(r16)
    6ce8:	80c00117 	ldw	r3,4(r16)
    6cec:	dfc00117 	ldw	ra,4(sp)
    6cf0:	dc000017 	ldw	r16,0(sp)
    6cf4:	dec00204 	addi	sp,sp,8
    6cf8:	f800283a 	ret

00006cfc <__copybits>:
    6cfc:	297fffc4 	addi	r5,r5,-1
    6d00:	280fd17a 	srai	r7,r5,5
    6d04:	30c00417 	ldw	r3,16(r6)
    6d08:	30800504 	addi	r2,r6,20
    6d0c:	39c00044 	addi	r7,r7,1
    6d10:	18c7883a 	add	r3,r3,r3
    6d14:	39cf883a 	add	r7,r7,r7
    6d18:	18c7883a 	add	r3,r3,r3
    6d1c:	39cf883a 	add	r7,r7,r7
    6d20:	10c7883a 	add	r3,r2,r3
    6d24:	21cf883a 	add	r7,r4,r7
    6d28:	10c00d2e 	bgeu	r2,r3,6d60 <__copybits+0x64>
    6d2c:	200b883a 	mov	r5,r4
    6d30:	12000017 	ldw	r8,0(r2)
    6d34:	29400104 	addi	r5,r5,4
    6d38:	10800104 	addi	r2,r2,4
    6d3c:	2a3fff15 	stw	r8,-4(r5)
    6d40:	10fffb36 	bltu	r2,r3,6d30 <_gp+0xfffc8428>
    6d44:	1985c83a 	sub	r2,r3,r6
    6d48:	10bffac4 	addi	r2,r2,-21
    6d4c:	1004d0ba 	srli	r2,r2,2
    6d50:	10800044 	addi	r2,r2,1
    6d54:	1085883a 	add	r2,r2,r2
    6d58:	1085883a 	add	r2,r2,r2
    6d5c:	2089883a 	add	r4,r4,r2
    6d60:	21c0032e 	bgeu	r4,r7,6d70 <__copybits+0x74>
    6d64:	20000015 	stw	zero,0(r4)
    6d68:	21000104 	addi	r4,r4,4
    6d6c:	21fffd36 	bltu	r4,r7,6d64 <_gp+0xfffc845c>
    6d70:	f800283a 	ret

00006d74 <__any_on>:
    6d74:	20c00417 	ldw	r3,16(r4)
    6d78:	2805d17a 	srai	r2,r5,5
    6d7c:	21000504 	addi	r4,r4,20
    6d80:	18800d0e 	bge	r3,r2,6db8 <__any_on+0x44>
    6d84:	18c7883a 	add	r3,r3,r3
    6d88:	18c7883a 	add	r3,r3,r3
    6d8c:	20c7883a 	add	r3,r4,r3
    6d90:	20c0192e 	bgeu	r4,r3,6df8 <__any_on+0x84>
    6d94:	18bfff17 	ldw	r2,-4(r3)
    6d98:	18ffff04 	addi	r3,r3,-4
    6d9c:	1000041e 	bne	r2,zero,6db0 <__any_on+0x3c>
    6da0:	20c0142e 	bgeu	r4,r3,6df4 <__any_on+0x80>
    6da4:	18ffff04 	addi	r3,r3,-4
    6da8:	19400017 	ldw	r5,0(r3)
    6dac:	283ffc26 	beq	r5,zero,6da0 <_gp+0xfffc8498>
    6db0:	00800044 	movi	r2,1
    6db4:	f800283a 	ret
    6db8:	10c00a0e 	bge	r2,r3,6de4 <__any_on+0x70>
    6dbc:	1085883a 	add	r2,r2,r2
    6dc0:	1085883a 	add	r2,r2,r2
    6dc4:	294007cc 	andi	r5,r5,31
    6dc8:	2087883a 	add	r3,r4,r2
    6dcc:	283ff026 	beq	r5,zero,6d90 <_gp+0xfffc8488>
    6dd0:	19800017 	ldw	r6,0(r3)
    6dd4:	3144d83a 	srl	r2,r6,r5
    6dd8:	114a983a 	sll	r5,r2,r5
    6ddc:	317ff41e 	bne	r6,r5,6db0 <_gp+0xfffc84a8>
    6de0:	003feb06 	br	6d90 <_gp+0xfffc8488>
    6de4:	1085883a 	add	r2,r2,r2
    6de8:	1085883a 	add	r2,r2,r2
    6dec:	2087883a 	add	r3,r4,r2
    6df0:	003fe706 	br	6d90 <_gp+0xfffc8488>
    6df4:	f800283a 	ret
    6df8:	0005883a 	mov	r2,zero
    6dfc:	f800283a 	ret

00006e00 <__fpclassifyd>:
    6e00:	00a00034 	movhi	r2,32768
    6e04:	10bfffc4 	addi	r2,r2,-1
    6e08:	2884703a 	and	r2,r5,r2
    6e0c:	10000726 	beq	r2,zero,6e2c <__fpclassifyd+0x2c>
    6e10:	00fffc34 	movhi	r3,65520
    6e14:	019ff834 	movhi	r6,32736
    6e18:	28c7883a 	add	r3,r5,r3
    6e1c:	31bfffc4 	addi	r6,r6,-1
    6e20:	30c00536 	bltu	r6,r3,6e38 <__fpclassifyd+0x38>
    6e24:	00800104 	movi	r2,4
    6e28:	f800283a 	ret
    6e2c:	2000021e 	bne	r4,zero,6e38 <__fpclassifyd+0x38>
    6e30:	00800084 	movi	r2,2
    6e34:	f800283a 	ret
    6e38:	00dffc34 	movhi	r3,32752
    6e3c:	019ff834 	movhi	r6,32736
    6e40:	28cb883a 	add	r5,r5,r3
    6e44:	31bfffc4 	addi	r6,r6,-1
    6e48:	317ff62e 	bgeu	r6,r5,6e24 <_gp+0xfffc851c>
    6e4c:	01400434 	movhi	r5,16
    6e50:	297fffc4 	addi	r5,r5,-1
    6e54:	28800236 	bltu	r5,r2,6e60 <__fpclassifyd+0x60>
    6e58:	008000c4 	movi	r2,3
    6e5c:	f800283a 	ret
    6e60:	10c00226 	beq	r2,r3,6e6c <__fpclassifyd+0x6c>
    6e64:	0005883a 	mov	r2,zero
    6e68:	f800283a 	ret
    6e6c:	2005003a 	cmpeq	r2,r4,zero
    6e70:	f800283a 	ret

00006e74 <_sbrk_r>:
    6e74:	defffd04 	addi	sp,sp,-12
    6e78:	dc000015 	stw	r16,0(sp)
    6e7c:	04000134 	movhi	r16,4
    6e80:	dc400115 	stw	r17,4(sp)
    6e84:	84215804 	addi	r16,r16,-31392
    6e88:	2023883a 	mov	r17,r4
    6e8c:	2809883a 	mov	r4,r5
    6e90:	dfc00215 	stw	ra,8(sp)
    6e94:	80000015 	stw	zero,0(r16)
    6e98:	000d7800 	call	d780 <sbrk>
    6e9c:	00ffffc4 	movi	r3,-1
    6ea0:	10c00526 	beq	r2,r3,6eb8 <_sbrk_r+0x44>
    6ea4:	dfc00217 	ldw	ra,8(sp)
    6ea8:	dc400117 	ldw	r17,4(sp)
    6eac:	dc000017 	ldw	r16,0(sp)
    6eb0:	dec00304 	addi	sp,sp,12
    6eb4:	f800283a 	ret
    6eb8:	80c00017 	ldw	r3,0(r16)
    6ebc:	183ff926 	beq	r3,zero,6ea4 <_gp+0xfffc859c>
    6ec0:	88c00015 	stw	r3,0(r17)
    6ec4:	003ff706 	br	6ea4 <_gp+0xfffc859c>

00006ec8 <__sread>:
    6ec8:	defffe04 	addi	sp,sp,-8
    6ecc:	dc000015 	stw	r16,0(sp)
    6ed0:	2821883a 	mov	r16,r5
    6ed4:	2940038f 	ldh	r5,14(r5)
    6ed8:	dfc00115 	stw	ra,4(sp)
    6edc:	000936c0 	call	936c <_read_r>
    6ee0:	10000716 	blt	r2,zero,6f00 <__sread+0x38>
    6ee4:	80c01417 	ldw	r3,80(r16)
    6ee8:	1887883a 	add	r3,r3,r2
    6eec:	80c01415 	stw	r3,80(r16)
    6ef0:	dfc00117 	ldw	ra,4(sp)
    6ef4:	dc000017 	ldw	r16,0(sp)
    6ef8:	dec00204 	addi	sp,sp,8
    6efc:	f800283a 	ret
    6f00:	80c0030b 	ldhu	r3,12(r16)
    6f04:	18fbffcc 	andi	r3,r3,61439
    6f08:	80c0030d 	sth	r3,12(r16)
    6f0c:	dfc00117 	ldw	ra,4(sp)
    6f10:	dc000017 	ldw	r16,0(sp)
    6f14:	dec00204 	addi	sp,sp,8
    6f18:	f800283a 	ret

00006f1c <__seofread>:
    6f1c:	0005883a 	mov	r2,zero
    6f20:	f800283a 	ret

00006f24 <__swrite>:
    6f24:	2880030b 	ldhu	r2,12(r5)
    6f28:	defffb04 	addi	sp,sp,-20
    6f2c:	dcc00315 	stw	r19,12(sp)
    6f30:	dc800215 	stw	r18,8(sp)
    6f34:	dc400115 	stw	r17,4(sp)
    6f38:	dc000015 	stw	r16,0(sp)
    6f3c:	dfc00415 	stw	ra,16(sp)
    6f40:	10c0400c 	andi	r3,r2,256
    6f44:	2821883a 	mov	r16,r5
    6f48:	2023883a 	mov	r17,r4
    6f4c:	3025883a 	mov	r18,r6
    6f50:	3827883a 	mov	r19,r7
    6f54:	18000526 	beq	r3,zero,6f6c <__swrite+0x48>
    6f58:	2940038f 	ldh	r5,14(r5)
    6f5c:	01c00084 	movi	r7,2
    6f60:	000d883a 	mov	r6,zero
    6f64:	00091b00 	call	91b0 <_lseek_r>
    6f68:	8080030b 	ldhu	r2,12(r16)
    6f6c:	8140038f 	ldh	r5,14(r16)
    6f70:	10bbffcc 	andi	r2,r2,61439
    6f74:	980f883a 	mov	r7,r19
    6f78:	900d883a 	mov	r6,r18
    6f7c:	8809883a 	mov	r4,r17
    6f80:	8080030d 	sth	r2,12(r16)
    6f84:	dfc00417 	ldw	ra,16(sp)
    6f88:	dcc00317 	ldw	r19,12(sp)
    6f8c:	dc800217 	ldw	r18,8(sp)
    6f90:	dc400117 	ldw	r17,4(sp)
    6f94:	dc000017 	ldw	r16,0(sp)
    6f98:	dec00504 	addi	sp,sp,20
    6f9c:	00087c01 	jmpi	87c0 <_write_r>

00006fa0 <__sseek>:
    6fa0:	defffe04 	addi	sp,sp,-8
    6fa4:	dc000015 	stw	r16,0(sp)
    6fa8:	2821883a 	mov	r16,r5
    6fac:	2940038f 	ldh	r5,14(r5)
    6fb0:	dfc00115 	stw	ra,4(sp)
    6fb4:	00091b00 	call	91b0 <_lseek_r>
    6fb8:	00ffffc4 	movi	r3,-1
    6fbc:	10c00826 	beq	r2,r3,6fe0 <__sseek+0x40>
    6fc0:	80c0030b 	ldhu	r3,12(r16)
    6fc4:	80801415 	stw	r2,80(r16)
    6fc8:	18c40014 	ori	r3,r3,4096
    6fcc:	80c0030d 	sth	r3,12(r16)
    6fd0:	dfc00117 	ldw	ra,4(sp)
    6fd4:	dc000017 	ldw	r16,0(sp)
    6fd8:	dec00204 	addi	sp,sp,8
    6fdc:	f800283a 	ret
    6fe0:	80c0030b 	ldhu	r3,12(r16)
    6fe4:	18fbffcc 	andi	r3,r3,61439
    6fe8:	80c0030d 	sth	r3,12(r16)
    6fec:	dfc00117 	ldw	ra,4(sp)
    6ff0:	dc000017 	ldw	r16,0(sp)
    6ff4:	dec00204 	addi	sp,sp,8
    6ff8:	f800283a 	ret

00006ffc <__sclose>:
    6ffc:	2940038f 	ldh	r5,14(r5)
    7000:	00088201 	jmpi	8820 <_close_r>

00007004 <strcmp>:
    7004:	2144b03a 	or	r2,r4,r5
    7008:	108000cc 	andi	r2,r2,3
    700c:	1000171e 	bne	r2,zero,706c <strcmp+0x68>
    7010:	20800017 	ldw	r2,0(r4)
    7014:	28c00017 	ldw	r3,0(r5)
    7018:	10c0141e 	bne	r2,r3,706c <strcmp+0x68>
    701c:	027fbff4 	movhi	r9,65279
    7020:	4a7fbfc4 	addi	r9,r9,-257
    7024:	0086303a 	nor	r3,zero,r2
    7028:	02202074 	movhi	r8,32897
    702c:	1245883a 	add	r2,r2,r9
    7030:	42202004 	addi	r8,r8,-32640
    7034:	10c4703a 	and	r2,r2,r3
    7038:	1204703a 	and	r2,r2,r8
    703c:	10000226 	beq	r2,zero,7048 <strcmp+0x44>
    7040:	00002306 	br	70d0 <strcmp+0xcc>
    7044:	1000221e 	bne	r2,zero,70d0 <strcmp+0xcc>
    7048:	21000104 	addi	r4,r4,4
    704c:	20c00017 	ldw	r3,0(r4)
    7050:	29400104 	addi	r5,r5,4
    7054:	29800017 	ldw	r6,0(r5)
    7058:	1a4f883a 	add	r7,r3,r9
    705c:	00c4303a 	nor	r2,zero,r3
    7060:	3884703a 	and	r2,r7,r2
    7064:	1204703a 	and	r2,r2,r8
    7068:	19bff626 	beq	r3,r6,7044 <_gp+0xfffc873c>
    706c:	20800003 	ldbu	r2,0(r4)
    7070:	10c03fcc 	andi	r3,r2,255
    7074:	18c0201c 	xori	r3,r3,128
    7078:	18ffe004 	addi	r3,r3,-128
    707c:	18000c26 	beq	r3,zero,70b0 <strcmp+0xac>
    7080:	29800007 	ldb	r6,0(r5)
    7084:	19800326 	beq	r3,r6,7094 <strcmp+0x90>
    7088:	00001306 	br	70d8 <strcmp+0xd4>
    708c:	29800007 	ldb	r6,0(r5)
    7090:	11800b1e 	bne	r2,r6,70c0 <strcmp+0xbc>
    7094:	21000044 	addi	r4,r4,1
    7098:	20c00003 	ldbu	r3,0(r4)
    709c:	29400044 	addi	r5,r5,1
    70a0:	18803fcc 	andi	r2,r3,255
    70a4:	1080201c 	xori	r2,r2,128
    70a8:	10bfe004 	addi	r2,r2,-128
    70ac:	103ff71e 	bne	r2,zero,708c <_gp+0xfffc8784>
    70b0:	0007883a 	mov	r3,zero
    70b4:	28800003 	ldbu	r2,0(r5)
    70b8:	1885c83a 	sub	r2,r3,r2
    70bc:	f800283a 	ret
    70c0:	28800003 	ldbu	r2,0(r5)
    70c4:	18c03fcc 	andi	r3,r3,255
    70c8:	1885c83a 	sub	r2,r3,r2
    70cc:	f800283a 	ret
    70d0:	0005883a 	mov	r2,zero
    70d4:	f800283a 	ret
    70d8:	10c03fcc 	andi	r3,r2,255
    70dc:	003ff506 	br	70b4 <_gp+0xfffc87ac>

000070e0 <strlen>:
    70e0:	208000cc 	andi	r2,r4,3
    70e4:	10002026 	beq	r2,zero,7168 <strlen+0x88>
    70e8:	20800007 	ldb	r2,0(r4)
    70ec:	10002026 	beq	r2,zero,7170 <strlen+0x90>
    70f0:	2005883a 	mov	r2,r4
    70f4:	00000206 	br	7100 <strlen+0x20>
    70f8:	10c00007 	ldb	r3,0(r2)
    70fc:	18001826 	beq	r3,zero,7160 <strlen+0x80>
    7100:	10800044 	addi	r2,r2,1
    7104:	10c000cc 	andi	r3,r2,3
    7108:	183ffb1e 	bne	r3,zero,70f8 <_gp+0xfffc87f0>
    710c:	10c00017 	ldw	r3,0(r2)
    7110:	01ffbff4 	movhi	r7,65279
    7114:	39ffbfc4 	addi	r7,r7,-257
    7118:	00ca303a 	nor	r5,zero,r3
    711c:	01a02074 	movhi	r6,32897
    7120:	19c7883a 	add	r3,r3,r7
    7124:	31a02004 	addi	r6,r6,-32640
    7128:	1946703a 	and	r3,r3,r5
    712c:	1986703a 	and	r3,r3,r6
    7130:	1800091e 	bne	r3,zero,7158 <strlen+0x78>
    7134:	10800104 	addi	r2,r2,4
    7138:	10c00017 	ldw	r3,0(r2)
    713c:	19cb883a 	add	r5,r3,r7
    7140:	00c6303a 	nor	r3,zero,r3
    7144:	28c6703a 	and	r3,r5,r3
    7148:	1986703a 	and	r3,r3,r6
    714c:	183ff926 	beq	r3,zero,7134 <_gp+0xfffc882c>
    7150:	00000106 	br	7158 <strlen+0x78>
    7154:	10800044 	addi	r2,r2,1
    7158:	10c00007 	ldb	r3,0(r2)
    715c:	183ffd1e 	bne	r3,zero,7154 <_gp+0xfffc884c>
    7160:	1105c83a 	sub	r2,r2,r4
    7164:	f800283a 	ret
    7168:	2005883a 	mov	r2,r4
    716c:	003fe706 	br	710c <_gp+0xfffc8804>
    7170:	0005883a 	mov	r2,zero
    7174:	f800283a 	ret

00007178 <__sprint_r.part.0>:
    7178:	28801917 	ldw	r2,100(r5)
    717c:	defff604 	addi	sp,sp,-40
    7180:	dd400515 	stw	r21,20(sp)
    7184:	dfc00915 	stw	ra,36(sp)
    7188:	df000815 	stw	fp,32(sp)
    718c:	ddc00715 	stw	r23,28(sp)
    7190:	dd800615 	stw	r22,24(sp)
    7194:	dd000415 	stw	r20,16(sp)
    7198:	dcc00315 	stw	r19,12(sp)
    719c:	dc800215 	stw	r18,8(sp)
    71a0:	dc400115 	stw	r17,4(sp)
    71a4:	dc000015 	stw	r16,0(sp)
    71a8:	1088000c 	andi	r2,r2,8192
    71ac:	302b883a 	mov	r21,r6
    71b0:	10002e26 	beq	r2,zero,726c <__sprint_r.part.0+0xf4>
    71b4:	30800217 	ldw	r2,8(r6)
    71b8:	35800017 	ldw	r22,0(r6)
    71bc:	10002926 	beq	r2,zero,7264 <__sprint_r.part.0+0xec>
    71c0:	2827883a 	mov	r19,r5
    71c4:	2029883a 	mov	r20,r4
    71c8:	b5c00104 	addi	r23,r22,4
    71cc:	04bfffc4 	movi	r18,-1
    71d0:	bc400017 	ldw	r17,0(r23)
    71d4:	b4000017 	ldw	r16,0(r22)
    71d8:	0039883a 	mov	fp,zero
    71dc:	8822d0ba 	srli	r17,r17,2
    71e0:	8800031e 	bne	r17,zero,71f0 <__sprint_r.part.0+0x78>
    71e4:	00001806 	br	7248 <__sprint_r.part.0+0xd0>
    71e8:	84000104 	addi	r16,r16,4
    71ec:	8f001526 	beq	r17,fp,7244 <__sprint_r.part.0+0xcc>
    71f0:	81400017 	ldw	r5,0(r16)
    71f4:	980d883a 	mov	r6,r19
    71f8:	a009883a 	mov	r4,r20
    71fc:	0008ba00 	call	8ba0 <_fputwc_r>
    7200:	e7000044 	addi	fp,fp,1
    7204:	14bff81e 	bne	r2,r18,71e8 <_gp+0xfffc88e0>
    7208:	9005883a 	mov	r2,r18
    720c:	a8000215 	stw	zero,8(r21)
    7210:	a8000115 	stw	zero,4(r21)
    7214:	dfc00917 	ldw	ra,36(sp)
    7218:	df000817 	ldw	fp,32(sp)
    721c:	ddc00717 	ldw	r23,28(sp)
    7220:	dd800617 	ldw	r22,24(sp)
    7224:	dd400517 	ldw	r21,20(sp)
    7228:	dd000417 	ldw	r20,16(sp)
    722c:	dcc00317 	ldw	r19,12(sp)
    7230:	dc800217 	ldw	r18,8(sp)
    7234:	dc400117 	ldw	r17,4(sp)
    7238:	dc000017 	ldw	r16,0(sp)
    723c:	dec00a04 	addi	sp,sp,40
    7240:	f800283a 	ret
    7244:	a8800217 	ldw	r2,8(r21)
    7248:	8c63883a 	add	r17,r17,r17
    724c:	8c63883a 	add	r17,r17,r17
    7250:	1445c83a 	sub	r2,r2,r17
    7254:	a8800215 	stw	r2,8(r21)
    7258:	b5800204 	addi	r22,r22,8
    725c:	bdc00204 	addi	r23,r23,8
    7260:	103fdb1e 	bne	r2,zero,71d0 <_gp+0xfffc88c8>
    7264:	0005883a 	mov	r2,zero
    7268:	003fe806 	br	720c <_gp+0xfffc8904>
    726c:	0008ca00 	call	8ca0 <__sfvwrite_r>
    7270:	003fe606 	br	720c <_gp+0xfffc8904>

00007274 <__sprint_r>:
    7274:	30c00217 	ldw	r3,8(r6)
    7278:	18000126 	beq	r3,zero,7280 <__sprint_r+0xc>
    727c:	00071781 	jmpi	7178 <__sprint_r.part.0>
    7280:	30000115 	stw	zero,4(r6)
    7284:	0005883a 	mov	r2,zero
    7288:	f800283a 	ret

0000728c <___vfiprintf_internal_r>:
    728c:	deffc904 	addi	sp,sp,-220
    7290:	df003515 	stw	fp,212(sp)
    7294:	dd003115 	stw	r20,196(sp)
    7298:	dfc03615 	stw	ra,216(sp)
    729c:	ddc03415 	stw	r23,208(sp)
    72a0:	dd803315 	stw	r22,204(sp)
    72a4:	dd403215 	stw	r21,200(sp)
    72a8:	dcc03015 	stw	r19,192(sp)
    72ac:	dc802f15 	stw	r18,188(sp)
    72b0:	dc402e15 	stw	r17,184(sp)
    72b4:	dc002d15 	stw	r16,180(sp)
    72b8:	d9002015 	stw	r4,128(sp)
    72bc:	d9c02215 	stw	r7,136(sp)
    72c0:	2829883a 	mov	r20,r5
    72c4:	3039883a 	mov	fp,r6
    72c8:	20000226 	beq	r4,zero,72d4 <___vfiprintf_internal_r+0x48>
    72cc:	20800e17 	ldw	r2,56(r4)
    72d0:	1000cf26 	beq	r2,zero,7610 <___vfiprintf_internal_r+0x384>
    72d4:	a080030b 	ldhu	r2,12(r20)
    72d8:	10c8000c 	andi	r3,r2,8192
    72dc:	1800061e 	bne	r3,zero,72f8 <___vfiprintf_internal_r+0x6c>
    72e0:	a1001917 	ldw	r4,100(r20)
    72e4:	00f7ffc4 	movi	r3,-8193
    72e8:	10880014 	ori	r2,r2,8192
    72ec:	20c6703a 	and	r3,r4,r3
    72f0:	a080030d 	sth	r2,12(r20)
    72f4:	a0c01915 	stw	r3,100(r20)
    72f8:	10c0020c 	andi	r3,r2,8
    72fc:	1800a926 	beq	r3,zero,75a4 <___vfiprintf_internal_r+0x318>
    7300:	a0c00417 	ldw	r3,16(r20)
    7304:	1800a726 	beq	r3,zero,75a4 <___vfiprintf_internal_r+0x318>
    7308:	1080068c 	andi	r2,r2,26
    730c:	00c00284 	movi	r3,10
    7310:	10c0ac26 	beq	r2,r3,75c4 <___vfiprintf_internal_r+0x338>
    7314:	da801a04 	addi	r10,sp,104
    7318:	da801e15 	stw	r10,120(sp)
    731c:	d8801e17 	ldw	r2,120(sp)
    7320:	da8019c4 	addi	r10,sp,103
    7324:	058000f4 	movhi	r22,3
    7328:	05c000f4 	movhi	r23,3
    732c:	da801f15 	stw	r10,124(sp)
    7330:	1295c83a 	sub	r10,r2,r10
    7334:	b592fa04 	addi	r22,r22,19432
    7338:	bdd2f604 	addi	r23,r23,19416
    733c:	dec01a15 	stw	sp,104(sp)
    7340:	d8001c15 	stw	zero,112(sp)
    7344:	d8001b15 	stw	zero,108(sp)
    7348:	d8002615 	stw	zero,152(sp)
    734c:	d8002315 	stw	zero,140(sp)
    7350:	da802715 	stw	r10,156(sp)
    7354:	d811883a 	mov	r8,sp
    7358:	dd002115 	stw	r20,132(sp)
    735c:	e021883a 	mov	r16,fp
    7360:	80800007 	ldb	r2,0(r16)
    7364:	1003ea26 	beq	r2,zero,8310 <___vfiprintf_internal_r+0x1084>
    7368:	00c00944 	movi	r3,37
    736c:	8025883a 	mov	r18,r16
    7370:	10c0021e 	bne	r2,r3,737c <___vfiprintf_internal_r+0xf0>
    7374:	00001606 	br	73d0 <___vfiprintf_internal_r+0x144>
    7378:	10c00326 	beq	r2,r3,7388 <___vfiprintf_internal_r+0xfc>
    737c:	94800044 	addi	r18,r18,1
    7380:	90800007 	ldb	r2,0(r18)
    7384:	103ffc1e 	bne	r2,zero,7378 <_gp+0xfffc8a70>
    7388:	9423c83a 	sub	r17,r18,r16
    738c:	88001026 	beq	r17,zero,73d0 <___vfiprintf_internal_r+0x144>
    7390:	d8c01c17 	ldw	r3,112(sp)
    7394:	d8801b17 	ldw	r2,108(sp)
    7398:	44000015 	stw	r16,0(r8)
    739c:	88c7883a 	add	r3,r17,r3
    73a0:	10800044 	addi	r2,r2,1
    73a4:	44400115 	stw	r17,4(r8)
    73a8:	d8c01c15 	stw	r3,112(sp)
    73ac:	d8801b15 	stw	r2,108(sp)
    73b0:	010001c4 	movi	r4,7
    73b4:	2080760e 	bge	r4,r2,7590 <___vfiprintf_internal_r+0x304>
    73b8:	1803821e 	bne	r3,zero,81c4 <___vfiprintf_internal_r+0xf38>
    73bc:	da802317 	ldw	r10,140(sp)
    73c0:	d8001b15 	stw	zero,108(sp)
    73c4:	d811883a 	mov	r8,sp
    73c8:	5455883a 	add	r10,r10,r17
    73cc:	da802315 	stw	r10,140(sp)
    73d0:	90800007 	ldb	r2,0(r18)
    73d4:	10044626 	beq	r2,zero,84f0 <___vfiprintf_internal_r+0x1264>
    73d8:	90c00047 	ldb	r3,1(r18)
    73dc:	94000044 	addi	r16,r18,1
    73e0:	d8001d85 	stb	zero,118(sp)
    73e4:	0009883a 	mov	r4,zero
    73e8:	000f883a 	mov	r7,zero
    73ec:	027fffc4 	movi	r9,-1
    73f0:	0023883a 	mov	r17,zero
    73f4:	0029883a 	mov	r20,zero
    73f8:	01401604 	movi	r5,88
    73fc:	01800244 	movi	r6,9
    7400:	03400a84 	movi	r13,42
    7404:	03001b04 	movi	r12,108
    7408:	84000044 	addi	r16,r16,1
    740c:	18bff804 	addi	r2,r3,-32
    7410:	28827336 	bltu	r5,r2,7de0 <___vfiprintf_internal_r+0xb54>
    7414:	100490ba 	slli	r2,r2,2
    7418:	02800034 	movhi	r10,0
    741c:	529d0b04 	addi	r10,r10,29740
    7420:	1285883a 	add	r2,r2,r10
    7424:	10800017 	ldw	r2,0(r2)
    7428:	1000683a 	jmp	r2
    742c:	00007b14 	movui	zero,492
    7430:	00007de0 	cmpeqi	zero,zero,503
    7434:	00007de0 	cmpeqi	zero,zero,503
    7438:	00007b34 	movhi	zero,492
    743c:	00007de0 	cmpeqi	zero,zero,503
    7440:	00007de0 	cmpeqi	zero,zero,503
    7444:	00007de0 	cmpeqi	zero,zero,503
    7448:	00007de0 	cmpeqi	zero,zero,503
    744c:	00007de0 	cmpeqi	zero,zero,503
    7450:	00007de0 	cmpeqi	zero,zero,503
    7454:	00007d1c 	xori	zero,zero,500
    7458:	00007d38 	rdprs	zero,zero,500
    745c:	00007de0 	cmpeqi	zero,zero,503
    7460:	00007620 	cmpeqi	zero,zero,472
    7464:	00007d48 	cmpgei	zero,zero,501
    7468:	00007de0 	cmpeqi	zero,zero,503
    746c:	00007b40 	call	7b4 <___vfprintf_internal_r+0x58>
    7470:	00007b4c 	andi	zero,zero,493
    7474:	00007b4c 	andi	zero,zero,493
    7478:	00007b4c 	andi	zero,zero,493
    747c:	00007b4c 	andi	zero,zero,493
    7480:	00007b4c 	andi	zero,zero,493
    7484:	00007b4c 	andi	zero,zero,493
    7488:	00007b4c 	andi	zero,zero,493
    748c:	00007b4c 	andi	zero,zero,493
    7490:	00007b4c 	andi	zero,zero,493
    7494:	00007de0 	cmpeqi	zero,zero,503
    7498:	00007de0 	cmpeqi	zero,zero,503
    749c:	00007de0 	cmpeqi	zero,zero,503
    74a0:	00007de0 	cmpeqi	zero,zero,503
    74a4:	00007de0 	cmpeqi	zero,zero,503
    74a8:	00007de0 	cmpeqi	zero,zero,503
    74ac:	00007de0 	cmpeqi	zero,zero,503
    74b0:	00007de0 	cmpeqi	zero,zero,503
    74b4:	00007de0 	cmpeqi	zero,zero,503
    74b8:	00007de0 	cmpeqi	zero,zero,503
    74bc:	00007b78 	rdprs	zero,zero,493
    74c0:	00007de0 	cmpeqi	zero,zero,503
    74c4:	00007de0 	cmpeqi	zero,zero,503
    74c8:	00007de0 	cmpeqi	zero,zero,503
    74cc:	00007de0 	cmpeqi	zero,zero,503
    74d0:	00007de0 	cmpeqi	zero,zero,503
    74d4:	00007de0 	cmpeqi	zero,zero,503
    74d8:	00007de0 	cmpeqi	zero,zero,503
    74dc:	00007de0 	cmpeqi	zero,zero,503
    74e0:	00007de0 	cmpeqi	zero,zero,503
    74e4:	00007de0 	cmpeqi	zero,zero,503
    74e8:	00007bb0 	cmpltui	zero,zero,494
    74ec:	00007de0 	cmpeqi	zero,zero,503
    74f0:	00007de0 	cmpeqi	zero,zero,503
    74f4:	00007de0 	cmpeqi	zero,zero,503
    74f8:	00007de0 	cmpeqi	zero,zero,503
    74fc:	00007de0 	cmpeqi	zero,zero,503
    7500:	00007c08 	cmpgei	zero,zero,496
    7504:	00007de0 	cmpeqi	zero,zero,503
    7508:	00007de0 	cmpeqi	zero,zero,503
    750c:	00007c78 	rdprs	zero,zero,497
    7510:	00007de0 	cmpeqi	zero,zero,503
    7514:	00007de0 	cmpeqi	zero,zero,503
    7518:	00007de0 	cmpeqi	zero,zero,503
    751c:	00007de0 	cmpeqi	zero,zero,503
    7520:	00007de0 	cmpeqi	zero,zero,503
    7524:	00007de0 	cmpeqi	zero,zero,503
    7528:	00007de0 	cmpeqi	zero,zero,503
    752c:	00007de0 	cmpeqi	zero,zero,503
    7530:	00007de0 	cmpeqi	zero,zero,503
    7534:	00007de0 	cmpeqi	zero,zero,503
    7538:	00007a24 	muli	zero,zero,488
    753c:	00007a50 	cmplti	zero,zero,489
    7540:	00007de0 	cmpeqi	zero,zero,503
    7544:	00007de0 	cmpeqi	zero,zero,503
    7548:	00007de0 	cmpeqi	zero,zero,503
    754c:	00007d88 	cmpgei	zero,zero,502
    7550:	00007a50 	cmplti	zero,zero,489
    7554:	00007de0 	cmpeqi	zero,zero,503
    7558:	00007de0 	cmpeqi	zero,zero,503
    755c:	000078e4 	muli	zero,zero,483
    7560:	00007de0 	cmpeqi	zero,zero,503
    7564:	000078f4 	movhi	zero,483
    7568:	00007930 	cmpltui	zero,zero,484
    756c:	0000762c 	andhi	zero,zero,472
    7570:	000078d8 	cmpnei	zero,zero,483
    7574:	00007de0 	cmpeqi	zero,zero,503
    7578:	00007cb4 	movhi	zero,498
    757c:	00007de0 	cmpeqi	zero,zero,503
    7580:	00007d0c 	andi	zero,zero,500
    7584:	00007de0 	cmpeqi	zero,zero,503
    7588:	00007de0 	cmpeqi	zero,zero,503
    758c:	000079d0 	cmplti	zero,zero,487
    7590:	42000204 	addi	r8,r8,8
    7594:	da802317 	ldw	r10,140(sp)
    7598:	5455883a 	add	r10,r10,r17
    759c:	da802315 	stw	r10,140(sp)
    75a0:	003f8b06 	br	73d0 <_gp+0xfffc8ac8>
    75a4:	d9002017 	ldw	r4,128(sp)
    75a8:	a00b883a 	mov	r5,r20
    75ac:	0002a2c0 	call	2a2c <__swsetup_r>
    75b0:	1003b11e 	bne	r2,zero,8478 <___vfiprintf_internal_r+0x11ec>
    75b4:	a080030b 	ldhu	r2,12(r20)
    75b8:	00c00284 	movi	r3,10
    75bc:	1080068c 	andi	r2,r2,26
    75c0:	10ff541e 	bne	r2,r3,7314 <_gp+0xfffc8a0c>
    75c4:	a080038f 	ldh	r2,14(r20)
    75c8:	103f5216 	blt	r2,zero,7314 <_gp+0xfffc8a0c>
    75cc:	d9c02217 	ldw	r7,136(sp)
    75d0:	d9002017 	ldw	r4,128(sp)
    75d4:	e00d883a 	mov	r6,fp
    75d8:	a00b883a 	mov	r5,r20
    75dc:	00087040 	call	8704 <__sbprintf>
    75e0:	dfc03617 	ldw	ra,216(sp)
    75e4:	df003517 	ldw	fp,212(sp)
    75e8:	ddc03417 	ldw	r23,208(sp)
    75ec:	dd803317 	ldw	r22,204(sp)
    75f0:	dd403217 	ldw	r21,200(sp)
    75f4:	dd003117 	ldw	r20,196(sp)
    75f8:	dcc03017 	ldw	r19,192(sp)
    75fc:	dc802f17 	ldw	r18,188(sp)
    7600:	dc402e17 	ldw	r17,184(sp)
    7604:	dc002d17 	ldw	r16,180(sp)
    7608:	dec03704 	addi	sp,sp,220
    760c:	f800283a 	ret
    7610:	0004a000 	call	4a00 <__sinit>
    7614:	003f2f06 	br	72d4 <_gp+0xfffc89cc>
    7618:	0463c83a 	sub	r17,zero,r17
    761c:	d8802215 	stw	r2,136(sp)
    7620:	a5000114 	ori	r20,r20,4
    7624:	80c00007 	ldb	r3,0(r16)
    7628:	003f7706 	br	7408 <_gp+0xfffc8b00>
    762c:	00800c04 	movi	r2,48
    7630:	da802217 	ldw	r10,136(sp)
    7634:	d8801d05 	stb	r2,116(sp)
    7638:	00801e04 	movi	r2,120
    763c:	d8801d45 	stb	r2,117(sp)
    7640:	d8001d85 	stb	zero,118(sp)
    7644:	50c00104 	addi	r3,r10,4
    7648:	54800017 	ldw	r18,0(r10)
    764c:	0027883a 	mov	r19,zero
    7650:	a0800094 	ori	r2,r20,2
    7654:	48030b16 	blt	r9,zero,8284 <___vfiprintf_internal_r+0xff8>
    7658:	00bfdfc4 	movi	r2,-129
    765c:	a096703a 	and	r11,r20,r2
    7660:	d8c02215 	stw	r3,136(sp)
    7664:	5d000094 	ori	r20,r11,2
    7668:	90032b1e 	bne	r18,zero,8318 <___vfiprintf_internal_r+0x108c>
    766c:	008000f4 	movhi	r2,3
    7670:	10929504 	addi	r2,r2,19028
    7674:	d8802615 	stw	r2,152(sp)
    7678:	0039883a 	mov	fp,zero
    767c:	48017b1e 	bne	r9,zero,7c6c <___vfiprintf_internal_r+0x9e0>
    7680:	0013883a 	mov	r9,zero
    7684:	0027883a 	mov	r19,zero
    7688:	dd401a04 	addi	r21,sp,104
    768c:	4825883a 	mov	r18,r9
    7690:	4cc0010e 	bge	r9,r19,7698 <___vfiprintf_internal_r+0x40c>
    7694:	9825883a 	mov	r18,r19
    7698:	e7003fcc 	andi	fp,fp,255
    769c:	e700201c 	xori	fp,fp,128
    76a0:	e73fe004 	addi	fp,fp,-128
    76a4:	e0000126 	beq	fp,zero,76ac <___vfiprintf_internal_r+0x420>
    76a8:	94800044 	addi	r18,r18,1
    76ac:	a380008c 	andi	r14,r20,2
    76b0:	70000126 	beq	r14,zero,76b8 <___vfiprintf_internal_r+0x42c>
    76b4:	94800084 	addi	r18,r18,2
    76b8:	a700210c 	andi	fp,r20,132
    76bc:	e001df1e 	bne	fp,zero,7e3c <___vfiprintf_internal_r+0xbb0>
    76c0:	8c87c83a 	sub	r3,r17,r18
    76c4:	00c1dd0e 	bge	zero,r3,7e3c <___vfiprintf_internal_r+0xbb0>
    76c8:	01c00404 	movi	r7,16
    76cc:	d8801c17 	ldw	r2,112(sp)
    76d0:	38c3ad0e 	bge	r7,r3,8588 <___vfiprintf_internal_r+0x12fc>
    76d4:	028000f4 	movhi	r10,3
    76d8:	5292fa04 	addi	r10,r10,19432
    76dc:	dc002915 	stw	r16,164(sp)
    76e0:	d9801b17 	ldw	r6,108(sp)
    76e4:	da802415 	stw	r10,144(sp)
    76e8:	03c001c4 	movi	r15,7
    76ec:	da402515 	stw	r9,148(sp)
    76f0:	db802815 	stw	r14,160(sp)
    76f4:	1821883a 	mov	r16,r3
    76f8:	00000506 	br	7710 <___vfiprintf_internal_r+0x484>
    76fc:	31400084 	addi	r5,r6,2
    7700:	42000204 	addi	r8,r8,8
    7704:	200d883a 	mov	r6,r4
    7708:	843ffc04 	addi	r16,r16,-16
    770c:	3c000d0e 	bge	r7,r16,7744 <___vfiprintf_internal_r+0x4b8>
    7710:	10800404 	addi	r2,r2,16
    7714:	31000044 	addi	r4,r6,1
    7718:	45800015 	stw	r22,0(r8)
    771c:	41c00115 	stw	r7,4(r8)
    7720:	d8801c15 	stw	r2,112(sp)
    7724:	d9001b15 	stw	r4,108(sp)
    7728:	793ff40e 	bge	r15,r4,76fc <_gp+0xfffc8df4>
    772c:	1001b51e 	bne	r2,zero,7e04 <___vfiprintf_internal_r+0xb78>
    7730:	843ffc04 	addi	r16,r16,-16
    7734:	000d883a 	mov	r6,zero
    7738:	01400044 	movi	r5,1
    773c:	d811883a 	mov	r8,sp
    7740:	3c3ff316 	blt	r7,r16,7710 <_gp+0xfffc8e08>
    7744:	8007883a 	mov	r3,r16
    7748:	da402517 	ldw	r9,148(sp)
    774c:	db802817 	ldw	r14,160(sp)
    7750:	dc002917 	ldw	r16,164(sp)
    7754:	da802417 	ldw	r10,144(sp)
    7758:	1885883a 	add	r2,r3,r2
    775c:	40c00115 	stw	r3,4(r8)
    7760:	42800015 	stw	r10,0(r8)
    7764:	d8801c15 	stw	r2,112(sp)
    7768:	d9401b15 	stw	r5,108(sp)
    776c:	00c001c4 	movi	r3,7
    7770:	19426016 	blt	r3,r5,80f4 <___vfiprintf_internal_r+0xe68>
    7774:	d8c01d87 	ldb	r3,118(sp)
    7778:	42000204 	addi	r8,r8,8
    777c:	29000044 	addi	r4,r5,1
    7780:	1801b31e 	bne	r3,zero,7e50 <___vfiprintf_internal_r+0xbc4>
    7784:	7001c026 	beq	r14,zero,7e88 <___vfiprintf_internal_r+0xbfc>
    7788:	d8c01d04 	addi	r3,sp,116
    778c:	10800084 	addi	r2,r2,2
    7790:	40c00015 	stw	r3,0(r8)
    7794:	00c00084 	movi	r3,2
    7798:	40c00115 	stw	r3,4(r8)
    779c:	d8801c15 	stw	r2,112(sp)
    77a0:	d9001b15 	stw	r4,108(sp)
    77a4:	00c001c4 	movi	r3,7
    77a8:	1902650e 	bge	r3,r4,8140 <___vfiprintf_internal_r+0xeb4>
    77ac:	10029a1e 	bne	r2,zero,8218 <___vfiprintf_internal_r+0xf8c>
    77b0:	00c02004 	movi	r3,128
    77b4:	01000044 	movi	r4,1
    77b8:	000b883a 	mov	r5,zero
    77bc:	d811883a 	mov	r8,sp
    77c0:	e0c1b31e 	bne	fp,r3,7e90 <___vfiprintf_internal_r+0xc04>
    77c4:	8cb9c83a 	sub	fp,r17,r18
    77c8:	0701b10e 	bge	zero,fp,7e90 <___vfiprintf_internal_r+0xc04>
    77cc:	01c00404 	movi	r7,16
    77d0:	3f03890e 	bge	r7,fp,85f8 <___vfiprintf_internal_r+0x136c>
    77d4:	00c000f4 	movhi	r3,3
    77d8:	18d2f604 	addi	r3,r3,19416
    77dc:	d8c02415 	stw	r3,144(sp)
    77e0:	8007883a 	mov	r3,r16
    77e4:	034001c4 	movi	r13,7
    77e8:	e021883a 	mov	r16,fp
    77ec:	da402515 	stw	r9,148(sp)
    77f0:	1839883a 	mov	fp,r3
    77f4:	00000506 	br	780c <___vfiprintf_internal_r+0x580>
    77f8:	29800084 	addi	r6,r5,2
    77fc:	42000204 	addi	r8,r8,8
    7800:	180b883a 	mov	r5,r3
    7804:	843ffc04 	addi	r16,r16,-16
    7808:	3c000d0e 	bge	r7,r16,7840 <___vfiprintf_internal_r+0x5b4>
    780c:	10800404 	addi	r2,r2,16
    7810:	28c00044 	addi	r3,r5,1
    7814:	45c00015 	stw	r23,0(r8)
    7818:	41c00115 	stw	r7,4(r8)
    781c:	d8801c15 	stw	r2,112(sp)
    7820:	d8c01b15 	stw	r3,108(sp)
    7824:	68fff40e 	bge	r13,r3,77f8 <_gp+0xfffc8ef0>
    7828:	1002241e 	bne	r2,zero,80bc <___vfiprintf_internal_r+0xe30>
    782c:	843ffc04 	addi	r16,r16,-16
    7830:	01800044 	movi	r6,1
    7834:	000b883a 	mov	r5,zero
    7838:	d811883a 	mov	r8,sp
    783c:	3c3ff316 	blt	r7,r16,780c <_gp+0xfffc8f04>
    7840:	da402517 	ldw	r9,148(sp)
    7844:	e007883a 	mov	r3,fp
    7848:	8039883a 	mov	fp,r16
    784c:	1821883a 	mov	r16,r3
    7850:	d8c02417 	ldw	r3,144(sp)
    7854:	1705883a 	add	r2,r2,fp
    7858:	47000115 	stw	fp,4(r8)
    785c:	40c00015 	stw	r3,0(r8)
    7860:	d8801c15 	stw	r2,112(sp)
    7864:	d9801b15 	stw	r6,108(sp)
    7868:	00c001c4 	movi	r3,7
    786c:	19827616 	blt	r3,r6,8248 <___vfiprintf_internal_r+0xfbc>
    7870:	4cf9c83a 	sub	fp,r9,r19
    7874:	42000204 	addi	r8,r8,8
    7878:	31000044 	addi	r4,r6,1
    787c:	300b883a 	mov	r5,r6
    7880:	07018516 	blt	zero,fp,7e98 <___vfiprintf_internal_r+0xc0c>
    7884:	9885883a 	add	r2,r19,r2
    7888:	45400015 	stw	r21,0(r8)
    788c:	44c00115 	stw	r19,4(r8)
    7890:	d8801c15 	stw	r2,112(sp)
    7894:	d9001b15 	stw	r4,108(sp)
    7898:	00c001c4 	movi	r3,7
    789c:	1901dd0e 	bge	r3,r4,8014 <___vfiprintf_internal_r+0xd88>
    78a0:	1002401e 	bne	r2,zero,81a4 <___vfiprintf_internal_r+0xf18>
    78a4:	d8001b15 	stw	zero,108(sp)
    78a8:	a2c0010c 	andi	r11,r20,4
    78ac:	58000226 	beq	r11,zero,78b8 <___vfiprintf_internal_r+0x62c>
    78b0:	8ca7c83a 	sub	r19,r17,r18
    78b4:	04c2f216 	blt	zero,r19,8480 <___vfiprintf_internal_r+0x11f4>
    78b8:	8c80010e 	bge	r17,r18,78c0 <___vfiprintf_internal_r+0x634>
    78bc:	9023883a 	mov	r17,r18
    78c0:	da802317 	ldw	r10,140(sp)
    78c4:	5455883a 	add	r10,r10,r17
    78c8:	da802315 	stw	r10,140(sp)
    78cc:	d8001b15 	stw	zero,108(sp)
    78d0:	d811883a 	mov	r8,sp
    78d4:	003ea206 	br	7360 <_gp+0xfffc8a58>
    78d8:	a5000814 	ori	r20,r20,32
    78dc:	80c00007 	ldb	r3,0(r16)
    78e0:	003ec906 	br	7408 <_gp+0xfffc8b00>
    78e4:	80c00007 	ldb	r3,0(r16)
    78e8:	1b030926 	beq	r3,r12,8510 <___vfiprintf_internal_r+0x1284>
    78ec:	a5000414 	ori	r20,r20,16
    78f0:	003ec506 	br	7408 <_gp+0xfffc8b00>
    78f4:	21003fcc 	andi	r4,r4,255
    78f8:	20035e1e 	bne	r4,zero,8674 <___vfiprintf_internal_r+0x13e8>
    78fc:	a080080c 	andi	r2,r20,32
    7900:	1002a526 	beq	r2,zero,8398 <___vfiprintf_internal_r+0x110c>
    7904:	da802217 	ldw	r10,136(sp)
    7908:	50800017 	ldw	r2,0(r10)
    790c:	da802317 	ldw	r10,140(sp)
    7910:	5007d7fa 	srai	r3,r10,31
    7914:	da802217 	ldw	r10,136(sp)
    7918:	10c00115 	stw	r3,4(r2)
    791c:	52800104 	addi	r10,r10,4
    7920:	da802215 	stw	r10,136(sp)
    7924:	da802317 	ldw	r10,140(sp)
    7928:	12800015 	stw	r10,0(r2)
    792c:	003e8c06 	br	7360 <_gp+0xfffc8a58>
    7930:	21003fcc 	andi	r4,r4,255
    7934:	2003511e 	bne	r4,zero,867c <___vfiprintf_internal_r+0x13f0>
    7938:	a080080c 	andi	r2,r20,32
    793c:	1000a126 	beq	r2,zero,7bc4 <___vfiprintf_internal_r+0x938>
    7940:	da802217 	ldw	r10,136(sp)
    7944:	d8001d85 	stb	zero,118(sp)
    7948:	50800204 	addi	r2,r10,8
    794c:	54800017 	ldw	r18,0(r10)
    7950:	54c00117 	ldw	r19,4(r10)
    7954:	4802b416 	blt	r9,zero,8428 <___vfiprintf_internal_r+0x119c>
    7958:	013fdfc4 	movi	r4,-129
    795c:	94c6b03a 	or	r3,r18,r19
    7960:	d8802215 	stw	r2,136(sp)
    7964:	a128703a 	and	r20,r20,r4
    7968:	1800a226 	beq	r3,zero,7bf4 <___vfiprintf_internal_r+0x968>
    796c:	0039883a 	mov	fp,zero
    7970:	dd401a04 	addi	r21,sp,104
    7974:	9006d0fa 	srli	r3,r18,3
    7978:	9808977a 	slli	r4,r19,29
    797c:	9826d0fa 	srli	r19,r19,3
    7980:	948001cc 	andi	r18,r18,7
    7984:	90800c04 	addi	r2,r18,48
    7988:	ad7fffc4 	addi	r21,r21,-1
    798c:	20e4b03a 	or	r18,r4,r3
    7990:	a8800005 	stb	r2,0(r21)
    7994:	94c6b03a 	or	r3,r18,r19
    7998:	183ff61e 	bne	r3,zero,7974 <_gp+0xfffc906c>
    799c:	a0c0004c 	andi	r3,r20,1
    79a0:	18005926 	beq	r3,zero,7b08 <___vfiprintf_internal_r+0x87c>
    79a4:	10803fcc 	andi	r2,r2,255
    79a8:	1080201c 	xori	r2,r2,128
    79ac:	10bfe004 	addi	r2,r2,-128
    79b0:	00c00c04 	movi	r3,48
    79b4:	10c05426 	beq	r2,r3,7b08 <___vfiprintf_internal_r+0x87c>
    79b8:	da801e17 	ldw	r10,120(sp)
    79bc:	a8bfffc4 	addi	r2,r21,-1
    79c0:	a8ffffc5 	stb	r3,-1(r21)
    79c4:	50a7c83a 	sub	r19,r10,r2
    79c8:	102b883a 	mov	r21,r2
    79cc:	003f2f06 	br	768c <_gp+0xfffc8d84>
    79d0:	21003fcc 	andi	r4,r4,255
    79d4:	2003421e 	bne	r4,zero,86e0 <___vfiprintf_internal_r+0x1454>
    79d8:	008000f4 	movhi	r2,3
    79dc:	10929504 	addi	r2,r2,19028
    79e0:	d8802615 	stw	r2,152(sp)
    79e4:	a080080c 	andi	r2,r20,32
    79e8:	1000aa26 	beq	r2,zero,7c94 <___vfiprintf_internal_r+0xa08>
    79ec:	da802217 	ldw	r10,136(sp)
    79f0:	54800017 	ldw	r18,0(r10)
    79f4:	54c00117 	ldw	r19,4(r10)
    79f8:	52800204 	addi	r10,r10,8
    79fc:	da802215 	stw	r10,136(sp)
    7a00:	a080004c 	andi	r2,r20,1
    7a04:	1001d226 	beq	r2,zero,8150 <___vfiprintf_internal_r+0xec4>
    7a08:	94c4b03a 	or	r2,r18,r19
    7a0c:	1002351e 	bne	r2,zero,82e4 <___vfiprintf_internal_r+0x1058>
    7a10:	d8001d85 	stb	zero,118(sp)
    7a14:	48022216 	blt	r9,zero,82a0 <___vfiprintf_internal_r+0x1014>
    7a18:	00bfdfc4 	movi	r2,-129
    7a1c:	a0a8703a 	and	r20,r20,r2
    7a20:	003f1506 	br	7678 <_gp+0xfffc8d70>
    7a24:	da802217 	ldw	r10,136(sp)
    7a28:	04800044 	movi	r18,1
    7a2c:	d8001d85 	stb	zero,118(sp)
    7a30:	50800017 	ldw	r2,0(r10)
    7a34:	52800104 	addi	r10,r10,4
    7a38:	da802215 	stw	r10,136(sp)
    7a3c:	d8801005 	stb	r2,64(sp)
    7a40:	9027883a 	mov	r19,r18
    7a44:	dd401004 	addi	r21,sp,64
    7a48:	0013883a 	mov	r9,zero
    7a4c:	003f1706 	br	76ac <_gp+0xfffc8da4>
    7a50:	21003fcc 	andi	r4,r4,255
    7a54:	2003201e 	bne	r4,zero,86d8 <___vfiprintf_internal_r+0x144c>
    7a58:	a080080c 	andi	r2,r20,32
    7a5c:	10004b26 	beq	r2,zero,7b8c <___vfiprintf_internal_r+0x900>
    7a60:	da802217 	ldw	r10,136(sp)
    7a64:	50800117 	ldw	r2,4(r10)
    7a68:	54800017 	ldw	r18,0(r10)
    7a6c:	52800204 	addi	r10,r10,8
    7a70:	da802215 	stw	r10,136(sp)
    7a74:	1027883a 	mov	r19,r2
    7a78:	10022c16 	blt	r2,zero,832c <___vfiprintf_internal_r+0x10a0>
    7a7c:	df001d83 	ldbu	fp,118(sp)
    7a80:	48007216 	blt	r9,zero,7c4c <___vfiprintf_internal_r+0x9c0>
    7a84:	00ffdfc4 	movi	r3,-129
    7a88:	94c4b03a 	or	r2,r18,r19
    7a8c:	a0e8703a 	and	r20,r20,r3
    7a90:	1000cc26 	beq	r2,zero,7dc4 <___vfiprintf_internal_r+0xb38>
    7a94:	98021026 	beq	r19,zero,82d8 <___vfiprintf_internal_r+0x104c>
    7a98:	dc402415 	stw	r17,144(sp)
    7a9c:	dc002515 	stw	r16,148(sp)
    7aa0:	9823883a 	mov	r17,r19
    7aa4:	9021883a 	mov	r16,r18
    7aa8:	dd401a04 	addi	r21,sp,104
    7aac:	4825883a 	mov	r18,r9
    7ab0:	4027883a 	mov	r19,r8
    7ab4:	8009883a 	mov	r4,r16
    7ab8:	880b883a 	mov	r5,r17
    7abc:	01800284 	movi	r6,10
    7ac0:	000f883a 	mov	r7,zero
    7ac4:	000a1e80 	call	a1e8 <__umoddi3>
    7ac8:	10800c04 	addi	r2,r2,48
    7acc:	ad7fffc4 	addi	r21,r21,-1
    7ad0:	8009883a 	mov	r4,r16
    7ad4:	880b883a 	mov	r5,r17
    7ad8:	a8800005 	stb	r2,0(r21)
    7adc:	01800284 	movi	r6,10
    7ae0:	000f883a 	mov	r7,zero
    7ae4:	0009c700 	call	9c70 <__udivdi3>
    7ae8:	1021883a 	mov	r16,r2
    7aec:	10c4b03a 	or	r2,r2,r3
    7af0:	1823883a 	mov	r17,r3
    7af4:	103fef1e 	bne	r2,zero,7ab4 <_gp+0xfffc91ac>
    7af8:	dc402417 	ldw	r17,144(sp)
    7afc:	dc002517 	ldw	r16,148(sp)
    7b00:	9013883a 	mov	r9,r18
    7b04:	9811883a 	mov	r8,r19
    7b08:	da801e17 	ldw	r10,120(sp)
    7b0c:	5567c83a 	sub	r19,r10,r21
    7b10:	003ede06 	br	768c <_gp+0xfffc8d84>
    7b14:	38803fcc 	andi	r2,r7,255
    7b18:	1080201c 	xori	r2,r2,128
    7b1c:	10bfe004 	addi	r2,r2,-128
    7b20:	1002371e 	bne	r2,zero,8400 <___vfiprintf_internal_r+0x1174>
    7b24:	01000044 	movi	r4,1
    7b28:	01c00804 	movi	r7,32
    7b2c:	80c00007 	ldb	r3,0(r16)
    7b30:	003e3506 	br	7408 <_gp+0xfffc8b00>
    7b34:	a5000054 	ori	r20,r20,1
    7b38:	80c00007 	ldb	r3,0(r16)
    7b3c:	003e3206 	br	7408 <_gp+0xfffc8b00>
    7b40:	a5002014 	ori	r20,r20,128
    7b44:	80c00007 	ldb	r3,0(r16)
    7b48:	003e2f06 	br	7408 <_gp+0xfffc8b00>
    7b4c:	8015883a 	mov	r10,r16
    7b50:	0023883a 	mov	r17,zero
    7b54:	18bff404 	addi	r2,r3,-48
    7b58:	50c00007 	ldb	r3,0(r10)
    7b5c:	8c4002a4 	muli	r17,r17,10
    7b60:	84000044 	addi	r16,r16,1
    7b64:	8015883a 	mov	r10,r16
    7b68:	1463883a 	add	r17,r2,r17
    7b6c:	18bff404 	addi	r2,r3,-48
    7b70:	30bff92e 	bgeu	r6,r2,7b58 <_gp+0xfffc9250>
    7b74:	003e2506 	br	740c <_gp+0xfffc8b04>
    7b78:	21003fcc 	andi	r4,r4,255
    7b7c:	2002d41e 	bne	r4,zero,86d0 <___vfiprintf_internal_r+0x1444>
    7b80:	a5000414 	ori	r20,r20,16
    7b84:	a080080c 	andi	r2,r20,32
    7b88:	103fb51e 	bne	r2,zero,7a60 <_gp+0xfffc9158>
    7b8c:	a080040c 	andi	r2,r20,16
    7b90:	1001f826 	beq	r2,zero,8374 <___vfiprintf_internal_r+0x10e8>
    7b94:	da802217 	ldw	r10,136(sp)
    7b98:	54800017 	ldw	r18,0(r10)
    7b9c:	52800104 	addi	r10,r10,4
    7ba0:	da802215 	stw	r10,136(sp)
    7ba4:	9027d7fa 	srai	r19,r18,31
    7ba8:	9805883a 	mov	r2,r19
    7bac:	003fb206 	br	7a78 <_gp+0xfffc9170>
    7bb0:	21003fcc 	andi	r4,r4,255
    7bb4:	2002c41e 	bne	r4,zero,86c8 <___vfiprintf_internal_r+0x143c>
    7bb8:	a5000414 	ori	r20,r20,16
    7bbc:	a080080c 	andi	r2,r20,32
    7bc0:	103f5f1e 	bne	r2,zero,7940 <_gp+0xfffc9038>
    7bc4:	a080040c 	andi	r2,r20,16
    7bc8:	10020f26 	beq	r2,zero,8408 <___vfiprintf_internal_r+0x117c>
    7bcc:	da802217 	ldw	r10,136(sp)
    7bd0:	d8001d85 	stb	zero,118(sp)
    7bd4:	0027883a 	mov	r19,zero
    7bd8:	50800104 	addi	r2,r10,4
    7bdc:	54800017 	ldw	r18,0(r10)
    7be0:	48021116 	blt	r9,zero,8428 <___vfiprintf_internal_r+0x119c>
    7be4:	00ffdfc4 	movi	r3,-129
    7be8:	d8802215 	stw	r2,136(sp)
    7bec:	a0e8703a 	and	r20,r20,r3
    7bf0:	903f5e1e 	bne	r18,zero,796c <_gp+0xfffc9064>
    7bf4:	0039883a 	mov	fp,zero
    7bf8:	4802a626 	beq	r9,zero,8694 <___vfiprintf_internal_r+0x1408>
    7bfc:	0025883a 	mov	r18,zero
    7c00:	0027883a 	mov	r19,zero
    7c04:	003f5a06 	br	7970 <_gp+0xfffc9068>
    7c08:	21003fcc 	andi	r4,r4,255
    7c0c:	20029f1e 	bne	r4,zero,868c <___vfiprintf_internal_r+0x1400>
    7c10:	a5000414 	ori	r20,r20,16
    7c14:	a080080c 	andi	r2,r20,32
    7c18:	10005e1e 	bne	r2,zero,7d94 <___vfiprintf_internal_r+0xb08>
    7c1c:	a080040c 	andi	r2,r20,16
    7c20:	1001a21e 	bne	r2,zero,82ac <___vfiprintf_internal_r+0x1020>
    7c24:	a080100c 	andi	r2,r20,64
    7c28:	d8001d85 	stb	zero,118(sp)
    7c2c:	da802217 	ldw	r10,136(sp)
    7c30:	1002231e 	bne	r2,zero,84c0 <___vfiprintf_internal_r+0x1234>
    7c34:	50800104 	addi	r2,r10,4
    7c38:	54800017 	ldw	r18,0(r10)
    7c3c:	0027883a 	mov	r19,zero
    7c40:	4801a00e 	bge	r9,zero,82c4 <___vfiprintf_internal_r+0x1038>
    7c44:	d8802215 	stw	r2,136(sp)
    7c48:	0039883a 	mov	fp,zero
    7c4c:	94c4b03a 	or	r2,r18,r19
    7c50:	103f901e 	bne	r2,zero,7a94 <_gp+0xfffc918c>
    7c54:	00800044 	movi	r2,1
    7c58:	10803fcc 	andi	r2,r2,255
    7c5c:	00c00044 	movi	r3,1
    7c60:	10c05926 	beq	r2,r3,7dc8 <___vfiprintf_internal_r+0xb3c>
    7c64:	00c00084 	movi	r3,2
    7c68:	10ffe41e 	bne	r2,r3,7bfc <_gp+0xfffc92f4>
    7c6c:	0025883a 	mov	r18,zero
    7c70:	0027883a 	mov	r19,zero
    7c74:	00013d06 	br	816c <___vfiprintf_internal_r+0xee0>
    7c78:	21003fcc 	andi	r4,r4,255
    7c7c:	2002811e 	bne	r4,zero,8684 <___vfiprintf_internal_r+0x13f8>
    7c80:	008000f4 	movhi	r2,3
    7c84:	10929004 	addi	r2,r2,19008
    7c88:	d8802615 	stw	r2,152(sp)
    7c8c:	a080080c 	andi	r2,r20,32
    7c90:	103f561e 	bne	r2,zero,79ec <_gp+0xfffc90e4>
    7c94:	a080040c 	andi	r2,r20,16
    7c98:	1001d126 	beq	r2,zero,83e0 <___vfiprintf_internal_r+0x1154>
    7c9c:	da802217 	ldw	r10,136(sp)
    7ca0:	0027883a 	mov	r19,zero
    7ca4:	54800017 	ldw	r18,0(r10)
    7ca8:	52800104 	addi	r10,r10,4
    7cac:	da802215 	stw	r10,136(sp)
    7cb0:	003f5306 	br	7a00 <_gp+0xfffc90f8>
    7cb4:	da802217 	ldw	r10,136(sp)
    7cb8:	d8001d85 	stb	zero,118(sp)
    7cbc:	55400017 	ldw	r21,0(r10)
    7cc0:	50c00104 	addi	r3,r10,4
    7cc4:	a8024226 	beq	r21,zero,85d0 <___vfiprintf_internal_r+0x1344>
    7cc8:	48021816 	blt	r9,zero,852c <___vfiprintf_internal_r+0x12a0>
    7ccc:	480d883a 	mov	r6,r9
    7cd0:	000b883a 	mov	r5,zero
    7cd4:	a809883a 	mov	r4,r21
    7cd8:	d8c02a15 	stw	r3,168(sp)
    7cdc:	da002b15 	stw	r8,172(sp)
    7ce0:	da402c15 	stw	r9,176(sp)
    7ce4:	0005ab00 	call	5ab0 <memchr>
    7ce8:	d8c02a17 	ldw	r3,168(sp)
    7cec:	da002b17 	ldw	r8,172(sp)
    7cf0:	da402c17 	ldw	r9,176(sp)
    7cf4:	10024826 	beq	r2,zero,8618 <___vfiprintf_internal_r+0x138c>
    7cf8:	1567c83a 	sub	r19,r2,r21
    7cfc:	df001d83 	ldbu	fp,118(sp)
    7d00:	d8c02215 	stw	r3,136(sp)
    7d04:	0013883a 	mov	r9,zero
    7d08:	003e6006 	br	768c <_gp+0xfffc8d84>
    7d0c:	21003fcc 	andi	r4,r4,255
    7d10:	203fc026 	beq	r4,zero,7c14 <_gp+0xfffc930c>
    7d14:	d9c01d85 	stb	r7,118(sp)
    7d18:	003fbe06 	br	7c14 <_gp+0xfffc930c>
    7d1c:	da802217 	ldw	r10,136(sp)
    7d20:	54400017 	ldw	r17,0(r10)
    7d24:	50800104 	addi	r2,r10,4
    7d28:	883e3b16 	blt	r17,zero,7618 <_gp+0xfffc8d10>
    7d2c:	d8802215 	stw	r2,136(sp)
    7d30:	80c00007 	ldb	r3,0(r16)
    7d34:	003db406 	br	7408 <_gp+0xfffc8b00>
    7d38:	01000044 	movi	r4,1
    7d3c:	01c00ac4 	movi	r7,43
    7d40:	80c00007 	ldb	r3,0(r16)
    7d44:	003db006 	br	7408 <_gp+0xfffc8b00>
    7d48:	80c00007 	ldb	r3,0(r16)
    7d4c:	82800044 	addi	r10,r16,1
    7d50:	1b423c26 	beq	r3,r13,8644 <___vfiprintf_internal_r+0x13b8>
    7d54:	18bff404 	addi	r2,r3,-48
    7d58:	0013883a 	mov	r9,zero
    7d5c:	30822b36 	bltu	r6,r2,860c <___vfiprintf_internal_r+0x1380>
    7d60:	50c00007 	ldb	r3,0(r10)
    7d64:	4a4002a4 	muli	r9,r9,10
    7d68:	54000044 	addi	r16,r10,1
    7d6c:	8015883a 	mov	r10,r16
    7d70:	4893883a 	add	r9,r9,r2
    7d74:	18bff404 	addi	r2,r3,-48
    7d78:	30bff92e 	bgeu	r6,r2,7d60 <_gp+0xfffc9458>
    7d7c:	483da30e 	bge	r9,zero,740c <_gp+0xfffc8b04>
    7d80:	027fffc4 	movi	r9,-1
    7d84:	003da106 	br	740c <_gp+0xfffc8b04>
    7d88:	a5001014 	ori	r20,r20,64
    7d8c:	80c00007 	ldb	r3,0(r16)
    7d90:	003d9d06 	br	7408 <_gp+0xfffc8b00>
    7d94:	da802217 	ldw	r10,136(sp)
    7d98:	d8001d85 	stb	zero,118(sp)
    7d9c:	50c00204 	addi	r3,r10,8
    7da0:	54800017 	ldw	r18,0(r10)
    7da4:	54c00117 	ldw	r19,4(r10)
    7da8:	4801ca16 	blt	r9,zero,84d4 <___vfiprintf_internal_r+0x1248>
    7dac:	013fdfc4 	movi	r4,-129
    7db0:	94c4b03a 	or	r2,r18,r19
    7db4:	d8c02215 	stw	r3,136(sp)
    7db8:	a128703a 	and	r20,r20,r4
    7dbc:	0039883a 	mov	fp,zero
    7dc0:	103f341e 	bne	r2,zero,7a94 <_gp+0xfffc918c>
    7dc4:	483e2e26 	beq	r9,zero,7680 <_gp+0xfffc8d78>
    7dc8:	0025883a 	mov	r18,zero
    7dcc:	94800c04 	addi	r18,r18,48
    7dd0:	dc8019c5 	stb	r18,103(sp)
    7dd4:	dcc02717 	ldw	r19,156(sp)
    7dd8:	dd4019c4 	addi	r21,sp,103
    7ddc:	003e2b06 	br	768c <_gp+0xfffc8d84>
    7de0:	21003fcc 	andi	r4,r4,255
    7de4:	2002361e 	bne	r4,zero,86c0 <___vfiprintf_internal_r+0x1434>
    7de8:	1801c126 	beq	r3,zero,84f0 <___vfiprintf_internal_r+0x1264>
    7dec:	04800044 	movi	r18,1
    7df0:	d8c01005 	stb	r3,64(sp)
    7df4:	d8001d85 	stb	zero,118(sp)
    7df8:	9027883a 	mov	r19,r18
    7dfc:	dd401004 	addi	r21,sp,64
    7e00:	003f1106 	br	7a48 <_gp+0xfffc9140>
    7e04:	d9402117 	ldw	r5,132(sp)
    7e08:	d9002017 	ldw	r4,128(sp)
    7e0c:	d9801a04 	addi	r6,sp,104
    7e10:	d9c02b15 	stw	r7,172(sp)
    7e14:	dbc02a15 	stw	r15,168(sp)
    7e18:	00071780 	call	7178 <__sprint_r.part.0>
    7e1c:	d9c02b17 	ldw	r7,172(sp)
    7e20:	dbc02a17 	ldw	r15,168(sp)
    7e24:	10006d1e 	bne	r2,zero,7fdc <___vfiprintf_internal_r+0xd50>
    7e28:	d9801b17 	ldw	r6,108(sp)
    7e2c:	d8801c17 	ldw	r2,112(sp)
    7e30:	d811883a 	mov	r8,sp
    7e34:	31400044 	addi	r5,r6,1
    7e38:	003e3306 	br	7708 <_gp+0xfffc8e00>
    7e3c:	d9401b17 	ldw	r5,108(sp)
    7e40:	d8801c17 	ldw	r2,112(sp)
    7e44:	29000044 	addi	r4,r5,1
    7e48:	d8c01d87 	ldb	r3,118(sp)
    7e4c:	183e4d26 	beq	r3,zero,7784 <_gp+0xfffc8e7c>
    7e50:	00c00044 	movi	r3,1
    7e54:	d9401d84 	addi	r5,sp,118
    7e58:	10c5883a 	add	r2,r2,r3
    7e5c:	41400015 	stw	r5,0(r8)
    7e60:	40c00115 	stw	r3,4(r8)
    7e64:	d8801c15 	stw	r2,112(sp)
    7e68:	d9001b15 	stw	r4,108(sp)
    7e6c:	014001c4 	movi	r5,7
    7e70:	2900a90e 	bge	r5,r4,8118 <___vfiprintf_internal_r+0xe8c>
    7e74:	1000da1e 	bne	r2,zero,81e0 <___vfiprintf_internal_r+0xf54>
    7e78:	7000ab1e 	bne	r14,zero,8128 <___vfiprintf_internal_r+0xe9c>
    7e7c:	000b883a 	mov	r5,zero
    7e80:	1809883a 	mov	r4,r3
    7e84:	d811883a 	mov	r8,sp
    7e88:	00c02004 	movi	r3,128
    7e8c:	e0fe4d26 	beq	fp,r3,77c4 <_gp+0xfffc8ebc>
    7e90:	4cf9c83a 	sub	fp,r9,r19
    7e94:	073e7b0e 	bge	zero,fp,7884 <_gp+0xfffc8f7c>
    7e98:	01c00404 	movi	r7,16
    7e9c:	3f01900e 	bge	r7,fp,84e0 <___vfiprintf_internal_r+0x1254>
    7ea0:	00c000f4 	movhi	r3,3
    7ea4:	18d2f604 	addi	r3,r3,19416
    7ea8:	d8c02415 	stw	r3,144(sp)
    7eac:	034001c4 	movi	r13,7
    7eb0:	00000506 	br	7ec8 <___vfiprintf_internal_r+0xc3c>
    7eb4:	29000084 	addi	r4,r5,2
    7eb8:	42000204 	addi	r8,r8,8
    7ebc:	180b883a 	mov	r5,r3
    7ec0:	e73ffc04 	addi	fp,fp,-16
    7ec4:	3f000d0e 	bge	r7,fp,7efc <___vfiprintf_internal_r+0xc70>
    7ec8:	10800404 	addi	r2,r2,16
    7ecc:	28c00044 	addi	r3,r5,1
    7ed0:	45c00015 	stw	r23,0(r8)
    7ed4:	41c00115 	stw	r7,4(r8)
    7ed8:	d8801c15 	stw	r2,112(sp)
    7edc:	d8c01b15 	stw	r3,108(sp)
    7ee0:	68fff40e 	bge	r13,r3,7eb4 <_gp+0xfffc95ac>
    7ee4:	1000101e 	bne	r2,zero,7f28 <___vfiprintf_internal_r+0xc9c>
    7ee8:	e73ffc04 	addi	fp,fp,-16
    7eec:	01000044 	movi	r4,1
    7ef0:	000b883a 	mov	r5,zero
    7ef4:	d811883a 	mov	r8,sp
    7ef8:	3f3ff316 	blt	r7,fp,7ec8 <_gp+0xfffc95c0>
    7efc:	da802417 	ldw	r10,144(sp)
    7f00:	1705883a 	add	r2,r2,fp
    7f04:	47000115 	stw	fp,4(r8)
    7f08:	42800015 	stw	r10,0(r8)
    7f0c:	d8801c15 	stw	r2,112(sp)
    7f10:	d9001b15 	stw	r4,108(sp)
    7f14:	00c001c4 	movi	r3,7
    7f18:	19003616 	blt	r3,r4,7ff4 <___vfiprintf_internal_r+0xd68>
    7f1c:	42000204 	addi	r8,r8,8
    7f20:	21000044 	addi	r4,r4,1
    7f24:	003e5706 	br	7884 <_gp+0xfffc8f7c>
    7f28:	d9402117 	ldw	r5,132(sp)
    7f2c:	d9002017 	ldw	r4,128(sp)
    7f30:	d9801a04 	addi	r6,sp,104
    7f34:	d9c02b15 	stw	r7,172(sp)
    7f38:	db402a15 	stw	r13,168(sp)
    7f3c:	00071780 	call	7178 <__sprint_r.part.0>
    7f40:	d9c02b17 	ldw	r7,172(sp)
    7f44:	db402a17 	ldw	r13,168(sp)
    7f48:	1000241e 	bne	r2,zero,7fdc <___vfiprintf_internal_r+0xd50>
    7f4c:	d9401b17 	ldw	r5,108(sp)
    7f50:	d8801c17 	ldw	r2,112(sp)
    7f54:	d811883a 	mov	r8,sp
    7f58:	29000044 	addi	r4,r5,1
    7f5c:	003fd806 	br	7ec0 <_gp+0xfffc95b8>
    7f60:	d9401b17 	ldw	r5,108(sp)
    7f64:	00c000f4 	movhi	r3,3
    7f68:	18d2fa04 	addi	r3,r3,19432
    7f6c:	d8c02415 	stw	r3,144(sp)
    7f70:	29400044 	addi	r5,r5,1
    7f74:	d8c02417 	ldw	r3,144(sp)
    7f78:	14c5883a 	add	r2,r2,r19
    7f7c:	44c00115 	stw	r19,4(r8)
    7f80:	40c00015 	stw	r3,0(r8)
    7f84:	d8801c15 	stw	r2,112(sp)
    7f88:	d9401b15 	stw	r5,108(sp)
    7f8c:	00c001c4 	movi	r3,7
    7f90:	1940070e 	bge	r3,r5,7fb0 <___vfiprintf_internal_r+0xd24>
    7f94:	103e4826 	beq	r2,zero,78b8 <_gp+0xfffc8fb0>
    7f98:	d9402117 	ldw	r5,132(sp)
    7f9c:	d9002017 	ldw	r4,128(sp)
    7fa0:	d9801a04 	addi	r6,sp,104
    7fa4:	00071780 	call	7178 <__sprint_r.part.0>
    7fa8:	10000c1e 	bne	r2,zero,7fdc <___vfiprintf_internal_r+0xd50>
    7fac:	d8801c17 	ldw	r2,112(sp)
    7fb0:	8c80010e 	bge	r17,r18,7fb8 <___vfiprintf_internal_r+0xd2c>
    7fb4:	9023883a 	mov	r17,r18
    7fb8:	da802317 	ldw	r10,140(sp)
    7fbc:	5455883a 	add	r10,r10,r17
    7fc0:	da802315 	stw	r10,140(sp)
    7fc4:	103e4126 	beq	r2,zero,78cc <_gp+0xfffc8fc4>
    7fc8:	d9402117 	ldw	r5,132(sp)
    7fcc:	d9002017 	ldw	r4,128(sp)
    7fd0:	d9801a04 	addi	r6,sp,104
    7fd4:	00071780 	call	7178 <__sprint_r.part.0>
    7fd8:	103e3c26 	beq	r2,zero,78cc <_gp+0xfffc8fc4>
    7fdc:	dd002117 	ldw	r20,132(sp)
    7fe0:	a080030b 	ldhu	r2,12(r20)
    7fe4:	1080100c 	andi	r2,r2,64
    7fe8:	1001231e 	bne	r2,zero,8478 <___vfiprintf_internal_r+0x11ec>
    7fec:	d8802317 	ldw	r2,140(sp)
    7ff0:	003d7b06 	br	75e0 <_gp+0xfffc8cd8>
    7ff4:	1000991e 	bne	r2,zero,825c <___vfiprintf_internal_r+0xfd0>
    7ff8:	00c00044 	movi	r3,1
    7ffc:	9805883a 	mov	r2,r19
    8000:	dd400015 	stw	r21,0(sp)
    8004:	dcc00115 	stw	r19,4(sp)
    8008:	dcc01c15 	stw	r19,112(sp)
    800c:	d8c01b15 	stw	r3,108(sp)
    8010:	d811883a 	mov	r8,sp
    8014:	42000204 	addi	r8,r8,8
    8018:	a2c0010c 	andi	r11,r20,4
    801c:	583fe426 	beq	r11,zero,7fb0 <_gp+0xfffc96a8>
    8020:	8ca7c83a 	sub	r19,r17,r18
    8024:	04ffe20e 	bge	zero,r19,7fb0 <_gp+0xfffc96a8>
    8028:	01c00404 	movi	r7,16
    802c:	3cffcc0e 	bge	r7,r19,7f60 <_gp+0xfffc9658>
    8030:	028000f4 	movhi	r10,3
    8034:	5292fa04 	addi	r10,r10,19432
    8038:	d9001b17 	ldw	r4,108(sp)
    803c:	da802415 	stw	r10,144(sp)
    8040:	382b883a 	mov	r21,r7
    8044:	050001c4 	movi	r20,7
    8048:	df002017 	ldw	fp,128(sp)
    804c:	00000506 	br	8064 <___vfiprintf_internal_r+0xdd8>
    8050:	21400084 	addi	r5,r4,2
    8054:	42000204 	addi	r8,r8,8
    8058:	1809883a 	mov	r4,r3
    805c:	9cfffc04 	addi	r19,r19,-16
    8060:	acffc40e 	bge	r21,r19,7f74 <_gp+0xfffc966c>
    8064:	10800404 	addi	r2,r2,16
    8068:	20c00044 	addi	r3,r4,1
    806c:	45800015 	stw	r22,0(r8)
    8070:	45400115 	stw	r21,4(r8)
    8074:	d8801c15 	stw	r2,112(sp)
    8078:	d8c01b15 	stw	r3,108(sp)
    807c:	a0fff40e 	bge	r20,r3,8050 <_gp+0xfffc9748>
    8080:	1000041e 	bne	r2,zero,8094 <___vfiprintf_internal_r+0xe08>
    8084:	01400044 	movi	r5,1
    8088:	0009883a 	mov	r4,zero
    808c:	d811883a 	mov	r8,sp
    8090:	003ff206 	br	805c <_gp+0xfffc9754>
    8094:	d9402117 	ldw	r5,132(sp)
    8098:	d9801a04 	addi	r6,sp,104
    809c:	e009883a 	mov	r4,fp
    80a0:	00071780 	call	7178 <__sprint_r.part.0>
    80a4:	103fcd1e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    80a8:	d9001b17 	ldw	r4,108(sp)
    80ac:	d8801c17 	ldw	r2,112(sp)
    80b0:	d811883a 	mov	r8,sp
    80b4:	21400044 	addi	r5,r4,1
    80b8:	003fe806 	br	805c <_gp+0xfffc9754>
    80bc:	d9402117 	ldw	r5,132(sp)
    80c0:	d9002017 	ldw	r4,128(sp)
    80c4:	d9801a04 	addi	r6,sp,104
    80c8:	d9c02b15 	stw	r7,172(sp)
    80cc:	db402a15 	stw	r13,168(sp)
    80d0:	00071780 	call	7178 <__sprint_r.part.0>
    80d4:	d9c02b17 	ldw	r7,172(sp)
    80d8:	db402a17 	ldw	r13,168(sp)
    80dc:	103fbf1e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    80e0:	d9401b17 	ldw	r5,108(sp)
    80e4:	d8801c17 	ldw	r2,112(sp)
    80e8:	d811883a 	mov	r8,sp
    80ec:	29800044 	addi	r6,r5,1
    80f0:	003dc406 	br	7804 <_gp+0xfffc8efc>
    80f4:	1000d21e 	bne	r2,zero,8440 <___vfiprintf_internal_r+0x11b4>
    80f8:	d8c01d87 	ldb	r3,118(sp)
    80fc:	18009526 	beq	r3,zero,8354 <___vfiprintf_internal_r+0x10c8>
    8100:	00800044 	movi	r2,1
    8104:	d8c01d84 	addi	r3,sp,118
    8108:	1009883a 	mov	r4,r2
    810c:	d8c00015 	stw	r3,0(sp)
    8110:	d8800115 	stw	r2,4(sp)
    8114:	d811883a 	mov	r8,sp
    8118:	200b883a 	mov	r5,r4
    811c:	42000204 	addi	r8,r8,8
    8120:	21000044 	addi	r4,r4,1
    8124:	003d9706 	br	7784 <_gp+0xfffc8e7c>
    8128:	d9001d04 	addi	r4,sp,116
    812c:	00800084 	movi	r2,2
    8130:	d9000015 	stw	r4,0(sp)
    8134:	d8800115 	stw	r2,4(sp)
    8138:	1809883a 	mov	r4,r3
    813c:	d811883a 	mov	r8,sp
    8140:	200b883a 	mov	r5,r4
    8144:	42000204 	addi	r8,r8,8
    8148:	21000044 	addi	r4,r4,1
    814c:	003f4e06 	br	7e88 <_gp+0xfffc9580>
    8150:	d8001d85 	stb	zero,118(sp)
    8154:	48005016 	blt	r9,zero,8298 <___vfiprintf_internal_r+0x100c>
    8158:	00ffdfc4 	movi	r3,-129
    815c:	94c4b03a 	or	r2,r18,r19
    8160:	a0e8703a 	and	r20,r20,r3
    8164:	103d4426 	beq	r2,zero,7678 <_gp+0xfffc8d70>
    8168:	0039883a 	mov	fp,zero
    816c:	d9002617 	ldw	r4,152(sp)
    8170:	dd401a04 	addi	r21,sp,104
    8174:	908003cc 	andi	r2,r18,15
    8178:	9806973a 	slli	r3,r19,28
    817c:	2085883a 	add	r2,r4,r2
    8180:	9024d13a 	srli	r18,r18,4
    8184:	10800003 	ldbu	r2,0(r2)
    8188:	9826d13a 	srli	r19,r19,4
    818c:	ad7fffc4 	addi	r21,r21,-1
    8190:	1ca4b03a 	or	r18,r3,r18
    8194:	a8800005 	stb	r2,0(r21)
    8198:	94c4b03a 	or	r2,r18,r19
    819c:	103ff51e 	bne	r2,zero,8174 <_gp+0xfffc986c>
    81a0:	003e5906 	br	7b08 <_gp+0xfffc9200>
    81a4:	d9402117 	ldw	r5,132(sp)
    81a8:	d9002017 	ldw	r4,128(sp)
    81ac:	d9801a04 	addi	r6,sp,104
    81b0:	00071780 	call	7178 <__sprint_r.part.0>
    81b4:	103f891e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    81b8:	d8801c17 	ldw	r2,112(sp)
    81bc:	d811883a 	mov	r8,sp
    81c0:	003f9506 	br	8018 <_gp+0xfffc9710>
    81c4:	d9402117 	ldw	r5,132(sp)
    81c8:	d9002017 	ldw	r4,128(sp)
    81cc:	d9801a04 	addi	r6,sp,104
    81d0:	00071780 	call	7178 <__sprint_r.part.0>
    81d4:	103f811e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    81d8:	d811883a 	mov	r8,sp
    81dc:	003ced06 	br	7594 <_gp+0xfffc8c8c>
    81e0:	d9402117 	ldw	r5,132(sp)
    81e4:	d9002017 	ldw	r4,128(sp)
    81e8:	d9801a04 	addi	r6,sp,104
    81ec:	da402c15 	stw	r9,176(sp)
    81f0:	db802a15 	stw	r14,168(sp)
    81f4:	00071780 	call	7178 <__sprint_r.part.0>
    81f8:	da402c17 	ldw	r9,176(sp)
    81fc:	db802a17 	ldw	r14,168(sp)
    8200:	103f761e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    8204:	d9401b17 	ldw	r5,108(sp)
    8208:	d8801c17 	ldw	r2,112(sp)
    820c:	d811883a 	mov	r8,sp
    8210:	29000044 	addi	r4,r5,1
    8214:	003d5b06 	br	7784 <_gp+0xfffc8e7c>
    8218:	d9402117 	ldw	r5,132(sp)
    821c:	d9002017 	ldw	r4,128(sp)
    8220:	d9801a04 	addi	r6,sp,104
    8224:	da402c15 	stw	r9,176(sp)
    8228:	00071780 	call	7178 <__sprint_r.part.0>
    822c:	da402c17 	ldw	r9,176(sp)
    8230:	103f6a1e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    8234:	d9401b17 	ldw	r5,108(sp)
    8238:	d8801c17 	ldw	r2,112(sp)
    823c:	d811883a 	mov	r8,sp
    8240:	29000044 	addi	r4,r5,1
    8244:	003f1006 	br	7e88 <_gp+0xfffc9580>
    8248:	1000c31e 	bne	r2,zero,8558 <___vfiprintf_internal_r+0x12cc>
    824c:	01000044 	movi	r4,1
    8250:	000b883a 	mov	r5,zero
    8254:	d811883a 	mov	r8,sp
    8258:	003f0d06 	br	7e90 <_gp+0xfffc9588>
    825c:	d9402117 	ldw	r5,132(sp)
    8260:	d9002017 	ldw	r4,128(sp)
    8264:	d9801a04 	addi	r6,sp,104
    8268:	00071780 	call	7178 <__sprint_r.part.0>
    826c:	103f5b1e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    8270:	d9001b17 	ldw	r4,108(sp)
    8274:	d8801c17 	ldw	r2,112(sp)
    8278:	d811883a 	mov	r8,sp
    827c:	21000044 	addi	r4,r4,1
    8280:	003d8006 	br	7884 <_gp+0xfffc8f7c>
    8284:	010000f4 	movhi	r4,3
    8288:	21129504 	addi	r4,r4,19028
    828c:	d9002615 	stw	r4,152(sp)
    8290:	d8c02215 	stw	r3,136(sp)
    8294:	1029883a 	mov	r20,r2
    8298:	94c4b03a 	or	r2,r18,r19
    829c:	103fb21e 	bne	r2,zero,8168 <_gp+0xfffc9860>
    82a0:	0039883a 	mov	fp,zero
    82a4:	00800084 	movi	r2,2
    82a8:	003e6b06 	br	7c58 <_gp+0xfffc9350>
    82ac:	da802217 	ldw	r10,136(sp)
    82b0:	d8001d85 	stb	zero,118(sp)
    82b4:	0027883a 	mov	r19,zero
    82b8:	50800104 	addi	r2,r10,4
    82bc:	54800017 	ldw	r18,0(r10)
    82c0:	483e6016 	blt	r9,zero,7c44 <_gp+0xfffc933c>
    82c4:	00ffdfc4 	movi	r3,-129
    82c8:	d8802215 	stw	r2,136(sp)
    82cc:	a0e8703a 	and	r20,r20,r3
    82d0:	0039883a 	mov	fp,zero
    82d4:	903ebb26 	beq	r18,zero,7dc4 <_gp+0xfffc94bc>
    82d8:	00800244 	movi	r2,9
    82dc:	14bdee36 	bltu	r2,r18,7a98 <_gp+0xfffc9190>
    82e0:	003eba06 	br	7dcc <_gp+0xfffc94c4>
    82e4:	00800c04 	movi	r2,48
    82e8:	d8c01d45 	stb	r3,117(sp)
    82ec:	d8801d05 	stb	r2,116(sp)
    82f0:	d8001d85 	stb	zero,118(sp)
    82f4:	a0c00094 	ori	r3,r20,2
    82f8:	4800a916 	blt	r9,zero,85a0 <___vfiprintf_internal_r+0x1314>
    82fc:	00bfdfc4 	movi	r2,-129
    8300:	a096703a 	and	r11,r20,r2
    8304:	5d000094 	ori	r20,r11,2
    8308:	0039883a 	mov	fp,zero
    830c:	003f9706 	br	816c <_gp+0xfffc9864>
    8310:	8025883a 	mov	r18,r16
    8314:	003c2e06 	br	73d0 <_gp+0xfffc8ac8>
    8318:	008000f4 	movhi	r2,3
    831c:	10929504 	addi	r2,r2,19028
    8320:	0039883a 	mov	fp,zero
    8324:	d8802615 	stw	r2,152(sp)
    8328:	003f9006 	br	816c <_gp+0xfffc9864>
    832c:	04a5c83a 	sub	r18,zero,r18
    8330:	07000b44 	movi	fp,45
    8334:	9004c03a 	cmpne	r2,r18,zero
    8338:	04e7c83a 	sub	r19,zero,r19
    833c:	df001d85 	stb	fp,118(sp)
    8340:	98a7c83a 	sub	r19,r19,r2
    8344:	48009f16 	blt	r9,zero,85c4 <___vfiprintf_internal_r+0x1338>
    8348:	00bfdfc4 	movi	r2,-129
    834c:	a0a8703a 	and	r20,r20,r2
    8350:	003dd006 	br	7a94 <_gp+0xfffc918c>
    8354:	70004c26 	beq	r14,zero,8488 <___vfiprintf_internal_r+0x11fc>
    8358:	00800084 	movi	r2,2
    835c:	d8c01d04 	addi	r3,sp,116
    8360:	d8c00015 	stw	r3,0(sp)
    8364:	d8800115 	stw	r2,4(sp)
    8368:	01000044 	movi	r4,1
    836c:	d811883a 	mov	r8,sp
    8370:	003f7306 	br	8140 <_gp+0xfffc9838>
    8374:	a080100c 	andi	r2,r20,64
    8378:	da802217 	ldw	r10,136(sp)
    837c:	103e0626 	beq	r2,zero,7b98 <_gp+0xfffc9290>
    8380:	5480000f 	ldh	r18,0(r10)
    8384:	52800104 	addi	r10,r10,4
    8388:	da802215 	stw	r10,136(sp)
    838c:	9027d7fa 	srai	r19,r18,31
    8390:	9805883a 	mov	r2,r19
    8394:	003db806 	br	7a78 <_gp+0xfffc9170>
    8398:	a080040c 	andi	r2,r20,16
    839c:	1000091e 	bne	r2,zero,83c4 <___vfiprintf_internal_r+0x1138>
    83a0:	a2c0100c 	andi	r11,r20,64
    83a4:	58000726 	beq	r11,zero,83c4 <___vfiprintf_internal_r+0x1138>
    83a8:	da802217 	ldw	r10,136(sp)
    83ac:	50800017 	ldw	r2,0(r10)
    83b0:	52800104 	addi	r10,r10,4
    83b4:	da802215 	stw	r10,136(sp)
    83b8:	da802317 	ldw	r10,140(sp)
    83bc:	1280000d 	sth	r10,0(r2)
    83c0:	003be706 	br	7360 <_gp+0xfffc8a58>
    83c4:	da802217 	ldw	r10,136(sp)
    83c8:	50800017 	ldw	r2,0(r10)
    83cc:	52800104 	addi	r10,r10,4
    83d0:	da802215 	stw	r10,136(sp)
    83d4:	da802317 	ldw	r10,140(sp)
    83d8:	12800015 	stw	r10,0(r2)
    83dc:	003be006 	br	7360 <_gp+0xfffc8a58>
    83e0:	a080100c 	andi	r2,r20,64
    83e4:	da802217 	ldw	r10,136(sp)
    83e8:	10003026 	beq	r2,zero,84ac <___vfiprintf_internal_r+0x1220>
    83ec:	5480000b 	ldhu	r18,0(r10)
    83f0:	52800104 	addi	r10,r10,4
    83f4:	0027883a 	mov	r19,zero
    83f8:	da802215 	stw	r10,136(sp)
    83fc:	003d8006 	br	7a00 <_gp+0xfffc90f8>
    8400:	80c00007 	ldb	r3,0(r16)
    8404:	003c0006 	br	7408 <_gp+0xfffc8b00>
    8408:	a080100c 	andi	r2,r20,64
    840c:	d8001d85 	stb	zero,118(sp)
    8410:	da802217 	ldw	r10,136(sp)
    8414:	1000201e 	bne	r2,zero,8498 <___vfiprintf_internal_r+0x120c>
    8418:	50800104 	addi	r2,r10,4
    841c:	54800017 	ldw	r18,0(r10)
    8420:	0027883a 	mov	r19,zero
    8424:	483def0e 	bge	r9,zero,7be4 <_gp+0xfffc92dc>
    8428:	94c6b03a 	or	r3,r18,r19
    842c:	d8802215 	stw	r2,136(sp)
    8430:	183d4e1e 	bne	r3,zero,796c <_gp+0xfffc9064>
    8434:	0039883a 	mov	fp,zero
    8438:	0005883a 	mov	r2,zero
    843c:	003e0606 	br	7c58 <_gp+0xfffc9350>
    8440:	d9402117 	ldw	r5,132(sp)
    8444:	d9002017 	ldw	r4,128(sp)
    8448:	d9801a04 	addi	r6,sp,104
    844c:	da402c15 	stw	r9,176(sp)
    8450:	db802a15 	stw	r14,168(sp)
    8454:	00071780 	call	7178 <__sprint_r.part.0>
    8458:	da402c17 	ldw	r9,176(sp)
    845c:	db802a17 	ldw	r14,168(sp)
    8460:	103ede1e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    8464:	d9401b17 	ldw	r5,108(sp)
    8468:	d8801c17 	ldw	r2,112(sp)
    846c:	d811883a 	mov	r8,sp
    8470:	29000044 	addi	r4,r5,1
    8474:	003e7406 	br	7e48 <_gp+0xfffc9540>
    8478:	00bfffc4 	movi	r2,-1
    847c:	003c5806 	br	75e0 <_gp+0xfffc8cd8>
    8480:	d811883a 	mov	r8,sp
    8484:	003ee806 	br	8028 <_gp+0xfffc9720>
    8488:	000b883a 	mov	r5,zero
    848c:	01000044 	movi	r4,1
    8490:	d811883a 	mov	r8,sp
    8494:	003e7c06 	br	7e88 <_gp+0xfffc9580>
    8498:	50800104 	addi	r2,r10,4
    849c:	5480000b 	ldhu	r18,0(r10)
    84a0:	0027883a 	mov	r19,zero
    84a4:	483dcf0e 	bge	r9,zero,7be4 <_gp+0xfffc92dc>
    84a8:	003fdf06 	br	8428 <_gp+0xfffc9b20>
    84ac:	54800017 	ldw	r18,0(r10)
    84b0:	52800104 	addi	r10,r10,4
    84b4:	0027883a 	mov	r19,zero
    84b8:	da802215 	stw	r10,136(sp)
    84bc:	003d5006 	br	7a00 <_gp+0xfffc90f8>
    84c0:	50800104 	addi	r2,r10,4
    84c4:	5480000b 	ldhu	r18,0(r10)
    84c8:	0027883a 	mov	r19,zero
    84cc:	483f7d0e 	bge	r9,zero,82c4 <_gp+0xfffc99bc>
    84d0:	003ddc06 	br	7c44 <_gp+0xfffc933c>
    84d4:	d8c02215 	stw	r3,136(sp)
    84d8:	0039883a 	mov	fp,zero
    84dc:	003ddb06 	br	7c4c <_gp+0xfffc9344>
    84e0:	028000f4 	movhi	r10,3
    84e4:	5292f604 	addi	r10,r10,19416
    84e8:	da802415 	stw	r10,144(sp)
    84ec:	003e8306 	br	7efc <_gp+0xfffc95f4>
    84f0:	d8801c17 	ldw	r2,112(sp)
    84f4:	dd002117 	ldw	r20,132(sp)
    84f8:	103eb926 	beq	r2,zero,7fe0 <_gp+0xfffc96d8>
    84fc:	d9002017 	ldw	r4,128(sp)
    8500:	d9801a04 	addi	r6,sp,104
    8504:	a00b883a 	mov	r5,r20
    8508:	00071780 	call	7178 <__sprint_r.part.0>
    850c:	003eb406 	br	7fe0 <_gp+0xfffc96d8>
    8510:	80c00043 	ldbu	r3,1(r16)
    8514:	a5000814 	ori	r20,r20,32
    8518:	84000044 	addi	r16,r16,1
    851c:	18c03fcc 	andi	r3,r3,255
    8520:	18c0201c 	xori	r3,r3,128
    8524:	18ffe004 	addi	r3,r3,-128
    8528:	003bb706 	br	7408 <_gp+0xfffc8b00>
    852c:	a809883a 	mov	r4,r21
    8530:	d8c02a15 	stw	r3,168(sp)
    8534:	da002b15 	stw	r8,172(sp)
    8538:	00070e00 	call	70e0 <strlen>
    853c:	d8c02a17 	ldw	r3,168(sp)
    8540:	1027883a 	mov	r19,r2
    8544:	df001d83 	ldbu	fp,118(sp)
    8548:	d8c02215 	stw	r3,136(sp)
    854c:	0013883a 	mov	r9,zero
    8550:	da002b17 	ldw	r8,172(sp)
    8554:	003c4d06 	br	768c <_gp+0xfffc8d84>
    8558:	d9402117 	ldw	r5,132(sp)
    855c:	d9002017 	ldw	r4,128(sp)
    8560:	d9801a04 	addi	r6,sp,104
    8564:	da402c15 	stw	r9,176(sp)
    8568:	00071780 	call	7178 <__sprint_r.part.0>
    856c:	da402c17 	ldw	r9,176(sp)
    8570:	103e9a1e 	bne	r2,zero,7fdc <_gp+0xfffc96d4>
    8574:	d9401b17 	ldw	r5,108(sp)
    8578:	d8801c17 	ldw	r2,112(sp)
    857c:	d811883a 	mov	r8,sp
    8580:	29000044 	addi	r4,r5,1
    8584:	003e4206 	br	7e90 <_gp+0xfffc9588>
    8588:	d9401b17 	ldw	r5,108(sp)
    858c:	010000f4 	movhi	r4,3
    8590:	2112fa04 	addi	r4,r4,19432
    8594:	d9002415 	stw	r4,144(sp)
    8598:	29400044 	addi	r5,r5,1
    859c:	003c6d06 	br	7754 <_gp+0xfffc8e4c>
    85a0:	0039883a 	mov	fp,zero
    85a4:	00800084 	movi	r2,2
    85a8:	10803fcc 	andi	r2,r2,255
    85ac:	01000044 	movi	r4,1
    85b0:	11001e26 	beq	r2,r4,862c <___vfiprintf_internal_r+0x13a0>
    85b4:	01000084 	movi	r4,2
    85b8:	11001e1e 	bne	r2,r4,8634 <___vfiprintf_internal_r+0x13a8>
    85bc:	1829883a 	mov	r20,r3
    85c0:	003eea06 	br	816c <_gp+0xfffc9864>
    85c4:	a007883a 	mov	r3,r20
    85c8:	00800044 	movi	r2,1
    85cc:	003ff606 	br	85a8 <_gp+0xfffc9ca0>
    85d0:	00800184 	movi	r2,6
    85d4:	1240012e 	bgeu	r2,r9,85dc <___vfiprintf_internal_r+0x1350>
    85d8:	1013883a 	mov	r9,r2
    85dc:	4827883a 	mov	r19,r9
    85e0:	4825883a 	mov	r18,r9
    85e4:	48001516 	blt	r9,zero,863c <___vfiprintf_internal_r+0x13b0>
    85e8:	054000f4 	movhi	r21,3
    85ec:	d8c02215 	stw	r3,136(sp)
    85f0:	ad529a04 	addi	r21,r21,19048
    85f4:	003d1406 	br	7a48 <_gp+0xfffc9140>
    85f8:	028000f4 	movhi	r10,3
    85fc:	5292f604 	addi	r10,r10,19416
    8600:	da802415 	stw	r10,144(sp)
    8604:	200d883a 	mov	r6,r4
    8608:	003c9106 	br	7850 <_gp+0xfffc8f48>
    860c:	5021883a 	mov	r16,r10
    8610:	0013883a 	mov	r9,zero
    8614:	003b7d06 	br	740c <_gp+0xfffc8b04>
    8618:	4827883a 	mov	r19,r9
    861c:	df001d83 	ldbu	fp,118(sp)
    8620:	d8c02215 	stw	r3,136(sp)
    8624:	0013883a 	mov	r9,zero
    8628:	003c1806 	br	768c <_gp+0xfffc8d84>
    862c:	1829883a 	mov	r20,r3
    8630:	003d1806 	br	7a94 <_gp+0xfffc918c>
    8634:	1829883a 	mov	r20,r3
    8638:	003ccd06 	br	7970 <_gp+0xfffc9068>
    863c:	0025883a 	mov	r18,zero
    8640:	003fe906 	br	85e8 <_gp+0xfffc9ce0>
    8644:	d8802217 	ldw	r2,136(sp)
    8648:	80c00043 	ldbu	r3,1(r16)
    864c:	5021883a 	mov	r16,r10
    8650:	12400017 	ldw	r9,0(r2)
    8654:	10800104 	addi	r2,r2,4
    8658:	d8802215 	stw	r2,136(sp)
    865c:	483faf0e 	bge	r9,zero,851c <_gp+0xfffc9c14>
    8660:	18c03fcc 	andi	r3,r3,255
    8664:	18c0201c 	xori	r3,r3,128
    8668:	027fffc4 	movi	r9,-1
    866c:	18ffe004 	addi	r3,r3,-128
    8670:	003b6506 	br	7408 <_gp+0xfffc8b00>
    8674:	d9c01d85 	stb	r7,118(sp)
    8678:	003ca006 	br	78fc <_gp+0xfffc8ff4>
    867c:	d9c01d85 	stb	r7,118(sp)
    8680:	003cad06 	br	7938 <_gp+0xfffc9030>
    8684:	d9c01d85 	stb	r7,118(sp)
    8688:	003d7d06 	br	7c80 <_gp+0xfffc9378>
    868c:	d9c01d85 	stb	r7,118(sp)
    8690:	003d5f06 	br	7c10 <_gp+0xfffc9308>
    8694:	a080004c 	andi	r2,r20,1
    8698:	0039883a 	mov	fp,zero
    869c:	10000526 	beq	r2,zero,86b4 <___vfiprintf_internal_r+0x1428>
    86a0:	00800c04 	movi	r2,48
    86a4:	d88019c5 	stb	r2,103(sp)
    86a8:	dcc02717 	ldw	r19,156(sp)
    86ac:	dd4019c4 	addi	r21,sp,103
    86b0:	003bf606 	br	768c <_gp+0xfffc8d84>
    86b4:	0027883a 	mov	r19,zero
    86b8:	dd401a04 	addi	r21,sp,104
    86bc:	003bf306 	br	768c <_gp+0xfffc8d84>
    86c0:	d9c01d85 	stb	r7,118(sp)
    86c4:	003dc806 	br	7de8 <_gp+0xfffc94e0>
    86c8:	d9c01d85 	stb	r7,118(sp)
    86cc:	003d3a06 	br	7bb8 <_gp+0xfffc92b0>
    86d0:	d9c01d85 	stb	r7,118(sp)
    86d4:	003d2a06 	br	7b80 <_gp+0xfffc9278>
    86d8:	d9c01d85 	stb	r7,118(sp)
    86dc:	003cde06 	br	7a58 <_gp+0xfffc9150>
    86e0:	d9c01d85 	stb	r7,118(sp)
    86e4:	003cbc06 	br	79d8 <_gp+0xfffc90d0>

000086e8 <__vfiprintf_internal>:
    86e8:	008000f4 	movhi	r2,3
    86ec:	109a4404 	addi	r2,r2,26896
    86f0:	300f883a 	mov	r7,r6
    86f4:	280d883a 	mov	r6,r5
    86f8:	200b883a 	mov	r5,r4
    86fc:	11000017 	ldw	r4,0(r2)
    8700:	000728c1 	jmpi	728c <___vfiprintf_internal_r>

00008704 <__sbprintf>:
    8704:	2880030b 	ldhu	r2,12(r5)
    8708:	2ac01917 	ldw	r11,100(r5)
    870c:	2a80038b 	ldhu	r10,14(r5)
    8710:	2a400717 	ldw	r9,28(r5)
    8714:	2a000917 	ldw	r8,36(r5)
    8718:	defee204 	addi	sp,sp,-1144
    871c:	00c10004 	movi	r3,1024
    8720:	dc011a15 	stw	r16,1128(sp)
    8724:	10bfff4c 	andi	r2,r2,65533
    8728:	2821883a 	mov	r16,r5
    872c:	d8cb883a 	add	r5,sp,r3
    8730:	dc811c15 	stw	r18,1136(sp)
    8734:	dc411b15 	stw	r17,1132(sp)
    8738:	dfc11d15 	stw	ra,1140(sp)
    873c:	2025883a 	mov	r18,r4
    8740:	d881030d 	sth	r2,1036(sp)
    8744:	dac11915 	stw	r11,1124(sp)
    8748:	da81038d 	sth	r10,1038(sp)
    874c:	da410715 	stw	r9,1052(sp)
    8750:	da010915 	stw	r8,1060(sp)
    8754:	dec10015 	stw	sp,1024(sp)
    8758:	dec10415 	stw	sp,1040(sp)
    875c:	d8c10215 	stw	r3,1032(sp)
    8760:	d8c10515 	stw	r3,1044(sp)
    8764:	d8010615 	stw	zero,1048(sp)
    8768:	000728c0 	call	728c <___vfiprintf_internal_r>
    876c:	1023883a 	mov	r17,r2
    8770:	10000416 	blt	r2,zero,8784 <__sbprintf+0x80>
    8774:	d9410004 	addi	r5,sp,1024
    8778:	9009883a 	mov	r4,r18
    877c:	00046240 	call	4624 <_fflush_r>
    8780:	10000d1e 	bne	r2,zero,87b8 <__sbprintf+0xb4>
    8784:	d881030b 	ldhu	r2,1036(sp)
    8788:	1080100c 	andi	r2,r2,64
    878c:	10000326 	beq	r2,zero,879c <__sbprintf+0x98>
    8790:	8080030b 	ldhu	r2,12(r16)
    8794:	10801014 	ori	r2,r2,64
    8798:	8080030d 	sth	r2,12(r16)
    879c:	8805883a 	mov	r2,r17
    87a0:	dfc11d17 	ldw	ra,1140(sp)
    87a4:	dc811c17 	ldw	r18,1136(sp)
    87a8:	dc411b17 	ldw	r17,1132(sp)
    87ac:	dc011a17 	ldw	r16,1128(sp)
    87b0:	dec11e04 	addi	sp,sp,1144
    87b4:	f800283a 	ret
    87b8:	047fffc4 	movi	r17,-1
    87bc:	003ff106 	br	8784 <_gp+0xfffc9e7c>

000087c0 <_write_r>:
    87c0:	defffd04 	addi	sp,sp,-12
    87c4:	2805883a 	mov	r2,r5
    87c8:	dc000015 	stw	r16,0(sp)
    87cc:	04000134 	movhi	r16,4
    87d0:	dc400115 	stw	r17,4(sp)
    87d4:	300b883a 	mov	r5,r6
    87d8:	84215804 	addi	r16,r16,-31392
    87dc:	2023883a 	mov	r17,r4
    87e0:	380d883a 	mov	r6,r7
    87e4:	1009883a 	mov	r4,r2
    87e8:	dfc00215 	stw	ra,8(sp)
    87ec:	80000015 	stw	zero,0(r16)
    87f0:	000d86c0 	call	d86c <write>
    87f4:	00ffffc4 	movi	r3,-1
    87f8:	10c00526 	beq	r2,r3,8810 <_write_r+0x50>
    87fc:	dfc00217 	ldw	ra,8(sp)
    8800:	dc400117 	ldw	r17,4(sp)
    8804:	dc000017 	ldw	r16,0(sp)
    8808:	dec00304 	addi	sp,sp,12
    880c:	f800283a 	ret
    8810:	80c00017 	ldw	r3,0(r16)
    8814:	183ff926 	beq	r3,zero,87fc <_gp+0xfffc9ef4>
    8818:	88c00015 	stw	r3,0(r17)
    881c:	003ff706 	br	87fc <_gp+0xfffc9ef4>

00008820 <_close_r>:
    8820:	defffd04 	addi	sp,sp,-12
    8824:	dc000015 	stw	r16,0(sp)
    8828:	04000134 	movhi	r16,4
    882c:	dc400115 	stw	r17,4(sp)
    8830:	84215804 	addi	r16,r16,-31392
    8834:	2023883a 	mov	r17,r4
    8838:	2809883a 	mov	r4,r5
    883c:	dfc00215 	stw	ra,8(sp)
    8840:	80000015 	stw	zero,0(r16)
    8844:	000cdc40 	call	cdc4 <close>
    8848:	00ffffc4 	movi	r3,-1
    884c:	10c00526 	beq	r2,r3,8864 <_close_r+0x44>
    8850:	dfc00217 	ldw	ra,8(sp)
    8854:	dc400117 	ldw	r17,4(sp)
    8858:	dc000017 	ldw	r16,0(sp)
    885c:	dec00304 	addi	sp,sp,12
    8860:	f800283a 	ret
    8864:	80c00017 	ldw	r3,0(r16)
    8868:	183ff926 	beq	r3,zero,8850 <_gp+0xfffc9f48>
    886c:	88c00015 	stw	r3,0(r17)
    8870:	003ff706 	br	8850 <_gp+0xfffc9f48>

00008874 <_calloc_r>:
    8874:	298b383a 	mul	r5,r5,r6
    8878:	defffe04 	addi	sp,sp,-8
    887c:	dfc00115 	stw	ra,4(sp)
    8880:	dc000015 	stw	r16,0(sp)
    8884:	00052a40 	call	52a4 <_malloc_r>
    8888:	10002926 	beq	r2,zero,8930 <_calloc_r+0xbc>
    888c:	11bfff17 	ldw	r6,-4(r2)
    8890:	1021883a 	mov	r16,r2
    8894:	00bfff04 	movi	r2,-4
    8898:	308c703a 	and	r6,r6,r2
    889c:	00c00904 	movi	r3,36
    88a0:	308d883a 	add	r6,r6,r2
    88a4:	19801636 	bltu	r3,r6,8900 <_calloc_r+0x8c>
    88a8:	008004c4 	movi	r2,19
    88ac:	11800b2e 	bgeu	r2,r6,88dc <_calloc_r+0x68>
    88b0:	80000015 	stw	zero,0(r16)
    88b4:	80000115 	stw	zero,4(r16)
    88b8:	008006c4 	movi	r2,27
    88bc:	11801a2e 	bgeu	r2,r6,8928 <_calloc_r+0xb4>
    88c0:	80000215 	stw	zero,8(r16)
    88c4:	80000315 	stw	zero,12(r16)
    88c8:	30c0151e 	bne	r6,r3,8920 <_calloc_r+0xac>
    88cc:	80000415 	stw	zero,16(r16)
    88d0:	80800604 	addi	r2,r16,24
    88d4:	80000515 	stw	zero,20(r16)
    88d8:	00000106 	br	88e0 <_calloc_r+0x6c>
    88dc:	8005883a 	mov	r2,r16
    88e0:	10000015 	stw	zero,0(r2)
    88e4:	10000115 	stw	zero,4(r2)
    88e8:	10000215 	stw	zero,8(r2)
    88ec:	8005883a 	mov	r2,r16
    88f0:	dfc00117 	ldw	ra,4(sp)
    88f4:	dc000017 	ldw	r16,0(sp)
    88f8:	dec00204 	addi	sp,sp,8
    88fc:	f800283a 	ret
    8900:	000b883a 	mov	r5,zero
    8904:	8009883a 	mov	r4,r16
    8908:	0005cdc0 	call	5cdc <memset>
    890c:	8005883a 	mov	r2,r16
    8910:	dfc00117 	ldw	ra,4(sp)
    8914:	dc000017 	ldw	r16,0(sp)
    8918:	dec00204 	addi	sp,sp,8
    891c:	f800283a 	ret
    8920:	80800404 	addi	r2,r16,16
    8924:	003fee06 	br	88e0 <_gp+0xfffc9fd8>
    8928:	80800204 	addi	r2,r16,8
    892c:	003fec06 	br	88e0 <_gp+0xfffc9fd8>
    8930:	0005883a 	mov	r2,zero
    8934:	003fee06 	br	88f0 <_gp+0xfffc9fe8>

00008938 <_fclose_r>:
    8938:	28003926 	beq	r5,zero,8a20 <_fclose_r+0xe8>
    893c:	defffc04 	addi	sp,sp,-16
    8940:	dc400115 	stw	r17,4(sp)
    8944:	dc000015 	stw	r16,0(sp)
    8948:	dfc00315 	stw	ra,12(sp)
    894c:	dc800215 	stw	r18,8(sp)
    8950:	2023883a 	mov	r17,r4
    8954:	2821883a 	mov	r16,r5
    8958:	20000226 	beq	r4,zero,8964 <_fclose_r+0x2c>
    895c:	20800e17 	ldw	r2,56(r4)
    8960:	10002726 	beq	r2,zero,8a00 <_fclose_r+0xc8>
    8964:	8080030f 	ldh	r2,12(r16)
    8968:	1000071e 	bne	r2,zero,8988 <_fclose_r+0x50>
    896c:	0005883a 	mov	r2,zero
    8970:	dfc00317 	ldw	ra,12(sp)
    8974:	dc800217 	ldw	r18,8(sp)
    8978:	dc400117 	ldw	r17,4(sp)
    897c:	dc000017 	ldw	r16,0(sp)
    8980:	dec00404 	addi	sp,sp,16
    8984:	f800283a 	ret
    8988:	800b883a 	mov	r5,r16
    898c:	8809883a 	mov	r4,r17
    8990:	00044080 	call	4408 <__sflush_r>
    8994:	1025883a 	mov	r18,r2
    8998:	80800b17 	ldw	r2,44(r16)
    899c:	10000426 	beq	r2,zero,89b0 <_fclose_r+0x78>
    89a0:	81400717 	ldw	r5,28(r16)
    89a4:	8809883a 	mov	r4,r17
    89a8:	103ee83a 	callr	r2
    89ac:	10001616 	blt	r2,zero,8a08 <_fclose_r+0xd0>
    89b0:	8080030b 	ldhu	r2,12(r16)
    89b4:	1080200c 	andi	r2,r2,128
    89b8:	1000151e 	bne	r2,zero,8a10 <_fclose_r+0xd8>
    89bc:	81400c17 	ldw	r5,48(r16)
    89c0:	28000526 	beq	r5,zero,89d8 <_fclose_r+0xa0>
    89c4:	80801004 	addi	r2,r16,64
    89c8:	28800226 	beq	r5,r2,89d4 <_fclose_r+0x9c>
    89cc:	8809883a 	mov	r4,r17
    89d0:	0004b740 	call	4b74 <_free_r>
    89d4:	80000c15 	stw	zero,48(r16)
    89d8:	81401117 	ldw	r5,68(r16)
    89dc:	28000326 	beq	r5,zero,89ec <_fclose_r+0xb4>
    89e0:	8809883a 	mov	r4,r17
    89e4:	0004b740 	call	4b74 <_free_r>
    89e8:	80001115 	stw	zero,68(r16)
    89ec:	0004a100 	call	4a10 <__sfp_lock_acquire>
    89f0:	8000030d 	sth	zero,12(r16)
    89f4:	0004a140 	call	4a14 <__sfp_lock_release>
    89f8:	9005883a 	mov	r2,r18
    89fc:	003fdc06 	br	8970 <_gp+0xfffca068>
    8a00:	0004a000 	call	4a00 <__sinit>
    8a04:	003fd706 	br	8964 <_gp+0xfffca05c>
    8a08:	04bfffc4 	movi	r18,-1
    8a0c:	003fe806 	br	89b0 <_gp+0xfffca0a8>
    8a10:	81400417 	ldw	r5,16(r16)
    8a14:	8809883a 	mov	r4,r17
    8a18:	0004b740 	call	4b74 <_free_r>
    8a1c:	003fe706 	br	89bc <_gp+0xfffca0b4>
    8a20:	0005883a 	mov	r2,zero
    8a24:	f800283a 	ret

00008a28 <fclose>:
    8a28:	008000f4 	movhi	r2,3
    8a2c:	109a4404 	addi	r2,r2,26896
    8a30:	200b883a 	mov	r5,r4
    8a34:	11000017 	ldw	r4,0(r2)
    8a38:	00089381 	jmpi	8938 <_fclose_r>

00008a3c <__fputwc>:
    8a3c:	defff804 	addi	sp,sp,-32
    8a40:	dcc00415 	stw	r19,16(sp)
    8a44:	dc800315 	stw	r18,12(sp)
    8a48:	dc000115 	stw	r16,4(sp)
    8a4c:	dfc00715 	stw	ra,28(sp)
    8a50:	dd400615 	stw	r21,24(sp)
    8a54:	dd000515 	stw	r20,20(sp)
    8a58:	dc400215 	stw	r17,8(sp)
    8a5c:	2027883a 	mov	r19,r4
    8a60:	2825883a 	mov	r18,r5
    8a64:	3021883a 	mov	r16,r6
    8a68:	00050940 	call	5094 <__locale_mb_cur_max>
    8a6c:	00c00044 	movi	r3,1
    8a70:	10c03e26 	beq	r2,r3,8b6c <__fputwc+0x130>
    8a74:	81c01704 	addi	r7,r16,92
    8a78:	900d883a 	mov	r6,r18
    8a7c:	d80b883a 	mov	r5,sp
    8a80:	9809883a 	mov	r4,r19
    8a84:	0009a880 	call	9a88 <_wcrtomb_r>
    8a88:	1029883a 	mov	r20,r2
    8a8c:	00bfffc4 	movi	r2,-1
    8a90:	a0802026 	beq	r20,r2,8b14 <__fputwc+0xd8>
    8a94:	d9400003 	ldbu	r5,0(sp)
    8a98:	a0001c26 	beq	r20,zero,8b0c <__fputwc+0xd0>
    8a9c:	0023883a 	mov	r17,zero
    8aa0:	05400284 	movi	r21,10
    8aa4:	00000906 	br	8acc <__fputwc+0x90>
    8aa8:	80800017 	ldw	r2,0(r16)
    8aac:	11400005 	stb	r5,0(r2)
    8ab0:	80c00017 	ldw	r3,0(r16)
    8ab4:	18c00044 	addi	r3,r3,1
    8ab8:	80c00015 	stw	r3,0(r16)
    8abc:	8c400044 	addi	r17,r17,1
    8ac0:	dc45883a 	add	r2,sp,r17
    8ac4:	8d00112e 	bgeu	r17,r20,8b0c <__fputwc+0xd0>
    8ac8:	11400003 	ldbu	r5,0(r2)
    8acc:	80c00217 	ldw	r3,8(r16)
    8ad0:	18ffffc4 	addi	r3,r3,-1
    8ad4:	80c00215 	stw	r3,8(r16)
    8ad8:	183ff30e 	bge	r3,zero,8aa8 <_gp+0xfffca1a0>
    8adc:	80800617 	ldw	r2,24(r16)
    8ae0:	18801916 	blt	r3,r2,8b48 <__fputwc+0x10c>
    8ae4:	80800017 	ldw	r2,0(r16)
    8ae8:	11400005 	stb	r5,0(r2)
    8aec:	80800017 	ldw	r2,0(r16)
    8af0:	10c00003 	ldbu	r3,0(r2)
    8af4:	10800044 	addi	r2,r2,1
    8af8:	1d402326 	beq	r3,r21,8b88 <__fputwc+0x14c>
    8afc:	80800015 	stw	r2,0(r16)
    8b00:	8c400044 	addi	r17,r17,1
    8b04:	dc45883a 	add	r2,sp,r17
    8b08:	8d3fef36 	bltu	r17,r20,8ac8 <_gp+0xfffca1c0>
    8b0c:	9005883a 	mov	r2,r18
    8b10:	00000406 	br	8b24 <__fputwc+0xe8>
    8b14:	80c0030b 	ldhu	r3,12(r16)
    8b18:	a005883a 	mov	r2,r20
    8b1c:	18c01014 	ori	r3,r3,64
    8b20:	80c0030d 	sth	r3,12(r16)
    8b24:	dfc00717 	ldw	ra,28(sp)
    8b28:	dd400617 	ldw	r21,24(sp)
    8b2c:	dd000517 	ldw	r20,20(sp)
    8b30:	dcc00417 	ldw	r19,16(sp)
    8b34:	dc800317 	ldw	r18,12(sp)
    8b38:	dc400217 	ldw	r17,8(sp)
    8b3c:	dc000117 	ldw	r16,4(sp)
    8b40:	dec00804 	addi	sp,sp,32
    8b44:	f800283a 	ret
    8b48:	800d883a 	mov	r6,r16
    8b4c:	29403fcc 	andi	r5,r5,255
    8b50:	9809883a 	mov	r4,r19
    8b54:	00099300 	call	9930 <__swbuf_r>
    8b58:	10bfffe0 	cmpeqi	r2,r2,-1
    8b5c:	10803fcc 	andi	r2,r2,255
    8b60:	103fd626 	beq	r2,zero,8abc <_gp+0xfffca1b4>
    8b64:	00bfffc4 	movi	r2,-1
    8b68:	003fee06 	br	8b24 <_gp+0xfffca21c>
    8b6c:	90ffffc4 	addi	r3,r18,-1
    8b70:	01003f84 	movi	r4,254
    8b74:	20ffbf36 	bltu	r4,r3,8a74 <_gp+0xfffca16c>
    8b78:	900b883a 	mov	r5,r18
    8b7c:	dc800005 	stb	r18,0(sp)
    8b80:	1029883a 	mov	r20,r2
    8b84:	003fc506 	br	8a9c <_gp+0xfffca194>
    8b88:	800d883a 	mov	r6,r16
    8b8c:	a80b883a 	mov	r5,r21
    8b90:	9809883a 	mov	r4,r19
    8b94:	00099300 	call	9930 <__swbuf_r>
    8b98:	10bfffe0 	cmpeqi	r2,r2,-1
    8b9c:	003fef06 	br	8b5c <_gp+0xfffca254>

00008ba0 <_fputwc_r>:
    8ba0:	3080030b 	ldhu	r2,12(r6)
    8ba4:	10c8000c 	andi	r3,r2,8192
    8ba8:	1800051e 	bne	r3,zero,8bc0 <_fputwc_r+0x20>
    8bac:	30c01917 	ldw	r3,100(r6)
    8bb0:	10880014 	ori	r2,r2,8192
    8bb4:	3080030d 	sth	r2,12(r6)
    8bb8:	18880014 	ori	r2,r3,8192
    8bbc:	30801915 	stw	r2,100(r6)
    8bc0:	0008a3c1 	jmpi	8a3c <__fputwc>

00008bc4 <fputwc>:
    8bc4:	008000f4 	movhi	r2,3
    8bc8:	defffc04 	addi	sp,sp,-16
    8bcc:	109a4404 	addi	r2,r2,26896
    8bd0:	dc000115 	stw	r16,4(sp)
    8bd4:	14000017 	ldw	r16,0(r2)
    8bd8:	dc400215 	stw	r17,8(sp)
    8bdc:	dfc00315 	stw	ra,12(sp)
    8be0:	2023883a 	mov	r17,r4
    8be4:	80000226 	beq	r16,zero,8bf0 <fputwc+0x2c>
    8be8:	80800e17 	ldw	r2,56(r16)
    8bec:	10001026 	beq	r2,zero,8c30 <fputwc+0x6c>
    8bf0:	2880030b 	ldhu	r2,12(r5)
    8bf4:	10c8000c 	andi	r3,r2,8192
    8bf8:	1800051e 	bne	r3,zero,8c10 <fputwc+0x4c>
    8bfc:	28c01917 	ldw	r3,100(r5)
    8c00:	10880014 	ori	r2,r2,8192
    8c04:	2880030d 	sth	r2,12(r5)
    8c08:	18880014 	ori	r2,r3,8192
    8c0c:	28801915 	stw	r2,100(r5)
    8c10:	280d883a 	mov	r6,r5
    8c14:	8009883a 	mov	r4,r16
    8c18:	880b883a 	mov	r5,r17
    8c1c:	dfc00317 	ldw	ra,12(sp)
    8c20:	dc400217 	ldw	r17,8(sp)
    8c24:	dc000117 	ldw	r16,4(sp)
    8c28:	dec00404 	addi	sp,sp,16
    8c2c:	0008a3c1 	jmpi	8a3c <__fputwc>
    8c30:	8009883a 	mov	r4,r16
    8c34:	d9400015 	stw	r5,0(sp)
    8c38:	0004a000 	call	4a00 <__sinit>
    8c3c:	d9400017 	ldw	r5,0(sp)
    8c40:	003feb06 	br	8bf0 <_gp+0xfffca2e8>

00008c44 <_fstat_r>:
    8c44:	defffd04 	addi	sp,sp,-12
    8c48:	2805883a 	mov	r2,r5
    8c4c:	dc000015 	stw	r16,0(sp)
    8c50:	04000134 	movhi	r16,4
    8c54:	dc400115 	stw	r17,4(sp)
    8c58:	84215804 	addi	r16,r16,-31392
    8c5c:	2023883a 	mov	r17,r4
    8c60:	300b883a 	mov	r5,r6
    8c64:	1009883a 	mov	r4,r2
    8c68:	dfc00215 	stw	ra,8(sp)
    8c6c:	80000015 	stw	zero,0(r16)
    8c70:	000cefc0 	call	cefc <fstat>
    8c74:	00ffffc4 	movi	r3,-1
    8c78:	10c00526 	beq	r2,r3,8c90 <_fstat_r+0x4c>
    8c7c:	dfc00217 	ldw	ra,8(sp)
    8c80:	dc400117 	ldw	r17,4(sp)
    8c84:	dc000017 	ldw	r16,0(sp)
    8c88:	dec00304 	addi	sp,sp,12
    8c8c:	f800283a 	ret
    8c90:	80c00017 	ldw	r3,0(r16)
    8c94:	183ff926 	beq	r3,zero,8c7c <_gp+0xfffca374>
    8c98:	88c00015 	stw	r3,0(r17)
    8c9c:	003ff706 	br	8c7c <_gp+0xfffca374>

00008ca0 <__sfvwrite_r>:
    8ca0:	30800217 	ldw	r2,8(r6)
    8ca4:	10006726 	beq	r2,zero,8e44 <__sfvwrite_r+0x1a4>
    8ca8:	28c0030b 	ldhu	r3,12(r5)
    8cac:	defff404 	addi	sp,sp,-48
    8cb0:	dd400715 	stw	r21,28(sp)
    8cb4:	dd000615 	stw	r20,24(sp)
    8cb8:	dc000215 	stw	r16,8(sp)
    8cbc:	dfc00b15 	stw	ra,44(sp)
    8cc0:	df000a15 	stw	fp,40(sp)
    8cc4:	ddc00915 	stw	r23,36(sp)
    8cc8:	dd800815 	stw	r22,32(sp)
    8ccc:	dcc00515 	stw	r19,20(sp)
    8cd0:	dc800415 	stw	r18,16(sp)
    8cd4:	dc400315 	stw	r17,12(sp)
    8cd8:	1880020c 	andi	r2,r3,8
    8cdc:	2821883a 	mov	r16,r5
    8ce0:	202b883a 	mov	r21,r4
    8ce4:	3029883a 	mov	r20,r6
    8ce8:	10002726 	beq	r2,zero,8d88 <__sfvwrite_r+0xe8>
    8cec:	28800417 	ldw	r2,16(r5)
    8cf0:	10002526 	beq	r2,zero,8d88 <__sfvwrite_r+0xe8>
    8cf4:	1880008c 	andi	r2,r3,2
    8cf8:	a4400017 	ldw	r17,0(r20)
    8cfc:	10002a26 	beq	r2,zero,8da8 <__sfvwrite_r+0x108>
    8d00:	05a00034 	movhi	r22,32768
    8d04:	0027883a 	mov	r19,zero
    8d08:	0025883a 	mov	r18,zero
    8d0c:	b5bf0004 	addi	r22,r22,-1024
    8d10:	980d883a 	mov	r6,r19
    8d14:	a809883a 	mov	r4,r21
    8d18:	90004626 	beq	r18,zero,8e34 <__sfvwrite_r+0x194>
    8d1c:	900f883a 	mov	r7,r18
    8d20:	b480022e 	bgeu	r22,r18,8d2c <__sfvwrite_r+0x8c>
    8d24:	01e00034 	movhi	r7,32768
    8d28:	39ff0004 	addi	r7,r7,-1024
    8d2c:	80800917 	ldw	r2,36(r16)
    8d30:	81400717 	ldw	r5,28(r16)
    8d34:	103ee83a 	callr	r2
    8d38:	0080570e 	bge	zero,r2,8e98 <__sfvwrite_r+0x1f8>
    8d3c:	a0c00217 	ldw	r3,8(r20)
    8d40:	98a7883a 	add	r19,r19,r2
    8d44:	90a5c83a 	sub	r18,r18,r2
    8d48:	1885c83a 	sub	r2,r3,r2
    8d4c:	a0800215 	stw	r2,8(r20)
    8d50:	103fef1e 	bne	r2,zero,8d10 <_gp+0xfffca408>
    8d54:	0005883a 	mov	r2,zero
    8d58:	dfc00b17 	ldw	ra,44(sp)
    8d5c:	df000a17 	ldw	fp,40(sp)
    8d60:	ddc00917 	ldw	r23,36(sp)
    8d64:	dd800817 	ldw	r22,32(sp)
    8d68:	dd400717 	ldw	r21,28(sp)
    8d6c:	dd000617 	ldw	r20,24(sp)
    8d70:	dcc00517 	ldw	r19,20(sp)
    8d74:	dc800417 	ldw	r18,16(sp)
    8d78:	dc400317 	ldw	r17,12(sp)
    8d7c:	dc000217 	ldw	r16,8(sp)
    8d80:	dec00c04 	addi	sp,sp,48
    8d84:	f800283a 	ret
    8d88:	800b883a 	mov	r5,r16
    8d8c:	a809883a 	mov	r4,r21
    8d90:	0002a2c0 	call	2a2c <__swsetup_r>
    8d94:	1000eb1e 	bne	r2,zero,9144 <__sfvwrite_r+0x4a4>
    8d98:	80c0030b 	ldhu	r3,12(r16)
    8d9c:	a4400017 	ldw	r17,0(r20)
    8da0:	1880008c 	andi	r2,r3,2
    8da4:	103fd61e 	bne	r2,zero,8d00 <_gp+0xfffca3f8>
    8da8:	1880004c 	andi	r2,r3,1
    8dac:	10003f1e 	bne	r2,zero,8eac <__sfvwrite_r+0x20c>
    8db0:	0039883a 	mov	fp,zero
    8db4:	0025883a 	mov	r18,zero
    8db8:	90001a26 	beq	r18,zero,8e24 <__sfvwrite_r+0x184>
    8dbc:	1880800c 	andi	r2,r3,512
    8dc0:	84c00217 	ldw	r19,8(r16)
    8dc4:	10002126 	beq	r2,zero,8e4c <__sfvwrite_r+0x1ac>
    8dc8:	982f883a 	mov	r23,r19
    8dcc:	94c09336 	bltu	r18,r19,901c <__sfvwrite_r+0x37c>
    8dd0:	1881200c 	andi	r2,r3,1152
    8dd4:	10009e1e 	bne	r2,zero,9050 <__sfvwrite_r+0x3b0>
    8dd8:	81000017 	ldw	r4,0(r16)
    8ddc:	b80d883a 	mov	r6,r23
    8de0:	e00b883a 	mov	r5,fp
    8de4:	00092100 	call	9210 <memmove>
    8de8:	80c00217 	ldw	r3,8(r16)
    8dec:	81000017 	ldw	r4,0(r16)
    8df0:	9005883a 	mov	r2,r18
    8df4:	1ce7c83a 	sub	r19,r3,r19
    8df8:	25cf883a 	add	r7,r4,r23
    8dfc:	84c00215 	stw	r19,8(r16)
    8e00:	81c00015 	stw	r7,0(r16)
    8e04:	a0c00217 	ldw	r3,8(r20)
    8e08:	e0b9883a 	add	fp,fp,r2
    8e0c:	90a5c83a 	sub	r18,r18,r2
    8e10:	18a7c83a 	sub	r19,r3,r2
    8e14:	a4c00215 	stw	r19,8(r20)
    8e18:	983fce26 	beq	r19,zero,8d54 <_gp+0xfffca44c>
    8e1c:	80c0030b 	ldhu	r3,12(r16)
    8e20:	903fe61e 	bne	r18,zero,8dbc <_gp+0xfffca4b4>
    8e24:	8f000017 	ldw	fp,0(r17)
    8e28:	8c800117 	ldw	r18,4(r17)
    8e2c:	8c400204 	addi	r17,r17,8
    8e30:	003fe106 	br	8db8 <_gp+0xfffca4b0>
    8e34:	8cc00017 	ldw	r19,0(r17)
    8e38:	8c800117 	ldw	r18,4(r17)
    8e3c:	8c400204 	addi	r17,r17,8
    8e40:	003fb306 	br	8d10 <_gp+0xfffca408>
    8e44:	0005883a 	mov	r2,zero
    8e48:	f800283a 	ret
    8e4c:	81000017 	ldw	r4,0(r16)
    8e50:	80800417 	ldw	r2,16(r16)
    8e54:	11005736 	bltu	r2,r4,8fb4 <__sfvwrite_r+0x314>
    8e58:	85c00517 	ldw	r23,20(r16)
    8e5c:	95c05536 	bltu	r18,r23,8fb4 <__sfvwrite_r+0x314>
    8e60:	00a00034 	movhi	r2,32768
    8e64:	10bfffc4 	addi	r2,r2,-1
    8e68:	9009883a 	mov	r4,r18
    8e6c:	1480012e 	bgeu	r2,r18,8e74 <__sfvwrite_r+0x1d4>
    8e70:	1009883a 	mov	r4,r2
    8e74:	b80b883a 	mov	r5,r23
    8e78:	000053c0 	call	53c <__divsi3>
    8e7c:	15cf383a 	mul	r7,r2,r23
    8e80:	81400717 	ldw	r5,28(r16)
    8e84:	80800917 	ldw	r2,36(r16)
    8e88:	e00d883a 	mov	r6,fp
    8e8c:	a809883a 	mov	r4,r21
    8e90:	103ee83a 	callr	r2
    8e94:	00bfdb16 	blt	zero,r2,8e04 <_gp+0xfffca4fc>
    8e98:	8080030b 	ldhu	r2,12(r16)
    8e9c:	10801014 	ori	r2,r2,64
    8ea0:	8080030d 	sth	r2,12(r16)
    8ea4:	00bfffc4 	movi	r2,-1
    8ea8:	003fab06 	br	8d58 <_gp+0xfffca450>
    8eac:	0027883a 	mov	r19,zero
    8eb0:	0011883a 	mov	r8,zero
    8eb4:	0039883a 	mov	fp,zero
    8eb8:	0025883a 	mov	r18,zero
    8ebc:	90001f26 	beq	r18,zero,8f3c <__sfvwrite_r+0x29c>
    8ec0:	40005a26 	beq	r8,zero,902c <__sfvwrite_r+0x38c>
    8ec4:	982d883a 	mov	r22,r19
    8ec8:	94c0012e 	bgeu	r18,r19,8ed0 <__sfvwrite_r+0x230>
    8ecc:	902d883a 	mov	r22,r18
    8ed0:	81000017 	ldw	r4,0(r16)
    8ed4:	80800417 	ldw	r2,16(r16)
    8ed8:	b02f883a 	mov	r23,r22
    8edc:	81c00517 	ldw	r7,20(r16)
    8ee0:	1100032e 	bgeu	r2,r4,8ef0 <__sfvwrite_r+0x250>
    8ee4:	80c00217 	ldw	r3,8(r16)
    8ee8:	38c7883a 	add	r3,r7,r3
    8eec:	1d801816 	blt	r3,r22,8f50 <__sfvwrite_r+0x2b0>
    8ef0:	b1c03e16 	blt	r22,r7,8fec <__sfvwrite_r+0x34c>
    8ef4:	80800917 	ldw	r2,36(r16)
    8ef8:	81400717 	ldw	r5,28(r16)
    8efc:	e00d883a 	mov	r6,fp
    8f00:	da000115 	stw	r8,4(sp)
    8f04:	a809883a 	mov	r4,r21
    8f08:	103ee83a 	callr	r2
    8f0c:	102f883a 	mov	r23,r2
    8f10:	da000117 	ldw	r8,4(sp)
    8f14:	00bfe00e 	bge	zero,r2,8e98 <_gp+0xfffca590>
    8f18:	9de7c83a 	sub	r19,r19,r23
    8f1c:	98001f26 	beq	r19,zero,8f9c <__sfvwrite_r+0x2fc>
    8f20:	a0800217 	ldw	r2,8(r20)
    8f24:	e5f9883a 	add	fp,fp,r23
    8f28:	95e5c83a 	sub	r18,r18,r23
    8f2c:	15efc83a 	sub	r23,r2,r23
    8f30:	a5c00215 	stw	r23,8(r20)
    8f34:	b83f8726 	beq	r23,zero,8d54 <_gp+0xfffca44c>
    8f38:	903fe11e 	bne	r18,zero,8ec0 <_gp+0xfffca5b8>
    8f3c:	8f000017 	ldw	fp,0(r17)
    8f40:	8c800117 	ldw	r18,4(r17)
    8f44:	0011883a 	mov	r8,zero
    8f48:	8c400204 	addi	r17,r17,8
    8f4c:	003fdb06 	br	8ebc <_gp+0xfffca5b4>
    8f50:	180d883a 	mov	r6,r3
    8f54:	e00b883a 	mov	r5,fp
    8f58:	da000115 	stw	r8,4(sp)
    8f5c:	d8c00015 	stw	r3,0(sp)
    8f60:	00092100 	call	9210 <memmove>
    8f64:	d8c00017 	ldw	r3,0(sp)
    8f68:	80800017 	ldw	r2,0(r16)
    8f6c:	800b883a 	mov	r5,r16
    8f70:	a809883a 	mov	r4,r21
    8f74:	10c5883a 	add	r2,r2,r3
    8f78:	80800015 	stw	r2,0(r16)
    8f7c:	d8c00015 	stw	r3,0(sp)
    8f80:	00046240 	call	4624 <_fflush_r>
    8f84:	d8c00017 	ldw	r3,0(sp)
    8f88:	da000117 	ldw	r8,4(sp)
    8f8c:	103fc21e 	bne	r2,zero,8e98 <_gp+0xfffca590>
    8f90:	182f883a 	mov	r23,r3
    8f94:	9de7c83a 	sub	r19,r19,r23
    8f98:	983fe11e 	bne	r19,zero,8f20 <_gp+0xfffca618>
    8f9c:	800b883a 	mov	r5,r16
    8fa0:	a809883a 	mov	r4,r21
    8fa4:	00046240 	call	4624 <_fflush_r>
    8fa8:	103fbb1e 	bne	r2,zero,8e98 <_gp+0xfffca590>
    8fac:	0011883a 	mov	r8,zero
    8fb0:	003fdb06 	br	8f20 <_gp+0xfffca618>
    8fb4:	94c0012e 	bgeu	r18,r19,8fbc <__sfvwrite_r+0x31c>
    8fb8:	9027883a 	mov	r19,r18
    8fbc:	980d883a 	mov	r6,r19
    8fc0:	e00b883a 	mov	r5,fp
    8fc4:	00092100 	call	9210 <memmove>
    8fc8:	80800217 	ldw	r2,8(r16)
    8fcc:	80c00017 	ldw	r3,0(r16)
    8fd0:	14c5c83a 	sub	r2,r2,r19
    8fd4:	1cc7883a 	add	r3,r3,r19
    8fd8:	80800215 	stw	r2,8(r16)
    8fdc:	80c00015 	stw	r3,0(r16)
    8fe0:	10004326 	beq	r2,zero,90f0 <__sfvwrite_r+0x450>
    8fe4:	9805883a 	mov	r2,r19
    8fe8:	003f8606 	br	8e04 <_gp+0xfffca4fc>
    8fec:	b00d883a 	mov	r6,r22
    8ff0:	e00b883a 	mov	r5,fp
    8ff4:	da000115 	stw	r8,4(sp)
    8ff8:	00092100 	call	9210 <memmove>
    8ffc:	80800217 	ldw	r2,8(r16)
    9000:	80c00017 	ldw	r3,0(r16)
    9004:	da000117 	ldw	r8,4(sp)
    9008:	1585c83a 	sub	r2,r2,r22
    900c:	1dad883a 	add	r22,r3,r22
    9010:	80800215 	stw	r2,8(r16)
    9014:	85800015 	stw	r22,0(r16)
    9018:	003fbf06 	br	8f18 <_gp+0xfffca610>
    901c:	81000017 	ldw	r4,0(r16)
    9020:	9027883a 	mov	r19,r18
    9024:	902f883a 	mov	r23,r18
    9028:	003f6c06 	br	8ddc <_gp+0xfffca4d4>
    902c:	900d883a 	mov	r6,r18
    9030:	01400284 	movi	r5,10
    9034:	e009883a 	mov	r4,fp
    9038:	0005ab00 	call	5ab0 <memchr>
    903c:	10003e26 	beq	r2,zero,9138 <__sfvwrite_r+0x498>
    9040:	10800044 	addi	r2,r2,1
    9044:	1727c83a 	sub	r19,r2,fp
    9048:	02000044 	movi	r8,1
    904c:	003f9d06 	br	8ec4 <_gp+0xfffca5bc>
    9050:	80800517 	ldw	r2,20(r16)
    9054:	81400417 	ldw	r5,16(r16)
    9058:	81c00017 	ldw	r7,0(r16)
    905c:	10a7883a 	add	r19,r2,r2
    9060:	9885883a 	add	r2,r19,r2
    9064:	1026d7fa 	srli	r19,r2,31
    9068:	396dc83a 	sub	r22,r7,r5
    906c:	b1000044 	addi	r4,r22,1
    9070:	9885883a 	add	r2,r19,r2
    9074:	1027d07a 	srai	r19,r2,1
    9078:	2485883a 	add	r2,r4,r18
    907c:	980d883a 	mov	r6,r19
    9080:	9880022e 	bgeu	r19,r2,908c <__sfvwrite_r+0x3ec>
    9084:	1027883a 	mov	r19,r2
    9088:	100d883a 	mov	r6,r2
    908c:	18c1000c 	andi	r3,r3,1024
    9090:	18001c26 	beq	r3,zero,9104 <__sfvwrite_r+0x464>
    9094:	300b883a 	mov	r5,r6
    9098:	a809883a 	mov	r4,r21
    909c:	00052a40 	call	52a4 <_malloc_r>
    90a0:	102f883a 	mov	r23,r2
    90a4:	10002926 	beq	r2,zero,914c <__sfvwrite_r+0x4ac>
    90a8:	81400417 	ldw	r5,16(r16)
    90ac:	b00d883a 	mov	r6,r22
    90b0:	1009883a 	mov	r4,r2
    90b4:	0005b940 	call	5b94 <memcpy>
    90b8:	8080030b 	ldhu	r2,12(r16)
    90bc:	00fedfc4 	movi	r3,-1153
    90c0:	10c4703a 	and	r2,r2,r3
    90c4:	10802014 	ori	r2,r2,128
    90c8:	8080030d 	sth	r2,12(r16)
    90cc:	bd89883a 	add	r4,r23,r22
    90d0:	9d8fc83a 	sub	r7,r19,r22
    90d4:	85c00415 	stw	r23,16(r16)
    90d8:	84c00515 	stw	r19,20(r16)
    90dc:	81000015 	stw	r4,0(r16)
    90e0:	9027883a 	mov	r19,r18
    90e4:	81c00215 	stw	r7,8(r16)
    90e8:	902f883a 	mov	r23,r18
    90ec:	003f3b06 	br	8ddc <_gp+0xfffca4d4>
    90f0:	800b883a 	mov	r5,r16
    90f4:	a809883a 	mov	r4,r21
    90f8:	00046240 	call	4624 <_fflush_r>
    90fc:	103fb926 	beq	r2,zero,8fe4 <_gp+0xfffca6dc>
    9100:	003f6506 	br	8e98 <_gp+0xfffca590>
    9104:	a809883a 	mov	r4,r21
    9108:	00093cc0 	call	93cc <_realloc_r>
    910c:	102f883a 	mov	r23,r2
    9110:	103fee1e 	bne	r2,zero,90cc <_gp+0xfffca7c4>
    9114:	81400417 	ldw	r5,16(r16)
    9118:	a809883a 	mov	r4,r21
    911c:	0004b740 	call	4b74 <_free_r>
    9120:	8080030b 	ldhu	r2,12(r16)
    9124:	00ffdfc4 	movi	r3,-129
    9128:	1884703a 	and	r2,r3,r2
    912c:	00c00304 	movi	r3,12
    9130:	a8c00015 	stw	r3,0(r21)
    9134:	003f5906 	br	8e9c <_gp+0xfffca594>
    9138:	94c00044 	addi	r19,r18,1
    913c:	02000044 	movi	r8,1
    9140:	003f6006 	br	8ec4 <_gp+0xfffca5bc>
    9144:	00bfffc4 	movi	r2,-1
    9148:	003f0306 	br	8d58 <_gp+0xfffca450>
    914c:	00800304 	movi	r2,12
    9150:	a8800015 	stw	r2,0(r21)
    9154:	8080030b 	ldhu	r2,12(r16)
    9158:	003f5006 	br	8e9c <_gp+0xfffca594>

0000915c <_isatty_r>:
    915c:	defffd04 	addi	sp,sp,-12
    9160:	dc000015 	stw	r16,0(sp)
    9164:	04000134 	movhi	r16,4
    9168:	dc400115 	stw	r17,4(sp)
    916c:	84215804 	addi	r16,r16,-31392
    9170:	2023883a 	mov	r17,r4
    9174:	2809883a 	mov	r4,r5
    9178:	dfc00215 	stw	ra,8(sp)
    917c:	80000015 	stw	zero,0(r16)
    9180:	000d2880 	call	d288 <isatty>
    9184:	00ffffc4 	movi	r3,-1
    9188:	10c00526 	beq	r2,r3,91a0 <_isatty_r+0x44>
    918c:	dfc00217 	ldw	ra,8(sp)
    9190:	dc400117 	ldw	r17,4(sp)
    9194:	dc000017 	ldw	r16,0(sp)
    9198:	dec00304 	addi	sp,sp,12
    919c:	f800283a 	ret
    91a0:	80c00017 	ldw	r3,0(r16)
    91a4:	183ff926 	beq	r3,zero,918c <_gp+0xfffca884>
    91a8:	88c00015 	stw	r3,0(r17)
    91ac:	003ff706 	br	918c <_gp+0xfffca884>

000091b0 <_lseek_r>:
    91b0:	defffd04 	addi	sp,sp,-12
    91b4:	2805883a 	mov	r2,r5
    91b8:	dc000015 	stw	r16,0(sp)
    91bc:	04000134 	movhi	r16,4
    91c0:	dc400115 	stw	r17,4(sp)
    91c4:	300b883a 	mov	r5,r6
    91c8:	84215804 	addi	r16,r16,-31392
    91cc:	2023883a 	mov	r17,r4
    91d0:	380d883a 	mov	r6,r7
    91d4:	1009883a 	mov	r4,r2
    91d8:	dfc00215 	stw	ra,8(sp)
    91dc:	80000015 	stw	zero,0(r16)
    91e0:	000d4540 	call	d454 <lseek>
    91e4:	00ffffc4 	movi	r3,-1
    91e8:	10c00526 	beq	r2,r3,9200 <_lseek_r+0x50>
    91ec:	dfc00217 	ldw	ra,8(sp)
    91f0:	dc400117 	ldw	r17,4(sp)
    91f4:	dc000017 	ldw	r16,0(sp)
    91f8:	dec00304 	addi	sp,sp,12
    91fc:	f800283a 	ret
    9200:	80c00017 	ldw	r3,0(r16)
    9204:	183ff926 	beq	r3,zero,91ec <_gp+0xfffca8e4>
    9208:	88c00015 	stw	r3,0(r17)
    920c:	003ff706 	br	91ec <_gp+0xfffca8e4>

00009210 <memmove>:
    9210:	2005883a 	mov	r2,r4
    9214:	29000b2e 	bgeu	r5,r4,9244 <memmove+0x34>
    9218:	298f883a 	add	r7,r5,r6
    921c:	21c0092e 	bgeu	r4,r7,9244 <memmove+0x34>
    9220:	2187883a 	add	r3,r4,r6
    9224:	198bc83a 	sub	r5,r3,r6
    9228:	30004826 	beq	r6,zero,934c <memmove+0x13c>
    922c:	39ffffc4 	addi	r7,r7,-1
    9230:	39000003 	ldbu	r4,0(r7)
    9234:	18ffffc4 	addi	r3,r3,-1
    9238:	19000005 	stb	r4,0(r3)
    923c:	28fffb1e 	bne	r5,r3,922c <_gp+0xfffca924>
    9240:	f800283a 	ret
    9244:	00c003c4 	movi	r3,15
    9248:	1980412e 	bgeu	r3,r6,9350 <memmove+0x140>
    924c:	2886b03a 	or	r3,r5,r2
    9250:	18c000cc 	andi	r3,r3,3
    9254:	1800401e 	bne	r3,zero,9358 <memmove+0x148>
    9258:	33fffc04 	addi	r15,r6,-16
    925c:	781ed13a 	srli	r15,r15,4
    9260:	28c00104 	addi	r3,r5,4
    9264:	13400104 	addi	r13,r2,4
    9268:	781c913a 	slli	r14,r15,4
    926c:	2b000204 	addi	r12,r5,8
    9270:	12c00204 	addi	r11,r2,8
    9274:	73800504 	addi	r14,r14,20
    9278:	2a800304 	addi	r10,r5,12
    927c:	12400304 	addi	r9,r2,12
    9280:	2b9d883a 	add	r14,r5,r14
    9284:	2811883a 	mov	r8,r5
    9288:	100f883a 	mov	r7,r2
    928c:	41000017 	ldw	r4,0(r8)
    9290:	39c00404 	addi	r7,r7,16
    9294:	18c00404 	addi	r3,r3,16
    9298:	393ffc15 	stw	r4,-16(r7)
    929c:	193ffc17 	ldw	r4,-16(r3)
    92a0:	6b400404 	addi	r13,r13,16
    92a4:	5ac00404 	addi	r11,r11,16
    92a8:	693ffc15 	stw	r4,-16(r13)
    92ac:	61000017 	ldw	r4,0(r12)
    92b0:	4a400404 	addi	r9,r9,16
    92b4:	42000404 	addi	r8,r8,16
    92b8:	593ffc15 	stw	r4,-16(r11)
    92bc:	51000017 	ldw	r4,0(r10)
    92c0:	63000404 	addi	r12,r12,16
    92c4:	52800404 	addi	r10,r10,16
    92c8:	493ffc15 	stw	r4,-16(r9)
    92cc:	1bbfef1e 	bne	r3,r14,928c <_gp+0xfffca984>
    92d0:	79000044 	addi	r4,r15,1
    92d4:	2008913a 	slli	r4,r4,4
    92d8:	328003cc 	andi	r10,r6,15
    92dc:	02c000c4 	movi	r11,3
    92e0:	1107883a 	add	r3,r2,r4
    92e4:	290b883a 	add	r5,r5,r4
    92e8:	5a801e2e 	bgeu	r11,r10,9364 <memmove+0x154>
    92ec:	1813883a 	mov	r9,r3
    92f0:	2811883a 	mov	r8,r5
    92f4:	500f883a 	mov	r7,r10
    92f8:	41000017 	ldw	r4,0(r8)
    92fc:	4a400104 	addi	r9,r9,4
    9300:	39ffff04 	addi	r7,r7,-4
    9304:	493fff15 	stw	r4,-4(r9)
    9308:	42000104 	addi	r8,r8,4
    930c:	59fffa36 	bltu	r11,r7,92f8 <_gp+0xfffca9f0>
    9310:	513fff04 	addi	r4,r10,-4
    9314:	2008d0ba 	srli	r4,r4,2
    9318:	318000cc 	andi	r6,r6,3
    931c:	21000044 	addi	r4,r4,1
    9320:	2109883a 	add	r4,r4,r4
    9324:	2109883a 	add	r4,r4,r4
    9328:	1907883a 	add	r3,r3,r4
    932c:	290b883a 	add	r5,r5,r4
    9330:	30000b26 	beq	r6,zero,9360 <memmove+0x150>
    9334:	198d883a 	add	r6,r3,r6
    9338:	29c00003 	ldbu	r7,0(r5)
    933c:	18c00044 	addi	r3,r3,1
    9340:	29400044 	addi	r5,r5,1
    9344:	19ffffc5 	stb	r7,-1(r3)
    9348:	19bffb1e 	bne	r3,r6,9338 <_gp+0xfffcaa30>
    934c:	f800283a 	ret
    9350:	1007883a 	mov	r3,r2
    9354:	003ff606 	br	9330 <_gp+0xfffcaa28>
    9358:	1007883a 	mov	r3,r2
    935c:	003ff506 	br	9334 <_gp+0xfffcaa2c>
    9360:	f800283a 	ret
    9364:	500d883a 	mov	r6,r10
    9368:	003ff106 	br	9330 <_gp+0xfffcaa28>

0000936c <_read_r>:
    936c:	defffd04 	addi	sp,sp,-12
    9370:	2805883a 	mov	r2,r5
    9374:	dc000015 	stw	r16,0(sp)
    9378:	04000134 	movhi	r16,4
    937c:	dc400115 	stw	r17,4(sp)
    9380:	300b883a 	mov	r5,r6
    9384:	84215804 	addi	r16,r16,-31392
    9388:	2023883a 	mov	r17,r4
    938c:	380d883a 	mov	r6,r7
    9390:	1009883a 	mov	r4,r2
    9394:	dfc00215 	stw	ra,8(sp)
    9398:	80000015 	stw	zero,0(r16)
    939c:	000d6200 	call	d620 <read>
    93a0:	00ffffc4 	movi	r3,-1
    93a4:	10c00526 	beq	r2,r3,93bc <_read_r+0x50>
    93a8:	dfc00217 	ldw	ra,8(sp)
    93ac:	dc400117 	ldw	r17,4(sp)
    93b0:	dc000017 	ldw	r16,0(sp)
    93b4:	dec00304 	addi	sp,sp,12
    93b8:	f800283a 	ret
    93bc:	80c00017 	ldw	r3,0(r16)
    93c0:	183ff926 	beq	r3,zero,93a8 <_gp+0xfffcaaa0>
    93c4:	88c00015 	stw	r3,0(r17)
    93c8:	003ff706 	br	93a8 <_gp+0xfffcaaa0>

000093cc <_realloc_r>:
    93cc:	defff604 	addi	sp,sp,-40
    93d0:	dc800215 	stw	r18,8(sp)
    93d4:	dfc00915 	stw	ra,36(sp)
    93d8:	df000815 	stw	fp,32(sp)
    93dc:	ddc00715 	stw	r23,28(sp)
    93e0:	dd800615 	stw	r22,24(sp)
    93e4:	dd400515 	stw	r21,20(sp)
    93e8:	dd000415 	stw	r20,16(sp)
    93ec:	dcc00315 	stw	r19,12(sp)
    93f0:	dc400115 	stw	r17,4(sp)
    93f4:	dc000015 	stw	r16,0(sp)
    93f8:	3025883a 	mov	r18,r6
    93fc:	2800b726 	beq	r5,zero,96dc <_realloc_r+0x310>
    9400:	282b883a 	mov	r21,r5
    9404:	2029883a 	mov	r20,r4
    9408:	000da880 	call	da88 <__malloc_lock>
    940c:	a8bfff17 	ldw	r2,-4(r21)
    9410:	043fff04 	movi	r16,-4
    9414:	90c002c4 	addi	r3,r18,11
    9418:	01000584 	movi	r4,22
    941c:	acfffe04 	addi	r19,r21,-8
    9420:	1420703a 	and	r16,r2,r16
    9424:	20c0332e 	bgeu	r4,r3,94f4 <_realloc_r+0x128>
    9428:	047ffe04 	movi	r17,-8
    942c:	1c62703a 	and	r17,r3,r17
    9430:	8807883a 	mov	r3,r17
    9434:	88005816 	blt	r17,zero,9598 <_realloc_r+0x1cc>
    9438:	8c805736 	bltu	r17,r18,9598 <_realloc_r+0x1cc>
    943c:	80c0300e 	bge	r16,r3,9500 <_realloc_r+0x134>
    9440:	070000f4 	movhi	fp,3
    9444:	e714bb04 	addi	fp,fp,21228
    9448:	e1c00217 	ldw	r7,8(fp)
    944c:	9c09883a 	add	r4,r19,r16
    9450:	22000117 	ldw	r8,4(r4)
    9454:	21c06326 	beq	r4,r7,95e4 <_realloc_r+0x218>
    9458:	017fff84 	movi	r5,-2
    945c:	414a703a 	and	r5,r8,r5
    9460:	214b883a 	add	r5,r4,r5
    9464:	29800117 	ldw	r6,4(r5)
    9468:	3180004c 	andi	r6,r6,1
    946c:	30003f26 	beq	r6,zero,956c <_realloc_r+0x1a0>
    9470:	1080004c 	andi	r2,r2,1
    9474:	10008326 	beq	r2,zero,9684 <_realloc_r+0x2b8>
    9478:	900b883a 	mov	r5,r18
    947c:	a009883a 	mov	r4,r20
    9480:	00052a40 	call	52a4 <_malloc_r>
    9484:	1025883a 	mov	r18,r2
    9488:	10011e26 	beq	r2,zero,9904 <_realloc_r+0x538>
    948c:	a93fff17 	ldw	r4,-4(r21)
    9490:	10fffe04 	addi	r3,r2,-8
    9494:	00bfff84 	movi	r2,-2
    9498:	2084703a 	and	r2,r4,r2
    949c:	9885883a 	add	r2,r19,r2
    94a0:	1880ee26 	beq	r3,r2,985c <_realloc_r+0x490>
    94a4:	81bfff04 	addi	r6,r16,-4
    94a8:	00800904 	movi	r2,36
    94ac:	1180b836 	bltu	r2,r6,9790 <_realloc_r+0x3c4>
    94b0:	00c004c4 	movi	r3,19
    94b4:	19809636 	bltu	r3,r6,9710 <_realloc_r+0x344>
    94b8:	9005883a 	mov	r2,r18
    94bc:	a807883a 	mov	r3,r21
    94c0:	19000017 	ldw	r4,0(r3)
    94c4:	11000015 	stw	r4,0(r2)
    94c8:	19000117 	ldw	r4,4(r3)
    94cc:	11000115 	stw	r4,4(r2)
    94d0:	18c00217 	ldw	r3,8(r3)
    94d4:	10c00215 	stw	r3,8(r2)
    94d8:	a80b883a 	mov	r5,r21
    94dc:	a009883a 	mov	r4,r20
    94e0:	0004b740 	call	4b74 <_free_r>
    94e4:	a009883a 	mov	r4,r20
    94e8:	000dba80 	call	dba8 <__malloc_unlock>
    94ec:	9005883a 	mov	r2,r18
    94f0:	00001206 	br	953c <_realloc_r+0x170>
    94f4:	00c00404 	movi	r3,16
    94f8:	1823883a 	mov	r17,r3
    94fc:	003fce06 	br	9438 <_gp+0xfffcab30>
    9500:	a825883a 	mov	r18,r21
    9504:	8445c83a 	sub	r2,r16,r17
    9508:	00c003c4 	movi	r3,15
    950c:	18802636 	bltu	r3,r2,95a8 <_realloc_r+0x1dc>
    9510:	99800117 	ldw	r6,4(r19)
    9514:	9c07883a 	add	r3,r19,r16
    9518:	3180004c 	andi	r6,r6,1
    951c:	3420b03a 	or	r16,r6,r16
    9520:	9c000115 	stw	r16,4(r19)
    9524:	18800117 	ldw	r2,4(r3)
    9528:	10800054 	ori	r2,r2,1
    952c:	18800115 	stw	r2,4(r3)
    9530:	a009883a 	mov	r4,r20
    9534:	000dba80 	call	dba8 <__malloc_unlock>
    9538:	9005883a 	mov	r2,r18
    953c:	dfc00917 	ldw	ra,36(sp)
    9540:	df000817 	ldw	fp,32(sp)
    9544:	ddc00717 	ldw	r23,28(sp)
    9548:	dd800617 	ldw	r22,24(sp)
    954c:	dd400517 	ldw	r21,20(sp)
    9550:	dd000417 	ldw	r20,16(sp)
    9554:	dcc00317 	ldw	r19,12(sp)
    9558:	dc800217 	ldw	r18,8(sp)
    955c:	dc400117 	ldw	r17,4(sp)
    9560:	dc000017 	ldw	r16,0(sp)
    9564:	dec00a04 	addi	sp,sp,40
    9568:	f800283a 	ret
    956c:	017fff04 	movi	r5,-4
    9570:	414a703a 	and	r5,r8,r5
    9574:	814d883a 	add	r6,r16,r5
    9578:	30c01f16 	blt	r6,r3,95f8 <_realloc_r+0x22c>
    957c:	20800317 	ldw	r2,12(r4)
    9580:	20c00217 	ldw	r3,8(r4)
    9584:	a825883a 	mov	r18,r21
    9588:	3021883a 	mov	r16,r6
    958c:	18800315 	stw	r2,12(r3)
    9590:	10c00215 	stw	r3,8(r2)
    9594:	003fdb06 	br	9504 <_gp+0xfffcabfc>
    9598:	00800304 	movi	r2,12
    959c:	a0800015 	stw	r2,0(r20)
    95a0:	0005883a 	mov	r2,zero
    95a4:	003fe506 	br	953c <_gp+0xfffcac34>
    95a8:	98c00117 	ldw	r3,4(r19)
    95ac:	9c4b883a 	add	r5,r19,r17
    95b0:	11000054 	ori	r4,r2,1
    95b4:	18c0004c 	andi	r3,r3,1
    95b8:	1c62b03a 	or	r17,r3,r17
    95bc:	9c400115 	stw	r17,4(r19)
    95c0:	29000115 	stw	r4,4(r5)
    95c4:	2885883a 	add	r2,r5,r2
    95c8:	10c00117 	ldw	r3,4(r2)
    95cc:	29400204 	addi	r5,r5,8
    95d0:	a009883a 	mov	r4,r20
    95d4:	18c00054 	ori	r3,r3,1
    95d8:	10c00115 	stw	r3,4(r2)
    95dc:	0004b740 	call	4b74 <_free_r>
    95e0:	003fd306 	br	9530 <_gp+0xfffcac28>
    95e4:	017fff04 	movi	r5,-4
    95e8:	414a703a 	and	r5,r8,r5
    95ec:	89800404 	addi	r6,r17,16
    95f0:	8151883a 	add	r8,r16,r5
    95f4:	4180590e 	bge	r8,r6,975c <_realloc_r+0x390>
    95f8:	1080004c 	andi	r2,r2,1
    95fc:	103f9e1e 	bne	r2,zero,9478 <_gp+0xfffcab70>
    9600:	adbffe17 	ldw	r22,-8(r21)
    9604:	00bfff04 	movi	r2,-4
    9608:	9dadc83a 	sub	r22,r19,r22
    960c:	b1800117 	ldw	r6,4(r22)
    9610:	3084703a 	and	r2,r6,r2
    9614:	20002026 	beq	r4,zero,9698 <_realloc_r+0x2cc>
    9618:	80af883a 	add	r23,r16,r2
    961c:	b96f883a 	add	r23,r23,r5
    9620:	21c05f26 	beq	r4,r7,97a0 <_realloc_r+0x3d4>
    9624:	b8c01c16 	blt	r23,r3,9698 <_realloc_r+0x2cc>
    9628:	20800317 	ldw	r2,12(r4)
    962c:	20c00217 	ldw	r3,8(r4)
    9630:	81bfff04 	addi	r6,r16,-4
    9634:	01000904 	movi	r4,36
    9638:	18800315 	stw	r2,12(r3)
    963c:	10c00215 	stw	r3,8(r2)
    9640:	b0c00217 	ldw	r3,8(r22)
    9644:	b0800317 	ldw	r2,12(r22)
    9648:	b4800204 	addi	r18,r22,8
    964c:	18800315 	stw	r2,12(r3)
    9650:	10c00215 	stw	r3,8(r2)
    9654:	21801b36 	bltu	r4,r6,96c4 <_realloc_r+0x2f8>
    9658:	008004c4 	movi	r2,19
    965c:	1180352e 	bgeu	r2,r6,9734 <_realloc_r+0x368>
    9660:	a8800017 	ldw	r2,0(r21)
    9664:	b0800215 	stw	r2,8(r22)
    9668:	a8800117 	ldw	r2,4(r21)
    966c:	b0800315 	stw	r2,12(r22)
    9670:	008006c4 	movi	r2,27
    9674:	11807f36 	bltu	r2,r6,9874 <_realloc_r+0x4a8>
    9678:	b0800404 	addi	r2,r22,16
    967c:	ad400204 	addi	r21,r21,8
    9680:	00002d06 	br	9738 <_realloc_r+0x36c>
    9684:	adbffe17 	ldw	r22,-8(r21)
    9688:	00bfff04 	movi	r2,-4
    968c:	9dadc83a 	sub	r22,r19,r22
    9690:	b1000117 	ldw	r4,4(r22)
    9694:	2084703a 	and	r2,r4,r2
    9698:	b03f7726 	beq	r22,zero,9478 <_gp+0xfffcab70>
    969c:	80af883a 	add	r23,r16,r2
    96a0:	b8ff7516 	blt	r23,r3,9478 <_gp+0xfffcab70>
    96a4:	b0800317 	ldw	r2,12(r22)
    96a8:	b0c00217 	ldw	r3,8(r22)
    96ac:	81bfff04 	addi	r6,r16,-4
    96b0:	01000904 	movi	r4,36
    96b4:	18800315 	stw	r2,12(r3)
    96b8:	10c00215 	stw	r3,8(r2)
    96bc:	b4800204 	addi	r18,r22,8
    96c0:	21bfe52e 	bgeu	r4,r6,9658 <_gp+0xfffcad50>
    96c4:	a80b883a 	mov	r5,r21
    96c8:	9009883a 	mov	r4,r18
    96cc:	00092100 	call	9210 <memmove>
    96d0:	b821883a 	mov	r16,r23
    96d4:	b027883a 	mov	r19,r22
    96d8:	003f8a06 	br	9504 <_gp+0xfffcabfc>
    96dc:	300b883a 	mov	r5,r6
    96e0:	dfc00917 	ldw	ra,36(sp)
    96e4:	df000817 	ldw	fp,32(sp)
    96e8:	ddc00717 	ldw	r23,28(sp)
    96ec:	dd800617 	ldw	r22,24(sp)
    96f0:	dd400517 	ldw	r21,20(sp)
    96f4:	dd000417 	ldw	r20,16(sp)
    96f8:	dcc00317 	ldw	r19,12(sp)
    96fc:	dc800217 	ldw	r18,8(sp)
    9700:	dc400117 	ldw	r17,4(sp)
    9704:	dc000017 	ldw	r16,0(sp)
    9708:	dec00a04 	addi	sp,sp,40
    970c:	00052a41 	jmpi	52a4 <_malloc_r>
    9710:	a8c00017 	ldw	r3,0(r21)
    9714:	90c00015 	stw	r3,0(r18)
    9718:	a8c00117 	ldw	r3,4(r21)
    971c:	90c00115 	stw	r3,4(r18)
    9720:	00c006c4 	movi	r3,27
    9724:	19804536 	bltu	r3,r6,983c <_realloc_r+0x470>
    9728:	90800204 	addi	r2,r18,8
    972c:	a8c00204 	addi	r3,r21,8
    9730:	003f6306 	br	94c0 <_gp+0xfffcabb8>
    9734:	9005883a 	mov	r2,r18
    9738:	a8c00017 	ldw	r3,0(r21)
    973c:	b821883a 	mov	r16,r23
    9740:	b027883a 	mov	r19,r22
    9744:	10c00015 	stw	r3,0(r2)
    9748:	a8c00117 	ldw	r3,4(r21)
    974c:	10c00115 	stw	r3,4(r2)
    9750:	a8c00217 	ldw	r3,8(r21)
    9754:	10c00215 	stw	r3,8(r2)
    9758:	003f6a06 	br	9504 <_gp+0xfffcabfc>
    975c:	9c67883a 	add	r19,r19,r17
    9760:	4445c83a 	sub	r2,r8,r17
    9764:	e4c00215 	stw	r19,8(fp)
    9768:	10800054 	ori	r2,r2,1
    976c:	98800115 	stw	r2,4(r19)
    9770:	a8bfff17 	ldw	r2,-4(r21)
    9774:	a009883a 	mov	r4,r20
    9778:	1080004c 	andi	r2,r2,1
    977c:	1462b03a 	or	r17,r2,r17
    9780:	ac7fff15 	stw	r17,-4(r21)
    9784:	000dba80 	call	dba8 <__malloc_unlock>
    9788:	a805883a 	mov	r2,r21
    978c:	003f6b06 	br	953c <_gp+0xfffcac34>
    9790:	a80b883a 	mov	r5,r21
    9794:	9009883a 	mov	r4,r18
    9798:	00092100 	call	9210 <memmove>
    979c:	003f4e06 	br	94d8 <_gp+0xfffcabd0>
    97a0:	89000404 	addi	r4,r17,16
    97a4:	b93fbc16 	blt	r23,r4,9698 <_gp+0xfffcad90>
    97a8:	b0800317 	ldw	r2,12(r22)
    97ac:	b0c00217 	ldw	r3,8(r22)
    97b0:	81bfff04 	addi	r6,r16,-4
    97b4:	01000904 	movi	r4,36
    97b8:	18800315 	stw	r2,12(r3)
    97bc:	10c00215 	stw	r3,8(r2)
    97c0:	b4800204 	addi	r18,r22,8
    97c4:	21804336 	bltu	r4,r6,98d4 <_realloc_r+0x508>
    97c8:	008004c4 	movi	r2,19
    97cc:	11803f2e 	bgeu	r2,r6,98cc <_realloc_r+0x500>
    97d0:	a8800017 	ldw	r2,0(r21)
    97d4:	b0800215 	stw	r2,8(r22)
    97d8:	a8800117 	ldw	r2,4(r21)
    97dc:	b0800315 	stw	r2,12(r22)
    97e0:	008006c4 	movi	r2,27
    97e4:	11803f36 	bltu	r2,r6,98e4 <_realloc_r+0x518>
    97e8:	b0800404 	addi	r2,r22,16
    97ec:	ad400204 	addi	r21,r21,8
    97f0:	a8c00017 	ldw	r3,0(r21)
    97f4:	10c00015 	stw	r3,0(r2)
    97f8:	a8c00117 	ldw	r3,4(r21)
    97fc:	10c00115 	stw	r3,4(r2)
    9800:	a8c00217 	ldw	r3,8(r21)
    9804:	10c00215 	stw	r3,8(r2)
    9808:	b447883a 	add	r3,r22,r17
    980c:	bc45c83a 	sub	r2,r23,r17
    9810:	e0c00215 	stw	r3,8(fp)
    9814:	10800054 	ori	r2,r2,1
    9818:	18800115 	stw	r2,4(r3)
    981c:	b0800117 	ldw	r2,4(r22)
    9820:	a009883a 	mov	r4,r20
    9824:	1080004c 	andi	r2,r2,1
    9828:	1462b03a 	or	r17,r2,r17
    982c:	b4400115 	stw	r17,4(r22)
    9830:	000dba80 	call	dba8 <__malloc_unlock>
    9834:	9005883a 	mov	r2,r18
    9838:	003f4006 	br	953c <_gp+0xfffcac34>
    983c:	a8c00217 	ldw	r3,8(r21)
    9840:	90c00215 	stw	r3,8(r18)
    9844:	a8c00317 	ldw	r3,12(r21)
    9848:	90c00315 	stw	r3,12(r18)
    984c:	30801126 	beq	r6,r2,9894 <_realloc_r+0x4c8>
    9850:	90800404 	addi	r2,r18,16
    9854:	a8c00404 	addi	r3,r21,16
    9858:	003f1906 	br	94c0 <_gp+0xfffcabb8>
    985c:	90ffff17 	ldw	r3,-4(r18)
    9860:	00bfff04 	movi	r2,-4
    9864:	a825883a 	mov	r18,r21
    9868:	1884703a 	and	r2,r3,r2
    986c:	80a1883a 	add	r16,r16,r2
    9870:	003f2406 	br	9504 <_gp+0xfffcabfc>
    9874:	a8800217 	ldw	r2,8(r21)
    9878:	b0800415 	stw	r2,16(r22)
    987c:	a8800317 	ldw	r2,12(r21)
    9880:	b0800515 	stw	r2,20(r22)
    9884:	31000a26 	beq	r6,r4,98b0 <_realloc_r+0x4e4>
    9888:	b0800604 	addi	r2,r22,24
    988c:	ad400404 	addi	r21,r21,16
    9890:	003fa906 	br	9738 <_gp+0xfffcae30>
    9894:	a9000417 	ldw	r4,16(r21)
    9898:	90800604 	addi	r2,r18,24
    989c:	a8c00604 	addi	r3,r21,24
    98a0:	91000415 	stw	r4,16(r18)
    98a4:	a9000517 	ldw	r4,20(r21)
    98a8:	91000515 	stw	r4,20(r18)
    98ac:	003f0406 	br	94c0 <_gp+0xfffcabb8>
    98b0:	a8c00417 	ldw	r3,16(r21)
    98b4:	ad400604 	addi	r21,r21,24
    98b8:	b0800804 	addi	r2,r22,32
    98bc:	b0c00615 	stw	r3,24(r22)
    98c0:	a8ffff17 	ldw	r3,-4(r21)
    98c4:	b0c00715 	stw	r3,28(r22)
    98c8:	003f9b06 	br	9738 <_gp+0xfffcae30>
    98cc:	9005883a 	mov	r2,r18
    98d0:	003fc706 	br	97f0 <_gp+0xfffcaee8>
    98d4:	a80b883a 	mov	r5,r21
    98d8:	9009883a 	mov	r4,r18
    98dc:	00092100 	call	9210 <memmove>
    98e0:	003fc906 	br	9808 <_gp+0xfffcaf00>
    98e4:	a8800217 	ldw	r2,8(r21)
    98e8:	b0800415 	stw	r2,16(r22)
    98ec:	a8800317 	ldw	r2,12(r21)
    98f0:	b0800515 	stw	r2,20(r22)
    98f4:	31000726 	beq	r6,r4,9914 <_realloc_r+0x548>
    98f8:	b0800604 	addi	r2,r22,24
    98fc:	ad400404 	addi	r21,r21,16
    9900:	003fbb06 	br	97f0 <_gp+0xfffcaee8>
    9904:	a009883a 	mov	r4,r20
    9908:	000dba80 	call	dba8 <__malloc_unlock>
    990c:	0005883a 	mov	r2,zero
    9910:	003f0a06 	br	953c <_gp+0xfffcac34>
    9914:	a8c00417 	ldw	r3,16(r21)
    9918:	ad400604 	addi	r21,r21,24
    991c:	b0800804 	addi	r2,r22,32
    9920:	b0c00615 	stw	r3,24(r22)
    9924:	a8ffff17 	ldw	r3,-4(r21)
    9928:	b0c00715 	stw	r3,28(r22)
    992c:	003fb006 	br	97f0 <_gp+0xfffcaee8>

00009930 <__swbuf_r>:
    9930:	defffb04 	addi	sp,sp,-20
    9934:	dcc00315 	stw	r19,12(sp)
    9938:	dc800215 	stw	r18,8(sp)
    993c:	dc000015 	stw	r16,0(sp)
    9940:	dfc00415 	stw	ra,16(sp)
    9944:	dc400115 	stw	r17,4(sp)
    9948:	2025883a 	mov	r18,r4
    994c:	2827883a 	mov	r19,r5
    9950:	3021883a 	mov	r16,r6
    9954:	20000226 	beq	r4,zero,9960 <__swbuf_r+0x30>
    9958:	20800e17 	ldw	r2,56(r4)
    995c:	10004226 	beq	r2,zero,9a68 <__swbuf_r+0x138>
    9960:	80800617 	ldw	r2,24(r16)
    9964:	8100030b 	ldhu	r4,12(r16)
    9968:	80800215 	stw	r2,8(r16)
    996c:	2080020c 	andi	r2,r4,8
    9970:	10003626 	beq	r2,zero,9a4c <__swbuf_r+0x11c>
    9974:	80c00417 	ldw	r3,16(r16)
    9978:	18003426 	beq	r3,zero,9a4c <__swbuf_r+0x11c>
    997c:	2088000c 	andi	r2,r4,8192
    9980:	9c403fcc 	andi	r17,r19,255
    9984:	10001a26 	beq	r2,zero,99f0 <__swbuf_r+0xc0>
    9988:	80800017 	ldw	r2,0(r16)
    998c:	81000517 	ldw	r4,20(r16)
    9990:	10c7c83a 	sub	r3,r2,r3
    9994:	1900200e 	bge	r3,r4,9a18 <__swbuf_r+0xe8>
    9998:	18c00044 	addi	r3,r3,1
    999c:	81000217 	ldw	r4,8(r16)
    99a0:	11400044 	addi	r5,r2,1
    99a4:	81400015 	stw	r5,0(r16)
    99a8:	213fffc4 	addi	r4,r4,-1
    99ac:	81000215 	stw	r4,8(r16)
    99b0:	14c00005 	stb	r19,0(r2)
    99b4:	80800517 	ldw	r2,20(r16)
    99b8:	10c01e26 	beq	r2,r3,9a34 <__swbuf_r+0x104>
    99bc:	8080030b 	ldhu	r2,12(r16)
    99c0:	1080004c 	andi	r2,r2,1
    99c4:	10000226 	beq	r2,zero,99d0 <__swbuf_r+0xa0>
    99c8:	00800284 	movi	r2,10
    99cc:	88801926 	beq	r17,r2,9a34 <__swbuf_r+0x104>
    99d0:	8805883a 	mov	r2,r17
    99d4:	dfc00417 	ldw	ra,16(sp)
    99d8:	dcc00317 	ldw	r19,12(sp)
    99dc:	dc800217 	ldw	r18,8(sp)
    99e0:	dc400117 	ldw	r17,4(sp)
    99e4:	dc000017 	ldw	r16,0(sp)
    99e8:	dec00504 	addi	sp,sp,20
    99ec:	f800283a 	ret
    99f0:	81401917 	ldw	r5,100(r16)
    99f4:	00b7ffc4 	movi	r2,-8193
    99f8:	21080014 	ori	r4,r4,8192
    99fc:	2884703a 	and	r2,r5,r2
    9a00:	80801915 	stw	r2,100(r16)
    9a04:	80800017 	ldw	r2,0(r16)
    9a08:	8100030d 	sth	r4,12(r16)
    9a0c:	81000517 	ldw	r4,20(r16)
    9a10:	10c7c83a 	sub	r3,r2,r3
    9a14:	193fe016 	blt	r3,r4,9998 <_gp+0xfffcb090>
    9a18:	800b883a 	mov	r5,r16
    9a1c:	9009883a 	mov	r4,r18
    9a20:	00046240 	call	4624 <_fflush_r>
    9a24:	1000071e 	bne	r2,zero,9a44 <__swbuf_r+0x114>
    9a28:	80800017 	ldw	r2,0(r16)
    9a2c:	00c00044 	movi	r3,1
    9a30:	003fda06 	br	999c <_gp+0xfffcb094>
    9a34:	800b883a 	mov	r5,r16
    9a38:	9009883a 	mov	r4,r18
    9a3c:	00046240 	call	4624 <_fflush_r>
    9a40:	103fe326 	beq	r2,zero,99d0 <_gp+0xfffcb0c8>
    9a44:	00bfffc4 	movi	r2,-1
    9a48:	003fe206 	br	99d4 <_gp+0xfffcb0cc>
    9a4c:	800b883a 	mov	r5,r16
    9a50:	9009883a 	mov	r4,r18
    9a54:	0002a2c0 	call	2a2c <__swsetup_r>
    9a58:	103ffa1e 	bne	r2,zero,9a44 <_gp+0xfffcb13c>
    9a5c:	8100030b 	ldhu	r4,12(r16)
    9a60:	80c00417 	ldw	r3,16(r16)
    9a64:	003fc506 	br	997c <_gp+0xfffcb074>
    9a68:	0004a000 	call	4a00 <__sinit>
    9a6c:	003fbc06 	br	9960 <_gp+0xfffcb058>

00009a70 <__swbuf>:
    9a70:	008000f4 	movhi	r2,3
    9a74:	109a4404 	addi	r2,r2,26896
    9a78:	280d883a 	mov	r6,r5
    9a7c:	200b883a 	mov	r5,r4
    9a80:	11000017 	ldw	r4,0(r2)
    9a84:	00099301 	jmpi	9930 <__swbuf_r>

00009a88 <_wcrtomb_r>:
    9a88:	defff604 	addi	sp,sp,-40
    9a8c:	008000f4 	movhi	r2,3
    9a90:	dc800815 	stw	r18,32(sp)
    9a94:	dc400715 	stw	r17,28(sp)
    9a98:	dc000615 	stw	r16,24(sp)
    9a9c:	109a4804 	addi	r2,r2,26912
    9aa0:	dfc00915 	stw	ra,36(sp)
    9aa4:	2021883a 	mov	r16,r4
    9aa8:	3823883a 	mov	r17,r7
    9aac:	14800017 	ldw	r18,0(r2)
    9ab0:	28001426 	beq	r5,zero,9b04 <_wcrtomb_r+0x7c>
    9ab4:	d9400415 	stw	r5,16(sp)
    9ab8:	d9800515 	stw	r6,20(sp)
    9abc:	00050880 	call	5088 <__locale_charset>
    9ac0:	d9800517 	ldw	r6,20(sp)
    9ac4:	d9400417 	ldw	r5,16(sp)
    9ac8:	100f883a 	mov	r7,r2
    9acc:	dc400015 	stw	r17,0(sp)
    9ad0:	8009883a 	mov	r4,r16
    9ad4:	903ee83a 	callr	r18
    9ad8:	00ffffc4 	movi	r3,-1
    9adc:	10c0031e 	bne	r2,r3,9aec <_wcrtomb_r+0x64>
    9ae0:	88000015 	stw	zero,0(r17)
    9ae4:	00c02284 	movi	r3,138
    9ae8:	80c00015 	stw	r3,0(r16)
    9aec:	dfc00917 	ldw	ra,36(sp)
    9af0:	dc800817 	ldw	r18,32(sp)
    9af4:	dc400717 	ldw	r17,28(sp)
    9af8:	dc000617 	ldw	r16,24(sp)
    9afc:	dec00a04 	addi	sp,sp,40
    9b00:	f800283a 	ret
    9b04:	00050880 	call	5088 <__locale_charset>
    9b08:	100f883a 	mov	r7,r2
    9b0c:	dc400015 	stw	r17,0(sp)
    9b10:	000d883a 	mov	r6,zero
    9b14:	d9400104 	addi	r5,sp,4
    9b18:	8009883a 	mov	r4,r16
    9b1c:	903ee83a 	callr	r18
    9b20:	003fed06 	br	9ad8 <_gp+0xfffcb1d0>

00009b24 <wcrtomb>:
    9b24:	defff604 	addi	sp,sp,-40
    9b28:	008000f4 	movhi	r2,3
    9b2c:	dc800615 	stw	r18,24(sp)
    9b30:	dc400515 	stw	r17,20(sp)
    9b34:	109a4404 	addi	r2,r2,26896
    9b38:	dfc00915 	stw	ra,36(sp)
    9b3c:	dd000815 	stw	r20,32(sp)
    9b40:	dcc00715 	stw	r19,28(sp)
    9b44:	dc000415 	stw	r16,16(sp)
    9b48:	3025883a 	mov	r18,r6
    9b4c:	14400017 	ldw	r17,0(r2)
    9b50:	20001926 	beq	r4,zero,9bb8 <wcrtomb+0x94>
    9b54:	008000f4 	movhi	r2,3
    9b58:	109a4804 	addi	r2,r2,26912
    9b5c:	15000017 	ldw	r20,0(r2)
    9b60:	2021883a 	mov	r16,r4
    9b64:	2827883a 	mov	r19,r5
    9b68:	00050880 	call	5088 <__locale_charset>
    9b6c:	100f883a 	mov	r7,r2
    9b70:	dc800015 	stw	r18,0(sp)
    9b74:	980d883a 	mov	r6,r19
    9b78:	800b883a 	mov	r5,r16
    9b7c:	8809883a 	mov	r4,r17
    9b80:	a03ee83a 	callr	r20
    9b84:	00ffffc4 	movi	r3,-1
    9b88:	10c0031e 	bne	r2,r3,9b98 <wcrtomb+0x74>
    9b8c:	90000015 	stw	zero,0(r18)
    9b90:	00c02284 	movi	r3,138
    9b94:	88c00015 	stw	r3,0(r17)
    9b98:	dfc00917 	ldw	ra,36(sp)
    9b9c:	dd000817 	ldw	r20,32(sp)
    9ba0:	dcc00717 	ldw	r19,28(sp)
    9ba4:	dc800617 	ldw	r18,24(sp)
    9ba8:	dc400517 	ldw	r17,20(sp)
    9bac:	dc000417 	ldw	r16,16(sp)
    9bb0:	dec00a04 	addi	sp,sp,40
    9bb4:	f800283a 	ret
    9bb8:	008000f4 	movhi	r2,3
    9bbc:	109a4804 	addi	r2,r2,26912
    9bc0:	14000017 	ldw	r16,0(r2)
    9bc4:	00050880 	call	5088 <__locale_charset>
    9bc8:	100f883a 	mov	r7,r2
    9bcc:	dc800015 	stw	r18,0(sp)
    9bd0:	000d883a 	mov	r6,zero
    9bd4:	d9400104 	addi	r5,sp,4
    9bd8:	8809883a 	mov	r4,r17
    9bdc:	803ee83a 	callr	r16
    9be0:	003fe806 	br	9b84 <_gp+0xfffcb27c>

00009be4 <__ascii_wctomb>:
    9be4:	28000526 	beq	r5,zero,9bfc <__ascii_wctomb+0x18>
    9be8:	00803fc4 	movi	r2,255
    9bec:	11800536 	bltu	r2,r6,9c04 <__ascii_wctomb+0x20>
    9bf0:	29800005 	stb	r6,0(r5)
    9bf4:	00800044 	movi	r2,1
    9bf8:	f800283a 	ret
    9bfc:	0005883a 	mov	r2,zero
    9c00:	f800283a 	ret
    9c04:	00802284 	movi	r2,138
    9c08:	20800015 	stw	r2,0(r4)
    9c0c:	00bfffc4 	movi	r2,-1
    9c10:	f800283a 	ret

00009c14 <_wctomb_r>:
    9c14:	008000f4 	movhi	r2,3
    9c18:	defff904 	addi	sp,sp,-28
    9c1c:	109a4804 	addi	r2,r2,26912
    9c20:	dfc00615 	stw	ra,24(sp)
    9c24:	dc400515 	stw	r17,20(sp)
    9c28:	dc000415 	stw	r16,16(sp)
    9c2c:	3823883a 	mov	r17,r7
    9c30:	14000017 	ldw	r16,0(r2)
    9c34:	d9000115 	stw	r4,4(sp)
    9c38:	d9400215 	stw	r5,8(sp)
    9c3c:	d9800315 	stw	r6,12(sp)
    9c40:	00050880 	call	5088 <__locale_charset>
    9c44:	d9800317 	ldw	r6,12(sp)
    9c48:	d9400217 	ldw	r5,8(sp)
    9c4c:	d9000117 	ldw	r4,4(sp)
    9c50:	100f883a 	mov	r7,r2
    9c54:	dc400015 	stw	r17,0(sp)
    9c58:	803ee83a 	callr	r16
    9c5c:	dfc00617 	ldw	ra,24(sp)
    9c60:	dc400517 	ldw	r17,20(sp)
    9c64:	dc000417 	ldw	r16,16(sp)
    9c68:	dec00704 	addi	sp,sp,28
    9c6c:	f800283a 	ret

00009c70 <__udivdi3>:
    9c70:	defff504 	addi	sp,sp,-44
    9c74:	dcc00415 	stw	r19,16(sp)
    9c78:	dc000115 	stw	r16,4(sp)
    9c7c:	dfc00a15 	stw	ra,40(sp)
    9c80:	df000915 	stw	fp,36(sp)
    9c84:	ddc00815 	stw	r23,32(sp)
    9c88:	dd800715 	stw	r22,28(sp)
    9c8c:	dd400615 	stw	r21,24(sp)
    9c90:	dd000515 	stw	r20,20(sp)
    9c94:	dc800315 	stw	r18,12(sp)
    9c98:	dc400215 	stw	r17,8(sp)
    9c9c:	2027883a 	mov	r19,r4
    9ca0:	2821883a 	mov	r16,r5
    9ca4:	3800411e 	bne	r7,zero,9dac <__udivdi3+0x13c>
    9ca8:	3023883a 	mov	r17,r6
    9cac:	2025883a 	mov	r18,r4
    9cb0:	2980522e 	bgeu	r5,r6,9dfc <__udivdi3+0x18c>
    9cb4:	00bfffd4 	movui	r2,65535
    9cb8:	282d883a 	mov	r22,r5
    9cbc:	1180a836 	bltu	r2,r6,9f60 <__udivdi3+0x2f0>
    9cc0:	00803fc4 	movi	r2,255
    9cc4:	1185803a 	cmpltu	r2,r2,r6
    9cc8:	100490fa 	slli	r2,r2,3
    9ccc:	3086d83a 	srl	r3,r6,r2
    9cd0:	010000f4 	movhi	r4,3
    9cd4:	2112fe04 	addi	r4,r4,19448
    9cd8:	20c7883a 	add	r3,r4,r3
    9cdc:	18c00003 	ldbu	r3,0(r3)
    9ce0:	1885883a 	add	r2,r3,r2
    9ce4:	00c00804 	movi	r3,32
    9ce8:	1887c83a 	sub	r3,r3,r2
    9cec:	18000526 	beq	r3,zero,9d04 <__udivdi3+0x94>
    9cf0:	80e0983a 	sll	r16,r16,r3
    9cf4:	9884d83a 	srl	r2,r19,r2
    9cf8:	30e2983a 	sll	r17,r6,r3
    9cfc:	98e4983a 	sll	r18,r19,r3
    9d00:	142cb03a 	or	r22,r2,r16
    9d04:	882ad43a 	srli	r21,r17,16
    9d08:	b009883a 	mov	r4,r22
    9d0c:	8d3fffcc 	andi	r20,r17,65535
    9d10:	a80b883a 	mov	r5,r21
    9d14:	00006980 	call	698 <__umodsi3>
    9d18:	b009883a 	mov	r4,r22
    9d1c:	a80b883a 	mov	r5,r21
    9d20:	1027883a 	mov	r19,r2
    9d24:	00006340 	call	634 <__udivsi3>
    9d28:	102d883a 	mov	r22,r2
    9d2c:	9826943a 	slli	r19,r19,16
    9d30:	9004d43a 	srli	r2,r18,16
    9d34:	a5a1383a 	mul	r16,r20,r22
    9d38:	14c4b03a 	or	r2,r2,r19
    9d3c:	1400052e 	bgeu	r2,r16,9d54 <__udivdi3+0xe4>
    9d40:	1445883a 	add	r2,r2,r17
    9d44:	b0ffffc4 	addi	r3,r22,-1
    9d48:	14400136 	bltu	r2,r17,9d50 <__udivdi3+0xe0>
    9d4c:	14012336 	bltu	r2,r16,a1dc <__udivdi3+0x56c>
    9d50:	182d883a 	mov	r22,r3
    9d54:	1421c83a 	sub	r16,r2,r16
    9d58:	a80b883a 	mov	r5,r21
    9d5c:	8009883a 	mov	r4,r16
    9d60:	00006980 	call	698 <__umodsi3>
    9d64:	1027883a 	mov	r19,r2
    9d68:	a80b883a 	mov	r5,r21
    9d6c:	8009883a 	mov	r4,r16
    9d70:	00006340 	call	634 <__udivsi3>
    9d74:	9826943a 	slli	r19,r19,16
    9d78:	a0a9383a 	mul	r20,r20,r2
    9d7c:	94bfffcc 	andi	r18,r18,65535
    9d80:	94e4b03a 	or	r18,r18,r19
    9d84:	9500052e 	bgeu	r18,r20,9d9c <__udivdi3+0x12c>
    9d88:	8ca5883a 	add	r18,r17,r18
    9d8c:	10ffffc4 	addi	r3,r2,-1
    9d90:	9440f136 	bltu	r18,r17,a158 <__udivdi3+0x4e8>
    9d94:	9500f02e 	bgeu	r18,r20,a158 <__udivdi3+0x4e8>
    9d98:	10bfff84 	addi	r2,r2,-2
    9d9c:	b00c943a 	slli	r6,r22,16
    9da0:	0007883a 	mov	r3,zero
    9da4:	3084b03a 	or	r2,r6,r2
    9da8:	00005906 	br	9f10 <__udivdi3+0x2a0>
    9dac:	29c05636 	bltu	r5,r7,9f08 <__udivdi3+0x298>
    9db0:	00bfffd4 	movui	r2,65535
    9db4:	11c0622e 	bgeu	r2,r7,9f40 <__udivdi3+0x2d0>
    9db8:	00804034 	movhi	r2,256
    9dbc:	10bfffc4 	addi	r2,r2,-1
    9dc0:	11c0ee36 	bltu	r2,r7,a17c <__udivdi3+0x50c>
    9dc4:	00800404 	movi	r2,16
    9dc8:	3886d83a 	srl	r3,r7,r2
    9dcc:	010000f4 	movhi	r4,3
    9dd0:	2112fe04 	addi	r4,r4,19448
    9dd4:	20c7883a 	add	r3,r4,r3
    9dd8:	18c00003 	ldbu	r3,0(r3)
    9ddc:	05400804 	movi	r21,32
    9de0:	1885883a 	add	r2,r3,r2
    9de4:	a8abc83a 	sub	r21,r21,r2
    9de8:	a800621e 	bne	r21,zero,9f74 <__udivdi3+0x304>
    9dec:	3c00e936 	bltu	r7,r16,a194 <__udivdi3+0x524>
    9df0:	9985403a 	cmpgeu	r2,r19,r6
    9df4:	0007883a 	mov	r3,zero
    9df8:	00004506 	br	9f10 <__udivdi3+0x2a0>
    9dfc:	3000041e 	bne	r6,zero,9e10 <__udivdi3+0x1a0>
    9e00:	000b883a 	mov	r5,zero
    9e04:	01000044 	movi	r4,1
    9e08:	00006340 	call	634 <__udivsi3>
    9e0c:	1023883a 	mov	r17,r2
    9e10:	00bfffd4 	movui	r2,65535
    9e14:	14404e2e 	bgeu	r2,r17,9f50 <__udivdi3+0x2e0>
    9e18:	00804034 	movhi	r2,256
    9e1c:	10bfffc4 	addi	r2,r2,-1
    9e20:	1440d836 	bltu	r2,r17,a184 <__udivdi3+0x514>
    9e24:	00800404 	movi	r2,16
    9e28:	8886d83a 	srl	r3,r17,r2
    9e2c:	010000f4 	movhi	r4,3
    9e30:	2112fe04 	addi	r4,r4,19448
    9e34:	20c7883a 	add	r3,r4,r3
    9e38:	18c00003 	ldbu	r3,0(r3)
    9e3c:	1885883a 	add	r2,r3,r2
    9e40:	00c00804 	movi	r3,32
    9e44:	1887c83a 	sub	r3,r3,r2
    9e48:	18008f1e 	bne	r3,zero,a088 <__udivdi3+0x418>
    9e4c:	882ad43a 	srli	r21,r17,16
    9e50:	8461c83a 	sub	r16,r16,r17
    9e54:	8d3fffcc 	andi	r20,r17,65535
    9e58:	00c00044 	movi	r3,1
    9e5c:	8009883a 	mov	r4,r16
    9e60:	a80b883a 	mov	r5,r21
    9e64:	d8c00015 	stw	r3,0(sp)
    9e68:	00006980 	call	698 <__umodsi3>
    9e6c:	8009883a 	mov	r4,r16
    9e70:	a80b883a 	mov	r5,r21
    9e74:	1027883a 	mov	r19,r2
    9e78:	00006340 	call	634 <__udivsi3>
    9e7c:	9826943a 	slli	r19,r19,16
    9e80:	9008d43a 	srli	r4,r18,16
    9e84:	1521383a 	mul	r16,r2,r20
    9e88:	102d883a 	mov	r22,r2
    9e8c:	24c8b03a 	or	r4,r4,r19
    9e90:	d8c00017 	ldw	r3,0(sp)
    9e94:	2400052e 	bgeu	r4,r16,9eac <__udivdi3+0x23c>
    9e98:	2449883a 	add	r4,r4,r17
    9e9c:	b0bfffc4 	addi	r2,r22,-1
    9ea0:	24400136 	bltu	r4,r17,9ea8 <__udivdi3+0x238>
    9ea4:	2400ca36 	bltu	r4,r16,a1d0 <__udivdi3+0x560>
    9ea8:	102d883a 	mov	r22,r2
    9eac:	2421c83a 	sub	r16,r4,r16
    9eb0:	a80b883a 	mov	r5,r21
    9eb4:	8009883a 	mov	r4,r16
    9eb8:	d8c00015 	stw	r3,0(sp)
    9ebc:	00006980 	call	698 <__umodsi3>
    9ec0:	1027883a 	mov	r19,r2
    9ec4:	a80b883a 	mov	r5,r21
    9ec8:	8009883a 	mov	r4,r16
    9ecc:	00006340 	call	634 <__udivsi3>
    9ed0:	9826943a 	slli	r19,r19,16
    9ed4:	1529383a 	mul	r20,r2,r20
    9ed8:	94bfffcc 	andi	r18,r18,65535
    9edc:	94e4b03a 	or	r18,r18,r19
    9ee0:	d8c00017 	ldw	r3,0(sp)
    9ee4:	9500052e 	bgeu	r18,r20,9efc <__udivdi3+0x28c>
    9ee8:	8ca5883a 	add	r18,r17,r18
    9eec:	113fffc4 	addi	r4,r2,-1
    9ef0:	94409736 	bltu	r18,r17,a150 <__udivdi3+0x4e0>
    9ef4:	9500962e 	bgeu	r18,r20,a150 <__udivdi3+0x4e0>
    9ef8:	10bfff84 	addi	r2,r2,-2
    9efc:	b00c943a 	slli	r6,r22,16
    9f00:	3084b03a 	or	r2,r6,r2
    9f04:	00000206 	br	9f10 <__udivdi3+0x2a0>
    9f08:	0007883a 	mov	r3,zero
    9f0c:	0005883a 	mov	r2,zero
    9f10:	dfc00a17 	ldw	ra,40(sp)
    9f14:	df000917 	ldw	fp,36(sp)
    9f18:	ddc00817 	ldw	r23,32(sp)
    9f1c:	dd800717 	ldw	r22,28(sp)
    9f20:	dd400617 	ldw	r21,24(sp)
    9f24:	dd000517 	ldw	r20,20(sp)
    9f28:	dcc00417 	ldw	r19,16(sp)
    9f2c:	dc800317 	ldw	r18,12(sp)
    9f30:	dc400217 	ldw	r17,8(sp)
    9f34:	dc000117 	ldw	r16,4(sp)
    9f38:	dec00b04 	addi	sp,sp,44
    9f3c:	f800283a 	ret
    9f40:	00803fc4 	movi	r2,255
    9f44:	11c5803a 	cmpltu	r2,r2,r7
    9f48:	100490fa 	slli	r2,r2,3
    9f4c:	003f9e06 	br	9dc8 <_gp+0xfffcb4c0>
    9f50:	00803fc4 	movi	r2,255
    9f54:	1445803a 	cmpltu	r2,r2,r17
    9f58:	100490fa 	slli	r2,r2,3
    9f5c:	003fb206 	br	9e28 <_gp+0xfffcb520>
    9f60:	00804034 	movhi	r2,256
    9f64:	10bfffc4 	addi	r2,r2,-1
    9f68:	11808836 	bltu	r2,r6,a18c <__udivdi3+0x51c>
    9f6c:	00800404 	movi	r2,16
    9f70:	003f5606 	br	9ccc <_gp+0xfffcb3c4>
    9f74:	30aed83a 	srl	r23,r6,r2
    9f78:	3d4e983a 	sll	r7,r7,r21
    9f7c:	80acd83a 	srl	r22,r16,r2
    9f80:	9884d83a 	srl	r2,r19,r2
    9f84:	3deeb03a 	or	r23,r7,r23
    9f88:	b824d43a 	srli	r18,r23,16
    9f8c:	8560983a 	sll	r16,r16,r21
    9f90:	b009883a 	mov	r4,r22
    9f94:	900b883a 	mov	r5,r18
    9f98:	3568983a 	sll	r20,r6,r21
    9f9c:	1420b03a 	or	r16,r2,r16
    9fa0:	00006980 	call	698 <__umodsi3>
    9fa4:	b009883a 	mov	r4,r22
    9fa8:	900b883a 	mov	r5,r18
    9fac:	1023883a 	mov	r17,r2
    9fb0:	00006340 	call	634 <__udivsi3>
    9fb4:	8808943a 	slli	r4,r17,16
    9fb8:	bf3fffcc 	andi	fp,r23,65535
    9fbc:	8006d43a 	srli	r3,r16,16
    9fc0:	e0a3383a 	mul	r17,fp,r2
    9fc4:	100d883a 	mov	r6,r2
    9fc8:	1906b03a 	or	r3,r3,r4
    9fcc:	1c40042e 	bgeu	r3,r17,9fe0 <__udivdi3+0x370>
    9fd0:	1dc7883a 	add	r3,r3,r23
    9fd4:	10bfffc4 	addi	r2,r2,-1
    9fd8:	1dc0752e 	bgeu	r3,r23,a1b0 <__udivdi3+0x540>
    9fdc:	100d883a 	mov	r6,r2
    9fe0:	1c63c83a 	sub	r17,r3,r17
    9fe4:	900b883a 	mov	r5,r18
    9fe8:	8809883a 	mov	r4,r17
    9fec:	d9800015 	stw	r6,0(sp)
    9ff0:	00006980 	call	698 <__umodsi3>
    9ff4:	102d883a 	mov	r22,r2
    9ff8:	8809883a 	mov	r4,r17
    9ffc:	900b883a 	mov	r5,r18
    a000:	00006340 	call	634 <__udivsi3>
    a004:	b02c943a 	slli	r22,r22,16
    a008:	e089383a 	mul	r4,fp,r2
    a00c:	843fffcc 	andi	r16,r16,65535
    a010:	85a0b03a 	or	r16,r16,r22
    a014:	d9800017 	ldw	r6,0(sp)
    a018:	8100042e 	bgeu	r16,r4,a02c <__udivdi3+0x3bc>
    a01c:	85e1883a 	add	r16,r16,r23
    a020:	10ffffc4 	addi	r3,r2,-1
    a024:	85c05e2e 	bgeu	r16,r23,a1a0 <__udivdi3+0x530>
    a028:	1805883a 	mov	r2,r3
    a02c:	300c943a 	slli	r6,r6,16
    a030:	a17fffcc 	andi	r5,r20,65535
    a034:	a028d43a 	srli	r20,r20,16
    a038:	3084b03a 	or	r2,r6,r2
    a03c:	10ffffcc 	andi	r3,r2,65535
    a040:	100cd43a 	srli	r6,r2,16
    a044:	194f383a 	mul	r7,r3,r5
    a048:	1d07383a 	mul	r3,r3,r20
    a04c:	314b383a 	mul	r5,r6,r5
    a050:	3810d43a 	srli	r8,r7,16
    a054:	8121c83a 	sub	r16,r16,r4
    a058:	1947883a 	add	r3,r3,r5
    a05c:	40c7883a 	add	r3,r8,r3
    a060:	350d383a 	mul	r6,r6,r20
    a064:	1940022e 	bgeu	r3,r5,a070 <__udivdi3+0x400>
    a068:	01000074 	movhi	r4,1
    a06c:	310d883a 	add	r6,r6,r4
    a070:	1828d43a 	srli	r20,r3,16
    a074:	a18d883a 	add	r6,r20,r6
    a078:	81803e36 	bltu	r16,r6,a174 <__udivdi3+0x504>
    a07c:	81803826 	beq	r16,r6,a160 <__udivdi3+0x4f0>
    a080:	0007883a 	mov	r3,zero
    a084:	003fa206 	br	9f10 <_gp+0xfffcb608>
    a088:	88e2983a 	sll	r17,r17,r3
    a08c:	80a8d83a 	srl	r20,r16,r2
    a090:	80e0983a 	sll	r16,r16,r3
    a094:	882ad43a 	srli	r21,r17,16
    a098:	9884d83a 	srl	r2,r19,r2
    a09c:	a009883a 	mov	r4,r20
    a0a0:	a80b883a 	mov	r5,r21
    a0a4:	142eb03a 	or	r23,r2,r16
    a0a8:	98e4983a 	sll	r18,r19,r3
    a0ac:	00006980 	call	698 <__umodsi3>
    a0b0:	a009883a 	mov	r4,r20
    a0b4:	a80b883a 	mov	r5,r21
    a0b8:	1021883a 	mov	r16,r2
    a0bc:	00006340 	call	634 <__udivsi3>
    a0c0:	1039883a 	mov	fp,r2
    a0c4:	8d3fffcc 	andi	r20,r17,65535
    a0c8:	8020943a 	slli	r16,r16,16
    a0cc:	b804d43a 	srli	r2,r23,16
    a0d0:	a72d383a 	mul	r22,r20,fp
    a0d4:	1404b03a 	or	r2,r2,r16
    a0d8:	1580062e 	bgeu	r2,r22,a0f4 <__udivdi3+0x484>
    a0dc:	1445883a 	add	r2,r2,r17
    a0e0:	e0ffffc4 	addi	r3,fp,-1
    a0e4:	14403836 	bltu	r2,r17,a1c8 <__udivdi3+0x558>
    a0e8:	1580372e 	bgeu	r2,r22,a1c8 <__udivdi3+0x558>
    a0ec:	e73fff84 	addi	fp,fp,-2
    a0f0:	1445883a 	add	r2,r2,r17
    a0f4:	15adc83a 	sub	r22,r2,r22
    a0f8:	a80b883a 	mov	r5,r21
    a0fc:	b009883a 	mov	r4,r22
    a100:	00006980 	call	698 <__umodsi3>
    a104:	1027883a 	mov	r19,r2
    a108:	b009883a 	mov	r4,r22
    a10c:	a80b883a 	mov	r5,r21
    a110:	00006340 	call	634 <__udivsi3>
    a114:	9826943a 	slli	r19,r19,16
    a118:	a0a1383a 	mul	r16,r20,r2
    a11c:	b93fffcc 	andi	r4,r23,65535
    a120:	24c8b03a 	or	r4,r4,r19
    a124:	2400062e 	bgeu	r4,r16,a140 <__udivdi3+0x4d0>
    a128:	2449883a 	add	r4,r4,r17
    a12c:	10ffffc4 	addi	r3,r2,-1
    a130:	24402336 	bltu	r4,r17,a1c0 <__udivdi3+0x550>
    a134:	2400222e 	bgeu	r4,r16,a1c0 <__udivdi3+0x550>
    a138:	10bfff84 	addi	r2,r2,-2
    a13c:	2449883a 	add	r4,r4,r17
    a140:	e038943a 	slli	fp,fp,16
    a144:	2421c83a 	sub	r16,r4,r16
    a148:	e086b03a 	or	r3,fp,r2
    a14c:	003f4306 	br	9e5c <_gp+0xfffcb554>
    a150:	2005883a 	mov	r2,r4
    a154:	003f6906 	br	9efc <_gp+0xfffcb5f4>
    a158:	1805883a 	mov	r2,r3
    a15c:	003f0f06 	br	9d9c <_gp+0xfffcb494>
    a160:	1806943a 	slli	r3,r3,16
    a164:	9d66983a 	sll	r19,r19,r21
    a168:	39ffffcc 	andi	r7,r7,65535
    a16c:	19c7883a 	add	r3,r3,r7
    a170:	98ffc32e 	bgeu	r19,r3,a080 <_gp+0xfffcb778>
    a174:	10bfffc4 	addi	r2,r2,-1
    a178:	003fc106 	br	a080 <_gp+0xfffcb778>
    a17c:	00800604 	movi	r2,24
    a180:	003f1106 	br	9dc8 <_gp+0xfffcb4c0>
    a184:	00800604 	movi	r2,24
    a188:	003f2706 	br	9e28 <_gp+0xfffcb520>
    a18c:	00800604 	movi	r2,24
    a190:	003ece06 	br	9ccc <_gp+0xfffcb3c4>
    a194:	0007883a 	mov	r3,zero
    a198:	00800044 	movi	r2,1
    a19c:	003f5c06 	br	9f10 <_gp+0xfffcb608>
    a1a0:	813fa12e 	bgeu	r16,r4,a028 <_gp+0xfffcb720>
    a1a4:	10bfff84 	addi	r2,r2,-2
    a1a8:	85e1883a 	add	r16,r16,r23
    a1ac:	003f9f06 	br	a02c <_gp+0xfffcb724>
    a1b0:	1c7f8a2e 	bgeu	r3,r17,9fdc <_gp+0xfffcb6d4>
    a1b4:	31bfff84 	addi	r6,r6,-2
    a1b8:	1dc7883a 	add	r3,r3,r23
    a1bc:	003f8806 	br	9fe0 <_gp+0xfffcb6d8>
    a1c0:	1805883a 	mov	r2,r3
    a1c4:	003fde06 	br	a140 <_gp+0xfffcb838>
    a1c8:	1839883a 	mov	fp,r3
    a1cc:	003fc906 	br	a0f4 <_gp+0xfffcb7ec>
    a1d0:	b5bfff84 	addi	r22,r22,-2
    a1d4:	2449883a 	add	r4,r4,r17
    a1d8:	003f3406 	br	9eac <_gp+0xfffcb5a4>
    a1dc:	b5bfff84 	addi	r22,r22,-2
    a1e0:	1445883a 	add	r2,r2,r17
    a1e4:	003edb06 	br	9d54 <_gp+0xfffcb44c>

0000a1e8 <__umoddi3>:
    a1e8:	defff404 	addi	sp,sp,-48
    a1ec:	df000a15 	stw	fp,40(sp)
    a1f0:	dc400315 	stw	r17,12(sp)
    a1f4:	dc000215 	stw	r16,8(sp)
    a1f8:	dfc00b15 	stw	ra,44(sp)
    a1fc:	ddc00915 	stw	r23,36(sp)
    a200:	dd800815 	stw	r22,32(sp)
    a204:	dd400715 	stw	r21,28(sp)
    a208:	dd000615 	stw	r20,24(sp)
    a20c:	dcc00515 	stw	r19,20(sp)
    a210:	dc800415 	stw	r18,16(sp)
    a214:	2021883a 	mov	r16,r4
    a218:	2823883a 	mov	r17,r5
    a21c:	2839883a 	mov	fp,r5
    a220:	38003c1e 	bne	r7,zero,a314 <__umoddi3+0x12c>
    a224:	3027883a 	mov	r19,r6
    a228:	2029883a 	mov	r20,r4
    a22c:	2980512e 	bgeu	r5,r6,a374 <__umoddi3+0x18c>
    a230:	00bfffd4 	movui	r2,65535
    a234:	11809a36 	bltu	r2,r6,a4a0 <__umoddi3+0x2b8>
    a238:	01003fc4 	movi	r4,255
    a23c:	2189803a 	cmpltu	r4,r4,r6
    a240:	200890fa 	slli	r4,r4,3
    a244:	3104d83a 	srl	r2,r6,r4
    a248:	00c000f4 	movhi	r3,3
    a24c:	18d2fe04 	addi	r3,r3,19448
    a250:	1885883a 	add	r2,r3,r2
    a254:	10c00003 	ldbu	r3,0(r2)
    a258:	00800804 	movi	r2,32
    a25c:	1909883a 	add	r4,r3,r4
    a260:	1125c83a 	sub	r18,r2,r4
    a264:	90000526 	beq	r18,zero,a27c <__umoddi3+0x94>
    a268:	8ca2983a 	sll	r17,r17,r18
    a26c:	8108d83a 	srl	r4,r16,r4
    a270:	34a6983a 	sll	r19,r6,r18
    a274:	84a8983a 	sll	r20,r16,r18
    a278:	2478b03a 	or	fp,r4,r17
    a27c:	982ed43a 	srli	r23,r19,16
    a280:	e009883a 	mov	r4,fp
    a284:	9dbfffcc 	andi	r22,r19,65535
    a288:	b80b883a 	mov	r5,r23
    a28c:	00006980 	call	698 <__umodsi3>
    a290:	e009883a 	mov	r4,fp
    a294:	b80b883a 	mov	r5,r23
    a298:	102b883a 	mov	r21,r2
    a29c:	00006340 	call	634 <__udivsi3>
    a2a0:	a806943a 	slli	r3,r21,16
    a2a4:	a008d43a 	srli	r4,r20,16
    a2a8:	b085383a 	mul	r2,r22,r2
    a2ac:	20c8b03a 	or	r4,r4,r3
    a2b0:	2080032e 	bgeu	r4,r2,a2c0 <__umoddi3+0xd8>
    a2b4:	24c9883a 	add	r4,r4,r19
    a2b8:	24c00136 	bltu	r4,r19,a2c0 <__umoddi3+0xd8>
    a2bc:	20811036 	bltu	r4,r2,a700 <__umoddi3+0x518>
    a2c0:	20abc83a 	sub	r21,r4,r2
    a2c4:	b80b883a 	mov	r5,r23
    a2c8:	a809883a 	mov	r4,r21
    a2cc:	00006980 	call	698 <__umodsi3>
    a2d0:	1023883a 	mov	r17,r2
    a2d4:	b80b883a 	mov	r5,r23
    a2d8:	a809883a 	mov	r4,r21
    a2dc:	00006340 	call	634 <__udivsi3>
    a2e0:	8822943a 	slli	r17,r17,16
    a2e4:	b085383a 	mul	r2,r22,r2
    a2e8:	a0ffffcc 	andi	r3,r20,65535
    a2ec:	1c46b03a 	or	r3,r3,r17
    a2f0:	1880042e 	bgeu	r3,r2,a304 <__umoddi3+0x11c>
    a2f4:	1cc7883a 	add	r3,r3,r19
    a2f8:	1cc00236 	bltu	r3,r19,a304 <__umoddi3+0x11c>
    a2fc:	1880012e 	bgeu	r3,r2,a304 <__umoddi3+0x11c>
    a300:	1cc7883a 	add	r3,r3,r19
    a304:	1885c83a 	sub	r2,r3,r2
    a308:	1484d83a 	srl	r2,r2,r18
    a30c:	0007883a 	mov	r3,zero
    a310:	00004f06 	br	a450 <__umoddi3+0x268>
    a314:	29c04c36 	bltu	r5,r7,a448 <__umoddi3+0x260>
    a318:	00bfffd4 	movui	r2,65535
    a31c:	11c0582e 	bgeu	r2,r7,a480 <__umoddi3+0x298>
    a320:	00804034 	movhi	r2,256
    a324:	10bfffc4 	addi	r2,r2,-1
    a328:	11c0e736 	bltu	r2,r7,a6c8 <__umoddi3+0x4e0>
    a32c:	01000404 	movi	r4,16
    a330:	3904d83a 	srl	r2,r7,r4
    a334:	00c000f4 	movhi	r3,3
    a338:	18d2fe04 	addi	r3,r3,19448
    a33c:	1885883a 	add	r2,r3,r2
    a340:	14c00003 	ldbu	r19,0(r2)
    a344:	00c00804 	movi	r3,32
    a348:	9927883a 	add	r19,r19,r4
    a34c:	1ce9c83a 	sub	r20,r3,r19
    a350:	a000581e 	bne	r20,zero,a4b4 <__umoddi3+0x2cc>
    a354:	3c400136 	bltu	r7,r17,a35c <__umoddi3+0x174>
    a358:	8180eb36 	bltu	r16,r6,a708 <__umoddi3+0x520>
    a35c:	8185c83a 	sub	r2,r16,r6
    a360:	89e3c83a 	sub	r17,r17,r7
    a364:	8089803a 	cmpltu	r4,r16,r2
    a368:	8939c83a 	sub	fp,r17,r4
    a36c:	e007883a 	mov	r3,fp
    a370:	00003706 	br	a450 <__umoddi3+0x268>
    a374:	3000041e 	bne	r6,zero,a388 <__umoddi3+0x1a0>
    a378:	000b883a 	mov	r5,zero
    a37c:	01000044 	movi	r4,1
    a380:	00006340 	call	634 <__udivsi3>
    a384:	1027883a 	mov	r19,r2
    a388:	00bfffd4 	movui	r2,65535
    a38c:	14c0402e 	bgeu	r2,r19,a490 <__umoddi3+0x2a8>
    a390:	00804034 	movhi	r2,256
    a394:	10bfffc4 	addi	r2,r2,-1
    a398:	14c0cd36 	bltu	r2,r19,a6d0 <__umoddi3+0x4e8>
    a39c:	00800404 	movi	r2,16
    a3a0:	9886d83a 	srl	r3,r19,r2
    a3a4:	010000f4 	movhi	r4,3
    a3a8:	2112fe04 	addi	r4,r4,19448
    a3ac:	20c7883a 	add	r3,r4,r3
    a3b0:	18c00003 	ldbu	r3,0(r3)
    a3b4:	1887883a 	add	r3,r3,r2
    a3b8:	00800804 	movi	r2,32
    a3bc:	10e5c83a 	sub	r18,r2,r3
    a3c0:	9000901e 	bne	r18,zero,a604 <__umoddi3+0x41c>
    a3c4:	982cd43a 	srli	r22,r19,16
    a3c8:	8ce3c83a 	sub	r17,r17,r19
    a3cc:	9d7fffcc 	andi	r21,r19,65535
    a3d0:	b00b883a 	mov	r5,r22
    a3d4:	8809883a 	mov	r4,r17
    a3d8:	00006980 	call	698 <__umodsi3>
    a3dc:	8809883a 	mov	r4,r17
    a3e0:	b00b883a 	mov	r5,r22
    a3e4:	1021883a 	mov	r16,r2
    a3e8:	00006340 	call	634 <__udivsi3>
    a3ec:	8006943a 	slli	r3,r16,16
    a3f0:	a008d43a 	srli	r4,r20,16
    a3f4:	1545383a 	mul	r2,r2,r21
    a3f8:	20c8b03a 	or	r4,r4,r3
    a3fc:	2080042e 	bgeu	r4,r2,a410 <__umoddi3+0x228>
    a400:	24c9883a 	add	r4,r4,r19
    a404:	24c00236 	bltu	r4,r19,a410 <__umoddi3+0x228>
    a408:	2080012e 	bgeu	r4,r2,a410 <__umoddi3+0x228>
    a40c:	24c9883a 	add	r4,r4,r19
    a410:	20a1c83a 	sub	r16,r4,r2
    a414:	b00b883a 	mov	r5,r22
    a418:	8009883a 	mov	r4,r16
    a41c:	00006980 	call	698 <__umodsi3>
    a420:	1023883a 	mov	r17,r2
    a424:	b00b883a 	mov	r5,r22
    a428:	8009883a 	mov	r4,r16
    a42c:	00006340 	call	634 <__udivsi3>
    a430:	8822943a 	slli	r17,r17,16
    a434:	1545383a 	mul	r2,r2,r21
    a438:	a53fffcc 	andi	r20,r20,65535
    a43c:	a446b03a 	or	r3,r20,r17
    a440:	18bfb02e 	bgeu	r3,r2,a304 <_gp+0xfffcb9fc>
    a444:	003fab06 	br	a2f4 <_gp+0xfffcb9ec>
    a448:	2005883a 	mov	r2,r4
    a44c:	2807883a 	mov	r3,r5
    a450:	dfc00b17 	ldw	ra,44(sp)
    a454:	df000a17 	ldw	fp,40(sp)
    a458:	ddc00917 	ldw	r23,36(sp)
    a45c:	dd800817 	ldw	r22,32(sp)
    a460:	dd400717 	ldw	r21,28(sp)
    a464:	dd000617 	ldw	r20,24(sp)
    a468:	dcc00517 	ldw	r19,20(sp)
    a46c:	dc800417 	ldw	r18,16(sp)
    a470:	dc400317 	ldw	r17,12(sp)
    a474:	dc000217 	ldw	r16,8(sp)
    a478:	dec00c04 	addi	sp,sp,48
    a47c:	f800283a 	ret
    a480:	04c03fc4 	movi	r19,255
    a484:	99c9803a 	cmpltu	r4,r19,r7
    a488:	200890fa 	slli	r4,r4,3
    a48c:	003fa806 	br	a330 <_gp+0xfffcba28>
    a490:	00803fc4 	movi	r2,255
    a494:	14c5803a 	cmpltu	r2,r2,r19
    a498:	100490fa 	slli	r2,r2,3
    a49c:	003fc006 	br	a3a0 <_gp+0xfffcba98>
    a4a0:	00804034 	movhi	r2,256
    a4a4:	10bfffc4 	addi	r2,r2,-1
    a4a8:	11808b36 	bltu	r2,r6,a6d8 <__umoddi3+0x4f0>
    a4ac:	01000404 	movi	r4,16
    a4b0:	003f6406 	br	a244 <_gp+0xfffcb93c>
    a4b4:	34c4d83a 	srl	r2,r6,r19
    a4b8:	3d0e983a 	sll	r7,r7,r20
    a4bc:	8cf8d83a 	srl	fp,r17,r19
    a4c0:	8d10983a 	sll	r8,r17,r20
    a4c4:	38aab03a 	or	r21,r7,r2
    a4c8:	a82cd43a 	srli	r22,r21,16
    a4cc:	84e2d83a 	srl	r17,r16,r19
    a4d0:	e009883a 	mov	r4,fp
    a4d4:	b00b883a 	mov	r5,r22
    a4d8:	8a22b03a 	or	r17,r17,r8
    a4dc:	3524983a 	sll	r18,r6,r20
    a4e0:	00006980 	call	698 <__umodsi3>
    a4e4:	e009883a 	mov	r4,fp
    a4e8:	b00b883a 	mov	r5,r22
    a4ec:	102f883a 	mov	r23,r2
    a4f0:	00006340 	call	634 <__udivsi3>
    a4f4:	100d883a 	mov	r6,r2
    a4f8:	b808943a 	slli	r4,r23,16
    a4fc:	aa3fffcc 	andi	r8,r21,65535
    a500:	8804d43a 	srli	r2,r17,16
    a504:	41af383a 	mul	r23,r8,r6
    a508:	8520983a 	sll	r16,r16,r20
    a50c:	1104b03a 	or	r2,r2,r4
    a510:	15c0042e 	bgeu	r2,r23,a524 <__umoddi3+0x33c>
    a514:	1545883a 	add	r2,r2,r21
    a518:	30ffffc4 	addi	r3,r6,-1
    a51c:	1540742e 	bgeu	r2,r21,a6f0 <__umoddi3+0x508>
    a520:	180d883a 	mov	r6,r3
    a524:	15efc83a 	sub	r23,r2,r23
    a528:	b00b883a 	mov	r5,r22
    a52c:	b809883a 	mov	r4,r23
    a530:	d9800115 	stw	r6,4(sp)
    a534:	da000015 	stw	r8,0(sp)
    a538:	00006980 	call	698 <__umodsi3>
    a53c:	b00b883a 	mov	r5,r22
    a540:	b809883a 	mov	r4,r23
    a544:	1039883a 	mov	fp,r2
    a548:	00006340 	call	634 <__udivsi3>
    a54c:	da000017 	ldw	r8,0(sp)
    a550:	e038943a 	slli	fp,fp,16
    a554:	100b883a 	mov	r5,r2
    a558:	4089383a 	mul	r4,r8,r2
    a55c:	8a3fffcc 	andi	r8,r17,65535
    a560:	4710b03a 	or	r8,r8,fp
    a564:	d9800117 	ldw	r6,4(sp)
    a568:	4100042e 	bgeu	r8,r4,a57c <__umoddi3+0x394>
    a56c:	4551883a 	add	r8,r8,r21
    a570:	10bfffc4 	addi	r2,r2,-1
    a574:	45405a2e 	bgeu	r8,r21,a6e0 <__umoddi3+0x4f8>
    a578:	100b883a 	mov	r5,r2
    a57c:	300c943a 	slli	r6,r6,16
    a580:	91ffffcc 	andi	r7,r18,65535
    a584:	9004d43a 	srli	r2,r18,16
    a588:	314cb03a 	or	r6,r6,r5
    a58c:	317fffcc 	andi	r5,r6,65535
    a590:	300cd43a 	srli	r6,r6,16
    a594:	29d3383a 	mul	r9,r5,r7
    a598:	288b383a 	mul	r5,r5,r2
    a59c:	31cf383a 	mul	r7,r6,r7
    a5a0:	4806d43a 	srli	r3,r9,16
    a5a4:	4111c83a 	sub	r8,r8,r4
    a5a8:	29cb883a 	add	r5,r5,r7
    a5ac:	194b883a 	add	r5,r3,r5
    a5b0:	3085383a 	mul	r2,r6,r2
    a5b4:	29c0022e 	bgeu	r5,r7,a5c0 <__umoddi3+0x3d8>
    a5b8:	00c00074 	movhi	r3,1
    a5bc:	10c5883a 	add	r2,r2,r3
    a5c0:	2808d43a 	srli	r4,r5,16
    a5c4:	280a943a 	slli	r5,r5,16
    a5c8:	4a7fffcc 	andi	r9,r9,65535
    a5cc:	2085883a 	add	r2,r4,r2
    a5d0:	2a4b883a 	add	r5,r5,r9
    a5d4:	40803636 	bltu	r8,r2,a6b0 <__umoddi3+0x4c8>
    a5d8:	40804d26 	beq	r8,r2,a710 <__umoddi3+0x528>
    a5dc:	4089c83a 	sub	r4,r8,r2
    a5e0:	280f883a 	mov	r7,r5
    a5e4:	81cfc83a 	sub	r7,r16,r7
    a5e8:	81c7803a 	cmpltu	r3,r16,r7
    a5ec:	20c7c83a 	sub	r3,r4,r3
    a5f0:	1cc4983a 	sll	r2,r3,r19
    a5f4:	3d0ed83a 	srl	r7,r7,r20
    a5f8:	1d06d83a 	srl	r3,r3,r20
    a5fc:	11c4b03a 	or	r2,r2,r7
    a600:	003f9306 	br	a450 <_gp+0xfffcbb48>
    a604:	9ca6983a 	sll	r19,r19,r18
    a608:	88e8d83a 	srl	r20,r17,r3
    a60c:	80c4d83a 	srl	r2,r16,r3
    a610:	982cd43a 	srli	r22,r19,16
    a614:	8ca2983a 	sll	r17,r17,r18
    a618:	a009883a 	mov	r4,r20
    a61c:	b00b883a 	mov	r5,r22
    a620:	1478b03a 	or	fp,r2,r17
    a624:	00006980 	call	698 <__umodsi3>
    a628:	a009883a 	mov	r4,r20
    a62c:	b00b883a 	mov	r5,r22
    a630:	1023883a 	mov	r17,r2
    a634:	00006340 	call	634 <__udivsi3>
    a638:	9d7fffcc 	andi	r21,r19,65535
    a63c:	880a943a 	slli	r5,r17,16
    a640:	e008d43a 	srli	r4,fp,16
    a644:	a885383a 	mul	r2,r21,r2
    a648:	84a8983a 	sll	r20,r16,r18
    a64c:	2148b03a 	or	r4,r4,r5
    a650:	2080042e 	bgeu	r4,r2,a664 <__umoddi3+0x47c>
    a654:	24c9883a 	add	r4,r4,r19
    a658:	24c00236 	bltu	r4,r19,a664 <__umoddi3+0x47c>
    a65c:	2080012e 	bgeu	r4,r2,a664 <__umoddi3+0x47c>
    a660:	24c9883a 	add	r4,r4,r19
    a664:	20a3c83a 	sub	r17,r4,r2
    a668:	b00b883a 	mov	r5,r22
    a66c:	8809883a 	mov	r4,r17
    a670:	00006980 	call	698 <__umodsi3>
    a674:	102f883a 	mov	r23,r2
    a678:	8809883a 	mov	r4,r17
    a67c:	b00b883a 	mov	r5,r22
    a680:	00006340 	call	634 <__udivsi3>
    a684:	b82e943a 	slli	r23,r23,16
    a688:	a885383a 	mul	r2,r21,r2
    a68c:	e13fffcc 	andi	r4,fp,65535
    a690:	25c8b03a 	or	r4,r4,r23
    a694:	2080042e 	bgeu	r4,r2,a6a8 <__umoddi3+0x4c0>
    a698:	24c9883a 	add	r4,r4,r19
    a69c:	24c00236 	bltu	r4,r19,a6a8 <__umoddi3+0x4c0>
    a6a0:	2080012e 	bgeu	r4,r2,a6a8 <__umoddi3+0x4c0>
    a6a4:	24c9883a 	add	r4,r4,r19
    a6a8:	20a3c83a 	sub	r17,r4,r2
    a6ac:	003f4806 	br	a3d0 <_gp+0xfffcbac8>
    a6b0:	2c8fc83a 	sub	r7,r5,r18
    a6b4:	1545c83a 	sub	r2,r2,r21
    a6b8:	29cb803a 	cmpltu	r5,r5,r7
    a6bc:	1145c83a 	sub	r2,r2,r5
    a6c0:	4089c83a 	sub	r4,r8,r2
    a6c4:	003fc706 	br	a5e4 <_gp+0xfffcbcdc>
    a6c8:	01000604 	movi	r4,24
    a6cc:	003f1806 	br	a330 <_gp+0xfffcba28>
    a6d0:	00800604 	movi	r2,24
    a6d4:	003f3206 	br	a3a0 <_gp+0xfffcba98>
    a6d8:	01000604 	movi	r4,24
    a6dc:	003ed906 	br	a244 <_gp+0xfffcb93c>
    a6e0:	413fa52e 	bgeu	r8,r4,a578 <_gp+0xfffcbc70>
    a6e4:	297fff84 	addi	r5,r5,-2
    a6e8:	4551883a 	add	r8,r8,r21
    a6ec:	003fa306 	br	a57c <_gp+0xfffcbc74>
    a6f0:	15ff8b2e 	bgeu	r2,r23,a520 <_gp+0xfffcbc18>
    a6f4:	31bfff84 	addi	r6,r6,-2
    a6f8:	1545883a 	add	r2,r2,r21
    a6fc:	003f8906 	br	a524 <_gp+0xfffcbc1c>
    a700:	24c9883a 	add	r4,r4,r19
    a704:	003eee06 	br	a2c0 <_gp+0xfffcb9b8>
    a708:	8005883a 	mov	r2,r16
    a70c:	003f1706 	br	a36c <_gp+0xfffcba64>
    a710:	817fe736 	bltu	r16,r5,a6b0 <_gp+0xfffcbda8>
    a714:	280f883a 	mov	r7,r5
    a718:	0009883a 	mov	r4,zero
    a71c:	003fb106 	br	a5e4 <_gp+0xfffcbcdc>

0000a720 <__adddf3>:
    a720:	02c00434 	movhi	r11,16
    a724:	5affffc4 	addi	r11,r11,-1
    a728:	2806d7fa 	srli	r3,r5,31
    a72c:	2ad4703a 	and	r10,r5,r11
    a730:	3ad2703a 	and	r9,r7,r11
    a734:	3804d53a 	srli	r2,r7,20
    a738:	3018d77a 	srli	r12,r6,29
    a73c:	280ad53a 	srli	r5,r5,20
    a740:	501490fa 	slli	r10,r10,3
    a744:	2010d77a 	srli	r8,r4,29
    a748:	481290fa 	slli	r9,r9,3
    a74c:	380ed7fa 	srli	r7,r7,31
    a750:	defffb04 	addi	sp,sp,-20
    a754:	dc800215 	stw	r18,8(sp)
    a758:	dc400115 	stw	r17,4(sp)
    a75c:	dc000015 	stw	r16,0(sp)
    a760:	dfc00415 	stw	ra,16(sp)
    a764:	dcc00315 	stw	r19,12(sp)
    a768:	1c803fcc 	andi	r18,r3,255
    a76c:	2c01ffcc 	andi	r16,r5,2047
    a770:	5210b03a 	or	r8,r10,r8
    a774:	202290fa 	slli	r17,r4,3
    a778:	1081ffcc 	andi	r2,r2,2047
    a77c:	4b12b03a 	or	r9,r9,r12
    a780:	300c90fa 	slli	r6,r6,3
    a784:	91c07526 	beq	r18,r7,a95c <__adddf3+0x23c>
    a788:	8087c83a 	sub	r3,r16,r2
    a78c:	00c0ab0e 	bge	zero,r3,aa3c <__adddf3+0x31c>
    a790:	10002a1e 	bne	r2,zero,a83c <__adddf3+0x11c>
    a794:	4984b03a 	or	r2,r9,r6
    a798:	1000961e 	bne	r2,zero,a9f4 <__adddf3+0x2d4>
    a79c:	888001cc 	andi	r2,r17,7
    a7a0:	10000726 	beq	r2,zero,a7c0 <__adddf3+0xa0>
    a7a4:	888003cc 	andi	r2,r17,15
    a7a8:	00c00104 	movi	r3,4
    a7ac:	10c00426 	beq	r2,r3,a7c0 <__adddf3+0xa0>
    a7b0:	88c7883a 	add	r3,r17,r3
    a7b4:	1c63803a 	cmpltu	r17,r3,r17
    a7b8:	4451883a 	add	r8,r8,r17
    a7bc:	1823883a 	mov	r17,r3
    a7c0:	4080202c 	andhi	r2,r8,128
    a7c4:	10005926 	beq	r2,zero,a92c <__adddf3+0x20c>
    a7c8:	84000044 	addi	r16,r16,1
    a7cc:	0081ffc4 	movi	r2,2047
    a7d0:	8080ba26 	beq	r16,r2,aabc <__adddf3+0x39c>
    a7d4:	00bfe034 	movhi	r2,65408
    a7d8:	10bfffc4 	addi	r2,r2,-1
    a7dc:	4090703a 	and	r8,r8,r2
    a7e0:	4004977a 	slli	r2,r8,29
    a7e4:	4010927a 	slli	r8,r8,9
    a7e8:	8822d0fa 	srli	r17,r17,3
    a7ec:	8401ffcc 	andi	r16,r16,2047
    a7f0:	4010d33a 	srli	r8,r8,12
    a7f4:	9007883a 	mov	r3,r18
    a7f8:	1444b03a 	or	r2,r2,r17
    a7fc:	8401ffcc 	andi	r16,r16,2047
    a800:	8020953a 	slli	r16,r16,20
    a804:	18c03fcc 	andi	r3,r3,255
    a808:	01000434 	movhi	r4,16
    a80c:	213fffc4 	addi	r4,r4,-1
    a810:	180697fa 	slli	r3,r3,31
    a814:	4110703a 	and	r8,r8,r4
    a818:	4410b03a 	or	r8,r8,r16
    a81c:	40c6b03a 	or	r3,r8,r3
    a820:	dfc00417 	ldw	ra,16(sp)
    a824:	dcc00317 	ldw	r19,12(sp)
    a828:	dc800217 	ldw	r18,8(sp)
    a82c:	dc400117 	ldw	r17,4(sp)
    a830:	dc000017 	ldw	r16,0(sp)
    a834:	dec00504 	addi	sp,sp,20
    a838:	f800283a 	ret
    a83c:	0081ffc4 	movi	r2,2047
    a840:	80bfd626 	beq	r16,r2,a79c <_gp+0xfffcbe94>
    a844:	4a402034 	orhi	r9,r9,128
    a848:	00800e04 	movi	r2,56
    a84c:	10c09f16 	blt	r2,r3,aacc <__adddf3+0x3ac>
    a850:	008007c4 	movi	r2,31
    a854:	10c0c216 	blt	r2,r3,ab60 <__adddf3+0x440>
    a858:	00800804 	movi	r2,32
    a85c:	10c5c83a 	sub	r2,r2,r3
    a860:	488a983a 	sll	r5,r9,r2
    a864:	30c8d83a 	srl	r4,r6,r3
    a868:	3084983a 	sll	r2,r6,r2
    a86c:	48c6d83a 	srl	r3,r9,r3
    a870:	290cb03a 	or	r6,r5,r4
    a874:	1004c03a 	cmpne	r2,r2,zero
    a878:	308cb03a 	or	r6,r6,r2
    a87c:	898dc83a 	sub	r6,r17,r6
    a880:	89a3803a 	cmpltu	r17,r17,r6
    a884:	40d1c83a 	sub	r8,r8,r3
    a888:	4451c83a 	sub	r8,r8,r17
    a88c:	3023883a 	mov	r17,r6
    a890:	4080202c 	andhi	r2,r8,128
    a894:	10002326 	beq	r2,zero,a924 <__adddf3+0x204>
    a898:	04c02034 	movhi	r19,128
    a89c:	9cffffc4 	addi	r19,r19,-1
    a8a0:	44e6703a 	and	r19,r8,r19
    a8a4:	98007626 	beq	r19,zero,aa80 <__adddf3+0x360>
    a8a8:	9809883a 	mov	r4,r19
    a8ac:	000cd240 	call	cd24 <__clzsi2>
    a8b0:	10fffe04 	addi	r3,r2,-8
    a8b4:	010007c4 	movi	r4,31
    a8b8:	20c07716 	blt	r4,r3,aa98 <__adddf3+0x378>
    a8bc:	00800804 	movi	r2,32
    a8c0:	10c5c83a 	sub	r2,r2,r3
    a8c4:	8884d83a 	srl	r2,r17,r2
    a8c8:	98d0983a 	sll	r8,r19,r3
    a8cc:	88e2983a 	sll	r17,r17,r3
    a8d0:	1204b03a 	or	r2,r2,r8
    a8d4:	1c007416 	blt	r3,r16,aaa8 <__adddf3+0x388>
    a8d8:	1c21c83a 	sub	r16,r3,r16
    a8dc:	82000044 	addi	r8,r16,1
    a8e0:	00c007c4 	movi	r3,31
    a8e4:	1a009116 	blt	r3,r8,ab2c <__adddf3+0x40c>
    a8e8:	00c00804 	movi	r3,32
    a8ec:	1a07c83a 	sub	r3,r3,r8
    a8f0:	8a08d83a 	srl	r4,r17,r8
    a8f4:	88e2983a 	sll	r17,r17,r3
    a8f8:	10c6983a 	sll	r3,r2,r3
    a8fc:	1210d83a 	srl	r8,r2,r8
    a900:	8804c03a 	cmpne	r2,r17,zero
    a904:	1906b03a 	or	r3,r3,r4
    a908:	18a2b03a 	or	r17,r3,r2
    a90c:	0021883a 	mov	r16,zero
    a910:	003fa206 	br	a79c <_gp+0xfffcbe94>
    a914:	1890b03a 	or	r8,r3,r2
    a918:	40017d26 	beq	r8,zero,af10 <__adddf3+0x7f0>
    a91c:	1011883a 	mov	r8,r2
    a920:	1823883a 	mov	r17,r3
    a924:	888001cc 	andi	r2,r17,7
    a928:	103f9e1e 	bne	r2,zero,a7a4 <_gp+0xfffcbe9c>
    a92c:	4004977a 	slli	r2,r8,29
    a930:	8822d0fa 	srli	r17,r17,3
    a934:	4010d0fa 	srli	r8,r8,3
    a938:	9007883a 	mov	r3,r18
    a93c:	1444b03a 	or	r2,r2,r17
    a940:	0101ffc4 	movi	r4,2047
    a944:	81002426 	beq	r16,r4,a9d8 <__adddf3+0x2b8>
    a948:	8120703a 	and	r16,r16,r4
    a94c:	01000434 	movhi	r4,16
    a950:	213fffc4 	addi	r4,r4,-1
    a954:	4110703a 	and	r8,r8,r4
    a958:	003fa806 	br	a7fc <_gp+0xfffcbef4>
    a95c:	8089c83a 	sub	r4,r16,r2
    a960:	01005e0e 	bge	zero,r4,aadc <__adddf3+0x3bc>
    a964:	10002b26 	beq	r2,zero,aa14 <__adddf3+0x2f4>
    a968:	0081ffc4 	movi	r2,2047
    a96c:	80bf8b26 	beq	r16,r2,a79c <_gp+0xfffcbe94>
    a970:	4a402034 	orhi	r9,r9,128
    a974:	00800e04 	movi	r2,56
    a978:	1100a40e 	bge	r2,r4,ac0c <__adddf3+0x4ec>
    a97c:	498cb03a 	or	r6,r9,r6
    a980:	300ac03a 	cmpne	r5,r6,zero
    a984:	0013883a 	mov	r9,zero
    a988:	2c4b883a 	add	r5,r5,r17
    a98c:	2c63803a 	cmpltu	r17,r5,r17
    a990:	4a11883a 	add	r8,r9,r8
    a994:	8a11883a 	add	r8,r17,r8
    a998:	2823883a 	mov	r17,r5
    a99c:	4080202c 	andhi	r2,r8,128
    a9a0:	103fe026 	beq	r2,zero,a924 <_gp+0xfffcc01c>
    a9a4:	84000044 	addi	r16,r16,1
    a9a8:	0081ffc4 	movi	r2,2047
    a9ac:	8080d226 	beq	r16,r2,acf8 <__adddf3+0x5d8>
    a9b0:	00bfe034 	movhi	r2,65408
    a9b4:	10bfffc4 	addi	r2,r2,-1
    a9b8:	4090703a 	and	r8,r8,r2
    a9bc:	880ad07a 	srli	r5,r17,1
    a9c0:	400897fa 	slli	r4,r8,31
    a9c4:	88c0004c 	andi	r3,r17,1
    a9c8:	28e2b03a 	or	r17,r5,r3
    a9cc:	4010d07a 	srli	r8,r8,1
    a9d0:	2462b03a 	or	r17,r4,r17
    a9d4:	003f7106 	br	a79c <_gp+0xfffcbe94>
    a9d8:	4088b03a 	or	r4,r8,r2
    a9dc:	20014526 	beq	r4,zero,aef4 <__adddf3+0x7d4>
    a9e0:	01000434 	movhi	r4,16
    a9e4:	42000234 	orhi	r8,r8,8
    a9e8:	213fffc4 	addi	r4,r4,-1
    a9ec:	4110703a 	and	r8,r8,r4
    a9f0:	003f8206 	br	a7fc <_gp+0xfffcbef4>
    a9f4:	18ffffc4 	addi	r3,r3,-1
    a9f8:	1800491e 	bne	r3,zero,ab20 <__adddf3+0x400>
    a9fc:	898bc83a 	sub	r5,r17,r6
    aa00:	8963803a 	cmpltu	r17,r17,r5
    aa04:	4251c83a 	sub	r8,r8,r9
    aa08:	4451c83a 	sub	r8,r8,r17
    aa0c:	2823883a 	mov	r17,r5
    aa10:	003f9f06 	br	a890 <_gp+0xfffcbf88>
    aa14:	4984b03a 	or	r2,r9,r6
    aa18:	103f6026 	beq	r2,zero,a79c <_gp+0xfffcbe94>
    aa1c:	213fffc4 	addi	r4,r4,-1
    aa20:	2000931e 	bne	r4,zero,ac70 <__adddf3+0x550>
    aa24:	898d883a 	add	r6,r17,r6
    aa28:	3463803a 	cmpltu	r17,r6,r17
    aa2c:	4251883a 	add	r8,r8,r9
    aa30:	8a11883a 	add	r8,r17,r8
    aa34:	3023883a 	mov	r17,r6
    aa38:	003fd806 	br	a99c <_gp+0xfffcc094>
    aa3c:	1800541e 	bne	r3,zero,ab90 <__adddf3+0x470>
    aa40:	80800044 	addi	r2,r16,1
    aa44:	1081ffcc 	andi	r2,r2,2047
    aa48:	00c00044 	movi	r3,1
    aa4c:	1880a00e 	bge	r3,r2,acd0 <__adddf3+0x5b0>
    aa50:	8989c83a 	sub	r4,r17,r6
    aa54:	8905803a 	cmpltu	r2,r17,r4
    aa58:	4267c83a 	sub	r19,r8,r9
    aa5c:	98a7c83a 	sub	r19,r19,r2
    aa60:	9880202c 	andhi	r2,r19,128
    aa64:	10006326 	beq	r2,zero,abf4 <__adddf3+0x4d4>
    aa68:	3463c83a 	sub	r17,r6,r17
    aa6c:	4a07c83a 	sub	r3,r9,r8
    aa70:	344d803a 	cmpltu	r6,r6,r17
    aa74:	19a7c83a 	sub	r19,r3,r6
    aa78:	3825883a 	mov	r18,r7
    aa7c:	983f8a1e 	bne	r19,zero,a8a8 <_gp+0xfffcbfa0>
    aa80:	8809883a 	mov	r4,r17
    aa84:	000cd240 	call	cd24 <__clzsi2>
    aa88:	10800804 	addi	r2,r2,32
    aa8c:	10fffe04 	addi	r3,r2,-8
    aa90:	010007c4 	movi	r4,31
    aa94:	20ff890e 	bge	r4,r3,a8bc <_gp+0xfffcbfb4>
    aa98:	10bff604 	addi	r2,r2,-40
    aa9c:	8884983a 	sll	r2,r17,r2
    aaa0:	0023883a 	mov	r17,zero
    aaa4:	1c3f8c0e 	bge	r3,r16,a8d8 <_gp+0xfffcbfd0>
    aaa8:	023fe034 	movhi	r8,65408
    aaac:	423fffc4 	addi	r8,r8,-1
    aab0:	80e1c83a 	sub	r16,r16,r3
    aab4:	1210703a 	and	r8,r2,r8
    aab8:	003f3806 	br	a79c <_gp+0xfffcbe94>
    aabc:	9007883a 	mov	r3,r18
    aac0:	0011883a 	mov	r8,zero
    aac4:	0005883a 	mov	r2,zero
    aac8:	003f4c06 	br	a7fc <_gp+0xfffcbef4>
    aacc:	498cb03a 	or	r6,r9,r6
    aad0:	300cc03a 	cmpne	r6,r6,zero
    aad4:	0007883a 	mov	r3,zero
    aad8:	003f6806 	br	a87c <_gp+0xfffcbf74>
    aadc:	20009c1e 	bne	r4,zero,ad50 <__adddf3+0x630>
    aae0:	80800044 	addi	r2,r16,1
    aae4:	1141ffcc 	andi	r5,r2,2047
    aae8:	01000044 	movi	r4,1
    aaec:	2140670e 	bge	r4,r5,ac8c <__adddf3+0x56c>
    aaf0:	0101ffc4 	movi	r4,2047
    aaf4:	11007f26 	beq	r2,r4,acf4 <__adddf3+0x5d4>
    aaf8:	898d883a 	add	r6,r17,r6
    aafc:	4247883a 	add	r3,r8,r9
    ab00:	3451803a 	cmpltu	r8,r6,r17
    ab04:	40d1883a 	add	r8,r8,r3
    ab08:	402297fa 	slli	r17,r8,31
    ab0c:	300cd07a 	srli	r6,r6,1
    ab10:	4010d07a 	srli	r8,r8,1
    ab14:	1021883a 	mov	r16,r2
    ab18:	89a2b03a 	or	r17,r17,r6
    ab1c:	003f1f06 	br	a79c <_gp+0xfffcbe94>
    ab20:	0081ffc4 	movi	r2,2047
    ab24:	80bf481e 	bne	r16,r2,a848 <_gp+0xfffcbf40>
    ab28:	003f1c06 	br	a79c <_gp+0xfffcbe94>
    ab2c:	843ff844 	addi	r16,r16,-31
    ab30:	01000804 	movi	r4,32
    ab34:	1406d83a 	srl	r3,r2,r16
    ab38:	41005026 	beq	r8,r4,ac7c <__adddf3+0x55c>
    ab3c:	01001004 	movi	r4,64
    ab40:	2211c83a 	sub	r8,r4,r8
    ab44:	1204983a 	sll	r2,r2,r8
    ab48:	88a2b03a 	or	r17,r17,r2
    ab4c:	8822c03a 	cmpne	r17,r17,zero
    ab50:	1c62b03a 	or	r17,r3,r17
    ab54:	0011883a 	mov	r8,zero
    ab58:	0021883a 	mov	r16,zero
    ab5c:	003f7106 	br	a924 <_gp+0xfffcc01c>
    ab60:	193ff804 	addi	r4,r3,-32
    ab64:	00800804 	movi	r2,32
    ab68:	4908d83a 	srl	r4,r9,r4
    ab6c:	18804526 	beq	r3,r2,ac84 <__adddf3+0x564>
    ab70:	00801004 	movi	r2,64
    ab74:	10c5c83a 	sub	r2,r2,r3
    ab78:	4886983a 	sll	r3,r9,r2
    ab7c:	198cb03a 	or	r6,r3,r6
    ab80:	300cc03a 	cmpne	r6,r6,zero
    ab84:	218cb03a 	or	r6,r4,r6
    ab88:	0007883a 	mov	r3,zero
    ab8c:	003f3b06 	br	a87c <_gp+0xfffcbf74>
    ab90:	80002a26 	beq	r16,zero,ac3c <__adddf3+0x51c>
    ab94:	0101ffc4 	movi	r4,2047
    ab98:	11006826 	beq	r2,r4,ad3c <__adddf3+0x61c>
    ab9c:	00c7c83a 	sub	r3,zero,r3
    aba0:	42002034 	orhi	r8,r8,128
    aba4:	01000e04 	movi	r4,56
    aba8:	20c07c16 	blt	r4,r3,ad9c <__adddf3+0x67c>
    abac:	010007c4 	movi	r4,31
    abb0:	20c0da16 	blt	r4,r3,af1c <__adddf3+0x7fc>
    abb4:	01000804 	movi	r4,32
    abb8:	20c9c83a 	sub	r4,r4,r3
    abbc:	4114983a 	sll	r10,r8,r4
    abc0:	88cad83a 	srl	r5,r17,r3
    abc4:	8908983a 	sll	r4,r17,r4
    abc8:	40c6d83a 	srl	r3,r8,r3
    abcc:	5162b03a 	or	r17,r10,r5
    abd0:	2008c03a 	cmpne	r4,r4,zero
    abd4:	8922b03a 	or	r17,r17,r4
    abd8:	3463c83a 	sub	r17,r6,r17
    abdc:	48c7c83a 	sub	r3,r9,r3
    abe0:	344d803a 	cmpltu	r6,r6,r17
    abe4:	1991c83a 	sub	r8,r3,r6
    abe8:	1021883a 	mov	r16,r2
    abec:	3825883a 	mov	r18,r7
    abf0:	003f2706 	br	a890 <_gp+0xfffcbf88>
    abf4:	24d0b03a 	or	r8,r4,r19
    abf8:	40001b1e 	bne	r8,zero,ac68 <__adddf3+0x548>
    abfc:	0005883a 	mov	r2,zero
    ac00:	0007883a 	mov	r3,zero
    ac04:	0021883a 	mov	r16,zero
    ac08:	003f4d06 	br	a940 <_gp+0xfffcc038>
    ac0c:	008007c4 	movi	r2,31
    ac10:	11003c16 	blt	r2,r4,ad04 <__adddf3+0x5e4>
    ac14:	00800804 	movi	r2,32
    ac18:	1105c83a 	sub	r2,r2,r4
    ac1c:	488e983a 	sll	r7,r9,r2
    ac20:	310ad83a 	srl	r5,r6,r4
    ac24:	3084983a 	sll	r2,r6,r2
    ac28:	4912d83a 	srl	r9,r9,r4
    ac2c:	394ab03a 	or	r5,r7,r5
    ac30:	1004c03a 	cmpne	r2,r2,zero
    ac34:	288ab03a 	or	r5,r5,r2
    ac38:	003f5306 	br	a988 <_gp+0xfffcc080>
    ac3c:	4448b03a 	or	r4,r8,r17
    ac40:	20003e26 	beq	r4,zero,ad3c <__adddf3+0x61c>
    ac44:	00c6303a 	nor	r3,zero,r3
    ac48:	18003a1e 	bne	r3,zero,ad34 <__adddf3+0x614>
    ac4c:	3463c83a 	sub	r17,r6,r17
    ac50:	4a07c83a 	sub	r3,r9,r8
    ac54:	344d803a 	cmpltu	r6,r6,r17
    ac58:	1991c83a 	sub	r8,r3,r6
    ac5c:	1021883a 	mov	r16,r2
    ac60:	3825883a 	mov	r18,r7
    ac64:	003f0a06 	br	a890 <_gp+0xfffcbf88>
    ac68:	2023883a 	mov	r17,r4
    ac6c:	003f0d06 	br	a8a4 <_gp+0xfffcbf9c>
    ac70:	0081ffc4 	movi	r2,2047
    ac74:	80bf3f1e 	bne	r16,r2,a974 <_gp+0xfffcc06c>
    ac78:	003ec806 	br	a79c <_gp+0xfffcbe94>
    ac7c:	0005883a 	mov	r2,zero
    ac80:	003fb106 	br	ab48 <_gp+0xfffcc240>
    ac84:	0007883a 	mov	r3,zero
    ac88:	003fbc06 	br	ab7c <_gp+0xfffcc274>
    ac8c:	4444b03a 	or	r2,r8,r17
    ac90:	8000871e 	bne	r16,zero,aeb0 <__adddf3+0x790>
    ac94:	1000ba26 	beq	r2,zero,af80 <__adddf3+0x860>
    ac98:	4984b03a 	or	r2,r9,r6
    ac9c:	103ebf26 	beq	r2,zero,a79c <_gp+0xfffcbe94>
    aca0:	8985883a 	add	r2,r17,r6
    aca4:	4247883a 	add	r3,r8,r9
    aca8:	1451803a 	cmpltu	r8,r2,r17
    acac:	40d1883a 	add	r8,r8,r3
    acb0:	40c0202c 	andhi	r3,r8,128
    acb4:	1023883a 	mov	r17,r2
    acb8:	183f1a26 	beq	r3,zero,a924 <_gp+0xfffcc01c>
    acbc:	00bfe034 	movhi	r2,65408
    acc0:	10bfffc4 	addi	r2,r2,-1
    acc4:	2021883a 	mov	r16,r4
    acc8:	4090703a 	and	r8,r8,r2
    accc:	003eb306 	br	a79c <_gp+0xfffcbe94>
    acd0:	4444b03a 	or	r2,r8,r17
    acd4:	8000291e 	bne	r16,zero,ad7c <__adddf3+0x65c>
    acd8:	10004b1e 	bne	r2,zero,ae08 <__adddf3+0x6e8>
    acdc:	4990b03a 	or	r8,r9,r6
    ace0:	40008b26 	beq	r8,zero,af10 <__adddf3+0x7f0>
    ace4:	4811883a 	mov	r8,r9
    ace8:	3023883a 	mov	r17,r6
    acec:	3825883a 	mov	r18,r7
    acf0:	003eaa06 	br	a79c <_gp+0xfffcbe94>
    acf4:	1021883a 	mov	r16,r2
    acf8:	0011883a 	mov	r8,zero
    acfc:	0005883a 	mov	r2,zero
    ad00:	003f0f06 	br	a940 <_gp+0xfffcc038>
    ad04:	217ff804 	addi	r5,r4,-32
    ad08:	00800804 	movi	r2,32
    ad0c:	494ad83a 	srl	r5,r9,r5
    ad10:	20807d26 	beq	r4,r2,af08 <__adddf3+0x7e8>
    ad14:	00801004 	movi	r2,64
    ad18:	1109c83a 	sub	r4,r2,r4
    ad1c:	4912983a 	sll	r9,r9,r4
    ad20:	498cb03a 	or	r6,r9,r6
    ad24:	300cc03a 	cmpne	r6,r6,zero
    ad28:	298ab03a 	or	r5,r5,r6
    ad2c:	0013883a 	mov	r9,zero
    ad30:	003f1506 	br	a988 <_gp+0xfffcc080>
    ad34:	0101ffc4 	movi	r4,2047
    ad38:	113f9a1e 	bne	r2,r4,aba4 <_gp+0xfffcc29c>
    ad3c:	4811883a 	mov	r8,r9
    ad40:	3023883a 	mov	r17,r6
    ad44:	1021883a 	mov	r16,r2
    ad48:	3825883a 	mov	r18,r7
    ad4c:	003e9306 	br	a79c <_gp+0xfffcbe94>
    ad50:	8000161e 	bne	r16,zero,adac <__adddf3+0x68c>
    ad54:	444ab03a 	or	r5,r8,r17
    ad58:	28005126 	beq	r5,zero,aea0 <__adddf3+0x780>
    ad5c:	0108303a 	nor	r4,zero,r4
    ad60:	20004d1e 	bne	r4,zero,ae98 <__adddf3+0x778>
    ad64:	89a3883a 	add	r17,r17,r6
    ad68:	4253883a 	add	r9,r8,r9
    ad6c:	898d803a 	cmpltu	r6,r17,r6
    ad70:	3251883a 	add	r8,r6,r9
    ad74:	1021883a 	mov	r16,r2
    ad78:	003f0806 	br	a99c <_gp+0xfffcc094>
    ad7c:	1000301e 	bne	r2,zero,ae40 <__adddf3+0x720>
    ad80:	4984b03a 	or	r2,r9,r6
    ad84:	10007126 	beq	r2,zero,af4c <__adddf3+0x82c>
    ad88:	4811883a 	mov	r8,r9
    ad8c:	3023883a 	mov	r17,r6
    ad90:	3825883a 	mov	r18,r7
    ad94:	0401ffc4 	movi	r16,2047
    ad98:	003e8006 	br	a79c <_gp+0xfffcbe94>
    ad9c:	4462b03a 	or	r17,r8,r17
    ada0:	8822c03a 	cmpne	r17,r17,zero
    ada4:	0007883a 	mov	r3,zero
    ada8:	003f8b06 	br	abd8 <_gp+0xfffcc2d0>
    adac:	0141ffc4 	movi	r5,2047
    adb0:	11403b26 	beq	r2,r5,aea0 <__adddf3+0x780>
    adb4:	0109c83a 	sub	r4,zero,r4
    adb8:	42002034 	orhi	r8,r8,128
    adbc:	01400e04 	movi	r5,56
    adc0:	29006716 	blt	r5,r4,af60 <__adddf3+0x840>
    adc4:	014007c4 	movi	r5,31
    adc8:	29007016 	blt	r5,r4,af8c <__adddf3+0x86c>
    adcc:	01400804 	movi	r5,32
    add0:	290bc83a 	sub	r5,r5,r4
    add4:	4154983a 	sll	r10,r8,r5
    add8:	890ed83a 	srl	r7,r17,r4
    addc:	894a983a 	sll	r5,r17,r5
    ade0:	4108d83a 	srl	r4,r8,r4
    ade4:	51e2b03a 	or	r17,r10,r7
    ade8:	280ac03a 	cmpne	r5,r5,zero
    adec:	8962b03a 	or	r17,r17,r5
    adf0:	89a3883a 	add	r17,r17,r6
    adf4:	2253883a 	add	r9,r4,r9
    adf8:	898d803a 	cmpltu	r6,r17,r6
    adfc:	3251883a 	add	r8,r6,r9
    ae00:	1021883a 	mov	r16,r2
    ae04:	003ee506 	br	a99c <_gp+0xfffcc094>
    ae08:	4984b03a 	or	r2,r9,r6
    ae0c:	103e6326 	beq	r2,zero,a79c <_gp+0xfffcbe94>
    ae10:	8987c83a 	sub	r3,r17,r6
    ae14:	88c9803a 	cmpltu	r4,r17,r3
    ae18:	4245c83a 	sub	r2,r8,r9
    ae1c:	1105c83a 	sub	r2,r2,r4
    ae20:	1100202c 	andhi	r4,r2,128
    ae24:	203ebb26 	beq	r4,zero,a914 <_gp+0xfffcc00c>
    ae28:	3463c83a 	sub	r17,r6,r17
    ae2c:	4a07c83a 	sub	r3,r9,r8
    ae30:	344d803a 	cmpltu	r6,r6,r17
    ae34:	1991c83a 	sub	r8,r3,r6
    ae38:	3825883a 	mov	r18,r7
    ae3c:	003e5706 	br	a79c <_gp+0xfffcbe94>
    ae40:	4984b03a 	or	r2,r9,r6
    ae44:	10002e26 	beq	r2,zero,af00 <__adddf3+0x7e0>
    ae48:	4004d0fa 	srli	r2,r8,3
    ae4c:	8822d0fa 	srli	r17,r17,3
    ae50:	4010977a 	slli	r8,r8,29
    ae54:	10c0022c 	andhi	r3,r2,8
    ae58:	4462b03a 	or	r17,r8,r17
    ae5c:	18000826 	beq	r3,zero,ae80 <__adddf3+0x760>
    ae60:	4808d0fa 	srli	r4,r9,3
    ae64:	20c0022c 	andhi	r3,r4,8
    ae68:	1800051e 	bne	r3,zero,ae80 <__adddf3+0x760>
    ae6c:	300cd0fa 	srli	r6,r6,3
    ae70:	4806977a 	slli	r3,r9,29
    ae74:	2005883a 	mov	r2,r4
    ae78:	3825883a 	mov	r18,r7
    ae7c:	19a2b03a 	or	r17,r3,r6
    ae80:	8810d77a 	srli	r8,r17,29
    ae84:	100490fa 	slli	r2,r2,3
    ae88:	882290fa 	slli	r17,r17,3
    ae8c:	0401ffc4 	movi	r16,2047
    ae90:	4090b03a 	or	r8,r8,r2
    ae94:	003e4106 	br	a79c <_gp+0xfffcbe94>
    ae98:	0141ffc4 	movi	r5,2047
    ae9c:	117fc71e 	bne	r2,r5,adbc <_gp+0xfffcc4b4>
    aea0:	4811883a 	mov	r8,r9
    aea4:	3023883a 	mov	r17,r6
    aea8:	1021883a 	mov	r16,r2
    aeac:	003e3b06 	br	a79c <_gp+0xfffcbe94>
    aeb0:	10002f26 	beq	r2,zero,af70 <__adddf3+0x850>
    aeb4:	4984b03a 	or	r2,r9,r6
    aeb8:	10001126 	beq	r2,zero,af00 <__adddf3+0x7e0>
    aebc:	4004d0fa 	srli	r2,r8,3
    aec0:	8822d0fa 	srli	r17,r17,3
    aec4:	4010977a 	slli	r8,r8,29
    aec8:	10c0022c 	andhi	r3,r2,8
    aecc:	4462b03a 	or	r17,r8,r17
    aed0:	183feb26 	beq	r3,zero,ae80 <_gp+0xfffcc578>
    aed4:	4808d0fa 	srli	r4,r9,3
    aed8:	20c0022c 	andhi	r3,r4,8
    aedc:	183fe81e 	bne	r3,zero,ae80 <_gp+0xfffcc578>
    aee0:	300cd0fa 	srli	r6,r6,3
    aee4:	4806977a 	slli	r3,r9,29
    aee8:	2005883a 	mov	r2,r4
    aeec:	19a2b03a 	or	r17,r3,r6
    aef0:	003fe306 	br	ae80 <_gp+0xfffcc578>
    aef4:	0011883a 	mov	r8,zero
    aef8:	0005883a 	mov	r2,zero
    aefc:	003e3f06 	br	a7fc <_gp+0xfffcbef4>
    af00:	0401ffc4 	movi	r16,2047
    af04:	003e2506 	br	a79c <_gp+0xfffcbe94>
    af08:	0013883a 	mov	r9,zero
    af0c:	003f8406 	br	ad20 <_gp+0xfffcc418>
    af10:	0005883a 	mov	r2,zero
    af14:	0007883a 	mov	r3,zero
    af18:	003e8906 	br	a940 <_gp+0xfffcc038>
    af1c:	197ff804 	addi	r5,r3,-32
    af20:	01000804 	movi	r4,32
    af24:	414ad83a 	srl	r5,r8,r5
    af28:	19002426 	beq	r3,r4,afbc <__adddf3+0x89c>
    af2c:	01001004 	movi	r4,64
    af30:	20c7c83a 	sub	r3,r4,r3
    af34:	40c6983a 	sll	r3,r8,r3
    af38:	1c46b03a 	or	r3,r3,r17
    af3c:	1806c03a 	cmpne	r3,r3,zero
    af40:	28e2b03a 	or	r17,r5,r3
    af44:	0007883a 	mov	r3,zero
    af48:	003f2306 	br	abd8 <_gp+0xfffcc2d0>
    af4c:	0007883a 	mov	r3,zero
    af50:	5811883a 	mov	r8,r11
    af54:	00bfffc4 	movi	r2,-1
    af58:	0401ffc4 	movi	r16,2047
    af5c:	003e7806 	br	a940 <_gp+0xfffcc038>
    af60:	4462b03a 	or	r17,r8,r17
    af64:	8822c03a 	cmpne	r17,r17,zero
    af68:	0009883a 	mov	r4,zero
    af6c:	003fa006 	br	adf0 <_gp+0xfffcc4e8>
    af70:	4811883a 	mov	r8,r9
    af74:	3023883a 	mov	r17,r6
    af78:	0401ffc4 	movi	r16,2047
    af7c:	003e0706 	br	a79c <_gp+0xfffcbe94>
    af80:	4811883a 	mov	r8,r9
    af84:	3023883a 	mov	r17,r6
    af88:	003e0406 	br	a79c <_gp+0xfffcbe94>
    af8c:	21fff804 	addi	r7,r4,-32
    af90:	01400804 	movi	r5,32
    af94:	41ced83a 	srl	r7,r8,r7
    af98:	21400a26 	beq	r4,r5,afc4 <__adddf3+0x8a4>
    af9c:	01401004 	movi	r5,64
    afa0:	2909c83a 	sub	r4,r5,r4
    afa4:	4108983a 	sll	r4,r8,r4
    afa8:	2448b03a 	or	r4,r4,r17
    afac:	2008c03a 	cmpne	r4,r4,zero
    afb0:	3922b03a 	or	r17,r7,r4
    afb4:	0009883a 	mov	r4,zero
    afb8:	003f8d06 	br	adf0 <_gp+0xfffcc4e8>
    afbc:	0007883a 	mov	r3,zero
    afc0:	003fdd06 	br	af38 <_gp+0xfffcc630>
    afc4:	0009883a 	mov	r4,zero
    afc8:	003ff706 	br	afa8 <_gp+0xfffcc6a0>

0000afcc <__divdf3>:
    afcc:	defff204 	addi	sp,sp,-56
    afd0:	dd400915 	stw	r21,36(sp)
    afd4:	282ad53a 	srli	r21,r5,20
    afd8:	dd000815 	stw	r20,32(sp)
    afdc:	2828d7fa 	srli	r20,r5,31
    afe0:	dc000415 	stw	r16,16(sp)
    afe4:	04000434 	movhi	r16,16
    afe8:	df000c15 	stw	fp,48(sp)
    afec:	843fffc4 	addi	r16,r16,-1
    aff0:	dfc00d15 	stw	ra,52(sp)
    aff4:	ddc00b15 	stw	r23,44(sp)
    aff8:	dd800a15 	stw	r22,40(sp)
    affc:	dcc00715 	stw	r19,28(sp)
    b000:	dc800615 	stw	r18,24(sp)
    b004:	dc400515 	stw	r17,20(sp)
    b008:	ad41ffcc 	andi	r21,r21,2047
    b00c:	2c20703a 	and	r16,r5,r16
    b010:	a7003fcc 	andi	fp,r20,255
    b014:	a8006126 	beq	r21,zero,b19c <__divdf3+0x1d0>
    b018:	0081ffc4 	movi	r2,2047
    b01c:	2025883a 	mov	r18,r4
    b020:	a8803726 	beq	r21,r2,b100 <__divdf3+0x134>
    b024:	80800434 	orhi	r2,r16,16
    b028:	100490fa 	slli	r2,r2,3
    b02c:	2020d77a 	srli	r16,r4,29
    b030:	202490fa 	slli	r18,r4,3
    b034:	ad7f0044 	addi	r21,r21,-1023
    b038:	80a0b03a 	or	r16,r16,r2
    b03c:	0027883a 	mov	r19,zero
    b040:	0013883a 	mov	r9,zero
    b044:	3804d53a 	srli	r2,r7,20
    b048:	382cd7fa 	srli	r22,r7,31
    b04c:	04400434 	movhi	r17,16
    b050:	8c7fffc4 	addi	r17,r17,-1
    b054:	1081ffcc 	andi	r2,r2,2047
    b058:	3011883a 	mov	r8,r6
    b05c:	3c62703a 	and	r17,r7,r17
    b060:	b5c03fcc 	andi	r23,r22,255
    b064:	10006c26 	beq	r2,zero,b218 <__divdf3+0x24c>
    b068:	00c1ffc4 	movi	r3,2047
    b06c:	10c06426 	beq	r2,r3,b200 <__divdf3+0x234>
    b070:	88c00434 	orhi	r3,r17,16
    b074:	180690fa 	slli	r3,r3,3
    b078:	3022d77a 	srli	r17,r6,29
    b07c:	301090fa 	slli	r8,r6,3
    b080:	10bf0044 	addi	r2,r2,-1023
    b084:	88e2b03a 	or	r17,r17,r3
    b088:	000f883a 	mov	r7,zero
    b08c:	a58cf03a 	xor	r6,r20,r22
    b090:	3cc8b03a 	or	r4,r7,r19
    b094:	a8abc83a 	sub	r21,r21,r2
    b098:	008003c4 	movi	r2,15
    b09c:	3007883a 	mov	r3,r6
    b0a0:	34c03fcc 	andi	r19,r6,255
    b0a4:	11009036 	bltu	r2,r4,b2e8 <__divdf3+0x31c>
    b0a8:	200890ba 	slli	r4,r4,2
    b0ac:	00800074 	movhi	r2,1
    b0b0:	10ac3004 	addi	r2,r2,-20288
    b0b4:	2089883a 	add	r4,r4,r2
    b0b8:	20800017 	ldw	r2,0(r4)
    b0bc:	1000683a 	jmp	r2
    b0c0:	0000b2e8 	cmpgeui	zero,zero,715
    b0c4:	0000b138 	rdprs	zero,zero,708
    b0c8:	0000b2d8 	cmpnei	zero,zero,715
    b0cc:	0000b12c 	andhi	zero,zero,708
    b0d0:	0000b2d8 	cmpnei	zero,zero,715
    b0d4:	0000b2ac 	andhi	zero,zero,714
    b0d8:	0000b2d8 	cmpnei	zero,zero,715
    b0dc:	0000b12c 	andhi	zero,zero,708
    b0e0:	0000b138 	rdprs	zero,zero,708
    b0e4:	0000b138 	rdprs	zero,zero,708
    b0e8:	0000b2ac 	andhi	zero,zero,714
    b0ec:	0000b12c 	andhi	zero,zero,708
    b0f0:	0000b11c 	xori	zero,zero,708
    b0f4:	0000b11c 	xori	zero,zero,708
    b0f8:	0000b11c 	xori	zero,zero,708
    b0fc:	0000b5cc 	andi	zero,zero,727
    b100:	2404b03a 	or	r2,r4,r16
    b104:	1000661e 	bne	r2,zero,b2a0 <__divdf3+0x2d4>
    b108:	04c00204 	movi	r19,8
    b10c:	0021883a 	mov	r16,zero
    b110:	0025883a 	mov	r18,zero
    b114:	02400084 	movi	r9,2
    b118:	003fca06 	br	b044 <_gp+0xfffcc73c>
    b11c:	8023883a 	mov	r17,r16
    b120:	9011883a 	mov	r8,r18
    b124:	e02f883a 	mov	r23,fp
    b128:	480f883a 	mov	r7,r9
    b12c:	00800084 	movi	r2,2
    b130:	3881311e 	bne	r7,r2,b5f8 <__divdf3+0x62c>
    b134:	b827883a 	mov	r19,r23
    b138:	98c0004c 	andi	r3,r19,1
    b13c:	0081ffc4 	movi	r2,2047
    b140:	000b883a 	mov	r5,zero
    b144:	0025883a 	mov	r18,zero
    b148:	1004953a 	slli	r2,r2,20
    b14c:	18c03fcc 	andi	r3,r3,255
    b150:	04400434 	movhi	r17,16
    b154:	8c7fffc4 	addi	r17,r17,-1
    b158:	180697fa 	slli	r3,r3,31
    b15c:	2c4a703a 	and	r5,r5,r17
    b160:	288ab03a 	or	r5,r5,r2
    b164:	28c6b03a 	or	r3,r5,r3
    b168:	9005883a 	mov	r2,r18
    b16c:	dfc00d17 	ldw	ra,52(sp)
    b170:	df000c17 	ldw	fp,48(sp)
    b174:	ddc00b17 	ldw	r23,44(sp)
    b178:	dd800a17 	ldw	r22,40(sp)
    b17c:	dd400917 	ldw	r21,36(sp)
    b180:	dd000817 	ldw	r20,32(sp)
    b184:	dcc00717 	ldw	r19,28(sp)
    b188:	dc800617 	ldw	r18,24(sp)
    b18c:	dc400517 	ldw	r17,20(sp)
    b190:	dc000417 	ldw	r16,16(sp)
    b194:	dec00e04 	addi	sp,sp,56
    b198:	f800283a 	ret
    b19c:	2404b03a 	or	r2,r4,r16
    b1a0:	2027883a 	mov	r19,r4
    b1a4:	10003926 	beq	r2,zero,b28c <__divdf3+0x2c0>
    b1a8:	80012e26 	beq	r16,zero,b664 <__divdf3+0x698>
    b1ac:	8009883a 	mov	r4,r16
    b1b0:	d9800315 	stw	r6,12(sp)
    b1b4:	d9c00215 	stw	r7,8(sp)
    b1b8:	000cd240 	call	cd24 <__clzsi2>
    b1bc:	d9800317 	ldw	r6,12(sp)
    b1c0:	d9c00217 	ldw	r7,8(sp)
    b1c4:	113ffd44 	addi	r4,r2,-11
    b1c8:	00c00704 	movi	r3,28
    b1cc:	19012116 	blt	r3,r4,b654 <__divdf3+0x688>
    b1d0:	00c00744 	movi	r3,29
    b1d4:	147ffe04 	addi	r17,r2,-8
    b1d8:	1907c83a 	sub	r3,r3,r4
    b1dc:	8460983a 	sll	r16,r16,r17
    b1e0:	98c6d83a 	srl	r3,r19,r3
    b1e4:	9c64983a 	sll	r18,r19,r17
    b1e8:	1c20b03a 	or	r16,r3,r16
    b1ec:	1080fcc4 	addi	r2,r2,1011
    b1f0:	00abc83a 	sub	r21,zero,r2
    b1f4:	0027883a 	mov	r19,zero
    b1f8:	0013883a 	mov	r9,zero
    b1fc:	003f9106 	br	b044 <_gp+0xfffcc73c>
    b200:	3446b03a 	or	r3,r6,r17
    b204:	18001f1e 	bne	r3,zero,b284 <__divdf3+0x2b8>
    b208:	0023883a 	mov	r17,zero
    b20c:	0011883a 	mov	r8,zero
    b210:	01c00084 	movi	r7,2
    b214:	003f9d06 	br	b08c <_gp+0xfffcc784>
    b218:	3446b03a 	or	r3,r6,r17
    b21c:	18001526 	beq	r3,zero,b274 <__divdf3+0x2a8>
    b220:	88011b26 	beq	r17,zero,b690 <__divdf3+0x6c4>
    b224:	8809883a 	mov	r4,r17
    b228:	d9800315 	stw	r6,12(sp)
    b22c:	da400115 	stw	r9,4(sp)
    b230:	000cd240 	call	cd24 <__clzsi2>
    b234:	d9800317 	ldw	r6,12(sp)
    b238:	da400117 	ldw	r9,4(sp)
    b23c:	113ffd44 	addi	r4,r2,-11
    b240:	00c00704 	movi	r3,28
    b244:	19010e16 	blt	r3,r4,b680 <__divdf3+0x6b4>
    b248:	00c00744 	movi	r3,29
    b24c:	123ffe04 	addi	r8,r2,-8
    b250:	1907c83a 	sub	r3,r3,r4
    b254:	8a22983a 	sll	r17,r17,r8
    b258:	30c6d83a 	srl	r3,r6,r3
    b25c:	3210983a 	sll	r8,r6,r8
    b260:	1c62b03a 	or	r17,r3,r17
    b264:	1080fcc4 	addi	r2,r2,1011
    b268:	0085c83a 	sub	r2,zero,r2
    b26c:	000f883a 	mov	r7,zero
    b270:	003f8606 	br	b08c <_gp+0xfffcc784>
    b274:	0023883a 	mov	r17,zero
    b278:	0011883a 	mov	r8,zero
    b27c:	01c00044 	movi	r7,1
    b280:	003f8206 	br	b08c <_gp+0xfffcc784>
    b284:	01c000c4 	movi	r7,3
    b288:	003f8006 	br	b08c <_gp+0xfffcc784>
    b28c:	04c00104 	movi	r19,4
    b290:	0021883a 	mov	r16,zero
    b294:	0025883a 	mov	r18,zero
    b298:	02400044 	movi	r9,1
    b29c:	003f6906 	br	b044 <_gp+0xfffcc73c>
    b2a0:	04c00304 	movi	r19,12
    b2a4:	024000c4 	movi	r9,3
    b2a8:	003f6606 	br	b044 <_gp+0xfffcc73c>
    b2ac:	01400434 	movhi	r5,16
    b2b0:	0007883a 	mov	r3,zero
    b2b4:	297fffc4 	addi	r5,r5,-1
    b2b8:	04bfffc4 	movi	r18,-1
    b2bc:	0081ffc4 	movi	r2,2047
    b2c0:	003fa106 	br	b148 <_gp+0xfffcc840>
    b2c4:	00c00044 	movi	r3,1
    b2c8:	1887c83a 	sub	r3,r3,r2
    b2cc:	01000e04 	movi	r4,56
    b2d0:	20c1210e 	bge	r4,r3,b758 <__divdf3+0x78c>
    b2d4:	98c0004c 	andi	r3,r19,1
    b2d8:	0005883a 	mov	r2,zero
    b2dc:	000b883a 	mov	r5,zero
    b2e0:	0025883a 	mov	r18,zero
    b2e4:	003f9806 	br	b148 <_gp+0xfffcc840>
    b2e8:	8c00fd36 	bltu	r17,r16,b6e0 <__divdf3+0x714>
    b2ec:	8440fb26 	beq	r16,r17,b6dc <__divdf3+0x710>
    b2f0:	8007883a 	mov	r3,r16
    b2f4:	ad7fffc4 	addi	r21,r21,-1
    b2f8:	0021883a 	mov	r16,zero
    b2fc:	4004d63a 	srli	r2,r8,24
    b300:	8822923a 	slli	r17,r17,8
    b304:	1809883a 	mov	r4,r3
    b308:	402c923a 	slli	r22,r8,8
    b30c:	88b8b03a 	or	fp,r17,r2
    b310:	e028d43a 	srli	r20,fp,16
    b314:	d8c00015 	stw	r3,0(sp)
    b318:	e5ffffcc 	andi	r23,fp,65535
    b31c:	a00b883a 	mov	r5,r20
    b320:	00006340 	call	634 <__udivsi3>
    b324:	d8c00017 	ldw	r3,0(sp)
    b328:	a00b883a 	mov	r5,r20
    b32c:	d8800315 	stw	r2,12(sp)
    b330:	1809883a 	mov	r4,r3
    b334:	00006980 	call	698 <__umodsi3>
    b338:	d9800317 	ldw	r6,12(sp)
    b33c:	1006943a 	slli	r3,r2,16
    b340:	9004d43a 	srli	r2,r18,16
    b344:	b9a3383a 	mul	r17,r23,r6
    b348:	10c4b03a 	or	r2,r2,r3
    b34c:	1440062e 	bgeu	r2,r17,b368 <__divdf3+0x39c>
    b350:	1705883a 	add	r2,r2,fp
    b354:	30ffffc4 	addi	r3,r6,-1
    b358:	1700ee36 	bltu	r2,fp,b714 <__divdf3+0x748>
    b35c:	1440ed2e 	bgeu	r2,r17,b714 <__divdf3+0x748>
    b360:	31bfff84 	addi	r6,r6,-2
    b364:	1705883a 	add	r2,r2,fp
    b368:	1463c83a 	sub	r17,r2,r17
    b36c:	a00b883a 	mov	r5,r20
    b370:	8809883a 	mov	r4,r17
    b374:	d9800315 	stw	r6,12(sp)
    b378:	00006340 	call	634 <__udivsi3>
    b37c:	a00b883a 	mov	r5,r20
    b380:	8809883a 	mov	r4,r17
    b384:	d8800215 	stw	r2,8(sp)
    b388:	00006980 	call	698 <__umodsi3>
    b38c:	d9c00217 	ldw	r7,8(sp)
    b390:	1004943a 	slli	r2,r2,16
    b394:	94bfffcc 	andi	r18,r18,65535
    b398:	b9d1383a 	mul	r8,r23,r7
    b39c:	90a4b03a 	or	r18,r18,r2
    b3a0:	d9800317 	ldw	r6,12(sp)
    b3a4:	9200062e 	bgeu	r18,r8,b3c0 <__divdf3+0x3f4>
    b3a8:	9725883a 	add	r18,r18,fp
    b3ac:	38bfffc4 	addi	r2,r7,-1
    b3b0:	9700d636 	bltu	r18,fp,b70c <__divdf3+0x740>
    b3b4:	9200d52e 	bgeu	r18,r8,b70c <__divdf3+0x740>
    b3b8:	39ffff84 	addi	r7,r7,-2
    b3bc:	9725883a 	add	r18,r18,fp
    b3c0:	3004943a 	slli	r2,r6,16
    b3c4:	b012d43a 	srli	r9,r22,16
    b3c8:	b1bfffcc 	andi	r6,r22,65535
    b3cc:	11e2b03a 	or	r17,r2,r7
    b3d0:	8806d43a 	srli	r3,r17,16
    b3d4:	893fffcc 	andi	r4,r17,65535
    b3d8:	218b383a 	mul	r5,r4,r6
    b3dc:	30c5383a 	mul	r2,r6,r3
    b3e0:	2249383a 	mul	r4,r4,r9
    b3e4:	280ed43a 	srli	r7,r5,16
    b3e8:	9225c83a 	sub	r18,r18,r8
    b3ec:	2089883a 	add	r4,r4,r2
    b3f0:	3909883a 	add	r4,r7,r4
    b3f4:	1a47383a 	mul	r3,r3,r9
    b3f8:	2080022e 	bgeu	r4,r2,b404 <__divdf3+0x438>
    b3fc:	00800074 	movhi	r2,1
    b400:	1887883a 	add	r3,r3,r2
    b404:	2004d43a 	srli	r2,r4,16
    b408:	2008943a 	slli	r4,r4,16
    b40c:	297fffcc 	andi	r5,r5,65535
    b410:	10c7883a 	add	r3,r2,r3
    b414:	2149883a 	add	r4,r4,r5
    b418:	90c0a536 	bltu	r18,r3,b6b0 <__divdf3+0x6e4>
    b41c:	90c0bf26 	beq	r18,r3,b71c <__divdf3+0x750>
    b420:	90c7c83a 	sub	r3,r18,r3
    b424:	810fc83a 	sub	r7,r16,r4
    b428:	81e5803a 	cmpltu	r18,r16,r7
    b42c:	1ca5c83a 	sub	r18,r3,r18
    b430:	e480c126 	beq	fp,r18,b738 <__divdf3+0x76c>
    b434:	a00b883a 	mov	r5,r20
    b438:	9009883a 	mov	r4,r18
    b43c:	d9800315 	stw	r6,12(sp)
    b440:	d9c00215 	stw	r7,8(sp)
    b444:	da400115 	stw	r9,4(sp)
    b448:	00006340 	call	634 <__udivsi3>
    b44c:	a00b883a 	mov	r5,r20
    b450:	9009883a 	mov	r4,r18
    b454:	d8800015 	stw	r2,0(sp)
    b458:	00006980 	call	698 <__umodsi3>
    b45c:	d9c00217 	ldw	r7,8(sp)
    b460:	da000017 	ldw	r8,0(sp)
    b464:	1006943a 	slli	r3,r2,16
    b468:	3804d43a 	srli	r2,r7,16
    b46c:	ba21383a 	mul	r16,r23,r8
    b470:	d9800317 	ldw	r6,12(sp)
    b474:	10c4b03a 	or	r2,r2,r3
    b478:	da400117 	ldw	r9,4(sp)
    b47c:	1400062e 	bgeu	r2,r16,b498 <__divdf3+0x4cc>
    b480:	1705883a 	add	r2,r2,fp
    b484:	40ffffc4 	addi	r3,r8,-1
    b488:	1700ad36 	bltu	r2,fp,b740 <__divdf3+0x774>
    b48c:	1400ac2e 	bgeu	r2,r16,b740 <__divdf3+0x774>
    b490:	423fff84 	addi	r8,r8,-2
    b494:	1705883a 	add	r2,r2,fp
    b498:	1421c83a 	sub	r16,r2,r16
    b49c:	a00b883a 	mov	r5,r20
    b4a0:	8009883a 	mov	r4,r16
    b4a4:	d9800315 	stw	r6,12(sp)
    b4a8:	d9c00215 	stw	r7,8(sp)
    b4ac:	da000015 	stw	r8,0(sp)
    b4b0:	da400115 	stw	r9,4(sp)
    b4b4:	00006340 	call	634 <__udivsi3>
    b4b8:	8009883a 	mov	r4,r16
    b4bc:	a00b883a 	mov	r5,r20
    b4c0:	1025883a 	mov	r18,r2
    b4c4:	00006980 	call	698 <__umodsi3>
    b4c8:	d9c00217 	ldw	r7,8(sp)
    b4cc:	1004943a 	slli	r2,r2,16
    b4d0:	bcaf383a 	mul	r23,r23,r18
    b4d4:	393fffcc 	andi	r4,r7,65535
    b4d8:	2088b03a 	or	r4,r4,r2
    b4dc:	d9800317 	ldw	r6,12(sp)
    b4e0:	da000017 	ldw	r8,0(sp)
    b4e4:	da400117 	ldw	r9,4(sp)
    b4e8:	25c0062e 	bgeu	r4,r23,b504 <__divdf3+0x538>
    b4ec:	2709883a 	add	r4,r4,fp
    b4f0:	90bfffc4 	addi	r2,r18,-1
    b4f4:	27009436 	bltu	r4,fp,b748 <__divdf3+0x77c>
    b4f8:	25c0932e 	bgeu	r4,r23,b748 <__divdf3+0x77c>
    b4fc:	94bfff84 	addi	r18,r18,-2
    b500:	2709883a 	add	r4,r4,fp
    b504:	4004943a 	slli	r2,r8,16
    b508:	25efc83a 	sub	r23,r4,r23
    b50c:	1490b03a 	or	r8,r2,r18
    b510:	4008d43a 	srli	r4,r8,16
    b514:	40ffffcc 	andi	r3,r8,65535
    b518:	30c5383a 	mul	r2,r6,r3
    b51c:	1a47383a 	mul	r3,r3,r9
    b520:	310d383a 	mul	r6,r6,r4
    b524:	100ad43a 	srli	r5,r2,16
    b528:	4913383a 	mul	r9,r9,r4
    b52c:	1987883a 	add	r3,r3,r6
    b530:	28c7883a 	add	r3,r5,r3
    b534:	1980022e 	bgeu	r3,r6,b540 <__divdf3+0x574>
    b538:	01000074 	movhi	r4,1
    b53c:	4913883a 	add	r9,r9,r4
    b540:	1808d43a 	srli	r4,r3,16
    b544:	1806943a 	slli	r3,r3,16
    b548:	10bfffcc 	andi	r2,r2,65535
    b54c:	2253883a 	add	r9,r4,r9
    b550:	1887883a 	add	r3,r3,r2
    b554:	ba403836 	bltu	r23,r9,b638 <__divdf3+0x66c>
    b558:	ba403626 	beq	r23,r9,b634 <__divdf3+0x668>
    b55c:	42000054 	ori	r8,r8,1
    b560:	a880ffc4 	addi	r2,r21,1023
    b564:	00bf570e 	bge	zero,r2,b2c4 <_gp+0xfffcc9bc>
    b568:	40c001cc 	andi	r3,r8,7
    b56c:	18000726 	beq	r3,zero,b58c <__divdf3+0x5c0>
    b570:	40c003cc 	andi	r3,r8,15
    b574:	01000104 	movi	r4,4
    b578:	19000426 	beq	r3,r4,b58c <__divdf3+0x5c0>
    b57c:	4107883a 	add	r3,r8,r4
    b580:	1a11803a 	cmpltu	r8,r3,r8
    b584:	8a23883a 	add	r17,r17,r8
    b588:	1811883a 	mov	r8,r3
    b58c:	88c0402c 	andhi	r3,r17,256
    b590:	18000426 	beq	r3,zero,b5a4 <__divdf3+0x5d8>
    b594:	00ffc034 	movhi	r3,65280
    b598:	18ffffc4 	addi	r3,r3,-1
    b59c:	a8810004 	addi	r2,r21,1024
    b5a0:	88e2703a 	and	r17,r17,r3
    b5a4:	00c1ff84 	movi	r3,2046
    b5a8:	18bee316 	blt	r3,r2,b138 <_gp+0xfffcc830>
    b5ac:	8824977a 	slli	r18,r17,29
    b5b0:	4010d0fa 	srli	r8,r8,3
    b5b4:	8822927a 	slli	r17,r17,9
    b5b8:	1081ffcc 	andi	r2,r2,2047
    b5bc:	9224b03a 	or	r18,r18,r8
    b5c0:	880ad33a 	srli	r5,r17,12
    b5c4:	98c0004c 	andi	r3,r19,1
    b5c8:	003edf06 	br	b148 <_gp+0xfffcc840>
    b5cc:	8080022c 	andhi	r2,r16,8
    b5d0:	10001226 	beq	r2,zero,b61c <__divdf3+0x650>
    b5d4:	8880022c 	andhi	r2,r17,8
    b5d8:	1000101e 	bne	r2,zero,b61c <__divdf3+0x650>
    b5dc:	00800434 	movhi	r2,16
    b5e0:	89400234 	orhi	r5,r17,8
    b5e4:	10bfffc4 	addi	r2,r2,-1
    b5e8:	b007883a 	mov	r3,r22
    b5ec:	288a703a 	and	r5,r5,r2
    b5f0:	4025883a 	mov	r18,r8
    b5f4:	003f3106 	br	b2bc <_gp+0xfffcc9b4>
    b5f8:	008000c4 	movi	r2,3
    b5fc:	3880a626 	beq	r7,r2,b898 <__divdf3+0x8cc>
    b600:	00800044 	movi	r2,1
    b604:	3880521e 	bne	r7,r2,b750 <__divdf3+0x784>
    b608:	b807883a 	mov	r3,r23
    b60c:	0005883a 	mov	r2,zero
    b610:	000b883a 	mov	r5,zero
    b614:	0025883a 	mov	r18,zero
    b618:	003ecb06 	br	b148 <_gp+0xfffcc840>
    b61c:	00800434 	movhi	r2,16
    b620:	81400234 	orhi	r5,r16,8
    b624:	10bfffc4 	addi	r2,r2,-1
    b628:	a007883a 	mov	r3,r20
    b62c:	288a703a 	and	r5,r5,r2
    b630:	003f2206 	br	b2bc <_gp+0xfffcc9b4>
    b634:	183fca26 	beq	r3,zero,b560 <_gp+0xfffccc58>
    b638:	e5ef883a 	add	r23,fp,r23
    b63c:	40bfffc4 	addi	r2,r8,-1
    b640:	bf00392e 	bgeu	r23,fp,b728 <__divdf3+0x75c>
    b644:	1011883a 	mov	r8,r2
    b648:	ba7fc41e 	bne	r23,r9,b55c <_gp+0xfffccc54>
    b64c:	b0ffc31e 	bne	r22,r3,b55c <_gp+0xfffccc54>
    b650:	003fc306 	br	b560 <_gp+0xfffccc58>
    b654:	143ff604 	addi	r16,r2,-40
    b658:	9c20983a 	sll	r16,r19,r16
    b65c:	0025883a 	mov	r18,zero
    b660:	003ee206 	br	b1ec <_gp+0xfffcc8e4>
    b664:	d9800315 	stw	r6,12(sp)
    b668:	d9c00215 	stw	r7,8(sp)
    b66c:	000cd240 	call	cd24 <__clzsi2>
    b670:	10800804 	addi	r2,r2,32
    b674:	d9c00217 	ldw	r7,8(sp)
    b678:	d9800317 	ldw	r6,12(sp)
    b67c:	003ed106 	br	b1c4 <_gp+0xfffcc8bc>
    b680:	147ff604 	addi	r17,r2,-40
    b684:	3462983a 	sll	r17,r6,r17
    b688:	0011883a 	mov	r8,zero
    b68c:	003ef506 	br	b264 <_gp+0xfffcc95c>
    b690:	3009883a 	mov	r4,r6
    b694:	d9800315 	stw	r6,12(sp)
    b698:	da400115 	stw	r9,4(sp)
    b69c:	000cd240 	call	cd24 <__clzsi2>
    b6a0:	10800804 	addi	r2,r2,32
    b6a4:	da400117 	ldw	r9,4(sp)
    b6a8:	d9800317 	ldw	r6,12(sp)
    b6ac:	003ee306 	br	b23c <_gp+0xfffcc934>
    b6b0:	85a1883a 	add	r16,r16,r22
    b6b4:	8585803a 	cmpltu	r2,r16,r22
    b6b8:	1705883a 	add	r2,r2,fp
    b6bc:	14a5883a 	add	r18,r2,r18
    b6c0:	88bfffc4 	addi	r2,r17,-1
    b6c4:	e4800c2e 	bgeu	fp,r18,b6f8 <__divdf3+0x72c>
    b6c8:	90c03e36 	bltu	r18,r3,b7c4 <__divdf3+0x7f8>
    b6cc:	1c806926 	beq	r3,r18,b874 <__divdf3+0x8a8>
    b6d0:	90c7c83a 	sub	r3,r18,r3
    b6d4:	1023883a 	mov	r17,r2
    b6d8:	003f5206 	br	b424 <_gp+0xfffccb1c>
    b6dc:	923f0436 	bltu	r18,r8,b2f0 <_gp+0xfffcc9e8>
    b6e0:	800897fa 	slli	r4,r16,31
    b6e4:	9004d07a 	srli	r2,r18,1
    b6e8:	8006d07a 	srli	r3,r16,1
    b6ec:	902097fa 	slli	r16,r18,31
    b6f0:	20a4b03a 	or	r18,r4,r2
    b6f4:	003f0106 	br	b2fc <_gp+0xfffcc9f4>
    b6f8:	e4bff51e 	bne	fp,r18,b6d0 <_gp+0xfffccdc8>
    b6fc:	85bff22e 	bgeu	r16,r22,b6c8 <_gp+0xfffccdc0>
    b700:	e0c7c83a 	sub	r3,fp,r3
    b704:	1023883a 	mov	r17,r2
    b708:	003f4606 	br	b424 <_gp+0xfffccb1c>
    b70c:	100f883a 	mov	r7,r2
    b710:	003f2b06 	br	b3c0 <_gp+0xfffccab8>
    b714:	180d883a 	mov	r6,r3
    b718:	003f1306 	br	b368 <_gp+0xfffcca60>
    b71c:	813fe436 	bltu	r16,r4,b6b0 <_gp+0xfffccda8>
    b720:	0007883a 	mov	r3,zero
    b724:	003f3f06 	br	b424 <_gp+0xfffccb1c>
    b728:	ba402c36 	bltu	r23,r9,b7dc <__divdf3+0x810>
    b72c:	4dc05426 	beq	r9,r23,b880 <__divdf3+0x8b4>
    b730:	1011883a 	mov	r8,r2
    b734:	003f8906 	br	b55c <_gp+0xfffccc54>
    b738:	023fffc4 	movi	r8,-1
    b73c:	003f8806 	br	b560 <_gp+0xfffccc58>
    b740:	1811883a 	mov	r8,r3
    b744:	003f5406 	br	b498 <_gp+0xfffccb90>
    b748:	1025883a 	mov	r18,r2
    b74c:	003f6d06 	br	b504 <_gp+0xfffccbfc>
    b750:	b827883a 	mov	r19,r23
    b754:	003f8206 	br	b560 <_gp+0xfffccc58>
    b758:	010007c4 	movi	r4,31
    b75c:	20c02616 	blt	r4,r3,b7f8 <__divdf3+0x82c>
    b760:	00800804 	movi	r2,32
    b764:	10c5c83a 	sub	r2,r2,r3
    b768:	888a983a 	sll	r5,r17,r2
    b76c:	40c8d83a 	srl	r4,r8,r3
    b770:	4084983a 	sll	r2,r8,r2
    b774:	88e2d83a 	srl	r17,r17,r3
    b778:	2906b03a 	or	r3,r5,r4
    b77c:	1004c03a 	cmpne	r2,r2,zero
    b780:	1886b03a 	or	r3,r3,r2
    b784:	188001cc 	andi	r2,r3,7
    b788:	10000726 	beq	r2,zero,b7a8 <__divdf3+0x7dc>
    b78c:	188003cc 	andi	r2,r3,15
    b790:	01000104 	movi	r4,4
    b794:	11000426 	beq	r2,r4,b7a8 <__divdf3+0x7dc>
    b798:	1805883a 	mov	r2,r3
    b79c:	10c00104 	addi	r3,r2,4
    b7a0:	1885803a 	cmpltu	r2,r3,r2
    b7a4:	88a3883a 	add	r17,r17,r2
    b7a8:	8880202c 	andhi	r2,r17,128
    b7ac:	10002726 	beq	r2,zero,b84c <__divdf3+0x880>
    b7b0:	98c0004c 	andi	r3,r19,1
    b7b4:	00800044 	movi	r2,1
    b7b8:	000b883a 	mov	r5,zero
    b7bc:	0025883a 	mov	r18,zero
    b7c0:	003e6106 	br	b148 <_gp+0xfffcc840>
    b7c4:	85a1883a 	add	r16,r16,r22
    b7c8:	8585803a 	cmpltu	r2,r16,r22
    b7cc:	1705883a 	add	r2,r2,fp
    b7d0:	14a5883a 	add	r18,r2,r18
    b7d4:	8c7fff84 	addi	r17,r17,-2
    b7d8:	003f1106 	br	b420 <_gp+0xfffccb18>
    b7dc:	b589883a 	add	r4,r22,r22
    b7e0:	25ad803a 	cmpltu	r22,r4,r22
    b7e4:	b739883a 	add	fp,r22,fp
    b7e8:	40bfff84 	addi	r2,r8,-2
    b7ec:	bf2f883a 	add	r23,r23,fp
    b7f0:	202d883a 	mov	r22,r4
    b7f4:	003f9306 	br	b644 <_gp+0xfffccd3c>
    b7f8:	013ff844 	movi	r4,-31
    b7fc:	2085c83a 	sub	r2,r4,r2
    b800:	8888d83a 	srl	r4,r17,r2
    b804:	00800804 	movi	r2,32
    b808:	18802126 	beq	r3,r2,b890 <__divdf3+0x8c4>
    b80c:	00801004 	movi	r2,64
    b810:	10c5c83a 	sub	r2,r2,r3
    b814:	8884983a 	sll	r2,r17,r2
    b818:	1204b03a 	or	r2,r2,r8
    b81c:	1004c03a 	cmpne	r2,r2,zero
    b820:	2084b03a 	or	r2,r4,r2
    b824:	144001cc 	andi	r17,r2,7
    b828:	88000d1e 	bne	r17,zero,b860 <__divdf3+0x894>
    b82c:	000b883a 	mov	r5,zero
    b830:	1024d0fa 	srli	r18,r2,3
    b834:	98c0004c 	andi	r3,r19,1
    b838:	0005883a 	mov	r2,zero
    b83c:	9464b03a 	or	r18,r18,r17
    b840:	003e4106 	br	b148 <_gp+0xfffcc840>
    b844:	1007883a 	mov	r3,r2
    b848:	0023883a 	mov	r17,zero
    b84c:	880a927a 	slli	r5,r17,9
    b850:	1805883a 	mov	r2,r3
    b854:	8822977a 	slli	r17,r17,29
    b858:	280ad33a 	srli	r5,r5,12
    b85c:	003ff406 	br	b830 <_gp+0xfffccf28>
    b860:	10c003cc 	andi	r3,r2,15
    b864:	01000104 	movi	r4,4
    b868:	193ff626 	beq	r3,r4,b844 <_gp+0xfffccf3c>
    b86c:	0023883a 	mov	r17,zero
    b870:	003fca06 	br	b79c <_gp+0xfffcce94>
    b874:	813fd336 	bltu	r16,r4,b7c4 <_gp+0xfffccebc>
    b878:	1023883a 	mov	r17,r2
    b87c:	003fa806 	br	b720 <_gp+0xfffcce18>
    b880:	b0ffd636 	bltu	r22,r3,b7dc <_gp+0xfffcced4>
    b884:	1011883a 	mov	r8,r2
    b888:	b0ff341e 	bne	r22,r3,b55c <_gp+0xfffccc54>
    b88c:	003f3406 	br	b560 <_gp+0xfffccc58>
    b890:	0005883a 	mov	r2,zero
    b894:	003fe006 	br	b818 <_gp+0xfffccf10>
    b898:	00800434 	movhi	r2,16
    b89c:	89400234 	orhi	r5,r17,8
    b8a0:	10bfffc4 	addi	r2,r2,-1
    b8a4:	b807883a 	mov	r3,r23
    b8a8:	288a703a 	and	r5,r5,r2
    b8ac:	4025883a 	mov	r18,r8
    b8b0:	003e8206 	br	b2bc <_gp+0xfffcc9b4>

0000b8b4 <__eqdf2>:
    b8b4:	2804d53a 	srli	r2,r5,20
    b8b8:	3806d53a 	srli	r3,r7,20
    b8bc:	02000434 	movhi	r8,16
    b8c0:	423fffc4 	addi	r8,r8,-1
    b8c4:	1081ffcc 	andi	r2,r2,2047
    b8c8:	0281ffc4 	movi	r10,2047
    b8cc:	2a12703a 	and	r9,r5,r8
    b8d0:	18c1ffcc 	andi	r3,r3,2047
    b8d4:	3a10703a 	and	r8,r7,r8
    b8d8:	280ad7fa 	srli	r5,r5,31
    b8dc:	380ed7fa 	srli	r7,r7,31
    b8e0:	12801026 	beq	r2,r10,b924 <__eqdf2+0x70>
    b8e4:	0281ffc4 	movi	r10,2047
    b8e8:	1a800a26 	beq	r3,r10,b914 <__eqdf2+0x60>
    b8ec:	10c00226 	beq	r2,r3,b8f8 <__eqdf2+0x44>
    b8f0:	00800044 	movi	r2,1
    b8f4:	f800283a 	ret
    b8f8:	4a3ffd1e 	bne	r9,r8,b8f0 <_gp+0xfffccfe8>
    b8fc:	21bffc1e 	bne	r4,r6,b8f0 <_gp+0xfffccfe8>
    b900:	29c00c26 	beq	r5,r7,b934 <__eqdf2+0x80>
    b904:	103ffa1e 	bne	r2,zero,b8f0 <_gp+0xfffccfe8>
    b908:	2244b03a 	or	r2,r4,r9
    b90c:	1004c03a 	cmpne	r2,r2,zero
    b910:	f800283a 	ret
    b914:	3214b03a 	or	r10,r6,r8
    b918:	503ff426 	beq	r10,zero,b8ec <_gp+0xfffccfe4>
    b91c:	00800044 	movi	r2,1
    b920:	f800283a 	ret
    b924:	2254b03a 	or	r10,r4,r9
    b928:	503fee26 	beq	r10,zero,b8e4 <_gp+0xfffccfdc>
    b92c:	00800044 	movi	r2,1
    b930:	f800283a 	ret
    b934:	0005883a 	mov	r2,zero
    b938:	f800283a 	ret

0000b93c <__gedf2>:
    b93c:	2804d53a 	srli	r2,r5,20
    b940:	3806d53a 	srli	r3,r7,20
    b944:	02000434 	movhi	r8,16
    b948:	423fffc4 	addi	r8,r8,-1
    b94c:	1081ffcc 	andi	r2,r2,2047
    b950:	0241ffc4 	movi	r9,2047
    b954:	2a14703a 	and	r10,r5,r8
    b958:	18c1ffcc 	andi	r3,r3,2047
    b95c:	3a10703a 	and	r8,r7,r8
    b960:	280ad7fa 	srli	r5,r5,31
    b964:	380ed7fa 	srli	r7,r7,31
    b968:	12401d26 	beq	r2,r9,b9e0 <__gedf2+0xa4>
    b96c:	0241ffc4 	movi	r9,2047
    b970:	1a401226 	beq	r3,r9,b9bc <__gedf2+0x80>
    b974:	1000081e 	bne	r2,zero,b998 <__gedf2+0x5c>
    b978:	2296b03a 	or	r11,r4,r10
    b97c:	5813003a 	cmpeq	r9,r11,zero
    b980:	1800091e 	bne	r3,zero,b9a8 <__gedf2+0x6c>
    b984:	3218b03a 	or	r12,r6,r8
    b988:	6000071e 	bne	r12,zero,b9a8 <__gedf2+0x6c>
    b98c:	0005883a 	mov	r2,zero
    b990:	5800101e 	bne	r11,zero,b9d4 <__gedf2+0x98>
    b994:	f800283a 	ret
    b998:	18000c1e 	bne	r3,zero,b9cc <__gedf2+0x90>
    b99c:	3212b03a 	or	r9,r6,r8
    b9a0:	48000c26 	beq	r9,zero,b9d4 <__gedf2+0x98>
    b9a4:	0013883a 	mov	r9,zero
    b9a8:	39c03fcc 	andi	r7,r7,255
    b9ac:	48000826 	beq	r9,zero,b9d0 <__gedf2+0x94>
    b9b0:	38000926 	beq	r7,zero,b9d8 <__gedf2+0x9c>
    b9b4:	00800044 	movi	r2,1
    b9b8:	f800283a 	ret
    b9bc:	3212b03a 	or	r9,r6,r8
    b9c0:	483fec26 	beq	r9,zero,b974 <_gp+0xfffcd06c>
    b9c4:	00bfff84 	movi	r2,-2
    b9c8:	f800283a 	ret
    b9cc:	39c03fcc 	andi	r7,r7,255
    b9d0:	29c00626 	beq	r5,r7,b9ec <__gedf2+0xb0>
    b9d4:	283ff726 	beq	r5,zero,b9b4 <_gp+0xfffcd0ac>
    b9d8:	00bfffc4 	movi	r2,-1
    b9dc:	f800283a 	ret
    b9e0:	2292b03a 	or	r9,r4,r10
    b9e4:	483fe126 	beq	r9,zero,b96c <_gp+0xfffcd064>
    b9e8:	003ff606 	br	b9c4 <_gp+0xfffcd0bc>
    b9ec:	18bff916 	blt	r3,r2,b9d4 <_gp+0xfffcd0cc>
    b9f0:	10c00316 	blt	r2,r3,ba00 <__gedf2+0xc4>
    b9f4:	42bff736 	bltu	r8,r10,b9d4 <_gp+0xfffcd0cc>
    b9f8:	52000326 	beq	r10,r8,ba08 <__gedf2+0xcc>
    b9fc:	5200042e 	bgeu	r10,r8,ba10 <__gedf2+0xd4>
    ba00:	283fec1e 	bne	r5,zero,b9b4 <_gp+0xfffcd0ac>
    ba04:	003ff406 	br	b9d8 <_gp+0xfffcd0d0>
    ba08:	313ff236 	bltu	r6,r4,b9d4 <_gp+0xfffcd0cc>
    ba0c:	21bffc36 	bltu	r4,r6,ba00 <_gp+0xfffcd0f8>
    ba10:	0005883a 	mov	r2,zero
    ba14:	f800283a 	ret

0000ba18 <__ledf2>:
    ba18:	2804d53a 	srli	r2,r5,20
    ba1c:	3810d53a 	srli	r8,r7,20
    ba20:	00c00434 	movhi	r3,16
    ba24:	18ffffc4 	addi	r3,r3,-1
    ba28:	1081ffcc 	andi	r2,r2,2047
    ba2c:	0241ffc4 	movi	r9,2047
    ba30:	28d4703a 	and	r10,r5,r3
    ba34:	4201ffcc 	andi	r8,r8,2047
    ba38:	38c6703a 	and	r3,r7,r3
    ba3c:	280ad7fa 	srli	r5,r5,31
    ba40:	380ed7fa 	srli	r7,r7,31
    ba44:	12401f26 	beq	r2,r9,bac4 <__ledf2+0xac>
    ba48:	0241ffc4 	movi	r9,2047
    ba4c:	42401426 	beq	r8,r9,baa0 <__ledf2+0x88>
    ba50:	1000091e 	bne	r2,zero,ba78 <__ledf2+0x60>
    ba54:	2296b03a 	or	r11,r4,r10
    ba58:	5813003a 	cmpeq	r9,r11,zero
    ba5c:	29403fcc 	andi	r5,r5,255
    ba60:	40000a1e 	bne	r8,zero,ba8c <__ledf2+0x74>
    ba64:	30d8b03a 	or	r12,r6,r3
    ba68:	6000081e 	bne	r12,zero,ba8c <__ledf2+0x74>
    ba6c:	0005883a 	mov	r2,zero
    ba70:	5800111e 	bne	r11,zero,bab8 <__ledf2+0xa0>
    ba74:	f800283a 	ret
    ba78:	29403fcc 	andi	r5,r5,255
    ba7c:	40000c1e 	bne	r8,zero,bab0 <__ledf2+0x98>
    ba80:	30d2b03a 	or	r9,r6,r3
    ba84:	48000c26 	beq	r9,zero,bab8 <__ledf2+0xa0>
    ba88:	0013883a 	mov	r9,zero
    ba8c:	39c03fcc 	andi	r7,r7,255
    ba90:	48000826 	beq	r9,zero,bab4 <__ledf2+0x9c>
    ba94:	38001126 	beq	r7,zero,badc <__ledf2+0xc4>
    ba98:	00800044 	movi	r2,1
    ba9c:	f800283a 	ret
    baa0:	30d2b03a 	or	r9,r6,r3
    baa4:	483fea26 	beq	r9,zero,ba50 <_gp+0xfffcd148>
    baa8:	00800084 	movi	r2,2
    baac:	f800283a 	ret
    bab0:	39c03fcc 	andi	r7,r7,255
    bab4:	39400726 	beq	r7,r5,bad4 <__ledf2+0xbc>
    bab8:	2800081e 	bne	r5,zero,badc <__ledf2+0xc4>
    babc:	00800044 	movi	r2,1
    bac0:	f800283a 	ret
    bac4:	2292b03a 	or	r9,r4,r10
    bac8:	483fdf26 	beq	r9,zero,ba48 <_gp+0xfffcd140>
    bacc:	00800084 	movi	r2,2
    bad0:	f800283a 	ret
    bad4:	4080030e 	bge	r8,r2,bae4 <__ledf2+0xcc>
    bad8:	383fef26 	beq	r7,zero,ba98 <_gp+0xfffcd190>
    badc:	00bfffc4 	movi	r2,-1
    bae0:	f800283a 	ret
    bae4:	123feb16 	blt	r2,r8,ba94 <_gp+0xfffcd18c>
    bae8:	1abff336 	bltu	r3,r10,bab8 <_gp+0xfffcd1b0>
    baec:	50c00326 	beq	r10,r3,bafc <__ledf2+0xe4>
    baf0:	50c0042e 	bgeu	r10,r3,bb04 <__ledf2+0xec>
    baf4:	283fe81e 	bne	r5,zero,ba98 <_gp+0xfffcd190>
    baf8:	003ff806 	br	badc <_gp+0xfffcd1d4>
    bafc:	313fee36 	bltu	r6,r4,bab8 <_gp+0xfffcd1b0>
    bb00:	21bffc36 	bltu	r4,r6,baf4 <_gp+0xfffcd1ec>
    bb04:	0005883a 	mov	r2,zero
    bb08:	f800283a 	ret

0000bb0c <__muldf3>:
    bb0c:	defff304 	addi	sp,sp,-52
    bb10:	2804d53a 	srli	r2,r5,20
    bb14:	dd800915 	stw	r22,36(sp)
    bb18:	282cd7fa 	srli	r22,r5,31
    bb1c:	dc000315 	stw	r16,12(sp)
    bb20:	04000434 	movhi	r16,16
    bb24:	dd400815 	stw	r21,32(sp)
    bb28:	dc800515 	stw	r18,20(sp)
    bb2c:	843fffc4 	addi	r16,r16,-1
    bb30:	dfc00c15 	stw	ra,48(sp)
    bb34:	df000b15 	stw	fp,44(sp)
    bb38:	ddc00a15 	stw	r23,40(sp)
    bb3c:	dd000715 	stw	r20,28(sp)
    bb40:	dcc00615 	stw	r19,24(sp)
    bb44:	dc400415 	stw	r17,16(sp)
    bb48:	1481ffcc 	andi	r18,r2,2047
    bb4c:	2c20703a 	and	r16,r5,r16
    bb50:	b02b883a 	mov	r21,r22
    bb54:	b2403fcc 	andi	r9,r22,255
    bb58:	90006026 	beq	r18,zero,bcdc <__muldf3+0x1d0>
    bb5c:	0081ffc4 	movi	r2,2047
    bb60:	2029883a 	mov	r20,r4
    bb64:	90803626 	beq	r18,r2,bc40 <__muldf3+0x134>
    bb68:	80800434 	orhi	r2,r16,16
    bb6c:	100490fa 	slli	r2,r2,3
    bb70:	2020d77a 	srli	r16,r4,29
    bb74:	202890fa 	slli	r20,r4,3
    bb78:	94bf0044 	addi	r18,r18,-1023
    bb7c:	80a0b03a 	or	r16,r16,r2
    bb80:	0027883a 	mov	r19,zero
    bb84:	0039883a 	mov	fp,zero
    bb88:	3804d53a 	srli	r2,r7,20
    bb8c:	382ed7fa 	srli	r23,r7,31
    bb90:	04400434 	movhi	r17,16
    bb94:	8c7fffc4 	addi	r17,r17,-1
    bb98:	1081ffcc 	andi	r2,r2,2047
    bb9c:	3011883a 	mov	r8,r6
    bba0:	3c62703a 	and	r17,r7,r17
    bba4:	ba803fcc 	andi	r10,r23,255
    bba8:	10006d26 	beq	r2,zero,bd60 <__muldf3+0x254>
    bbac:	00c1ffc4 	movi	r3,2047
    bbb0:	10c06526 	beq	r2,r3,bd48 <__muldf3+0x23c>
    bbb4:	88c00434 	orhi	r3,r17,16
    bbb8:	180690fa 	slli	r3,r3,3
    bbbc:	3022d77a 	srli	r17,r6,29
    bbc0:	301090fa 	slli	r8,r6,3
    bbc4:	10bf0044 	addi	r2,r2,-1023
    bbc8:	88e2b03a 	or	r17,r17,r3
    bbcc:	000b883a 	mov	r5,zero
    bbd0:	9085883a 	add	r2,r18,r2
    bbd4:	2cc8b03a 	or	r4,r5,r19
    bbd8:	00c003c4 	movi	r3,15
    bbdc:	bdacf03a 	xor	r22,r23,r22
    bbe0:	12c00044 	addi	r11,r2,1
    bbe4:	19009936 	bltu	r3,r4,be4c <__muldf3+0x340>
    bbe8:	200890ba 	slli	r4,r4,2
    bbec:	00c00074 	movhi	r3,1
    bbf0:	18ef0004 	addi	r3,r3,-17408
    bbf4:	20c9883a 	add	r4,r4,r3
    bbf8:	20c00017 	ldw	r3,0(r4)
    bbfc:	1800683a 	jmp	r3
    bc00:	0000be4c 	andi	zero,zero,761
    bc04:	0000bc60 	cmpeqi	zero,zero,753
    bc08:	0000bc60 	cmpeqi	zero,zero,753
    bc0c:	0000bc5c 	xori	zero,zero,753
    bc10:	0000be28 	cmpgeui	zero,zero,760
    bc14:	0000be28 	cmpgeui	zero,zero,760
    bc18:	0000be10 	cmplti	zero,zero,760
    bc1c:	0000bc5c 	xori	zero,zero,753
    bc20:	0000be28 	cmpgeui	zero,zero,760
    bc24:	0000be10 	cmplti	zero,zero,760
    bc28:	0000be28 	cmpgeui	zero,zero,760
    bc2c:	0000bc5c 	xori	zero,zero,753
    bc30:	0000be38 	rdprs	zero,zero,760
    bc34:	0000be38 	rdprs	zero,zero,760
    bc38:	0000be38 	rdprs	zero,zero,760
    bc3c:	0000c054 	movui	zero,769
    bc40:	2404b03a 	or	r2,r4,r16
    bc44:	10006f1e 	bne	r2,zero,be04 <__muldf3+0x2f8>
    bc48:	04c00204 	movi	r19,8
    bc4c:	0021883a 	mov	r16,zero
    bc50:	0029883a 	mov	r20,zero
    bc54:	07000084 	movi	fp,2
    bc58:	003fcb06 	br	bb88 <_gp+0xfffcd280>
    bc5c:	502d883a 	mov	r22,r10
    bc60:	00800084 	movi	r2,2
    bc64:	28805726 	beq	r5,r2,bdc4 <__muldf3+0x2b8>
    bc68:	008000c4 	movi	r2,3
    bc6c:	28816626 	beq	r5,r2,c208 <__muldf3+0x6fc>
    bc70:	00800044 	movi	r2,1
    bc74:	2881411e 	bne	r5,r2,c17c <__muldf3+0x670>
    bc78:	b02b883a 	mov	r21,r22
    bc7c:	0005883a 	mov	r2,zero
    bc80:	000b883a 	mov	r5,zero
    bc84:	0029883a 	mov	r20,zero
    bc88:	1004953a 	slli	r2,r2,20
    bc8c:	a8c03fcc 	andi	r3,r21,255
    bc90:	04400434 	movhi	r17,16
    bc94:	8c7fffc4 	addi	r17,r17,-1
    bc98:	180697fa 	slli	r3,r3,31
    bc9c:	2c4a703a 	and	r5,r5,r17
    bca0:	288ab03a 	or	r5,r5,r2
    bca4:	28c6b03a 	or	r3,r5,r3
    bca8:	a005883a 	mov	r2,r20
    bcac:	dfc00c17 	ldw	ra,48(sp)
    bcb0:	df000b17 	ldw	fp,44(sp)
    bcb4:	ddc00a17 	ldw	r23,40(sp)
    bcb8:	dd800917 	ldw	r22,36(sp)
    bcbc:	dd400817 	ldw	r21,32(sp)
    bcc0:	dd000717 	ldw	r20,28(sp)
    bcc4:	dcc00617 	ldw	r19,24(sp)
    bcc8:	dc800517 	ldw	r18,20(sp)
    bccc:	dc400417 	ldw	r17,16(sp)
    bcd0:	dc000317 	ldw	r16,12(sp)
    bcd4:	dec00d04 	addi	sp,sp,52
    bcd8:	f800283a 	ret
    bcdc:	2404b03a 	or	r2,r4,r16
    bce0:	2027883a 	mov	r19,r4
    bce4:	10004226 	beq	r2,zero,bdf0 <__muldf3+0x2e4>
    bce8:	8000fc26 	beq	r16,zero,c0dc <__muldf3+0x5d0>
    bcec:	8009883a 	mov	r4,r16
    bcf0:	d9800215 	stw	r6,8(sp)
    bcf4:	d9c00015 	stw	r7,0(sp)
    bcf8:	da400115 	stw	r9,4(sp)
    bcfc:	000cd240 	call	cd24 <__clzsi2>
    bd00:	d9800217 	ldw	r6,8(sp)
    bd04:	d9c00017 	ldw	r7,0(sp)
    bd08:	da400117 	ldw	r9,4(sp)
    bd0c:	113ffd44 	addi	r4,r2,-11
    bd10:	00c00704 	movi	r3,28
    bd14:	1900ed16 	blt	r3,r4,c0cc <__muldf3+0x5c0>
    bd18:	00c00744 	movi	r3,29
    bd1c:	147ffe04 	addi	r17,r2,-8
    bd20:	1907c83a 	sub	r3,r3,r4
    bd24:	8460983a 	sll	r16,r16,r17
    bd28:	98c6d83a 	srl	r3,r19,r3
    bd2c:	9c68983a 	sll	r20,r19,r17
    bd30:	1c20b03a 	or	r16,r3,r16
    bd34:	1080fcc4 	addi	r2,r2,1011
    bd38:	00a5c83a 	sub	r18,zero,r2
    bd3c:	0027883a 	mov	r19,zero
    bd40:	0039883a 	mov	fp,zero
    bd44:	003f9006 	br	bb88 <_gp+0xfffcd280>
    bd48:	3446b03a 	or	r3,r6,r17
    bd4c:	1800261e 	bne	r3,zero,bde8 <__muldf3+0x2dc>
    bd50:	0023883a 	mov	r17,zero
    bd54:	0011883a 	mov	r8,zero
    bd58:	01400084 	movi	r5,2
    bd5c:	003f9c06 	br	bbd0 <_gp+0xfffcd2c8>
    bd60:	3446b03a 	or	r3,r6,r17
    bd64:	18001c26 	beq	r3,zero,bdd8 <__muldf3+0x2cc>
    bd68:	8800ce26 	beq	r17,zero,c0a4 <__muldf3+0x598>
    bd6c:	8809883a 	mov	r4,r17
    bd70:	d9800215 	stw	r6,8(sp)
    bd74:	da400115 	stw	r9,4(sp)
    bd78:	da800015 	stw	r10,0(sp)
    bd7c:	000cd240 	call	cd24 <__clzsi2>
    bd80:	d9800217 	ldw	r6,8(sp)
    bd84:	da400117 	ldw	r9,4(sp)
    bd88:	da800017 	ldw	r10,0(sp)
    bd8c:	113ffd44 	addi	r4,r2,-11
    bd90:	00c00704 	movi	r3,28
    bd94:	1900bf16 	blt	r3,r4,c094 <__muldf3+0x588>
    bd98:	00c00744 	movi	r3,29
    bd9c:	123ffe04 	addi	r8,r2,-8
    bda0:	1907c83a 	sub	r3,r3,r4
    bda4:	8a22983a 	sll	r17,r17,r8
    bda8:	30c6d83a 	srl	r3,r6,r3
    bdac:	3210983a 	sll	r8,r6,r8
    bdb0:	1c62b03a 	or	r17,r3,r17
    bdb4:	1080fcc4 	addi	r2,r2,1011
    bdb8:	0085c83a 	sub	r2,zero,r2
    bdbc:	000b883a 	mov	r5,zero
    bdc0:	003f8306 	br	bbd0 <_gp+0xfffcd2c8>
    bdc4:	b02b883a 	mov	r21,r22
    bdc8:	0081ffc4 	movi	r2,2047
    bdcc:	000b883a 	mov	r5,zero
    bdd0:	0029883a 	mov	r20,zero
    bdd4:	003fac06 	br	bc88 <_gp+0xfffcd380>
    bdd8:	0023883a 	mov	r17,zero
    bddc:	0011883a 	mov	r8,zero
    bde0:	01400044 	movi	r5,1
    bde4:	003f7a06 	br	bbd0 <_gp+0xfffcd2c8>
    bde8:	014000c4 	movi	r5,3
    bdec:	003f7806 	br	bbd0 <_gp+0xfffcd2c8>
    bdf0:	04c00104 	movi	r19,4
    bdf4:	0021883a 	mov	r16,zero
    bdf8:	0029883a 	mov	r20,zero
    bdfc:	07000044 	movi	fp,1
    be00:	003f6106 	br	bb88 <_gp+0xfffcd280>
    be04:	04c00304 	movi	r19,12
    be08:	070000c4 	movi	fp,3
    be0c:	003f5e06 	br	bb88 <_gp+0xfffcd280>
    be10:	01400434 	movhi	r5,16
    be14:	002b883a 	mov	r21,zero
    be18:	297fffc4 	addi	r5,r5,-1
    be1c:	053fffc4 	movi	r20,-1
    be20:	0081ffc4 	movi	r2,2047
    be24:	003f9806 	br	bc88 <_gp+0xfffcd380>
    be28:	8023883a 	mov	r17,r16
    be2c:	a011883a 	mov	r8,r20
    be30:	e00b883a 	mov	r5,fp
    be34:	003f8a06 	br	bc60 <_gp+0xfffcd358>
    be38:	8023883a 	mov	r17,r16
    be3c:	a011883a 	mov	r8,r20
    be40:	482d883a 	mov	r22,r9
    be44:	e00b883a 	mov	r5,fp
    be48:	003f8506 	br	bc60 <_gp+0xfffcd358>
    be4c:	a00ad43a 	srli	r5,r20,16
    be50:	401ad43a 	srli	r13,r8,16
    be54:	a53fffcc 	andi	r20,r20,65535
    be58:	423fffcc 	andi	r8,r8,65535
    be5c:	4519383a 	mul	r12,r8,r20
    be60:	4147383a 	mul	r3,r8,r5
    be64:	6d09383a 	mul	r4,r13,r20
    be68:	600cd43a 	srli	r6,r12,16
    be6c:	2b5d383a 	mul	r14,r5,r13
    be70:	20c9883a 	add	r4,r4,r3
    be74:	310d883a 	add	r6,r6,r4
    be78:	30c0022e 	bgeu	r6,r3,be84 <__muldf3+0x378>
    be7c:	00c00074 	movhi	r3,1
    be80:	70dd883a 	add	r14,r14,r3
    be84:	8826d43a 	srli	r19,r17,16
    be88:	8bffffcc 	andi	r15,r17,65535
    be8c:	7d23383a 	mul	r17,r15,r20
    be90:	7949383a 	mul	r4,r15,r5
    be94:	9d29383a 	mul	r20,r19,r20
    be98:	8814d43a 	srli	r10,r17,16
    be9c:	3012943a 	slli	r9,r6,16
    bea0:	a129883a 	add	r20,r20,r4
    bea4:	633fffcc 	andi	r12,r12,65535
    bea8:	5515883a 	add	r10,r10,r20
    beac:	3006d43a 	srli	r3,r6,16
    beb0:	4b13883a 	add	r9,r9,r12
    beb4:	2ccb383a 	mul	r5,r5,r19
    beb8:	5100022e 	bgeu	r10,r4,bec4 <__muldf3+0x3b8>
    bebc:	01000074 	movhi	r4,1
    bec0:	290b883a 	add	r5,r5,r4
    bec4:	802ad43a 	srli	r21,r16,16
    bec8:	843fffcc 	andi	r16,r16,65535
    becc:	440d383a 	mul	r6,r8,r16
    bed0:	4565383a 	mul	r18,r8,r21
    bed4:	8349383a 	mul	r4,r16,r13
    bed8:	500e943a 	slli	r7,r10,16
    bedc:	3010d43a 	srli	r8,r6,16
    bee0:	5028d43a 	srli	r20,r10,16
    bee4:	2489883a 	add	r4,r4,r18
    bee8:	8abfffcc 	andi	r10,r17,65535
    beec:	3a95883a 	add	r10,r7,r10
    bef0:	4119883a 	add	r12,r8,r4
    bef4:	a169883a 	add	r20,r20,r5
    bef8:	1a87883a 	add	r3,r3,r10
    befc:	6d5b383a 	mul	r13,r13,r21
    bf00:	6480022e 	bgeu	r12,r18,bf0c <__muldf3+0x400>
    bf04:	01000074 	movhi	r4,1
    bf08:	691b883a 	add	r13,r13,r4
    bf0c:	7c25383a 	mul	r18,r15,r16
    bf10:	7d4b383a 	mul	r5,r15,r21
    bf14:	84cf383a 	mul	r7,r16,r19
    bf18:	901ed43a 	srli	r15,r18,16
    bf1c:	6008d43a 	srli	r4,r12,16
    bf20:	6010943a 	slli	r8,r12,16
    bf24:	394f883a 	add	r7,r7,r5
    bf28:	333fffcc 	andi	r12,r6,65535
    bf2c:	79df883a 	add	r15,r15,r7
    bf30:	235b883a 	add	r13,r4,r13
    bf34:	9d63383a 	mul	r17,r19,r21
    bf38:	4309883a 	add	r4,r8,r12
    bf3c:	7940022e 	bgeu	r15,r5,bf48 <__muldf3+0x43c>
    bf40:	01400074 	movhi	r5,1
    bf44:	8963883a 	add	r17,r17,r5
    bf48:	780a943a 	slli	r5,r15,16
    bf4c:	91bfffcc 	andi	r6,r18,65535
    bf50:	70c7883a 	add	r3,r14,r3
    bf54:	298d883a 	add	r6,r5,r6
    bf58:	1a8f803a 	cmpltu	r7,r3,r10
    bf5c:	350b883a 	add	r5,r6,r20
    bf60:	20c7883a 	add	r3,r4,r3
    bf64:	3955883a 	add	r10,r7,r5
    bf68:	1909803a 	cmpltu	r4,r3,r4
    bf6c:	6a91883a 	add	r8,r13,r10
    bf70:	780cd43a 	srli	r6,r15,16
    bf74:	2219883a 	add	r12,r4,r8
    bf78:	2d0b803a 	cmpltu	r5,r5,r20
    bf7c:	51cf803a 	cmpltu	r7,r10,r7
    bf80:	29ceb03a 	or	r7,r5,r7
    bf84:	4351803a 	cmpltu	r8,r8,r13
    bf88:	610b803a 	cmpltu	r5,r12,r4
    bf8c:	4148b03a 	or	r4,r8,r5
    bf90:	398f883a 	add	r7,r7,r6
    bf94:	3909883a 	add	r4,r7,r4
    bf98:	1810927a 	slli	r8,r3,9
    bf9c:	2449883a 	add	r4,r4,r17
    bfa0:	2008927a 	slli	r4,r4,9
    bfa4:	6022d5fa 	srli	r17,r12,23
    bfa8:	1806d5fa 	srli	r3,r3,23
    bfac:	4252b03a 	or	r9,r8,r9
    bfb0:	600a927a 	slli	r5,r12,9
    bfb4:	4810c03a 	cmpne	r8,r9,zero
    bfb8:	2462b03a 	or	r17,r4,r17
    bfbc:	40c6b03a 	or	r3,r8,r3
    bfc0:	8900402c 	andhi	r4,r17,256
    bfc4:	1950b03a 	or	r8,r3,r5
    bfc8:	20000726 	beq	r4,zero,bfe8 <__muldf3+0x4dc>
    bfcc:	4006d07a 	srli	r3,r8,1
    bfd0:	880497fa 	slli	r2,r17,31
    bfd4:	4200004c 	andi	r8,r8,1
    bfd8:	8822d07a 	srli	r17,r17,1
    bfdc:	1a10b03a 	or	r8,r3,r8
    bfe0:	1210b03a 	or	r8,r2,r8
    bfe4:	5805883a 	mov	r2,r11
    bfe8:	1140ffc4 	addi	r5,r2,1023
    bfec:	0140440e 	bge	zero,r5,c100 <__muldf3+0x5f4>
    bff0:	40c001cc 	andi	r3,r8,7
    bff4:	18000726 	beq	r3,zero,c014 <__muldf3+0x508>
    bff8:	40c003cc 	andi	r3,r8,15
    bffc:	01000104 	movi	r4,4
    c000:	19000426 	beq	r3,r4,c014 <__muldf3+0x508>
    c004:	4107883a 	add	r3,r8,r4
    c008:	1a11803a 	cmpltu	r8,r3,r8
    c00c:	8a23883a 	add	r17,r17,r8
    c010:	1811883a 	mov	r8,r3
    c014:	88c0402c 	andhi	r3,r17,256
    c018:	18000426 	beq	r3,zero,c02c <__muldf3+0x520>
    c01c:	11410004 	addi	r5,r2,1024
    c020:	00bfc034 	movhi	r2,65280
    c024:	10bfffc4 	addi	r2,r2,-1
    c028:	88a2703a 	and	r17,r17,r2
    c02c:	0081ff84 	movi	r2,2046
    c030:	117f6416 	blt	r2,r5,bdc4 <_gp+0xfffcd4bc>
    c034:	8828977a 	slli	r20,r17,29
    c038:	4010d0fa 	srli	r8,r8,3
    c03c:	8822927a 	slli	r17,r17,9
    c040:	2881ffcc 	andi	r2,r5,2047
    c044:	a228b03a 	or	r20,r20,r8
    c048:	880ad33a 	srli	r5,r17,12
    c04c:	b02b883a 	mov	r21,r22
    c050:	003f0d06 	br	bc88 <_gp+0xfffcd380>
    c054:	8080022c 	andhi	r2,r16,8
    c058:	10000926 	beq	r2,zero,c080 <__muldf3+0x574>
    c05c:	8880022c 	andhi	r2,r17,8
    c060:	1000071e 	bne	r2,zero,c080 <__muldf3+0x574>
    c064:	00800434 	movhi	r2,16
    c068:	89400234 	orhi	r5,r17,8
    c06c:	10bfffc4 	addi	r2,r2,-1
    c070:	b82b883a 	mov	r21,r23
    c074:	288a703a 	and	r5,r5,r2
    c078:	4029883a 	mov	r20,r8
    c07c:	003f6806 	br	be20 <_gp+0xfffcd518>
    c080:	00800434 	movhi	r2,16
    c084:	81400234 	orhi	r5,r16,8
    c088:	10bfffc4 	addi	r2,r2,-1
    c08c:	288a703a 	and	r5,r5,r2
    c090:	003f6306 	br	be20 <_gp+0xfffcd518>
    c094:	147ff604 	addi	r17,r2,-40
    c098:	3462983a 	sll	r17,r6,r17
    c09c:	0011883a 	mov	r8,zero
    c0a0:	003f4406 	br	bdb4 <_gp+0xfffcd4ac>
    c0a4:	3009883a 	mov	r4,r6
    c0a8:	d9800215 	stw	r6,8(sp)
    c0ac:	da400115 	stw	r9,4(sp)
    c0b0:	da800015 	stw	r10,0(sp)
    c0b4:	000cd240 	call	cd24 <__clzsi2>
    c0b8:	10800804 	addi	r2,r2,32
    c0bc:	da800017 	ldw	r10,0(sp)
    c0c0:	da400117 	ldw	r9,4(sp)
    c0c4:	d9800217 	ldw	r6,8(sp)
    c0c8:	003f3006 	br	bd8c <_gp+0xfffcd484>
    c0cc:	143ff604 	addi	r16,r2,-40
    c0d0:	9c20983a 	sll	r16,r19,r16
    c0d4:	0029883a 	mov	r20,zero
    c0d8:	003f1606 	br	bd34 <_gp+0xfffcd42c>
    c0dc:	d9800215 	stw	r6,8(sp)
    c0e0:	d9c00015 	stw	r7,0(sp)
    c0e4:	da400115 	stw	r9,4(sp)
    c0e8:	000cd240 	call	cd24 <__clzsi2>
    c0ec:	10800804 	addi	r2,r2,32
    c0f0:	da400117 	ldw	r9,4(sp)
    c0f4:	d9c00017 	ldw	r7,0(sp)
    c0f8:	d9800217 	ldw	r6,8(sp)
    c0fc:	003f0306 	br	bd0c <_gp+0xfffcd404>
    c100:	00c00044 	movi	r3,1
    c104:	1947c83a 	sub	r3,r3,r5
    c108:	00800e04 	movi	r2,56
    c10c:	10feda16 	blt	r2,r3,bc78 <_gp+0xfffcd370>
    c110:	008007c4 	movi	r2,31
    c114:	10c01b16 	blt	r2,r3,c184 <__muldf3+0x678>
    c118:	00800804 	movi	r2,32
    c11c:	10c5c83a 	sub	r2,r2,r3
    c120:	888a983a 	sll	r5,r17,r2
    c124:	40c8d83a 	srl	r4,r8,r3
    c128:	4084983a 	sll	r2,r8,r2
    c12c:	88e2d83a 	srl	r17,r17,r3
    c130:	2906b03a 	or	r3,r5,r4
    c134:	1004c03a 	cmpne	r2,r2,zero
    c138:	1886b03a 	or	r3,r3,r2
    c13c:	188001cc 	andi	r2,r3,7
    c140:	10000726 	beq	r2,zero,c160 <__muldf3+0x654>
    c144:	188003cc 	andi	r2,r3,15
    c148:	01000104 	movi	r4,4
    c14c:	11000426 	beq	r2,r4,c160 <__muldf3+0x654>
    c150:	1805883a 	mov	r2,r3
    c154:	10c00104 	addi	r3,r2,4
    c158:	1885803a 	cmpltu	r2,r3,r2
    c15c:	88a3883a 	add	r17,r17,r2
    c160:	8880202c 	andhi	r2,r17,128
    c164:	10001c26 	beq	r2,zero,c1d8 <__muldf3+0x6cc>
    c168:	b02b883a 	mov	r21,r22
    c16c:	00800044 	movi	r2,1
    c170:	000b883a 	mov	r5,zero
    c174:	0029883a 	mov	r20,zero
    c178:	003ec306 	br	bc88 <_gp+0xfffcd380>
    c17c:	5805883a 	mov	r2,r11
    c180:	003f9906 	br	bfe8 <_gp+0xfffcd6e0>
    c184:	00bff844 	movi	r2,-31
    c188:	1145c83a 	sub	r2,r2,r5
    c18c:	8888d83a 	srl	r4,r17,r2
    c190:	00800804 	movi	r2,32
    c194:	18801a26 	beq	r3,r2,c200 <__muldf3+0x6f4>
    c198:	00801004 	movi	r2,64
    c19c:	10c5c83a 	sub	r2,r2,r3
    c1a0:	8884983a 	sll	r2,r17,r2
    c1a4:	1204b03a 	or	r2,r2,r8
    c1a8:	1004c03a 	cmpne	r2,r2,zero
    c1ac:	2084b03a 	or	r2,r4,r2
    c1b0:	144001cc 	andi	r17,r2,7
    c1b4:	88000d1e 	bne	r17,zero,c1ec <__muldf3+0x6e0>
    c1b8:	000b883a 	mov	r5,zero
    c1bc:	1028d0fa 	srli	r20,r2,3
    c1c0:	b02b883a 	mov	r21,r22
    c1c4:	0005883a 	mov	r2,zero
    c1c8:	a468b03a 	or	r20,r20,r17
    c1cc:	003eae06 	br	bc88 <_gp+0xfffcd380>
    c1d0:	1007883a 	mov	r3,r2
    c1d4:	0023883a 	mov	r17,zero
    c1d8:	880a927a 	slli	r5,r17,9
    c1dc:	1805883a 	mov	r2,r3
    c1e0:	8822977a 	slli	r17,r17,29
    c1e4:	280ad33a 	srli	r5,r5,12
    c1e8:	003ff406 	br	c1bc <_gp+0xfffcd8b4>
    c1ec:	10c003cc 	andi	r3,r2,15
    c1f0:	01000104 	movi	r4,4
    c1f4:	193ff626 	beq	r3,r4,c1d0 <_gp+0xfffcd8c8>
    c1f8:	0023883a 	mov	r17,zero
    c1fc:	003fd506 	br	c154 <_gp+0xfffcd84c>
    c200:	0005883a 	mov	r2,zero
    c204:	003fe706 	br	c1a4 <_gp+0xfffcd89c>
    c208:	00800434 	movhi	r2,16
    c20c:	89400234 	orhi	r5,r17,8
    c210:	10bfffc4 	addi	r2,r2,-1
    c214:	b02b883a 	mov	r21,r22
    c218:	288a703a 	and	r5,r5,r2
    c21c:	4029883a 	mov	r20,r8
    c220:	003eff06 	br	be20 <_gp+0xfffcd518>

0000c224 <__subdf3>:
    c224:	02000434 	movhi	r8,16
    c228:	423fffc4 	addi	r8,r8,-1
    c22c:	defffb04 	addi	sp,sp,-20
    c230:	2a14703a 	and	r10,r5,r8
    c234:	3812d53a 	srli	r9,r7,20
    c238:	3a10703a 	and	r8,r7,r8
    c23c:	2006d77a 	srli	r3,r4,29
    c240:	3004d77a 	srli	r2,r6,29
    c244:	dc000015 	stw	r16,0(sp)
    c248:	501490fa 	slli	r10,r10,3
    c24c:	2820d53a 	srli	r16,r5,20
    c250:	401090fa 	slli	r8,r8,3
    c254:	dc800215 	stw	r18,8(sp)
    c258:	dc400115 	stw	r17,4(sp)
    c25c:	dfc00415 	stw	ra,16(sp)
    c260:	202290fa 	slli	r17,r4,3
    c264:	dcc00315 	stw	r19,12(sp)
    c268:	4a41ffcc 	andi	r9,r9,2047
    c26c:	0101ffc4 	movi	r4,2047
    c270:	2824d7fa 	srli	r18,r5,31
    c274:	8401ffcc 	andi	r16,r16,2047
    c278:	50c6b03a 	or	r3,r10,r3
    c27c:	380ed7fa 	srli	r7,r7,31
    c280:	408ab03a 	or	r5,r8,r2
    c284:	300c90fa 	slli	r6,r6,3
    c288:	49009626 	beq	r9,r4,c4e4 <__subdf3+0x2c0>
    c28c:	39c0005c 	xori	r7,r7,1
    c290:	8245c83a 	sub	r2,r16,r9
    c294:	3c807426 	beq	r7,r18,c468 <__subdf3+0x244>
    c298:	0080af0e 	bge	zero,r2,c558 <__subdf3+0x334>
    c29c:	48002a1e 	bne	r9,zero,c348 <__subdf3+0x124>
    c2a0:	2988b03a 	or	r4,r5,r6
    c2a4:	20009a1e 	bne	r4,zero,c510 <__subdf3+0x2ec>
    c2a8:	888001cc 	andi	r2,r17,7
    c2ac:	10000726 	beq	r2,zero,c2cc <__subdf3+0xa8>
    c2b0:	888003cc 	andi	r2,r17,15
    c2b4:	01000104 	movi	r4,4
    c2b8:	11000426 	beq	r2,r4,c2cc <__subdf3+0xa8>
    c2bc:	890b883a 	add	r5,r17,r4
    c2c0:	2c63803a 	cmpltu	r17,r5,r17
    c2c4:	1c47883a 	add	r3,r3,r17
    c2c8:	2823883a 	mov	r17,r5
    c2cc:	1880202c 	andhi	r2,r3,128
    c2d0:	10005926 	beq	r2,zero,c438 <__subdf3+0x214>
    c2d4:	84000044 	addi	r16,r16,1
    c2d8:	0081ffc4 	movi	r2,2047
    c2dc:	8080be26 	beq	r16,r2,c5d8 <__subdf3+0x3b4>
    c2e0:	017fe034 	movhi	r5,65408
    c2e4:	297fffc4 	addi	r5,r5,-1
    c2e8:	1946703a 	and	r3,r3,r5
    c2ec:	1804977a 	slli	r2,r3,29
    c2f0:	1806927a 	slli	r3,r3,9
    c2f4:	8822d0fa 	srli	r17,r17,3
    c2f8:	8401ffcc 	andi	r16,r16,2047
    c2fc:	180ad33a 	srli	r5,r3,12
    c300:	9100004c 	andi	r4,r18,1
    c304:	1444b03a 	or	r2,r2,r17
    c308:	80c1ffcc 	andi	r3,r16,2047
    c30c:	1820953a 	slli	r16,r3,20
    c310:	20c03fcc 	andi	r3,r4,255
    c314:	180897fa 	slli	r4,r3,31
    c318:	00c00434 	movhi	r3,16
    c31c:	18ffffc4 	addi	r3,r3,-1
    c320:	28c6703a 	and	r3,r5,r3
    c324:	1c06b03a 	or	r3,r3,r16
    c328:	1906b03a 	or	r3,r3,r4
    c32c:	dfc00417 	ldw	ra,16(sp)
    c330:	dcc00317 	ldw	r19,12(sp)
    c334:	dc800217 	ldw	r18,8(sp)
    c338:	dc400117 	ldw	r17,4(sp)
    c33c:	dc000017 	ldw	r16,0(sp)
    c340:	dec00504 	addi	sp,sp,20
    c344:	f800283a 	ret
    c348:	0101ffc4 	movi	r4,2047
    c34c:	813fd626 	beq	r16,r4,c2a8 <_gp+0xfffcd9a0>
    c350:	29402034 	orhi	r5,r5,128
    c354:	01000e04 	movi	r4,56
    c358:	2080a316 	blt	r4,r2,c5e8 <__subdf3+0x3c4>
    c35c:	010007c4 	movi	r4,31
    c360:	2080c616 	blt	r4,r2,c67c <__subdf3+0x458>
    c364:	01000804 	movi	r4,32
    c368:	2089c83a 	sub	r4,r4,r2
    c36c:	2910983a 	sll	r8,r5,r4
    c370:	308ed83a 	srl	r7,r6,r2
    c374:	3108983a 	sll	r4,r6,r4
    c378:	2884d83a 	srl	r2,r5,r2
    c37c:	41ccb03a 	or	r6,r8,r7
    c380:	2008c03a 	cmpne	r4,r4,zero
    c384:	310cb03a 	or	r6,r6,r4
    c388:	898dc83a 	sub	r6,r17,r6
    c38c:	89a3803a 	cmpltu	r17,r17,r6
    c390:	1887c83a 	sub	r3,r3,r2
    c394:	1c47c83a 	sub	r3,r3,r17
    c398:	3023883a 	mov	r17,r6
    c39c:	1880202c 	andhi	r2,r3,128
    c3a0:	10002326 	beq	r2,zero,c430 <__subdf3+0x20c>
    c3a4:	04c02034 	movhi	r19,128
    c3a8:	9cffffc4 	addi	r19,r19,-1
    c3ac:	1ce6703a 	and	r19,r3,r19
    c3b0:	98007a26 	beq	r19,zero,c59c <__subdf3+0x378>
    c3b4:	9809883a 	mov	r4,r19
    c3b8:	000cd240 	call	cd24 <__clzsi2>
    c3bc:	113ffe04 	addi	r4,r2,-8
    c3c0:	00c007c4 	movi	r3,31
    c3c4:	19007b16 	blt	r3,r4,c5b4 <__subdf3+0x390>
    c3c8:	00800804 	movi	r2,32
    c3cc:	1105c83a 	sub	r2,r2,r4
    c3d0:	8884d83a 	srl	r2,r17,r2
    c3d4:	9906983a 	sll	r3,r19,r4
    c3d8:	8922983a 	sll	r17,r17,r4
    c3dc:	10c4b03a 	or	r2,r2,r3
    c3e0:	24007816 	blt	r4,r16,c5c4 <__subdf3+0x3a0>
    c3e4:	2421c83a 	sub	r16,r4,r16
    c3e8:	80c00044 	addi	r3,r16,1
    c3ec:	010007c4 	movi	r4,31
    c3f0:	20c09516 	blt	r4,r3,c648 <__subdf3+0x424>
    c3f4:	01400804 	movi	r5,32
    c3f8:	28cbc83a 	sub	r5,r5,r3
    c3fc:	88c8d83a 	srl	r4,r17,r3
    c400:	8962983a 	sll	r17,r17,r5
    c404:	114a983a 	sll	r5,r2,r5
    c408:	10c6d83a 	srl	r3,r2,r3
    c40c:	8804c03a 	cmpne	r2,r17,zero
    c410:	290ab03a 	or	r5,r5,r4
    c414:	28a2b03a 	or	r17,r5,r2
    c418:	0021883a 	mov	r16,zero
    c41c:	003fa206 	br	c2a8 <_gp+0xfffcd9a0>
    c420:	2090b03a 	or	r8,r4,r2
    c424:	40018e26 	beq	r8,zero,ca60 <__subdf3+0x83c>
    c428:	1007883a 	mov	r3,r2
    c42c:	2023883a 	mov	r17,r4
    c430:	888001cc 	andi	r2,r17,7
    c434:	103f9e1e 	bne	r2,zero,c2b0 <_gp+0xfffcd9a8>
    c438:	1804977a 	slli	r2,r3,29
    c43c:	8822d0fa 	srli	r17,r17,3
    c440:	1810d0fa 	srli	r8,r3,3
    c444:	9100004c 	andi	r4,r18,1
    c448:	1444b03a 	or	r2,r2,r17
    c44c:	00c1ffc4 	movi	r3,2047
    c450:	80c02826 	beq	r16,r3,c4f4 <__subdf3+0x2d0>
    c454:	01400434 	movhi	r5,16
    c458:	297fffc4 	addi	r5,r5,-1
    c45c:	80e0703a 	and	r16,r16,r3
    c460:	414a703a 	and	r5,r8,r5
    c464:	003fa806 	br	c308 <_gp+0xfffcda00>
    c468:	0080630e 	bge	zero,r2,c5f8 <__subdf3+0x3d4>
    c46c:	48003026 	beq	r9,zero,c530 <__subdf3+0x30c>
    c470:	0101ffc4 	movi	r4,2047
    c474:	813f8c26 	beq	r16,r4,c2a8 <_gp+0xfffcd9a0>
    c478:	29402034 	orhi	r5,r5,128
    c47c:	01000e04 	movi	r4,56
    c480:	2080a90e 	bge	r4,r2,c728 <__subdf3+0x504>
    c484:	298cb03a 	or	r6,r5,r6
    c488:	3012c03a 	cmpne	r9,r6,zero
    c48c:	0005883a 	mov	r2,zero
    c490:	4c53883a 	add	r9,r9,r17
    c494:	4c63803a 	cmpltu	r17,r9,r17
    c498:	10c7883a 	add	r3,r2,r3
    c49c:	88c7883a 	add	r3,r17,r3
    c4a0:	4823883a 	mov	r17,r9
    c4a4:	1880202c 	andhi	r2,r3,128
    c4a8:	1000d026 	beq	r2,zero,c7ec <__subdf3+0x5c8>
    c4ac:	84000044 	addi	r16,r16,1
    c4b0:	0081ffc4 	movi	r2,2047
    c4b4:	8080fe26 	beq	r16,r2,c8b0 <__subdf3+0x68c>
    c4b8:	00bfe034 	movhi	r2,65408
    c4bc:	10bfffc4 	addi	r2,r2,-1
    c4c0:	1886703a 	and	r3,r3,r2
    c4c4:	880ad07a 	srli	r5,r17,1
    c4c8:	180497fa 	slli	r2,r3,31
    c4cc:	8900004c 	andi	r4,r17,1
    c4d0:	2922b03a 	or	r17,r5,r4
    c4d4:	1806d07a 	srli	r3,r3,1
    c4d8:	1462b03a 	or	r17,r2,r17
    c4dc:	3825883a 	mov	r18,r7
    c4e0:	003f7106 	br	c2a8 <_gp+0xfffcd9a0>
    c4e4:	2984b03a 	or	r2,r5,r6
    c4e8:	103f6826 	beq	r2,zero,c28c <_gp+0xfffcd984>
    c4ec:	39c03fcc 	andi	r7,r7,255
    c4f0:	003f6706 	br	c290 <_gp+0xfffcd988>
    c4f4:	4086b03a 	or	r3,r8,r2
    c4f8:	18015226 	beq	r3,zero,ca44 <__subdf3+0x820>
    c4fc:	00c00434 	movhi	r3,16
    c500:	41400234 	orhi	r5,r8,8
    c504:	18ffffc4 	addi	r3,r3,-1
    c508:	28ca703a 	and	r5,r5,r3
    c50c:	003f7e06 	br	c308 <_gp+0xfffcda00>
    c510:	10bfffc4 	addi	r2,r2,-1
    c514:	1000491e 	bne	r2,zero,c63c <__subdf3+0x418>
    c518:	898fc83a 	sub	r7,r17,r6
    c51c:	89e3803a 	cmpltu	r17,r17,r7
    c520:	1947c83a 	sub	r3,r3,r5
    c524:	1c47c83a 	sub	r3,r3,r17
    c528:	3823883a 	mov	r17,r7
    c52c:	003f9b06 	br	c39c <_gp+0xfffcda94>
    c530:	2988b03a 	or	r4,r5,r6
    c534:	203f5c26 	beq	r4,zero,c2a8 <_gp+0xfffcd9a0>
    c538:	10bfffc4 	addi	r2,r2,-1
    c53c:	1000931e 	bne	r2,zero,c78c <__subdf3+0x568>
    c540:	898d883a 	add	r6,r17,r6
    c544:	3463803a 	cmpltu	r17,r6,r17
    c548:	1947883a 	add	r3,r3,r5
    c54c:	88c7883a 	add	r3,r17,r3
    c550:	3023883a 	mov	r17,r6
    c554:	003fd306 	br	c4a4 <_gp+0xfffcdb9c>
    c558:	1000541e 	bne	r2,zero,c6ac <__subdf3+0x488>
    c55c:	80800044 	addi	r2,r16,1
    c560:	1081ffcc 	andi	r2,r2,2047
    c564:	01000044 	movi	r4,1
    c568:	2080a20e 	bge	r4,r2,c7f4 <__subdf3+0x5d0>
    c56c:	8989c83a 	sub	r4,r17,r6
    c570:	8905803a 	cmpltu	r2,r17,r4
    c574:	1967c83a 	sub	r19,r3,r5
    c578:	98a7c83a 	sub	r19,r19,r2
    c57c:	9880202c 	andhi	r2,r19,128
    c580:	10006326 	beq	r2,zero,c710 <__subdf3+0x4ec>
    c584:	3463c83a 	sub	r17,r6,r17
    c588:	28c7c83a 	sub	r3,r5,r3
    c58c:	344d803a 	cmpltu	r6,r6,r17
    c590:	19a7c83a 	sub	r19,r3,r6
    c594:	3825883a 	mov	r18,r7
    c598:	983f861e 	bne	r19,zero,c3b4 <_gp+0xfffcdaac>
    c59c:	8809883a 	mov	r4,r17
    c5a0:	000cd240 	call	cd24 <__clzsi2>
    c5a4:	10800804 	addi	r2,r2,32
    c5a8:	113ffe04 	addi	r4,r2,-8
    c5ac:	00c007c4 	movi	r3,31
    c5b0:	193f850e 	bge	r3,r4,c3c8 <_gp+0xfffcdac0>
    c5b4:	10bff604 	addi	r2,r2,-40
    c5b8:	8884983a 	sll	r2,r17,r2
    c5bc:	0023883a 	mov	r17,zero
    c5c0:	243f880e 	bge	r4,r16,c3e4 <_gp+0xfffcdadc>
    c5c4:	00ffe034 	movhi	r3,65408
    c5c8:	18ffffc4 	addi	r3,r3,-1
    c5cc:	8121c83a 	sub	r16,r16,r4
    c5d0:	10c6703a 	and	r3,r2,r3
    c5d4:	003f3406 	br	c2a8 <_gp+0xfffcd9a0>
    c5d8:	9100004c 	andi	r4,r18,1
    c5dc:	000b883a 	mov	r5,zero
    c5e0:	0005883a 	mov	r2,zero
    c5e4:	003f4806 	br	c308 <_gp+0xfffcda00>
    c5e8:	298cb03a 	or	r6,r5,r6
    c5ec:	300cc03a 	cmpne	r6,r6,zero
    c5f0:	0005883a 	mov	r2,zero
    c5f4:	003f6406 	br	c388 <_gp+0xfffcda80>
    c5f8:	10009a1e 	bne	r2,zero,c864 <__subdf3+0x640>
    c5fc:	82400044 	addi	r9,r16,1
    c600:	4881ffcc 	andi	r2,r9,2047
    c604:	02800044 	movi	r10,1
    c608:	5080670e 	bge	r10,r2,c7a8 <__subdf3+0x584>
    c60c:	0081ffc4 	movi	r2,2047
    c610:	4880af26 	beq	r9,r2,c8d0 <__subdf3+0x6ac>
    c614:	898d883a 	add	r6,r17,r6
    c618:	1945883a 	add	r2,r3,r5
    c61c:	3447803a 	cmpltu	r3,r6,r17
    c620:	1887883a 	add	r3,r3,r2
    c624:	182297fa 	slli	r17,r3,31
    c628:	300cd07a 	srli	r6,r6,1
    c62c:	1806d07a 	srli	r3,r3,1
    c630:	4821883a 	mov	r16,r9
    c634:	89a2b03a 	or	r17,r17,r6
    c638:	003f1b06 	br	c2a8 <_gp+0xfffcd9a0>
    c63c:	0101ffc4 	movi	r4,2047
    c640:	813f441e 	bne	r16,r4,c354 <_gp+0xfffcda4c>
    c644:	003f1806 	br	c2a8 <_gp+0xfffcd9a0>
    c648:	843ff844 	addi	r16,r16,-31
    c64c:	01400804 	movi	r5,32
    c650:	1408d83a 	srl	r4,r2,r16
    c654:	19405026 	beq	r3,r5,c798 <__subdf3+0x574>
    c658:	01401004 	movi	r5,64
    c65c:	28c7c83a 	sub	r3,r5,r3
    c660:	10c4983a 	sll	r2,r2,r3
    c664:	88a2b03a 	or	r17,r17,r2
    c668:	8822c03a 	cmpne	r17,r17,zero
    c66c:	2462b03a 	or	r17,r4,r17
    c670:	0007883a 	mov	r3,zero
    c674:	0021883a 	mov	r16,zero
    c678:	003f6d06 	br	c430 <_gp+0xfffcdb28>
    c67c:	11fff804 	addi	r7,r2,-32
    c680:	01000804 	movi	r4,32
    c684:	29ced83a 	srl	r7,r5,r7
    c688:	11004526 	beq	r2,r4,c7a0 <__subdf3+0x57c>
    c68c:	01001004 	movi	r4,64
    c690:	2089c83a 	sub	r4,r4,r2
    c694:	2904983a 	sll	r2,r5,r4
    c698:	118cb03a 	or	r6,r2,r6
    c69c:	300cc03a 	cmpne	r6,r6,zero
    c6a0:	398cb03a 	or	r6,r7,r6
    c6a4:	0005883a 	mov	r2,zero
    c6a8:	003f3706 	br	c388 <_gp+0xfffcda80>
    c6ac:	80002a26 	beq	r16,zero,c758 <__subdf3+0x534>
    c6b0:	0101ffc4 	movi	r4,2047
    c6b4:	49006626 	beq	r9,r4,c850 <__subdf3+0x62c>
    c6b8:	0085c83a 	sub	r2,zero,r2
    c6bc:	18c02034 	orhi	r3,r3,128
    c6c0:	01000e04 	movi	r4,56
    c6c4:	20807e16 	blt	r4,r2,c8c0 <__subdf3+0x69c>
    c6c8:	010007c4 	movi	r4,31
    c6cc:	2080e716 	blt	r4,r2,ca6c <__subdf3+0x848>
    c6d0:	01000804 	movi	r4,32
    c6d4:	2089c83a 	sub	r4,r4,r2
    c6d8:	1914983a 	sll	r10,r3,r4
    c6dc:	8890d83a 	srl	r8,r17,r2
    c6e0:	8908983a 	sll	r4,r17,r4
    c6e4:	1884d83a 	srl	r2,r3,r2
    c6e8:	5222b03a 	or	r17,r10,r8
    c6ec:	2006c03a 	cmpne	r3,r4,zero
    c6f0:	88e2b03a 	or	r17,r17,r3
    c6f4:	3463c83a 	sub	r17,r6,r17
    c6f8:	2885c83a 	sub	r2,r5,r2
    c6fc:	344d803a 	cmpltu	r6,r6,r17
    c700:	1187c83a 	sub	r3,r2,r6
    c704:	4821883a 	mov	r16,r9
    c708:	3825883a 	mov	r18,r7
    c70c:	003f2306 	br	c39c <_gp+0xfffcda94>
    c710:	24d0b03a 	or	r8,r4,r19
    c714:	40001b1e 	bne	r8,zero,c784 <__subdf3+0x560>
    c718:	0005883a 	mov	r2,zero
    c71c:	0009883a 	mov	r4,zero
    c720:	0021883a 	mov	r16,zero
    c724:	003f4906 	br	c44c <_gp+0xfffcdb44>
    c728:	010007c4 	movi	r4,31
    c72c:	20803a16 	blt	r4,r2,c818 <__subdf3+0x5f4>
    c730:	01000804 	movi	r4,32
    c734:	2089c83a 	sub	r4,r4,r2
    c738:	2912983a 	sll	r9,r5,r4
    c73c:	3090d83a 	srl	r8,r6,r2
    c740:	3108983a 	sll	r4,r6,r4
    c744:	2884d83a 	srl	r2,r5,r2
    c748:	4a12b03a 	or	r9,r9,r8
    c74c:	2008c03a 	cmpne	r4,r4,zero
    c750:	4912b03a 	or	r9,r9,r4
    c754:	003f4e06 	br	c490 <_gp+0xfffcdb88>
    c758:	1c48b03a 	or	r4,r3,r17
    c75c:	20003c26 	beq	r4,zero,c850 <__subdf3+0x62c>
    c760:	0084303a 	nor	r2,zero,r2
    c764:	1000381e 	bne	r2,zero,c848 <__subdf3+0x624>
    c768:	3463c83a 	sub	r17,r6,r17
    c76c:	28c5c83a 	sub	r2,r5,r3
    c770:	344d803a 	cmpltu	r6,r6,r17
    c774:	1187c83a 	sub	r3,r2,r6
    c778:	4821883a 	mov	r16,r9
    c77c:	3825883a 	mov	r18,r7
    c780:	003f0606 	br	c39c <_gp+0xfffcda94>
    c784:	2023883a 	mov	r17,r4
    c788:	003f0906 	br	c3b0 <_gp+0xfffcdaa8>
    c78c:	0101ffc4 	movi	r4,2047
    c790:	813f3a1e 	bne	r16,r4,c47c <_gp+0xfffcdb74>
    c794:	003ec406 	br	c2a8 <_gp+0xfffcd9a0>
    c798:	0005883a 	mov	r2,zero
    c79c:	003fb106 	br	c664 <_gp+0xfffcdd5c>
    c7a0:	0005883a 	mov	r2,zero
    c7a4:	003fbc06 	br	c698 <_gp+0xfffcdd90>
    c7a8:	1c44b03a 	or	r2,r3,r17
    c7ac:	80008e1e 	bne	r16,zero,c9e8 <__subdf3+0x7c4>
    c7b0:	1000c826 	beq	r2,zero,cad4 <__subdf3+0x8b0>
    c7b4:	2984b03a 	or	r2,r5,r6
    c7b8:	103ebb26 	beq	r2,zero,c2a8 <_gp+0xfffcd9a0>
    c7bc:	8989883a 	add	r4,r17,r6
    c7c0:	1945883a 	add	r2,r3,r5
    c7c4:	2447803a 	cmpltu	r3,r4,r17
    c7c8:	1887883a 	add	r3,r3,r2
    c7cc:	1880202c 	andhi	r2,r3,128
    c7d0:	2023883a 	mov	r17,r4
    c7d4:	103f1626 	beq	r2,zero,c430 <_gp+0xfffcdb28>
    c7d8:	00bfe034 	movhi	r2,65408
    c7dc:	10bfffc4 	addi	r2,r2,-1
    c7e0:	5021883a 	mov	r16,r10
    c7e4:	1886703a 	and	r3,r3,r2
    c7e8:	003eaf06 	br	c2a8 <_gp+0xfffcd9a0>
    c7ec:	3825883a 	mov	r18,r7
    c7f0:	003f0f06 	br	c430 <_gp+0xfffcdb28>
    c7f4:	1c44b03a 	or	r2,r3,r17
    c7f8:	8000251e 	bne	r16,zero,c890 <__subdf3+0x66c>
    c7fc:	1000661e 	bne	r2,zero,c998 <__subdf3+0x774>
    c800:	2990b03a 	or	r8,r5,r6
    c804:	40009626 	beq	r8,zero,ca60 <__subdf3+0x83c>
    c808:	2807883a 	mov	r3,r5
    c80c:	3023883a 	mov	r17,r6
    c810:	3825883a 	mov	r18,r7
    c814:	003ea406 	br	c2a8 <_gp+0xfffcd9a0>
    c818:	127ff804 	addi	r9,r2,-32
    c81c:	01000804 	movi	r4,32
    c820:	2a52d83a 	srl	r9,r5,r9
    c824:	11008c26 	beq	r2,r4,ca58 <__subdf3+0x834>
    c828:	01001004 	movi	r4,64
    c82c:	2085c83a 	sub	r2,r4,r2
    c830:	2884983a 	sll	r2,r5,r2
    c834:	118cb03a 	or	r6,r2,r6
    c838:	300cc03a 	cmpne	r6,r6,zero
    c83c:	4992b03a 	or	r9,r9,r6
    c840:	0005883a 	mov	r2,zero
    c844:	003f1206 	br	c490 <_gp+0xfffcdb88>
    c848:	0101ffc4 	movi	r4,2047
    c84c:	493f9c1e 	bne	r9,r4,c6c0 <_gp+0xfffcddb8>
    c850:	2807883a 	mov	r3,r5
    c854:	3023883a 	mov	r17,r6
    c858:	4821883a 	mov	r16,r9
    c85c:	3825883a 	mov	r18,r7
    c860:	003e9106 	br	c2a8 <_gp+0xfffcd9a0>
    c864:	80001f1e 	bne	r16,zero,c8e4 <__subdf3+0x6c0>
    c868:	1c48b03a 	or	r4,r3,r17
    c86c:	20005a26 	beq	r4,zero,c9d8 <__subdf3+0x7b4>
    c870:	0084303a 	nor	r2,zero,r2
    c874:	1000561e 	bne	r2,zero,c9d0 <__subdf3+0x7ac>
    c878:	89a3883a 	add	r17,r17,r6
    c87c:	1945883a 	add	r2,r3,r5
    c880:	898d803a 	cmpltu	r6,r17,r6
    c884:	3087883a 	add	r3,r6,r2
    c888:	4821883a 	mov	r16,r9
    c88c:	003f0506 	br	c4a4 <_gp+0xfffcdb9c>
    c890:	10002b1e 	bne	r2,zero,c940 <__subdf3+0x71c>
    c894:	2984b03a 	or	r2,r5,r6
    c898:	10008026 	beq	r2,zero,ca9c <__subdf3+0x878>
    c89c:	2807883a 	mov	r3,r5
    c8a0:	3023883a 	mov	r17,r6
    c8a4:	3825883a 	mov	r18,r7
    c8a8:	0401ffc4 	movi	r16,2047
    c8ac:	003e7e06 	br	c2a8 <_gp+0xfffcd9a0>
    c8b0:	3809883a 	mov	r4,r7
    c8b4:	0011883a 	mov	r8,zero
    c8b8:	0005883a 	mov	r2,zero
    c8bc:	003ee306 	br	c44c <_gp+0xfffcdb44>
    c8c0:	1c62b03a 	or	r17,r3,r17
    c8c4:	8822c03a 	cmpne	r17,r17,zero
    c8c8:	0005883a 	mov	r2,zero
    c8cc:	003f8906 	br	c6f4 <_gp+0xfffcddec>
    c8d0:	3809883a 	mov	r4,r7
    c8d4:	4821883a 	mov	r16,r9
    c8d8:	0011883a 	mov	r8,zero
    c8dc:	0005883a 	mov	r2,zero
    c8e0:	003eda06 	br	c44c <_gp+0xfffcdb44>
    c8e4:	0101ffc4 	movi	r4,2047
    c8e8:	49003b26 	beq	r9,r4,c9d8 <__subdf3+0x7b4>
    c8ec:	0085c83a 	sub	r2,zero,r2
    c8f0:	18c02034 	orhi	r3,r3,128
    c8f4:	01000e04 	movi	r4,56
    c8f8:	20806e16 	blt	r4,r2,cab4 <__subdf3+0x890>
    c8fc:	010007c4 	movi	r4,31
    c900:	20807716 	blt	r4,r2,cae0 <__subdf3+0x8bc>
    c904:	01000804 	movi	r4,32
    c908:	2089c83a 	sub	r4,r4,r2
    c90c:	1914983a 	sll	r10,r3,r4
    c910:	8890d83a 	srl	r8,r17,r2
    c914:	8908983a 	sll	r4,r17,r4
    c918:	1884d83a 	srl	r2,r3,r2
    c91c:	5222b03a 	or	r17,r10,r8
    c920:	2006c03a 	cmpne	r3,r4,zero
    c924:	88e2b03a 	or	r17,r17,r3
    c928:	89a3883a 	add	r17,r17,r6
    c92c:	1145883a 	add	r2,r2,r5
    c930:	898d803a 	cmpltu	r6,r17,r6
    c934:	3087883a 	add	r3,r6,r2
    c938:	4821883a 	mov	r16,r9
    c93c:	003ed906 	br	c4a4 <_gp+0xfffcdb9c>
    c940:	2984b03a 	or	r2,r5,r6
    c944:	10004226 	beq	r2,zero,ca50 <__subdf3+0x82c>
    c948:	1808d0fa 	srli	r4,r3,3
    c94c:	8822d0fa 	srli	r17,r17,3
    c950:	1806977a 	slli	r3,r3,29
    c954:	2080022c 	andhi	r2,r4,8
    c958:	1c62b03a 	or	r17,r3,r17
    c95c:	10000826 	beq	r2,zero,c980 <__subdf3+0x75c>
    c960:	2812d0fa 	srli	r9,r5,3
    c964:	4880022c 	andhi	r2,r9,8
    c968:	1000051e 	bne	r2,zero,c980 <__subdf3+0x75c>
    c96c:	300cd0fa 	srli	r6,r6,3
    c970:	2804977a 	slli	r2,r5,29
    c974:	4809883a 	mov	r4,r9
    c978:	3825883a 	mov	r18,r7
    c97c:	11a2b03a 	or	r17,r2,r6
    c980:	8806d77a 	srli	r3,r17,29
    c984:	200890fa 	slli	r4,r4,3
    c988:	882290fa 	slli	r17,r17,3
    c98c:	0401ffc4 	movi	r16,2047
    c990:	1906b03a 	or	r3,r3,r4
    c994:	003e4406 	br	c2a8 <_gp+0xfffcd9a0>
    c998:	2984b03a 	or	r2,r5,r6
    c99c:	103e4226 	beq	r2,zero,c2a8 <_gp+0xfffcd9a0>
    c9a0:	8989c83a 	sub	r4,r17,r6
    c9a4:	8911803a 	cmpltu	r8,r17,r4
    c9a8:	1945c83a 	sub	r2,r3,r5
    c9ac:	1205c83a 	sub	r2,r2,r8
    c9b0:	1200202c 	andhi	r8,r2,128
    c9b4:	403e9a26 	beq	r8,zero,c420 <_gp+0xfffcdb18>
    c9b8:	3463c83a 	sub	r17,r6,r17
    c9bc:	28c5c83a 	sub	r2,r5,r3
    c9c0:	344d803a 	cmpltu	r6,r6,r17
    c9c4:	1187c83a 	sub	r3,r2,r6
    c9c8:	3825883a 	mov	r18,r7
    c9cc:	003e3606 	br	c2a8 <_gp+0xfffcd9a0>
    c9d0:	0101ffc4 	movi	r4,2047
    c9d4:	493fc71e 	bne	r9,r4,c8f4 <_gp+0xfffcdfec>
    c9d8:	2807883a 	mov	r3,r5
    c9dc:	3023883a 	mov	r17,r6
    c9e0:	4821883a 	mov	r16,r9
    c9e4:	003e3006 	br	c2a8 <_gp+0xfffcd9a0>
    c9e8:	10003626 	beq	r2,zero,cac4 <__subdf3+0x8a0>
    c9ec:	2984b03a 	or	r2,r5,r6
    c9f0:	10001726 	beq	r2,zero,ca50 <__subdf3+0x82c>
    c9f4:	1808d0fa 	srli	r4,r3,3
    c9f8:	8822d0fa 	srli	r17,r17,3
    c9fc:	1806977a 	slli	r3,r3,29
    ca00:	2080022c 	andhi	r2,r4,8
    ca04:	1c62b03a 	or	r17,r3,r17
    ca08:	10000726 	beq	r2,zero,ca28 <__subdf3+0x804>
    ca0c:	2812d0fa 	srli	r9,r5,3
    ca10:	4880022c 	andhi	r2,r9,8
    ca14:	1000041e 	bne	r2,zero,ca28 <__subdf3+0x804>
    ca18:	300cd0fa 	srli	r6,r6,3
    ca1c:	2804977a 	slli	r2,r5,29
    ca20:	4809883a 	mov	r4,r9
    ca24:	11a2b03a 	or	r17,r2,r6
    ca28:	8806d77a 	srli	r3,r17,29
    ca2c:	200890fa 	slli	r4,r4,3
    ca30:	882290fa 	slli	r17,r17,3
    ca34:	3825883a 	mov	r18,r7
    ca38:	1906b03a 	or	r3,r3,r4
    ca3c:	0401ffc4 	movi	r16,2047
    ca40:	003e1906 	br	c2a8 <_gp+0xfffcd9a0>
    ca44:	000b883a 	mov	r5,zero
    ca48:	0005883a 	mov	r2,zero
    ca4c:	003e2e06 	br	c308 <_gp+0xfffcda00>
    ca50:	0401ffc4 	movi	r16,2047
    ca54:	003e1406 	br	c2a8 <_gp+0xfffcd9a0>
    ca58:	0005883a 	mov	r2,zero
    ca5c:	003f7506 	br	c834 <_gp+0xfffcdf2c>
    ca60:	0005883a 	mov	r2,zero
    ca64:	0009883a 	mov	r4,zero
    ca68:	003e7806 	br	c44c <_gp+0xfffcdb44>
    ca6c:	123ff804 	addi	r8,r2,-32
    ca70:	01000804 	movi	r4,32
    ca74:	1a10d83a 	srl	r8,r3,r8
    ca78:	11002526 	beq	r2,r4,cb10 <__subdf3+0x8ec>
    ca7c:	01001004 	movi	r4,64
    ca80:	2085c83a 	sub	r2,r4,r2
    ca84:	1884983a 	sll	r2,r3,r2
    ca88:	1444b03a 	or	r2,r2,r17
    ca8c:	1004c03a 	cmpne	r2,r2,zero
    ca90:	40a2b03a 	or	r17,r8,r2
    ca94:	0005883a 	mov	r2,zero
    ca98:	003f1606 	br	c6f4 <_gp+0xfffcddec>
    ca9c:	02000434 	movhi	r8,16
    caa0:	0009883a 	mov	r4,zero
    caa4:	423fffc4 	addi	r8,r8,-1
    caa8:	00bfffc4 	movi	r2,-1
    caac:	0401ffc4 	movi	r16,2047
    cab0:	003e6606 	br	c44c <_gp+0xfffcdb44>
    cab4:	1c62b03a 	or	r17,r3,r17
    cab8:	8822c03a 	cmpne	r17,r17,zero
    cabc:	0005883a 	mov	r2,zero
    cac0:	003f9906 	br	c928 <_gp+0xfffce020>
    cac4:	2807883a 	mov	r3,r5
    cac8:	3023883a 	mov	r17,r6
    cacc:	0401ffc4 	movi	r16,2047
    cad0:	003df506 	br	c2a8 <_gp+0xfffcd9a0>
    cad4:	2807883a 	mov	r3,r5
    cad8:	3023883a 	mov	r17,r6
    cadc:	003df206 	br	c2a8 <_gp+0xfffcd9a0>
    cae0:	123ff804 	addi	r8,r2,-32
    cae4:	01000804 	movi	r4,32
    cae8:	1a10d83a 	srl	r8,r3,r8
    caec:	11000a26 	beq	r2,r4,cb18 <__subdf3+0x8f4>
    caf0:	01001004 	movi	r4,64
    caf4:	2085c83a 	sub	r2,r4,r2
    caf8:	1884983a 	sll	r2,r3,r2
    cafc:	1444b03a 	or	r2,r2,r17
    cb00:	1004c03a 	cmpne	r2,r2,zero
    cb04:	40a2b03a 	or	r17,r8,r2
    cb08:	0005883a 	mov	r2,zero
    cb0c:	003f8606 	br	c928 <_gp+0xfffce020>
    cb10:	0005883a 	mov	r2,zero
    cb14:	003fdc06 	br	ca88 <_gp+0xfffce180>
    cb18:	0005883a 	mov	r2,zero
    cb1c:	003ff706 	br	cafc <_gp+0xfffce1f4>

0000cb20 <__fixdfsi>:
    cb20:	280cd53a 	srli	r6,r5,20
    cb24:	00c00434 	movhi	r3,16
    cb28:	18ffffc4 	addi	r3,r3,-1
    cb2c:	3181ffcc 	andi	r6,r6,2047
    cb30:	01c0ff84 	movi	r7,1022
    cb34:	28c6703a 	and	r3,r5,r3
    cb38:	280ad7fa 	srli	r5,r5,31
    cb3c:	3980120e 	bge	r7,r6,cb88 <__fixdfsi+0x68>
    cb40:	00810744 	movi	r2,1053
    cb44:	11800c16 	blt	r2,r6,cb78 <__fixdfsi+0x58>
    cb48:	00810cc4 	movi	r2,1075
    cb4c:	1185c83a 	sub	r2,r2,r6
    cb50:	01c007c4 	movi	r7,31
    cb54:	18c00434 	orhi	r3,r3,16
    cb58:	38800d16 	blt	r7,r2,cb90 <__fixdfsi+0x70>
    cb5c:	31befb44 	addi	r6,r6,-1043
    cb60:	2084d83a 	srl	r2,r4,r2
    cb64:	1986983a 	sll	r3,r3,r6
    cb68:	1884b03a 	or	r2,r3,r2
    cb6c:	28000726 	beq	r5,zero,cb8c <__fixdfsi+0x6c>
    cb70:	0085c83a 	sub	r2,zero,r2
    cb74:	f800283a 	ret
    cb78:	00a00034 	movhi	r2,32768
    cb7c:	10bfffc4 	addi	r2,r2,-1
    cb80:	2885883a 	add	r2,r5,r2
    cb84:	f800283a 	ret
    cb88:	0005883a 	mov	r2,zero
    cb8c:	f800283a 	ret
    cb90:	008104c4 	movi	r2,1043
    cb94:	1185c83a 	sub	r2,r2,r6
    cb98:	1884d83a 	srl	r2,r3,r2
    cb9c:	003ff306 	br	cb6c <_gp+0xfffce264>

0000cba0 <__floatsidf>:
    cba0:	defffd04 	addi	sp,sp,-12
    cba4:	dfc00215 	stw	ra,8(sp)
    cba8:	dc400115 	stw	r17,4(sp)
    cbac:	dc000015 	stw	r16,0(sp)
    cbb0:	20002b26 	beq	r4,zero,cc60 <__floatsidf+0xc0>
    cbb4:	2023883a 	mov	r17,r4
    cbb8:	2020d7fa 	srli	r16,r4,31
    cbbc:	20002d16 	blt	r4,zero,cc74 <__floatsidf+0xd4>
    cbc0:	8809883a 	mov	r4,r17
    cbc4:	000cd240 	call	cd24 <__clzsi2>
    cbc8:	01410784 	movi	r5,1054
    cbcc:	288bc83a 	sub	r5,r5,r2
    cbd0:	01010cc4 	movi	r4,1075
    cbd4:	2149c83a 	sub	r4,r4,r5
    cbd8:	00c007c4 	movi	r3,31
    cbdc:	1900160e 	bge	r3,r4,cc38 <__floatsidf+0x98>
    cbe0:	00c104c4 	movi	r3,1043
    cbe4:	1947c83a 	sub	r3,r3,r5
    cbe8:	88c6983a 	sll	r3,r17,r3
    cbec:	00800434 	movhi	r2,16
    cbf0:	10bfffc4 	addi	r2,r2,-1
    cbf4:	1886703a 	and	r3,r3,r2
    cbf8:	2941ffcc 	andi	r5,r5,2047
    cbfc:	800d883a 	mov	r6,r16
    cc00:	0005883a 	mov	r2,zero
    cc04:	280a953a 	slli	r5,r5,20
    cc08:	31803fcc 	andi	r6,r6,255
    cc0c:	01000434 	movhi	r4,16
    cc10:	300c97fa 	slli	r6,r6,31
    cc14:	213fffc4 	addi	r4,r4,-1
    cc18:	1906703a 	and	r3,r3,r4
    cc1c:	1946b03a 	or	r3,r3,r5
    cc20:	1986b03a 	or	r3,r3,r6
    cc24:	dfc00217 	ldw	ra,8(sp)
    cc28:	dc400117 	ldw	r17,4(sp)
    cc2c:	dc000017 	ldw	r16,0(sp)
    cc30:	dec00304 	addi	sp,sp,12
    cc34:	f800283a 	ret
    cc38:	00c002c4 	movi	r3,11
    cc3c:	1887c83a 	sub	r3,r3,r2
    cc40:	88c6d83a 	srl	r3,r17,r3
    cc44:	8904983a 	sll	r2,r17,r4
    cc48:	01000434 	movhi	r4,16
    cc4c:	213fffc4 	addi	r4,r4,-1
    cc50:	2941ffcc 	andi	r5,r5,2047
    cc54:	1906703a 	and	r3,r3,r4
    cc58:	800d883a 	mov	r6,r16
    cc5c:	003fe906 	br	cc04 <_gp+0xfffce2fc>
    cc60:	000d883a 	mov	r6,zero
    cc64:	000b883a 	mov	r5,zero
    cc68:	0007883a 	mov	r3,zero
    cc6c:	0005883a 	mov	r2,zero
    cc70:	003fe406 	br	cc04 <_gp+0xfffce2fc>
    cc74:	0123c83a 	sub	r17,zero,r4
    cc78:	003fd106 	br	cbc0 <_gp+0xfffce2b8>

0000cc7c <__floatunsidf>:
    cc7c:	defffe04 	addi	sp,sp,-8
    cc80:	dc000015 	stw	r16,0(sp)
    cc84:	dfc00115 	stw	ra,4(sp)
    cc88:	2021883a 	mov	r16,r4
    cc8c:	20002226 	beq	r4,zero,cd18 <__floatunsidf+0x9c>
    cc90:	000cd240 	call	cd24 <__clzsi2>
    cc94:	01010784 	movi	r4,1054
    cc98:	2089c83a 	sub	r4,r4,r2
    cc9c:	01810cc4 	movi	r6,1075
    cca0:	310dc83a 	sub	r6,r6,r4
    cca4:	00c007c4 	movi	r3,31
    cca8:	1980120e 	bge	r3,r6,ccf4 <__floatunsidf+0x78>
    ccac:	00c104c4 	movi	r3,1043
    ccb0:	1907c83a 	sub	r3,r3,r4
    ccb4:	80ca983a 	sll	r5,r16,r3
    ccb8:	00800434 	movhi	r2,16
    ccbc:	10bfffc4 	addi	r2,r2,-1
    ccc0:	2101ffcc 	andi	r4,r4,2047
    ccc4:	0021883a 	mov	r16,zero
    ccc8:	288a703a 	and	r5,r5,r2
    cccc:	2008953a 	slli	r4,r4,20
    ccd0:	00c00434 	movhi	r3,16
    ccd4:	18ffffc4 	addi	r3,r3,-1
    ccd8:	28c6703a 	and	r3,r5,r3
    ccdc:	8005883a 	mov	r2,r16
    cce0:	1906b03a 	or	r3,r3,r4
    cce4:	dfc00117 	ldw	ra,4(sp)
    cce8:	dc000017 	ldw	r16,0(sp)
    ccec:	dec00204 	addi	sp,sp,8
    ccf0:	f800283a 	ret
    ccf4:	00c002c4 	movi	r3,11
    ccf8:	188bc83a 	sub	r5,r3,r2
    ccfc:	814ad83a 	srl	r5,r16,r5
    cd00:	00c00434 	movhi	r3,16
    cd04:	18ffffc4 	addi	r3,r3,-1
    cd08:	81a0983a 	sll	r16,r16,r6
    cd0c:	2101ffcc 	andi	r4,r4,2047
    cd10:	28ca703a 	and	r5,r5,r3
    cd14:	003fed06 	br	cccc <_gp+0xfffce3c4>
    cd18:	0009883a 	mov	r4,zero
    cd1c:	000b883a 	mov	r5,zero
    cd20:	003fea06 	br	cccc <_gp+0xfffce3c4>

0000cd24 <__clzsi2>:
    cd24:	00bfffd4 	movui	r2,65535
    cd28:	11000536 	bltu	r2,r4,cd40 <__clzsi2+0x1c>
    cd2c:	00803fc4 	movi	r2,255
    cd30:	11000f36 	bltu	r2,r4,cd70 <__clzsi2+0x4c>
    cd34:	00800804 	movi	r2,32
    cd38:	0007883a 	mov	r3,zero
    cd3c:	00000506 	br	cd54 <__clzsi2+0x30>
    cd40:	00804034 	movhi	r2,256
    cd44:	10bfffc4 	addi	r2,r2,-1
    cd48:	11000c2e 	bgeu	r2,r4,cd7c <__clzsi2+0x58>
    cd4c:	00800204 	movi	r2,8
    cd50:	00c00604 	movi	r3,24
    cd54:	20c8d83a 	srl	r4,r4,r3
    cd58:	00c000f4 	movhi	r3,3
    cd5c:	18d2fe04 	addi	r3,r3,19448
    cd60:	1909883a 	add	r4,r3,r4
    cd64:	20c00003 	ldbu	r3,0(r4)
    cd68:	10c5c83a 	sub	r2,r2,r3
    cd6c:	f800283a 	ret
    cd70:	00800604 	movi	r2,24
    cd74:	00c00204 	movi	r3,8
    cd78:	003ff606 	br	cd54 <_gp+0xfffce44c>
    cd7c:	00800404 	movi	r2,16
    cd80:	1007883a 	mov	r3,r2
    cd84:	003ff306 	br	cd54 <_gp+0xfffce44c>

0000cd88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cd88:	defffe04 	addi	sp,sp,-8
    cd8c:	dfc00115 	stw	ra,4(sp)
    cd90:	df000015 	stw	fp,0(sp)
    cd94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cd98:	d0a00c17 	ldw	r2,-32720(gp)
    cd9c:	10000326 	beq	r2,zero,cdac <alt_get_errno+0x24>
    cda0:	d0a00c17 	ldw	r2,-32720(gp)
    cda4:	103ee83a 	callr	r2
    cda8:	00000106 	br	cdb0 <alt_get_errno+0x28>
    cdac:	d0a71604 	addi	r2,gp,-25512
}
    cdb0:	e037883a 	mov	sp,fp
    cdb4:	dfc00117 	ldw	ra,4(sp)
    cdb8:	df000017 	ldw	fp,0(sp)
    cdbc:	dec00204 	addi	sp,sp,8
    cdc0:	f800283a 	ret

0000cdc4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cdc4:	defffb04 	addi	sp,sp,-20
    cdc8:	dfc00415 	stw	ra,16(sp)
    cdcc:	df000315 	stw	fp,12(sp)
    cdd0:	df000304 	addi	fp,sp,12
    cdd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    cdd8:	e0bfff17 	ldw	r2,-4(fp)
    cddc:	10000616 	blt	r2,zero,cdf8 <close+0x34>
    cde0:	e0bfff17 	ldw	r2,-4(fp)
    cde4:	10c00324 	muli	r3,r2,12
    cde8:	008000f4 	movhi	r2,3
    cdec:	1095c704 	addi	r2,r2,22300
    cdf0:	1885883a 	add	r2,r3,r2
    cdf4:	00000106 	br	cdfc <close+0x38>
    cdf8:	0005883a 	mov	r2,zero
    cdfc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    ce00:	e0bffd17 	ldw	r2,-12(fp)
    ce04:	10001926 	beq	r2,zero,ce6c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    ce08:	e0bffd17 	ldw	r2,-12(fp)
    ce0c:	10800017 	ldw	r2,0(r2)
    ce10:	10800417 	ldw	r2,16(r2)
    ce14:	10000626 	beq	r2,zero,ce30 <close+0x6c>
    ce18:	e0bffd17 	ldw	r2,-12(fp)
    ce1c:	10800017 	ldw	r2,0(r2)
    ce20:	10800417 	ldw	r2,16(r2)
    ce24:	e13ffd17 	ldw	r4,-12(fp)
    ce28:	103ee83a 	callr	r2
    ce2c:	00000106 	br	ce34 <close+0x70>
    ce30:	0005883a 	mov	r2,zero
    ce34:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    ce38:	e13fff17 	ldw	r4,-4(fp)
    ce3c:	000d71c0 	call	d71c <alt_release_fd>
    if (rval < 0)
    ce40:	e0bffe17 	ldw	r2,-8(fp)
    ce44:	1000070e 	bge	r2,zero,ce64 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    ce48:	000cd880 	call	cd88 <alt_get_errno>
    ce4c:	1007883a 	mov	r3,r2
    ce50:	e0bffe17 	ldw	r2,-8(fp)
    ce54:	0085c83a 	sub	r2,zero,r2
    ce58:	18800015 	stw	r2,0(r3)
      return -1;
    ce5c:	00bfffc4 	movi	r2,-1
    ce60:	00000706 	br	ce80 <close+0xbc>
    }
    return 0;
    ce64:	0005883a 	mov	r2,zero
    ce68:	00000506 	br	ce80 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ce6c:	000cd880 	call	cd88 <alt_get_errno>
    ce70:	1007883a 	mov	r3,r2
    ce74:	00801444 	movi	r2,81
    ce78:	18800015 	stw	r2,0(r3)
    return -1;
    ce7c:	00bfffc4 	movi	r2,-1
  }
}
    ce80:	e037883a 	mov	sp,fp
    ce84:	dfc00117 	ldw	ra,4(sp)
    ce88:	df000017 	ldw	fp,0(sp)
    ce8c:	dec00204 	addi	sp,sp,8
    ce90:	f800283a 	ret

0000ce94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    ce94:	defffc04 	addi	sp,sp,-16
    ce98:	df000315 	stw	fp,12(sp)
    ce9c:	df000304 	addi	fp,sp,12
    cea0:	e13ffd15 	stw	r4,-12(fp)
    cea4:	e17ffe15 	stw	r5,-8(fp)
    cea8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    ceac:	e0bfff17 	ldw	r2,-4(fp)
}
    ceb0:	e037883a 	mov	sp,fp
    ceb4:	df000017 	ldw	fp,0(sp)
    ceb8:	dec00104 	addi	sp,sp,4
    cebc:	f800283a 	ret

0000cec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cec0:	defffe04 	addi	sp,sp,-8
    cec4:	dfc00115 	stw	ra,4(sp)
    cec8:	df000015 	stw	fp,0(sp)
    cecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ced0:	d0a00c17 	ldw	r2,-32720(gp)
    ced4:	10000326 	beq	r2,zero,cee4 <alt_get_errno+0x24>
    ced8:	d0a00c17 	ldw	r2,-32720(gp)
    cedc:	103ee83a 	callr	r2
    cee0:	00000106 	br	cee8 <alt_get_errno+0x28>
    cee4:	d0a71604 	addi	r2,gp,-25512
}
    cee8:	e037883a 	mov	sp,fp
    ceec:	dfc00117 	ldw	ra,4(sp)
    cef0:	df000017 	ldw	fp,0(sp)
    cef4:	dec00204 	addi	sp,sp,8
    cef8:	f800283a 	ret

0000cefc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    cefc:	defffb04 	addi	sp,sp,-20
    cf00:	dfc00415 	stw	ra,16(sp)
    cf04:	df000315 	stw	fp,12(sp)
    cf08:	df000304 	addi	fp,sp,12
    cf0c:	e13ffe15 	stw	r4,-8(fp)
    cf10:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf14:	e0bffe17 	ldw	r2,-8(fp)
    cf18:	10000616 	blt	r2,zero,cf34 <fstat+0x38>
    cf1c:	e0bffe17 	ldw	r2,-8(fp)
    cf20:	10c00324 	muli	r3,r2,12
    cf24:	008000f4 	movhi	r2,3
    cf28:	1095c704 	addi	r2,r2,22300
    cf2c:	1885883a 	add	r2,r3,r2
    cf30:	00000106 	br	cf38 <fstat+0x3c>
    cf34:	0005883a 	mov	r2,zero
    cf38:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    cf3c:	e0bffd17 	ldw	r2,-12(fp)
    cf40:	10001026 	beq	r2,zero,cf84 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cf44:	e0bffd17 	ldw	r2,-12(fp)
    cf48:	10800017 	ldw	r2,0(r2)
    cf4c:	10800817 	ldw	r2,32(r2)
    cf50:	10000726 	beq	r2,zero,cf70 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cf54:	e0bffd17 	ldw	r2,-12(fp)
    cf58:	10800017 	ldw	r2,0(r2)
    cf5c:	10800817 	ldw	r2,32(r2)
    cf60:	e17fff17 	ldw	r5,-4(fp)
    cf64:	e13ffd17 	ldw	r4,-12(fp)
    cf68:	103ee83a 	callr	r2
    cf6c:	00000a06 	br	cf98 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cf70:	e0bfff17 	ldw	r2,-4(fp)
    cf74:	00c80004 	movi	r3,8192
    cf78:	10c00115 	stw	r3,4(r2)
      return 0;
    cf7c:	0005883a 	mov	r2,zero
    cf80:	00000506 	br	cf98 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cf84:	000cec00 	call	cec0 <alt_get_errno>
    cf88:	1007883a 	mov	r3,r2
    cf8c:	00801444 	movi	r2,81
    cf90:	18800015 	stw	r2,0(r3)
    return -1;
    cf94:	00bfffc4 	movi	r2,-1
  }
}
    cf98:	e037883a 	mov	sp,fp
    cf9c:	dfc00117 	ldw	ra,4(sp)
    cfa0:	df000017 	ldw	fp,0(sp)
    cfa4:	dec00204 	addi	sp,sp,8
    cfa8:	f800283a 	ret

0000cfac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    cfac:	defff904 	addi	sp,sp,-28
    cfb0:	dfc00615 	stw	ra,24(sp)
    cfb4:	df000515 	stw	fp,20(sp)
    cfb8:	df000504 	addi	fp,sp,20
    cfbc:	e13ffc15 	stw	r4,-16(fp)
    cfc0:	e17ffd15 	stw	r5,-12(fp)
    cfc4:	e1bffe15 	stw	r6,-8(fp)
    cfc8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    cfcc:	e0800217 	ldw	r2,8(fp)
    cfd0:	d8800015 	stw	r2,0(sp)
    cfd4:	e1ffff17 	ldw	r7,-4(fp)
    cfd8:	e1bffe17 	ldw	r6,-8(fp)
    cfdc:	e17ffd17 	ldw	r5,-12(fp)
    cfe0:	e13ffc17 	ldw	r4,-16(fp)
    cfe4:	000d15c0 	call	d15c <alt_iic_isr_register>
}  
    cfe8:	e037883a 	mov	sp,fp
    cfec:	dfc00117 	ldw	ra,4(sp)
    cff0:	df000017 	ldw	fp,0(sp)
    cff4:	dec00204 	addi	sp,sp,8
    cff8:	f800283a 	ret

0000cffc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    cffc:	defff904 	addi	sp,sp,-28
    d000:	df000615 	stw	fp,24(sp)
    d004:	df000604 	addi	fp,sp,24
    d008:	e13ffe15 	stw	r4,-8(fp)
    d00c:	e17fff15 	stw	r5,-4(fp)
    d010:	e0bfff17 	ldw	r2,-4(fp)
    d014:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d018:	0005303a 	rdctl	r2,status
    d01c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d020:	e0fffb17 	ldw	r3,-20(fp)
    d024:	00bfff84 	movi	r2,-2
    d028:	1884703a 	and	r2,r3,r2
    d02c:	1001703a 	wrctl	status,r2
  
  return context;
    d030:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d034:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d038:	00c00044 	movi	r3,1
    d03c:	e0bffa17 	ldw	r2,-24(fp)
    d040:	1884983a 	sll	r2,r3,r2
    d044:	1007883a 	mov	r3,r2
    d048:	d0a71817 	ldw	r2,-25504(gp)
    d04c:	1884b03a 	or	r2,r3,r2
    d050:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d054:	d0a71817 	ldw	r2,-25504(gp)
    d058:	100170fa 	wrctl	ienable,r2
    d05c:	e0bffc17 	ldw	r2,-16(fp)
    d060:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d064:	e0bffd17 	ldw	r2,-12(fp)
    d068:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d06c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d070:	0001883a 	nop
}
    d074:	e037883a 	mov	sp,fp
    d078:	df000017 	ldw	fp,0(sp)
    d07c:	dec00104 	addi	sp,sp,4
    d080:	f800283a 	ret

0000d084 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d084:	defff904 	addi	sp,sp,-28
    d088:	df000615 	stw	fp,24(sp)
    d08c:	df000604 	addi	fp,sp,24
    d090:	e13ffe15 	stw	r4,-8(fp)
    d094:	e17fff15 	stw	r5,-4(fp)
    d098:	e0bfff17 	ldw	r2,-4(fp)
    d09c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d0a0:	0005303a 	rdctl	r2,status
    d0a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d0a8:	e0fffb17 	ldw	r3,-20(fp)
    d0ac:	00bfff84 	movi	r2,-2
    d0b0:	1884703a 	and	r2,r3,r2
    d0b4:	1001703a 	wrctl	status,r2
  
  return context;
    d0b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d0bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d0c0:	00c00044 	movi	r3,1
    d0c4:	e0bffa17 	ldw	r2,-24(fp)
    d0c8:	1884983a 	sll	r2,r3,r2
    d0cc:	0084303a 	nor	r2,zero,r2
    d0d0:	1007883a 	mov	r3,r2
    d0d4:	d0a71817 	ldw	r2,-25504(gp)
    d0d8:	1884703a 	and	r2,r3,r2
    d0dc:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d0e0:	d0a71817 	ldw	r2,-25504(gp)
    d0e4:	100170fa 	wrctl	ienable,r2
    d0e8:	e0bffc17 	ldw	r2,-16(fp)
    d0ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d0f0:	e0bffd17 	ldw	r2,-12(fp)
    d0f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d0f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d0fc:	0001883a 	nop
}
    d100:	e037883a 	mov	sp,fp
    d104:	df000017 	ldw	fp,0(sp)
    d108:	dec00104 	addi	sp,sp,4
    d10c:	f800283a 	ret

0000d110 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d110:	defffc04 	addi	sp,sp,-16
    d114:	df000315 	stw	fp,12(sp)
    d118:	df000304 	addi	fp,sp,12
    d11c:	e13ffe15 	stw	r4,-8(fp)
    d120:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d124:	000530fa 	rdctl	r2,ienable
    d128:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d12c:	00c00044 	movi	r3,1
    d130:	e0bfff17 	ldw	r2,-4(fp)
    d134:	1884983a 	sll	r2,r3,r2
    d138:	1007883a 	mov	r3,r2
    d13c:	e0bffd17 	ldw	r2,-12(fp)
    d140:	1884703a 	and	r2,r3,r2
    d144:	1004c03a 	cmpne	r2,r2,zero
    d148:	10803fcc 	andi	r2,r2,255
}
    d14c:	e037883a 	mov	sp,fp
    d150:	df000017 	ldw	fp,0(sp)
    d154:	dec00104 	addi	sp,sp,4
    d158:	f800283a 	ret

0000d15c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d15c:	defff504 	addi	sp,sp,-44
    d160:	dfc00a15 	stw	ra,40(sp)
    d164:	df000915 	stw	fp,36(sp)
    d168:	df000904 	addi	fp,sp,36
    d16c:	e13ffc15 	stw	r4,-16(fp)
    d170:	e17ffd15 	stw	r5,-12(fp)
    d174:	e1bffe15 	stw	r6,-8(fp)
    d178:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    d17c:	00bffa84 	movi	r2,-22
    d180:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d184:	e0bffd17 	ldw	r2,-12(fp)
    d188:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d18c:	e0bff817 	ldw	r2,-32(fp)
    d190:	10800808 	cmpgei	r2,r2,32
    d194:	1000271e 	bne	r2,zero,d234 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d198:	0005303a 	rdctl	r2,status
    d19c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d1a0:	e0fffb17 	ldw	r3,-20(fp)
    d1a4:	00bfff84 	movi	r2,-2
    d1a8:	1884703a 	and	r2,r3,r2
    d1ac:	1001703a 	wrctl	status,r2
  
  return context;
    d1b0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d1b4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    d1b8:	00800134 	movhi	r2,4
    d1bc:	10a58304 	addi	r2,r2,-27124
    d1c0:	e0fff817 	ldw	r3,-32(fp)
    d1c4:	180690fa 	slli	r3,r3,3
    d1c8:	10c5883a 	add	r2,r2,r3
    d1cc:	e0fffe17 	ldw	r3,-8(fp)
    d1d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    d1d4:	00800134 	movhi	r2,4
    d1d8:	10a58304 	addi	r2,r2,-27124
    d1dc:	e0fff817 	ldw	r3,-32(fp)
    d1e0:	180690fa 	slli	r3,r3,3
    d1e4:	10c5883a 	add	r2,r2,r3
    d1e8:	10800104 	addi	r2,r2,4
    d1ec:	e0ffff17 	ldw	r3,-4(fp)
    d1f0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d1f4:	e0bffe17 	ldw	r2,-8(fp)
    d1f8:	10000526 	beq	r2,zero,d210 <alt_iic_isr_register+0xb4>
    d1fc:	e0bff817 	ldw	r2,-32(fp)
    d200:	100b883a 	mov	r5,r2
    d204:	e13ffc17 	ldw	r4,-16(fp)
    d208:	000cffc0 	call	cffc <alt_ic_irq_enable>
    d20c:	00000406 	br	d220 <alt_iic_isr_register+0xc4>
    d210:	e0bff817 	ldw	r2,-32(fp)
    d214:	100b883a 	mov	r5,r2
    d218:	e13ffc17 	ldw	r4,-16(fp)
    d21c:	000d0840 	call	d084 <alt_ic_irq_disable>
    d220:	e0bff715 	stw	r2,-36(fp)
    d224:	e0bffa17 	ldw	r2,-24(fp)
    d228:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d22c:	e0bff917 	ldw	r2,-28(fp)
    d230:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d234:	e0bff717 	ldw	r2,-36(fp)
}
    d238:	e037883a 	mov	sp,fp
    d23c:	dfc00117 	ldw	ra,4(sp)
    d240:	df000017 	ldw	fp,0(sp)
    d244:	dec00204 	addi	sp,sp,8
    d248:	f800283a 	ret

0000d24c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d24c:	defffe04 	addi	sp,sp,-8
    d250:	dfc00115 	stw	ra,4(sp)
    d254:	df000015 	stw	fp,0(sp)
    d258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d25c:	d0a00c17 	ldw	r2,-32720(gp)
    d260:	10000326 	beq	r2,zero,d270 <alt_get_errno+0x24>
    d264:	d0a00c17 	ldw	r2,-32720(gp)
    d268:	103ee83a 	callr	r2
    d26c:	00000106 	br	d274 <alt_get_errno+0x28>
    d270:	d0a71604 	addi	r2,gp,-25512
}
    d274:	e037883a 	mov	sp,fp
    d278:	dfc00117 	ldw	ra,4(sp)
    d27c:	df000017 	ldw	fp,0(sp)
    d280:	dec00204 	addi	sp,sp,8
    d284:	f800283a 	ret

0000d288 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d288:	deffed04 	addi	sp,sp,-76
    d28c:	dfc01215 	stw	ra,72(sp)
    d290:	df001115 	stw	fp,68(sp)
    d294:	df001104 	addi	fp,sp,68
    d298:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d29c:	e0bfff17 	ldw	r2,-4(fp)
    d2a0:	10000616 	blt	r2,zero,d2bc <isatty+0x34>
    d2a4:	e0bfff17 	ldw	r2,-4(fp)
    d2a8:	10c00324 	muli	r3,r2,12
    d2ac:	008000f4 	movhi	r2,3
    d2b0:	1095c704 	addi	r2,r2,22300
    d2b4:	1885883a 	add	r2,r3,r2
    d2b8:	00000106 	br	d2c0 <isatty+0x38>
    d2bc:	0005883a 	mov	r2,zero
    d2c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d2c4:	e0bfef17 	ldw	r2,-68(fp)
    d2c8:	10000e26 	beq	r2,zero,d304 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d2cc:	e0bfef17 	ldw	r2,-68(fp)
    d2d0:	10800017 	ldw	r2,0(r2)
    d2d4:	10800817 	ldw	r2,32(r2)
    d2d8:	1000021e 	bne	r2,zero,d2e4 <isatty+0x5c>
    {
      return 1;
    d2dc:	00800044 	movi	r2,1
    d2e0:	00000d06 	br	d318 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d2e4:	e0bff004 	addi	r2,fp,-64
    d2e8:	100b883a 	mov	r5,r2
    d2ec:	e13fff17 	ldw	r4,-4(fp)
    d2f0:	000cefc0 	call	cefc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d2f4:	e0bff117 	ldw	r2,-60(fp)
    d2f8:	10880020 	cmpeqi	r2,r2,8192
    d2fc:	10803fcc 	andi	r2,r2,255
    d300:	00000506 	br	d318 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d304:	000d24c0 	call	d24c <alt_get_errno>
    d308:	1007883a 	mov	r3,r2
    d30c:	00801444 	movi	r2,81
    d310:	18800015 	stw	r2,0(r3)
    return 0;
    d314:	0005883a 	mov	r2,zero
  }
}
    d318:	e037883a 	mov	sp,fp
    d31c:	dfc00117 	ldw	ra,4(sp)
    d320:	df000017 	ldw	fp,0(sp)
    d324:	dec00204 	addi	sp,sp,8
    d328:	f800283a 	ret

0000d32c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d32c:	defffc04 	addi	sp,sp,-16
    d330:	df000315 	stw	fp,12(sp)
    d334:	df000304 	addi	fp,sp,12
    d338:	e13ffd15 	stw	r4,-12(fp)
    d33c:	e17ffe15 	stw	r5,-8(fp)
    d340:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d344:	e0fffe17 	ldw	r3,-8(fp)
    d348:	e0bffd17 	ldw	r2,-12(fp)
    d34c:	18800c26 	beq	r3,r2,d380 <alt_load_section+0x54>
  {
    while( to != end )
    d350:	00000806 	br	d374 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d354:	e0bffe17 	ldw	r2,-8(fp)
    d358:	10c00104 	addi	r3,r2,4
    d35c:	e0fffe15 	stw	r3,-8(fp)
    d360:	e0fffd17 	ldw	r3,-12(fp)
    d364:	19000104 	addi	r4,r3,4
    d368:	e13ffd15 	stw	r4,-12(fp)
    d36c:	18c00017 	ldw	r3,0(r3)
    d370:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d374:	e0fffe17 	ldw	r3,-8(fp)
    d378:	e0bfff17 	ldw	r2,-4(fp)
    d37c:	18bff51e 	bne	r3,r2,d354 <_gp+0xfffcea4c>
    {
      *to++ = *from++;
    }
  }
}
    d380:	0001883a 	nop
    d384:	e037883a 	mov	sp,fp
    d388:	df000017 	ldw	fp,0(sp)
    d38c:	dec00104 	addi	sp,sp,4
    d390:	f800283a 	ret

0000d394 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d394:	defffe04 	addi	sp,sp,-8
    d398:	dfc00115 	stw	ra,4(sp)
    d39c:	df000015 	stw	fp,0(sp)
    d3a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d3a4:	018000f4 	movhi	r6,3
    d3a8:	319a7204 	addi	r6,r6,27080
    d3ac:	014000f4 	movhi	r5,3
    d3b0:	29539404 	addi	r5,r5,20048
    d3b4:	010000f4 	movhi	r4,3
    d3b8:	211a7204 	addi	r4,r4,27080
    d3bc:	000d32c0 	call	d32c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d3c0:	01800034 	movhi	r6,0
    d3c4:	31809104 	addi	r6,r6,580
    d3c8:	01400034 	movhi	r5,0
    d3cc:	29400804 	addi	r5,r5,32
    d3d0:	01000034 	movhi	r4,0
    d3d4:	21000804 	addi	r4,r4,32
    d3d8:	000d32c0 	call	d32c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d3dc:	018000f4 	movhi	r6,3
    d3e0:	31939404 	addi	r6,r6,20048
    d3e4:	01400074 	movhi	r5,1
    d3e8:	295d5704 	addi	r5,r5,30044
    d3ec:	01000074 	movhi	r4,1
    d3f0:	211d5704 	addi	r4,r4,30044
    d3f4:	000d32c0 	call	d32c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d3f8:	00163580 	call	16358 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d3fc:	00165400 	call	16540 <alt_icache_flush_all>
}
    d400:	0001883a 	nop
    d404:	e037883a 	mov	sp,fp
    d408:	dfc00117 	ldw	ra,4(sp)
    d40c:	df000017 	ldw	fp,0(sp)
    d410:	dec00204 	addi	sp,sp,8
    d414:	f800283a 	ret

0000d418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d418:	defffe04 	addi	sp,sp,-8
    d41c:	dfc00115 	stw	ra,4(sp)
    d420:	df000015 	stw	fp,0(sp)
    d424:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d428:	d0a00c17 	ldw	r2,-32720(gp)
    d42c:	10000326 	beq	r2,zero,d43c <alt_get_errno+0x24>
    d430:	d0a00c17 	ldw	r2,-32720(gp)
    d434:	103ee83a 	callr	r2
    d438:	00000106 	br	d440 <alt_get_errno+0x28>
    d43c:	d0a71604 	addi	r2,gp,-25512
}
    d440:	e037883a 	mov	sp,fp
    d444:	dfc00117 	ldw	ra,4(sp)
    d448:	df000017 	ldw	fp,0(sp)
    d44c:	dec00204 	addi	sp,sp,8
    d450:	f800283a 	ret

0000d454 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    d454:	defff904 	addi	sp,sp,-28
    d458:	dfc00615 	stw	ra,24(sp)
    d45c:	df000515 	stw	fp,20(sp)
    d460:	df000504 	addi	fp,sp,20
    d464:	e13ffd15 	stw	r4,-12(fp)
    d468:	e17ffe15 	stw	r5,-8(fp)
    d46c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    d470:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d474:	e0bffd17 	ldw	r2,-12(fp)
    d478:	10000616 	blt	r2,zero,d494 <lseek+0x40>
    d47c:	e0bffd17 	ldw	r2,-12(fp)
    d480:	10c00324 	muli	r3,r2,12
    d484:	008000f4 	movhi	r2,3
    d488:	1095c704 	addi	r2,r2,22300
    d48c:	1885883a 	add	r2,r3,r2
    d490:	00000106 	br	d498 <lseek+0x44>
    d494:	0005883a 	mov	r2,zero
    d498:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    d49c:	e0bffc17 	ldw	r2,-16(fp)
    d4a0:	10001026 	beq	r2,zero,d4e4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    d4a4:	e0bffc17 	ldw	r2,-16(fp)
    d4a8:	10800017 	ldw	r2,0(r2)
    d4ac:	10800717 	ldw	r2,28(r2)
    d4b0:	10000926 	beq	r2,zero,d4d8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    d4b4:	e0bffc17 	ldw	r2,-16(fp)
    d4b8:	10800017 	ldw	r2,0(r2)
    d4bc:	10800717 	ldw	r2,28(r2)
    d4c0:	e1bfff17 	ldw	r6,-4(fp)
    d4c4:	e17ffe17 	ldw	r5,-8(fp)
    d4c8:	e13ffc17 	ldw	r4,-16(fp)
    d4cc:	103ee83a 	callr	r2
    d4d0:	e0bffb15 	stw	r2,-20(fp)
    d4d4:	00000506 	br	d4ec <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    d4d8:	00bfde84 	movi	r2,-134
    d4dc:	e0bffb15 	stw	r2,-20(fp)
    d4e0:	00000206 	br	d4ec <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    d4e4:	00bfebc4 	movi	r2,-81
    d4e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    d4ec:	e0bffb17 	ldw	r2,-20(fp)
    d4f0:	1000070e 	bge	r2,zero,d510 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    d4f4:	000d4180 	call	d418 <alt_get_errno>
    d4f8:	1007883a 	mov	r3,r2
    d4fc:	e0bffb17 	ldw	r2,-20(fp)
    d500:	0085c83a 	sub	r2,zero,r2
    d504:	18800015 	stw	r2,0(r3)
    rc = -1;
    d508:	00bfffc4 	movi	r2,-1
    d50c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    d510:	e0bffb17 	ldw	r2,-20(fp)
}
    d514:	e037883a 	mov	sp,fp
    d518:	dfc00117 	ldw	ra,4(sp)
    d51c:	df000017 	ldw	fp,0(sp)
    d520:	dec00204 	addi	sp,sp,8
    d524:	f800283a 	ret

0000d528 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    d528:	defff904 	addi	sp,sp,-28
    d52c:	dfc00615 	stw	ra,24(sp)
    d530:	df000515 	stw	fp,20(sp)
    d534:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    d538:	0009883a 	mov	r4,zero
    d53c:	001547c0 	call	1547c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    d540:	000e4e40 	call	e4e4 <OSInit>
    d544:	01000044 	movi	r4,1
    d548:	0012e340 	call	12e34 <OSSemCreate>
    d54c:	d0a71d15 	stw	r2,-25484(gp)
    d550:	01000044 	movi	r4,1
    d554:	0012e340 	call	12e34 <OSSemCreate>
    d558:	d0a71f15 	stw	r2,-25476(gp)
    d55c:	d0a71704 	addi	r2,gp,-25508
    d560:	e0bffc15 	stw	r2,-16(fp)
    d564:	00800044 	movi	r2,1
    d568:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    d56c:	e0bffd0b 	ldhu	r2,-12(fp)
    d570:	1009883a 	mov	r4,r2
    d574:	0012e340 	call	12e34 <OSSemCreate>
    d578:	1007883a 	mov	r3,r2
    d57c:	e0bffc17 	ldw	r2,-16(fp)
    d580:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    d584:	00154b40 	call	154b4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    d588:	018000f4 	movhi	r6,3
    d58c:	31934104 	addi	r6,r6,19716
    d590:	014000f4 	movhi	r5,3
    d594:	29534104 	addi	r5,r5,19716
    d598:	010000f4 	movhi	r4,3
    d59c:	21134104 	addi	r4,r4,19716
    d5a0:	00166d40 	call	166d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d5a4:	00164800 	call	16480 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d5a8:	01000074 	movhi	r4,1
    d5ac:	21193804 	addi	r4,r4,25824
    d5b0:	00171c80 	call	171c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d5b4:	d0a71917 	ldw	r2,-25500(gp)
    d5b8:	d0e71a17 	ldw	r3,-25496(gp)
    d5bc:	d1271b17 	ldw	r4,-25492(gp)
    d5c0:	200d883a 	mov	r6,r4
    d5c4:	180b883a 	mov	r5,r3
    d5c8:	1009883a 	mov	r4,r2
    d5cc:	00004680 	call	468 <main>
    d5d0:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    d5d4:	01000044 	movi	r4,1
    d5d8:	000cdc40 	call	cdc4 <close>
  exit (result);
    d5dc:	e13ffb17 	ldw	r4,-20(fp)
    d5e0:	00171dc0 	call	171dc <exit>

0000d5e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d5e4:	defffe04 	addi	sp,sp,-8
    d5e8:	dfc00115 	stw	ra,4(sp)
    d5ec:	df000015 	stw	fp,0(sp)
    d5f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d5f4:	d0a00c17 	ldw	r2,-32720(gp)
    d5f8:	10000326 	beq	r2,zero,d608 <alt_get_errno+0x24>
    d5fc:	d0a00c17 	ldw	r2,-32720(gp)
    d600:	103ee83a 	callr	r2
    d604:	00000106 	br	d60c <alt_get_errno+0x28>
    d608:	d0a71604 	addi	r2,gp,-25512
}
    d60c:	e037883a 	mov	sp,fp
    d610:	dfc00117 	ldw	ra,4(sp)
    d614:	df000017 	ldw	fp,0(sp)
    d618:	dec00204 	addi	sp,sp,8
    d61c:	f800283a 	ret

0000d620 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d620:	defff904 	addi	sp,sp,-28
    d624:	dfc00615 	stw	ra,24(sp)
    d628:	df000515 	stw	fp,20(sp)
    d62c:	df000504 	addi	fp,sp,20
    d630:	e13ffd15 	stw	r4,-12(fp)
    d634:	e17ffe15 	stw	r5,-8(fp)
    d638:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d63c:	e0bffd17 	ldw	r2,-12(fp)
    d640:	10000616 	blt	r2,zero,d65c <read+0x3c>
    d644:	e0bffd17 	ldw	r2,-12(fp)
    d648:	10c00324 	muli	r3,r2,12
    d64c:	008000f4 	movhi	r2,3
    d650:	1095c704 	addi	r2,r2,22300
    d654:	1885883a 	add	r2,r3,r2
    d658:	00000106 	br	d660 <read+0x40>
    d65c:	0005883a 	mov	r2,zero
    d660:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d664:	e0bffb17 	ldw	r2,-20(fp)
    d668:	10002226 	beq	r2,zero,d6f4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d66c:	e0bffb17 	ldw	r2,-20(fp)
    d670:	10800217 	ldw	r2,8(r2)
    d674:	108000cc 	andi	r2,r2,3
    d678:	10800060 	cmpeqi	r2,r2,1
    d67c:	1000181e 	bne	r2,zero,d6e0 <read+0xc0>
        (fd->dev->read))
    d680:	e0bffb17 	ldw	r2,-20(fp)
    d684:	10800017 	ldw	r2,0(r2)
    d688:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d68c:	10001426 	beq	r2,zero,d6e0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d690:	e0bffb17 	ldw	r2,-20(fp)
    d694:	10800017 	ldw	r2,0(r2)
    d698:	10800517 	ldw	r2,20(r2)
    d69c:	e0ffff17 	ldw	r3,-4(fp)
    d6a0:	180d883a 	mov	r6,r3
    d6a4:	e17ffe17 	ldw	r5,-8(fp)
    d6a8:	e13ffb17 	ldw	r4,-20(fp)
    d6ac:	103ee83a 	callr	r2
    d6b0:	e0bffc15 	stw	r2,-16(fp)
    d6b4:	e0bffc17 	ldw	r2,-16(fp)
    d6b8:	1000070e 	bge	r2,zero,d6d8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d6bc:	000d5e40 	call	d5e4 <alt_get_errno>
    d6c0:	1007883a 	mov	r3,r2
    d6c4:	e0bffc17 	ldw	r2,-16(fp)
    d6c8:	0085c83a 	sub	r2,zero,r2
    d6cc:	18800015 	stw	r2,0(r3)
          return -1;
    d6d0:	00bfffc4 	movi	r2,-1
    d6d4:	00000c06 	br	d708 <read+0xe8>
        }
        return rval;
    d6d8:	e0bffc17 	ldw	r2,-16(fp)
    d6dc:	00000a06 	br	d708 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d6e0:	000d5e40 	call	d5e4 <alt_get_errno>
    d6e4:	1007883a 	mov	r3,r2
    d6e8:	00800344 	movi	r2,13
    d6ec:	18800015 	stw	r2,0(r3)
    d6f0:	00000406 	br	d704 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d6f4:	000d5e40 	call	d5e4 <alt_get_errno>
    d6f8:	1007883a 	mov	r3,r2
    d6fc:	00801444 	movi	r2,81
    d700:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d704:	00bfffc4 	movi	r2,-1
}
    d708:	e037883a 	mov	sp,fp
    d70c:	dfc00117 	ldw	ra,4(sp)
    d710:	df000017 	ldw	fp,0(sp)
    d714:	dec00204 	addi	sp,sp,8
    d718:	f800283a 	ret

0000d71c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d71c:	defffe04 	addi	sp,sp,-8
    d720:	df000115 	stw	fp,4(sp)
    d724:	df000104 	addi	fp,sp,4
    d728:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d72c:	e0bfff17 	ldw	r2,-4(fp)
    d730:	108000d0 	cmplti	r2,r2,3
    d734:	10000d1e 	bne	r2,zero,d76c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d738:	008000f4 	movhi	r2,3
    d73c:	1095c704 	addi	r2,r2,22300
    d740:	e0ffff17 	ldw	r3,-4(fp)
    d744:	18c00324 	muli	r3,r3,12
    d748:	10c5883a 	add	r2,r2,r3
    d74c:	10800204 	addi	r2,r2,8
    d750:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d754:	008000f4 	movhi	r2,3
    d758:	1095c704 	addi	r2,r2,22300
    d75c:	e0ffff17 	ldw	r3,-4(fp)
    d760:	18c00324 	muli	r3,r3,12
    d764:	10c5883a 	add	r2,r2,r3
    d768:	10000015 	stw	zero,0(r2)
  }
}
    d76c:	0001883a 	nop
    d770:	e037883a 	mov	sp,fp
    d774:	df000017 	ldw	fp,0(sp)
    d778:	dec00104 	addi	sp,sp,4
    d77c:	f800283a 	ret

0000d780 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d780:	defff904 	addi	sp,sp,-28
    d784:	df000615 	stw	fp,24(sp)
    d788:	df000604 	addi	fp,sp,24
    d78c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d790:	0005303a 	rdctl	r2,status
    d794:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d798:	e0fffe17 	ldw	r3,-8(fp)
    d79c:	00bfff84 	movi	r2,-2
    d7a0:	1884703a 	and	r2,r3,r2
    d7a4:	1001703a 	wrctl	status,r2
  
  return context;
    d7a8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d7ac:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d7b0:	d0a00e17 	ldw	r2,-32712(gp)
    d7b4:	10c000c4 	addi	r3,r2,3
    d7b8:	00bfff04 	movi	r2,-4
    d7bc:	1884703a 	and	r2,r3,r2
    d7c0:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d7c4:	d0e00e17 	ldw	r3,-32712(gp)
    d7c8:	e0bfff17 	ldw	r2,-4(fp)
    d7cc:	1887883a 	add	r3,r3,r2
    d7d0:	00800134 	movhi	r2,4
    d7d4:	10b42404 	addi	r2,r2,-12144
    d7d8:	10c0062e 	bgeu	r2,r3,d7f4 <sbrk+0x74>
    d7dc:	e0bffb17 	ldw	r2,-20(fp)
    d7e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7e4:	e0bffa17 	ldw	r2,-24(fp)
    d7e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d7ec:	00bfffc4 	movi	r2,-1
    d7f0:	00000b06 	br	d820 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d7f4:	d0a00e17 	ldw	r2,-32712(gp)
    d7f8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    d7fc:	d0e00e17 	ldw	r3,-32712(gp)
    d800:	e0bfff17 	ldw	r2,-4(fp)
    d804:	1885883a 	add	r2,r3,r2
    d808:	d0a00e15 	stw	r2,-32712(gp)
    d80c:	e0bffb17 	ldw	r2,-20(fp)
    d810:	e0bffc15 	stw	r2,-16(fp)
    d814:	e0bffc17 	ldw	r2,-16(fp)
    d818:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d81c:	e0bffd17 	ldw	r2,-12(fp)
} 
    d820:	e037883a 	mov	sp,fp
    d824:	df000017 	ldw	fp,0(sp)
    d828:	dec00104 	addi	sp,sp,4
    d82c:	f800283a 	ret

0000d830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d830:	defffe04 	addi	sp,sp,-8
    d834:	dfc00115 	stw	ra,4(sp)
    d838:	df000015 	stw	fp,0(sp)
    d83c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d840:	d0a00c17 	ldw	r2,-32720(gp)
    d844:	10000326 	beq	r2,zero,d854 <alt_get_errno+0x24>
    d848:	d0a00c17 	ldw	r2,-32720(gp)
    d84c:	103ee83a 	callr	r2
    d850:	00000106 	br	d858 <alt_get_errno+0x28>
    d854:	d0a71604 	addi	r2,gp,-25512
}
    d858:	e037883a 	mov	sp,fp
    d85c:	dfc00117 	ldw	ra,4(sp)
    d860:	df000017 	ldw	fp,0(sp)
    d864:	dec00204 	addi	sp,sp,8
    d868:	f800283a 	ret

0000d86c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d86c:	defff904 	addi	sp,sp,-28
    d870:	dfc00615 	stw	ra,24(sp)
    d874:	df000515 	stw	fp,20(sp)
    d878:	df000504 	addi	fp,sp,20
    d87c:	e13ffd15 	stw	r4,-12(fp)
    d880:	e17ffe15 	stw	r5,-8(fp)
    d884:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d888:	e0bffd17 	ldw	r2,-12(fp)
    d88c:	10000616 	blt	r2,zero,d8a8 <write+0x3c>
    d890:	e0bffd17 	ldw	r2,-12(fp)
    d894:	10c00324 	muli	r3,r2,12
    d898:	008000f4 	movhi	r2,3
    d89c:	1095c704 	addi	r2,r2,22300
    d8a0:	1885883a 	add	r2,r3,r2
    d8a4:	00000106 	br	d8ac <write+0x40>
    d8a8:	0005883a 	mov	r2,zero
    d8ac:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d8b0:	e0bffb17 	ldw	r2,-20(fp)
    d8b4:	10002126 	beq	r2,zero,d93c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d8b8:	e0bffb17 	ldw	r2,-20(fp)
    d8bc:	10800217 	ldw	r2,8(r2)
    d8c0:	108000cc 	andi	r2,r2,3
    d8c4:	10001826 	beq	r2,zero,d928 <write+0xbc>
    d8c8:	e0bffb17 	ldw	r2,-20(fp)
    d8cc:	10800017 	ldw	r2,0(r2)
    d8d0:	10800617 	ldw	r2,24(r2)
    d8d4:	10001426 	beq	r2,zero,d928 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d8d8:	e0bffb17 	ldw	r2,-20(fp)
    d8dc:	10800017 	ldw	r2,0(r2)
    d8e0:	10800617 	ldw	r2,24(r2)
    d8e4:	e0ffff17 	ldw	r3,-4(fp)
    d8e8:	180d883a 	mov	r6,r3
    d8ec:	e17ffe17 	ldw	r5,-8(fp)
    d8f0:	e13ffb17 	ldw	r4,-20(fp)
    d8f4:	103ee83a 	callr	r2
    d8f8:	e0bffc15 	stw	r2,-16(fp)
    d8fc:	e0bffc17 	ldw	r2,-16(fp)
    d900:	1000070e 	bge	r2,zero,d920 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d904:	000d8300 	call	d830 <alt_get_errno>
    d908:	1007883a 	mov	r3,r2
    d90c:	e0bffc17 	ldw	r2,-16(fp)
    d910:	0085c83a 	sub	r2,zero,r2
    d914:	18800015 	stw	r2,0(r3)
        return -1;
    d918:	00bfffc4 	movi	r2,-1
    d91c:	00000c06 	br	d950 <write+0xe4>
      }
      return rval;
    d920:	e0bffc17 	ldw	r2,-16(fp)
    d924:	00000a06 	br	d950 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d928:	000d8300 	call	d830 <alt_get_errno>
    d92c:	1007883a 	mov	r3,r2
    d930:	00800344 	movi	r2,13
    d934:	18800015 	stw	r2,0(r3)
    d938:	00000406 	br	d94c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d93c:	000d8300 	call	d830 <alt_get_errno>
    d940:	1007883a 	mov	r3,r2
    d944:	00801444 	movi	r2,81
    d948:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d94c:	00bfffc4 	movi	r2,-1
}
    d950:	e037883a 	mov	sp,fp
    d954:	dfc00117 	ldw	ra,4(sp)
    d958:	df000017 	ldw	fp,0(sp)
    d95c:	dec00204 	addi	sp,sp,8
    d960:	f800283a 	ret

0000d964 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    d964:	deffdf04 	addi	sp,sp,-132
    d968:	dfc02015 	stw	ra,128(sp)
    d96c:	df001f15 	stw	fp,124(sp)
    d970:	df001f04 	addi	fp,sp,124
    d974:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    d978:	e0bfe204 	addi	r2,fp,-120
    d97c:	100b883a 	mov	r5,r2
    d980:	01003fc4 	movi	r4,255
    d984:	0014dbc0 	call	14dbc <OSTaskQuery>
    d988:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    d98c:	e0bffe83 	ldbu	r2,-6(fp)
    d990:	10803fcc 	andi	r2,r2,255
    d994:	10001e1e 	bne	r2,zero,da10 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    d998:	e0bfee83 	ldbu	r2,-70(fp)
    d99c:	10803fcc 	andi	r2,r2,255
    d9a0:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    d9a4:	d0a71d17 	ldw	r2,-25484(gp)
    d9a8:	e0fffd04 	addi	r3,fp,-12
    d9ac:	180b883a 	mov	r5,r3
    d9b0:	1009883a 	mov	r4,r2
    d9b4:	00135d40 	call	135d4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    d9b8:	e0bffe43 	ldbu	r2,-7(fp)
    d9bc:	10803fcc 	andi	r2,r2,255
    d9c0:	10000726 	beq	r2,zero,d9e0 <__env_lock+0x7c>
    d9c4:	d0a00f17 	ldw	r2,-32708(gp)
    d9c8:	e0ffe117 	ldw	r3,-124(fp)
    d9cc:	1880041e 	bne	r3,r2,d9e0 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    d9d0:	d0a71c17 	ldw	r2,-25488(gp)
    d9d4:	10800044 	addi	r2,r2,1
    d9d8:	d0a71c15 	stw	r2,-25488(gp)
    d9dc:	00000a06 	br	da08 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    d9e0:	d0a71d17 	ldw	r2,-25484(gp)
    d9e4:	e0fffe84 	addi	r3,fp,-6
    d9e8:	180d883a 	mov	r6,r3
    d9ec:	000b883a 	mov	r5,zero
    d9f0:	1009883a 	mov	r4,r2
    d9f4:	001314c0 	call	1314c <OSSemPend>
    locks  = 1;
    d9f8:	00800044 	movi	r2,1
    d9fc:	d0a71c15 	stw	r2,-25488(gp)
    lockid = id;
    da00:	e0bfe117 	ldw	r2,-124(fp)
    da04:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    da08:	0001883a 	nop
    da0c:	00000106 	br	da14 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    da10:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    da14:	e037883a 	mov	sp,fp
    da18:	dfc00117 	ldw	ra,4(sp)
    da1c:	df000017 	ldw	fp,0(sp)
    da20:	dec00204 	addi	sp,sp,8
    da24:	f800283a 	ret

0000da28 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    da28:	defffd04 	addi	sp,sp,-12
    da2c:	dfc00215 	stw	ra,8(sp)
    da30:	df000115 	stw	fp,4(sp)
    da34:	df000104 	addi	fp,sp,4
    da38:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    da3c:	d0a71c17 	ldw	r2,-25488(gp)
    da40:	10000b26 	beq	r2,zero,da70 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    da44:	d0a71c17 	ldw	r2,-25488(gp)
    da48:	10bfffc4 	addi	r2,r2,-1
    da4c:	d0a71c15 	stw	r2,-25488(gp)
    da50:	d0a71c17 	ldw	r2,-25488(gp)
    da54:	1000071e 	bne	r2,zero,da74 <__env_unlock+0x4c>
  {
    lockid = -1;
    da58:	00bfffc4 	movi	r2,-1
    da5c:	d0a00f15 	stw	r2,-32708(gp)
    OSSemPost( alt_envsem );
    da60:	d0a71d17 	ldw	r2,-25484(gp)
    da64:	1009883a 	mov	r4,r2
    da68:	00134c40 	call	134c4 <OSSemPost>
    da6c:	00000106 	br	da74 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    da70:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    da74:	e037883a 	mov	sp,fp
    da78:	dfc00117 	ldw	ra,4(sp)
    da7c:	df000017 	ldw	fp,0(sp)
    da80:	dec00204 	addi	sp,sp,8
    da84:	f800283a 	ret

0000da88 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    da88:	deffdb04 	addi	sp,sp,-148
    da8c:	dfc02415 	stw	ra,144(sp)
    da90:	df002315 	stw	fp,140(sp)
    da94:	df002304 	addi	fp,sp,140
    da98:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    da9c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    daa0:	d0a72043 	ldbu	r2,-25471(gp)
    daa4:	10803fcc 	andi	r2,r2,255
    daa8:	10800060 	cmpeqi	r2,r2,1
    daac:	10003626 	beq	r2,zero,db88 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    dab0:	e0bfe204 	addi	r2,fp,-120
    dab4:	100b883a 	mov	r5,r2
    dab8:	01003fc4 	movi	r4,255
    dabc:	0014dbc0 	call	14dbc <OSTaskQuery>
    dac0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    dac4:	e0bffe83 	ldbu	r2,-6(fp)
    dac8:	10803fcc 	andi	r2,r2,255
    dacc:	1000301e 	bne	r2,zero,db90 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    dad0:	e0bfee83 	ldbu	r2,-70(fp)
    dad4:	10803fcc 	andi	r2,r2,255
    dad8:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    dadc:	d0a71f17 	ldw	r2,-25476(gp)
    dae0:	e0fffd04 	addi	r3,fp,-12
    dae4:	180b883a 	mov	r5,r3
    dae8:	1009883a 	mov	r4,r2
    daec:	00135d40 	call	135d4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    daf0:	0005303a 	rdctl	r2,status
    daf4:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    daf8:	e0ffe117 	ldw	r3,-124(fp)
    dafc:	00bfff84 	movi	r2,-2
    db00:	1884703a 	and	r2,r3,r2
    db04:	1001703a 	wrctl	status,r2
  
  return context;
    db08:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    db0c:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    db10:	e0bffd0b 	ldhu	r2,-12(fp)
    db14:	10bfffcc 	andi	r2,r2,65535
    db18:	10000b1e 	bne	r2,zero,db48 <__malloc_lock+0xc0>
    db1c:	d0a01017 	ldw	r2,-32704(gp)
    db20:	e0ffde17 	ldw	r3,-136(fp)
    db24:	1880081e 	bne	r3,r2,db48 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    db28:	d0a71e17 	ldw	r2,-25480(gp)
    db2c:	10800044 	addi	r2,r2,1
    db30:	d0a71e15 	stw	r2,-25480(gp)
    db34:	e0bfdd17 	ldw	r2,-140(fp)
    db38:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    db3c:	e0bfdf17 	ldw	r2,-132(fp)
    db40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    db44:	00000e06 	br	db80 <__malloc_lock+0xf8>
    db48:	e0bfdd17 	ldw	r2,-140(fp)
    db4c:	e0bfe015 	stw	r2,-128(fp)
    db50:	e0bfe017 	ldw	r2,-128(fp)
    db54:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    db58:	d0a71f17 	ldw	r2,-25476(gp)
    db5c:	e0fffe84 	addi	r3,fp,-6
    db60:	180d883a 	mov	r6,r3
    db64:	000b883a 	mov	r5,zero
    db68:	1009883a 	mov	r4,r2
    db6c:	001314c0 	call	1314c <OSSemPend>
    locks  = 1;
    db70:	00800044 	movi	r2,1
    db74:	d0a71e15 	stw	r2,-25480(gp)
    lockid = id;
    db78:	e0bfde17 	ldw	r2,-136(fp)
    db7c:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    db80:	0001883a 	nop
    db84:	00000306 	br	db94 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    db88:	0001883a 	nop
    db8c:	00000106 	br	db94 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    db90:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    db94:	e037883a 	mov	sp,fp
    db98:	dfc00117 	ldw	ra,4(sp)
    db9c:	df000017 	ldw	fp,0(sp)
    dba0:	dec00204 	addi	sp,sp,8
    dba4:	f800283a 	ret

0000dba8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dba8:	defff804 	addi	sp,sp,-32
    dbac:	dfc00715 	stw	ra,28(sp)
    dbb0:	df000615 	stw	fp,24(sp)
    dbb4:	df000604 	addi	fp,sp,24
    dbb8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dbbc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    dbc0:	d0a72043 	ldbu	r2,-25471(gp)
    dbc4:	10803fcc 	andi	r2,r2,255
    dbc8:	10800060 	cmpeqi	r2,r2,1
    dbcc:	10002326 	beq	r2,zero,dc5c <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dbd0:	0005303a 	rdctl	r2,status
    dbd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dbd8:	e0fffe17 	ldw	r3,-8(fp)
    dbdc:	00bfff84 	movi	r2,-2
    dbe0:	1884703a 	and	r2,r3,r2
    dbe4:	1001703a 	wrctl	status,r2
  
  return context;
    dbe8:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    dbec:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    dbf0:	d0a71e17 	ldw	r2,-25480(gp)
    dbf4:	1000051e 	bne	r2,zero,dc0c <__malloc_unlock+0x64>
    dbf8:	e0bffa17 	ldw	r2,-24(fp)
    dbfc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dc00:	e0bffb17 	ldw	r2,-20(fp)
    dc04:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    dc08:	00001506 	br	dc60 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    dc0c:	d0a71e17 	ldw	r2,-25480(gp)
    dc10:	10bfffc4 	addi	r2,r2,-1
    dc14:	d0a71e15 	stw	r2,-25480(gp)
    dc18:	d0a71e17 	ldw	r2,-25480(gp)
    dc1c:	10000a1e 	bne	r2,zero,dc48 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    dc20:	00bfffc4 	movi	r2,-1
    dc24:	d0a01015 	stw	r2,-32704(gp)
    dc28:	e0bffa17 	ldw	r2,-24(fp)
    dc2c:	e0bffc15 	stw	r2,-16(fp)
    dc30:	e0bffc17 	ldw	r2,-16(fp)
    dc34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    dc38:	d0a71f17 	ldw	r2,-25476(gp)
    dc3c:	1009883a 	mov	r4,r2
    dc40:	00134c40 	call	134c4 <OSSemPost>
    dc44:	00000606 	br	dc60 <__malloc_unlock+0xb8>
    dc48:	e0bffa17 	ldw	r2,-24(fp)
    dc4c:	e0bffd15 	stw	r2,-12(fp)
    dc50:	e0bffd17 	ldw	r2,-12(fp)
    dc54:	1001703a 	wrctl	status,r2
    dc58:	00000106 	br	dc60 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    dc5c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    dc60:	e037883a 	mov	sp,fp
    dc64:	dfc00117 	ldw	ra,4(sp)
    dc68:	df000017 	ldw	fp,0(sp)
    dc6c:	dec00204 	addi	sp,sp,8
    dc70:	f800283a 	ret

0000dc74 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    dc74:	defff704 	addi	sp,sp,-36
    dc78:	dfc00815 	stw	ra,32(sp)
    dc7c:	df000715 	stw	fp,28(sp)
    dc80:	df000704 	addi	fp,sp,28
    dc84:	e13ffd15 	stw	r4,-12(fp)
    dc88:	e17ffe15 	stw	r5,-8(fp)
    dc8c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    dc90:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    dc94:	e0bfff17 	ldw	r2,-4(fp)
    dc98:	1000021e 	bne	r2,zero,dca4 <OSEventNameGet+0x30>
        return (0);
    dc9c:	0005883a 	mov	r2,zero
    dca0:	00003706 	br	dd80 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    dca4:	e0bffd17 	ldw	r2,-12(fp)
    dca8:	1000051e 	bne	r2,zero,dcc0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    dcac:	e0bfff17 	ldw	r2,-4(fp)
    dcb0:	00c00104 	movi	r3,4
    dcb4:	10c00005 	stb	r3,0(r2)
        return (0);
    dcb8:	0005883a 	mov	r2,zero
    dcbc:	00003006 	br	dd80 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    dcc0:	e0bffe17 	ldw	r2,-8(fp)
    dcc4:	1000051e 	bne	r2,zero,dcdc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    dcc8:	e0bfff17 	ldw	r2,-4(fp)
    dccc:	00c00304 	movi	r3,12
    dcd0:	10c00005 	stb	r3,0(r2)
        return (0);
    dcd4:	0005883a 	mov	r2,zero
    dcd8:	00002906 	br	dd80 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    dcdc:	d0a72e03 	ldbu	r2,-25416(gp)
    dce0:	10803fcc 	andi	r2,r2,255
    dce4:	10000526 	beq	r2,zero,dcfc <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    dce8:	e0bfff17 	ldw	r2,-4(fp)
    dcec:	00c00444 	movi	r3,17
    dcf0:	10c00005 	stb	r3,0(r2)
        return (0);
    dcf4:	0005883a 	mov	r2,zero
    dcf8:	00002106 	br	dd80 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    dcfc:	e0bffd17 	ldw	r2,-12(fp)
    dd00:	10800003 	ldbu	r2,0(r2)
    dd04:	10803fcc 	andi	r2,r2,255
    dd08:	10bfffc4 	addi	r2,r2,-1
    dd0c:	10800128 	cmpgeui	r2,r2,4
    dd10:	10000526 	beq	r2,zero,dd28 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    dd14:	e0bfff17 	ldw	r2,-4(fp)
    dd18:	00c00044 	movi	r3,1
    dd1c:	10c00005 	stb	r3,0(r2)
             return (0);
    dd20:	0005883a 	mov	r2,zero
    dd24:	00001606 	br	dd80 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    dd28:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd2c:	0005303a 	rdctl	r2,status
    dd30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd34:	e0fffb17 	ldw	r3,-20(fp)
    dd38:	00bfff84 	movi	r2,-2
    dd3c:	1884703a 	and	r2,r3,r2
    dd40:	1001703a 	wrctl	status,r2
  
  return context;
    dd44:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    dd48:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    dd4c:	e0bffd17 	ldw	r2,-12(fp)
    dd50:	10800384 	addi	r2,r2,14
    dd54:	100b883a 	mov	r5,r2
    dd58:	e13ffe17 	ldw	r4,-8(fp)
    dd5c:	000f6f80 	call	f6f8 <OS_StrCopy>
    dd60:	e0bffa05 	stb	r2,-24(fp)
    dd64:	e0bff917 	ldw	r2,-28(fp)
    dd68:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dd6c:	e0bffc17 	ldw	r2,-16(fp)
    dd70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    dd74:	e0bfff17 	ldw	r2,-4(fp)
    dd78:	10000005 	stb	zero,0(r2)
    return (len);
    dd7c:	e0bffa03 	ldbu	r2,-24(fp)
}
    dd80:	e037883a 	mov	sp,fp
    dd84:	dfc00117 	ldw	ra,4(sp)
    dd88:	df000017 	ldw	fp,0(sp)
    dd8c:	dec00204 	addi	sp,sp,8
    dd90:	f800283a 	ret

0000dd94 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    dd94:	defff604 	addi	sp,sp,-40
    dd98:	dfc00915 	stw	ra,36(sp)
    dd9c:	df000815 	stw	fp,32(sp)
    dda0:	df000804 	addi	fp,sp,32
    dda4:	e13ffd15 	stw	r4,-12(fp)
    dda8:	e17ffe15 	stw	r5,-8(fp)
    ddac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    ddb0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    ddb4:	e0bfff17 	ldw	r2,-4(fp)
    ddb8:	10004026 	beq	r2,zero,debc <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    ddbc:	e0bffd17 	ldw	r2,-12(fp)
    ddc0:	1000041e 	bne	r2,zero,ddd4 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    ddc4:	e0bfff17 	ldw	r2,-4(fp)
    ddc8:	00c00104 	movi	r3,4
    ddcc:	10c00005 	stb	r3,0(r2)
        return;
    ddd0:	00003b06 	br	dec0 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    ddd4:	e0bffe17 	ldw	r2,-8(fp)
    ddd8:	1000041e 	bne	r2,zero,ddec <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    dddc:	e0bfff17 	ldw	r2,-4(fp)
    dde0:	00c00304 	movi	r3,12
    dde4:	10c00005 	stb	r3,0(r2)
        return;
    dde8:	00003506 	br	dec0 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    ddec:	d0a72e03 	ldbu	r2,-25416(gp)
    ddf0:	10803fcc 	andi	r2,r2,255
    ddf4:	10000426 	beq	r2,zero,de08 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    ddf8:	e0bfff17 	ldw	r2,-4(fp)
    ddfc:	00c00484 	movi	r3,18
    de00:	10c00005 	stb	r3,0(r2)
        return;
    de04:	00002e06 	br	dec0 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    de08:	e0bffd17 	ldw	r2,-12(fp)
    de0c:	10800003 	ldbu	r2,0(r2)
    de10:	10803fcc 	andi	r2,r2,255
    de14:	10bfffc4 	addi	r2,r2,-1
    de18:	10800128 	cmpgeui	r2,r2,4
    de1c:	10000426 	beq	r2,zero,de30 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    de20:	e0bfff17 	ldw	r2,-4(fp)
    de24:	00c00044 	movi	r3,1
    de28:	10c00005 	stb	r3,0(r2)
             return;
    de2c:	00002406 	br	dec0 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    de30:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    de34:	0005303a 	rdctl	r2,status
    de38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    de3c:	e0fffc17 	ldw	r3,-16(fp)
    de40:	00bfff84 	movi	r2,-2
    de44:	1884703a 	and	r2,r3,r2
    de48:	1001703a 	wrctl	status,r2
  
  return context;
    de4c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    de50:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    de54:	e13ffe17 	ldw	r4,-8(fp)
    de58:	000f76c0 	call	f76c <OS_StrLen>
    de5c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    de60:	e0bffa03 	ldbu	r2,-24(fp)
    de64:	10800830 	cmpltui	r2,r2,32
    de68:	1000081e 	bne	r2,zero,de8c <OSEventNameSet+0xf8>
    de6c:	e0bff817 	ldw	r2,-32(fp)
    de70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    de74:	e0bff917 	ldw	r2,-28(fp)
    de78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    de7c:	e0bfff17 	ldw	r2,-4(fp)
    de80:	00c002c4 	movi	r3,11
    de84:	10c00005 	stb	r3,0(r2)
        return;
    de88:	00000d06 	br	dec0 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    de8c:	e0bffd17 	ldw	r2,-12(fp)
    de90:	10800384 	addi	r2,r2,14
    de94:	e17ffe17 	ldw	r5,-8(fp)
    de98:	1009883a 	mov	r4,r2
    de9c:	000f6f80 	call	f6f8 <OS_StrCopy>
    dea0:	e0bff817 	ldw	r2,-32(fp)
    dea4:	e0bffb15 	stw	r2,-20(fp)
    dea8:	e0bffb17 	ldw	r2,-20(fp)
    deac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    deb0:	e0bfff17 	ldw	r2,-4(fp)
    deb4:	10000005 	stb	zero,0(r2)
    deb8:	00000106 	br	dec0 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    debc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    dec0:	e037883a 	mov	sp,fp
    dec4:	dfc00117 	ldw	ra,4(sp)
    dec8:	df000017 	ldw	fp,0(sp)
    decc:	dec00204 	addi	sp,sp,8
    ded0:	f800283a 	ret

0000ded4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    ded4:	deffed04 	addi	sp,sp,-76
    ded8:	dfc01215 	stw	ra,72(sp)
    dedc:	df001115 	stw	fp,68(sp)
    dee0:	df001104 	addi	fp,sp,68
    dee4:	e13ffc15 	stw	r4,-16(fp)
    dee8:	e17ffd15 	stw	r5,-12(fp)
    deec:	e1bffe15 	stw	r6,-8(fp)
    def0:	3805883a 	mov	r2,r7
    def4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    def8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    defc:	e0800217 	ldw	r2,8(fp)
    df00:	1000021e 	bne	r2,zero,df0c <OSEventPendMulti+0x38>
        return (0);
    df04:	0005883a 	mov	r2,zero
    df08:	00017106 	br	e4d0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    df0c:	e0bffc17 	ldw	r2,-16(fp)
    df10:	1000051e 	bne	r2,zero,df28 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    df14:	e0800217 	ldw	r2,8(fp)
    df18:	00c00104 	movi	r3,4
    df1c:	10c00005 	stb	r3,0(r2)
        return (0);
    df20:	0005883a 	mov	r2,zero
    df24:	00016a06 	br	e4d0 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    df28:	e0bffd17 	ldw	r2,-12(fp)
    df2c:	1000051e 	bne	r2,zero,df44 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    df30:	e0800217 	ldw	r2,8(fp)
    df34:	00c00104 	movi	r3,4
    df38:	10c00005 	stb	r3,0(r2)
        return (0);
    df3c:	0005883a 	mov	r2,zero
    df40:	00016306 	br	e4d0 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    df44:	e0bffe17 	ldw	r2,-8(fp)
    df48:	1000051e 	bne	r2,zero,df60 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    df4c:	e0800217 	ldw	r2,8(fp)
    df50:	00c00104 	movi	r3,4
    df54:	10c00005 	stb	r3,0(r2)
        return (0);
    df58:	0005883a 	mov	r2,zero
    df5c:	00015c06 	br	e4d0 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    df60:	e0bffd17 	ldw	r2,-12(fp)
    df64:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    df68:	e0bffc17 	ldw	r2,-16(fp)
    df6c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    df70:	e0bfef17 	ldw	r2,-68(fp)
    df74:	10800017 	ldw	r2,0(r2)
    df78:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    df7c:	00001906 	br	dfe4 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    df80:	e0bff017 	ldw	r2,-64(fp)
    df84:	10800003 	ldbu	r2,0(r2)
    df88:	10803fcc 	andi	r2,r2,255
    df8c:	10c000a0 	cmpeqi	r3,r2,2
    df90:	1800091e 	bne	r3,zero,dfb8 <OSEventPendMulti+0xe4>
    df94:	10c000e0 	cmpeqi	r3,r2,3
    df98:	1800091e 	bne	r3,zero,dfc0 <OSEventPendMulti+0xec>
    df9c:	10800060 	cmpeqi	r2,r2,1
    dfa0:	1000091e 	bne	r2,zero,dfc8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    dfa4:	e0800217 	ldw	r2,8(fp)
    dfa8:	00c00044 	movi	r3,1
    dfac:	10c00005 	stb	r3,0(r2)
                 return (0);
    dfb0:	0005883a 	mov	r2,zero
    dfb4:	00014606 	br	e4d0 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    dfb8:	0001883a 	nop
    dfbc:	00000306 	br	dfcc <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    dfc0:	0001883a 	nop
    dfc4:	00000106 	br	dfcc <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    dfc8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    dfcc:	e0bfef17 	ldw	r2,-68(fp)
    dfd0:	10800104 	addi	r2,r2,4
    dfd4:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    dfd8:	e0bfef17 	ldw	r2,-68(fp)
    dfdc:	10800017 	ldw	r2,0(r2)
    dfe0:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    dfe4:	e0bff017 	ldw	r2,-64(fp)
    dfe8:	103fe51e 	bne	r2,zero,df80 <_gp+0xfffcf678>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    dfec:	d0a72e03 	ldbu	r2,-25416(gp)
    dff0:	10803fcc 	andi	r2,r2,255
    dff4:	10000526 	beq	r2,zero,e00c <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    dff8:	e0800217 	ldw	r2,8(fp)
    dffc:	00c00084 	movi	r3,2
    e000:	10c00005 	stb	r3,0(r2)
        return (0);
    e004:	0005883a 	mov	r2,zero
    e008:	00013106 	br	e4d0 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    e00c:	d0a72003 	ldbu	r2,-25472(gp)
    e010:	10803fcc 	andi	r2,r2,255
    e014:	10000526 	beq	r2,zero,e02c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    e018:	e0800217 	ldw	r2,8(fp)
    e01c:	00c00344 	movi	r3,13
    e020:	10c00005 	stb	r3,0(r2)
        return (0);
    e024:	0005883a 	mov	r2,zero
    e028:	00012906 	br	e4d0 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e02c:	0005303a 	rdctl	r2,status
    e030:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e034:	e0fffb17 	ldw	r3,-20(fp)
    e038:	00bfff84 	movi	r2,-2
    e03c:	1884703a 	and	r2,r3,r2
    e040:	1001703a 	wrctl	status,r2
  
  return context;
    e044:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    e048:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    e04c:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    e050:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    e054:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    e058:	e0bffc17 	ldw	r2,-16(fp)
    e05c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    e060:	e0bfef17 	ldw	r2,-68(fp)
    e064:	10800017 	ldw	r2,0(r2)
    e068:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e06c:	00008106 	br	e274 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    e070:	e0bff017 	ldw	r2,-64(fp)
    e074:	10800003 	ldbu	r2,0(r2)
    e078:	10803fcc 	andi	r2,r2,255
    e07c:	10c000a0 	cmpeqi	r3,r2,2
    e080:	18003c1e 	bne	r3,zero,e174 <OSEventPendMulti+0x2a0>
    e084:	10c000e0 	cmpeqi	r3,r2,3
    e088:	1800031e 	bne	r3,zero,e098 <OSEventPendMulti+0x1c4>
    e08c:	10800060 	cmpeqi	r2,r2,1
    e090:	10001e1e 	bne	r2,zero,e10c <OSEventPendMulti+0x238>
    e094:	00006606 	br	e230 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    e098:	e0bff017 	ldw	r2,-64(fp)
    e09c:	1080020b 	ldhu	r2,8(r2)
    e0a0:	10bfffcc 	andi	r2,r2,65535
    e0a4:	10001526 	beq	r2,zero,e0fc <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    e0a8:	e0bff017 	ldw	r2,-64(fp)
    e0ac:	1080020b 	ldhu	r2,8(r2)
    e0b0:	10bfffc4 	addi	r2,r2,-1
    e0b4:	1007883a 	mov	r3,r2
    e0b8:	e0bff017 	ldw	r2,-64(fp)
    e0bc:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    e0c0:	e0bffd17 	ldw	r2,-12(fp)
    e0c4:	10c00104 	addi	r3,r2,4
    e0c8:	e0fffd15 	stw	r3,-12(fp)
    e0cc:	e0fff017 	ldw	r3,-64(fp)
    e0d0:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    e0d4:	00800044 	movi	r2,1
    e0d8:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    e0dc:	e0bffe17 	ldw	r2,-8(fp)
    e0e0:	10c00104 	addi	r3,r2,4
    e0e4:	e0fffe15 	stw	r3,-8(fp)
    e0e8:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    e0ec:	e0bff18b 	ldhu	r2,-58(fp)
    e0f0:	10800044 	addi	r2,r2,1
    e0f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    e0f8:	00005806 	br	e25c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    e0fc:	e0bff203 	ldbu	r2,-56(fp)
    e100:	10800054 	ori	r2,r2,1
    e104:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e108:	00005406 	br	e25c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    e10c:	e0bff017 	ldw	r2,-64(fp)
    e110:	10800117 	ldw	r2,4(r2)
    e114:	10001326 	beq	r2,zero,e164 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    e118:	e0bffe17 	ldw	r2,-8(fp)
    e11c:	10c00104 	addi	r3,r2,4
    e120:	e0fffe15 	stw	r3,-8(fp)
    e124:	e0fff017 	ldw	r3,-64(fp)
    e128:	18c00117 	ldw	r3,4(r3)
    e12c:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    e130:	e0bff017 	ldw	r2,-64(fp)
    e134:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    e138:	e0bffd17 	ldw	r2,-12(fp)
    e13c:	10c00104 	addi	r3,r2,4
    e140:	e0fffd15 	stw	r3,-12(fp)
    e144:	e0fff017 	ldw	r3,-64(fp)
    e148:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    e14c:	00800044 	movi	r2,1
    e150:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e154:	e0bff18b 	ldhu	r2,-58(fp)
    e158:	10800044 	addi	r2,r2,1
    e15c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    e160:	00003e06 	br	e25c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    e164:	e0bff203 	ldbu	r2,-56(fp)
    e168:	10800094 	ori	r2,r2,2
    e16c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e170:	00003a06 	br	e25c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    e174:	e0bff017 	ldw	r2,-64(fp)
    e178:	10800117 	ldw	r2,4(r2)
    e17c:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    e180:	e0bff517 	ldw	r2,-44(fp)
    e184:	1080058b 	ldhu	r2,22(r2)
    e188:	10bfffcc 	andi	r2,r2,65535
    e18c:	10002426 	beq	r2,zero,e220 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    e190:	e0bffe17 	ldw	r2,-8(fp)
    e194:	10c00104 	addi	r3,r2,4
    e198:	e0fffe15 	stw	r3,-8(fp)
    e19c:	e0fff517 	ldw	r3,-44(fp)
    e1a0:	18c00417 	ldw	r3,16(r3)
    e1a4:	19400104 	addi	r5,r3,4
    e1a8:	e13ff517 	ldw	r4,-44(fp)
    e1ac:	21400415 	stw	r5,16(r4)
    e1b0:	18c00017 	ldw	r3,0(r3)
    e1b4:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    e1b8:	e0bff517 	ldw	r2,-44(fp)
    e1bc:	10c00417 	ldw	r3,16(r2)
    e1c0:	e0bff517 	ldw	r2,-44(fp)
    e1c4:	10800217 	ldw	r2,8(r2)
    e1c8:	1880041e 	bne	r3,r2,e1dc <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    e1cc:	e0bff517 	ldw	r2,-44(fp)
    e1d0:	10c00117 	ldw	r3,4(r2)
    e1d4:	e0bff517 	ldw	r2,-44(fp)
    e1d8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    e1dc:	e0bff517 	ldw	r2,-44(fp)
    e1e0:	1080058b 	ldhu	r2,22(r2)
    e1e4:	10bfffc4 	addi	r2,r2,-1
    e1e8:	1007883a 	mov	r3,r2
    e1ec:	e0bff517 	ldw	r2,-44(fp)
    e1f0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    e1f4:	e0bffd17 	ldw	r2,-12(fp)
    e1f8:	10c00104 	addi	r3,r2,4
    e1fc:	e0fffd15 	stw	r3,-12(fp)
    e200:	e0fff017 	ldw	r3,-64(fp)
    e204:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    e208:	00800044 	movi	r2,1
    e20c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    e210:	e0bff18b 	ldhu	r2,-58(fp)
    e214:	10800044 	addi	r2,r2,1
    e218:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    e21c:	00000f06 	br	e25c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    e220:	e0bff203 	ldbu	r2,-56(fp)
    e224:	10800114 	ori	r2,r2,4
    e228:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    e22c:	00000b06 	br	e25c <OSEventPendMulti+0x388>
    e230:	e0bff317 	ldw	r2,-52(fp)
    e234:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e238:	e0bff417 	ldw	r2,-48(fp)
    e23c:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    e240:	e0bffd17 	ldw	r2,-12(fp)
    e244:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    e248:	e0800217 	ldw	r2,8(fp)
    e24c:	00c00044 	movi	r3,1
    e250:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    e254:	e0bff18b 	ldhu	r2,-58(fp)
    e258:	00009d06 	br	e4d0 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    e25c:	e0bfef17 	ldw	r2,-68(fp)
    e260:	10800104 	addi	r2,r2,4
    e264:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    e268:	e0bfef17 	ldw	r2,-68(fp)
    e26c:	10800017 	ldw	r2,0(r2)
    e270:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    e274:	e0bff017 	ldw	r2,-64(fp)
    e278:	103f7d1e 	bne	r2,zero,e070 <_gp+0xfffcf768>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    e27c:	e0bff103 	ldbu	r2,-60(fp)
    e280:	10800058 	cmpnei	r2,r2,1
    e284:	10000a1e 	bne	r2,zero,e2b0 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    e288:	e0bffd17 	ldw	r2,-12(fp)
    e28c:	10000015 	stw	zero,0(r2)
    e290:	e0bff317 	ldw	r2,-52(fp)
    e294:	e0bff615 	stw	r2,-40(fp)
    e298:	e0bff617 	ldw	r2,-40(fp)
    e29c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    e2a0:	e0800217 	ldw	r2,8(fp)
    e2a4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    e2a8:	e0bff18b 	ldhu	r2,-58(fp)
    e2ac:	00008806 	br	e4d0 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    e2b0:	d0a72f17 	ldw	r2,-25412(gp)
    e2b4:	d0e72f17 	ldw	r3,-25412(gp)
    e2b8:	19000c03 	ldbu	r4,48(r3)
    e2bc:	e0fff203 	ldbu	r3,-56(fp)
    e2c0:	20c6b03a 	or	r3,r4,r3
    e2c4:	1809883a 	mov	r4,r3
    e2c8:	00ffe004 	movi	r3,-128
    e2cc:	20c6b03a 	or	r3,r4,r3
    e2d0:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    e2d4:	d0a72f17 	ldw	r2,-25412(gp)
    e2d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    e2dc:	d0a72f17 	ldw	r2,-25412(gp)
    e2e0:	e0ffff0b 	ldhu	r3,-4(fp)
    e2e4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    e2e8:	e13ffc17 	ldw	r4,-16(fp)
    e2ec:	000ee100 	call	ee10 <OS_EventTaskWaitMulti>
    e2f0:	e0bff317 	ldw	r2,-52(fp)
    e2f4:	e0bff915 	stw	r2,-28(fp)
    e2f8:	e0bff917 	ldw	r2,-28(fp)
    e2fc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    e300:	000f5b40 	call	f5b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e304:	0005303a 	rdctl	r2,status
    e308:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e30c:	e0fff717 	ldw	r3,-36(fp)
    e310:	00bfff84 	movi	r2,-2
    e314:	1884703a 	and	r2,r3,r2
    e318:	1001703a 	wrctl	status,r2
  
  return context;
    e31c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    e320:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    e324:	d0a72f17 	ldw	r2,-25412(gp)
    e328:	10800c43 	ldbu	r2,49(r2)
    e32c:	10803fcc 	andi	r2,r2,255
    e330:	10000226 	beq	r2,zero,e33c <OSEventPendMulti+0x468>
    e334:	108000a0 	cmpeqi	r2,r2,2
    e338:	10001826 	beq	r2,zero,e39c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    e33c:	d0a72f17 	ldw	r2,-25412(gp)
    e340:	10800717 	ldw	r2,28(r2)
    e344:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    e348:	e0bff017 	ldw	r2,-64(fp)
    e34c:	10000b26 	beq	r2,zero,e37c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    e350:	e0bffd17 	ldw	r2,-12(fp)
    e354:	10c00104 	addi	r3,r2,4
    e358:	e0fffd15 	stw	r3,-12(fp)
    e35c:	e0fff017 	ldw	r3,-64(fp)
    e360:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    e364:	e0bffd17 	ldw	r2,-12(fp)
    e368:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    e36c:	e0bff18b 	ldhu	r2,-58(fp)
    e370:	10800044 	addi	r2,r2,1
    e374:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    e378:	00000d06 	br	e3b0 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    e37c:	d0a72f17 	ldw	r2,-25412(gp)
    e380:	00c00044 	movi	r3,1
    e384:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e388:	d0a72f17 	ldw	r2,-25412(gp)
    e38c:	e17ffc17 	ldw	r5,-16(fp)
    e390:	1009883a 	mov	r4,r2
    e394:	000f0180 	call	f018 <OS_EventTaskRemoveMulti>
             }
			 break;
    e398:	00000506 	br	e3b0 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    e39c:	d0a72f17 	ldw	r2,-25412(gp)
    e3a0:	e17ffc17 	ldw	r5,-16(fp)
    e3a4:	1009883a 	mov	r4,r2
    e3a8:	000f0180 	call	f018 <OS_EventTaskRemoveMulti>
             break;
    e3ac:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    e3b0:	d0a72f17 	ldw	r2,-25412(gp)
    e3b4:	10800c43 	ldbu	r2,49(r2)
    e3b8:	10803fcc 	andi	r2,r2,255
    e3bc:	10000326 	beq	r2,zero,e3cc <OSEventPendMulti+0x4f8>
    e3c0:	108000a0 	cmpeqi	r2,r2,2
    e3c4:	1000231e 	bne	r2,zero,e454 <OSEventPendMulti+0x580>
    e3c8:	00002a06 	br	e474 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    e3cc:	e0bff017 	ldw	r2,-64(fp)
    e3d0:	10800003 	ldbu	r2,0(r2)
    e3d4:	10803fcc 	andi	r2,r2,255
    e3d8:	0080100e 	bge	zero,r2,e41c <OSEventPendMulti+0x548>
    e3dc:	10c000d0 	cmplti	r3,r2,3
    e3e0:	1800071e 	bne	r3,zero,e400 <OSEventPendMulti+0x52c>
    e3e4:	108000e0 	cmpeqi	r2,r2,3
    e3e8:	10000c26 	beq	r2,zero,e41c <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    e3ec:	e0bffe17 	ldw	r2,-8(fp)
    e3f0:	10c00104 	addi	r3,r2,4
    e3f4:	e0fffe15 	stw	r3,-8(fp)
    e3f8:	10000015 	stw	zero,0(r2)
                      break;
    e3fc:	00001206 	br	e448 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    e400:	e0bffe17 	ldw	r2,-8(fp)
    e404:	10c00104 	addi	r3,r2,4
    e408:	e0fffe15 	stw	r3,-8(fp)
    e40c:	d0e72f17 	ldw	r3,-25412(gp)
    e410:	18c00917 	ldw	r3,36(r3)
    e414:	10c00015 	stw	r3,0(r2)
                      break;
    e418:	00000b06 	br	e448 <OSEventPendMulti+0x574>
    e41c:	e0bff317 	ldw	r2,-52(fp)
    e420:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e424:	e0bff817 	ldw	r2,-32(fp)
    e428:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    e42c:	e0bffd17 	ldw	r2,-12(fp)
    e430:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    e434:	e0800217 	ldw	r2,8(fp)
    e438:	00c00044 	movi	r3,1
    e43c:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    e440:	e0bff18b 	ldhu	r2,-58(fp)
    e444:	00002206 	br	e4d0 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    e448:	e0800217 	ldw	r2,8(fp)
    e44c:	10000005 	stb	zero,0(r2)
             break;
    e450:	00001006 	br	e494 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    e454:	e0bffe17 	ldw	r2,-8(fp)
    e458:	10c00104 	addi	r3,r2,4
    e45c:	e0fffe15 	stw	r3,-8(fp)
    e460:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    e464:	e0800217 	ldw	r2,8(fp)
    e468:	00c00384 	movi	r3,14
    e46c:	10c00005 	stb	r3,0(r2)
             break;
    e470:	00000806 	br	e494 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    e474:	e0bffe17 	ldw	r2,-8(fp)
    e478:	10c00104 	addi	r3,r2,4
    e47c:	e0fffe15 	stw	r3,-8(fp)
    e480:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    e484:	e0800217 	ldw	r2,8(fp)
    e488:	00c00284 	movi	r3,10
    e48c:	10c00005 	stb	r3,0(r2)
             break;
    e490:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    e494:	d0a72f17 	ldw	r2,-25412(gp)
    e498:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    e49c:	d0a72f17 	ldw	r2,-25412(gp)
    e4a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    e4a4:	d0a72f17 	ldw	r2,-25412(gp)
    e4a8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    e4ac:	d0a72f17 	ldw	r2,-25412(gp)
    e4b0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    e4b4:	d0a72f17 	ldw	r2,-25412(gp)
    e4b8:	10000915 	stw	zero,36(r2)
    e4bc:	e0bff317 	ldw	r2,-52(fp)
    e4c0:	e0bffa15 	stw	r2,-24(fp)
    e4c4:	e0bffa17 	ldw	r2,-24(fp)
    e4c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    e4cc:	e0bff18b 	ldhu	r2,-58(fp)
}
    e4d0:	e037883a 	mov	sp,fp
    e4d4:	dfc00117 	ldw	ra,4(sp)
    e4d8:	df000017 	ldw	fp,0(sp)
    e4dc:	dec00204 	addi	sp,sp,8
    e4e0:	f800283a 	ret

0000e4e4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    e4e4:	defffe04 	addi	sp,sp,-8
    e4e8:	dfc00115 	stw	ra,4(sp)
    e4ec:	df000015 	stw	fp,0(sp)
    e4f0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    e4f4:	0016e400 	call	16e40 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    e4f8:	000f2600 	call	f260 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    e4fc:	000f2a80 	call	f2a8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    e500:	000f4140 	call	f414 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    e504:	000f1800 	call	f180 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    e508:	00112b40 	call	112b4 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    e50c:	0011bb40 	call	11bb4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    e510:	0012cdc0 	call	12cdc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    e514:	000f3140 	call	f314 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    e518:	000f3940 	call	f394 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    e51c:	0016e600 	call	16e60 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    e520:	000fc880 	call	fc88 <OSDebugInit>
#endif
}
    e524:	0001883a 	nop
    e528:	e037883a 	mov	sp,fp
    e52c:	dfc00117 	ldw	ra,4(sp)
    e530:	df000017 	ldw	fp,0(sp)
    e534:	dec00204 	addi	sp,sp,8
    e538:	f800283a 	ret

0000e53c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    e53c:	deffff04 	addi	sp,sp,-4
    e540:	df000015 	stw	fp,0(sp)
    e544:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    e548:	d0a72043 	ldbu	r2,-25471(gp)
    e54c:	10803fcc 	andi	r2,r2,255
    e550:	10800058 	cmpnei	r2,r2,1
    e554:	1000071e 	bne	r2,zero,e574 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    e558:	d0a72e03 	ldbu	r2,-25416(gp)
    e55c:	10803fcc 	andi	r2,r2,255
    e560:	10803fe0 	cmpeqi	r2,r2,255
    e564:	1000031e 	bne	r2,zero,e574 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    e568:	d0a72e03 	ldbu	r2,-25416(gp)
    e56c:	10800044 	addi	r2,r2,1
    e570:	d0a72e05 	stb	r2,-25416(gp)
        }
    }
}
    e574:	0001883a 	nop
    e578:	e037883a 	mov	sp,fp
    e57c:	df000017 	ldw	fp,0(sp)
    e580:	dec00104 	addi	sp,sp,4
    e584:	f800283a 	ret

0000e588 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    e588:	defffb04 	addi	sp,sp,-20
    e58c:	dfc00415 	stw	ra,16(sp)
    e590:	df000315 	stw	fp,12(sp)
    e594:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e598:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    e59c:	d0a72043 	ldbu	r2,-25471(gp)
    e5a0:	10803fcc 	andi	r2,r2,255
    e5a4:	10800058 	cmpnei	r2,r2,1
    e5a8:	10002f1e 	bne	r2,zero,e668 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e5ac:	0005303a 	rdctl	r2,status
    e5b0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e5b4:	e0ffff17 	ldw	r3,-4(fp)
    e5b8:	00bfff84 	movi	r2,-2
    e5bc:	1884703a 	and	r2,r3,r2
    e5c0:	1001703a 	wrctl	status,r2
  
  return context;
    e5c4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e5c8:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    e5cc:	d0a72e03 	ldbu	r2,-25416(gp)
    e5d0:	10803fcc 	andi	r2,r2,255
    e5d4:	10000326 	beq	r2,zero,e5e4 <OSIntExit+0x5c>
            OSIntNesting--;
    e5d8:	d0a72e03 	ldbu	r2,-25416(gp)
    e5dc:	10bfffc4 	addi	r2,r2,-1
    e5e0:	d0a72e05 	stb	r2,-25416(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    e5e4:	d0a72e03 	ldbu	r2,-25416(gp)
    e5e8:	10803fcc 	andi	r2,r2,255
    e5ec:	10001a1e 	bne	r2,zero,e658 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    e5f0:	d0a72003 	ldbu	r2,-25472(gp)
    e5f4:	10803fcc 	andi	r2,r2,255
    e5f8:	1000171e 	bne	r2,zero,e658 <OSIntExit+0xd0>
                OS_SchedNew();
    e5fc:	000f6840 	call	f684 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    e600:	d0e72203 	ldbu	r3,-25464(gp)
    e604:	d0a72243 	ldbu	r2,-25463(gp)
    e608:	18c03fcc 	andi	r3,r3,255
    e60c:	10803fcc 	andi	r2,r2,255
    e610:	18801126 	beq	r3,r2,e658 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    e614:	d0a72203 	ldbu	r2,-25464(gp)
    e618:	10c03fcc 	andi	r3,r2,255
    e61c:	00800134 	movhi	r2,4
    e620:	10b23704 	addi	r2,r2,-14116
    e624:	18c7883a 	add	r3,r3,r3
    e628:	18c7883a 	add	r3,r3,r3
    e62c:	10c5883a 	add	r2,r2,r3
    e630:	10800017 	ldw	r2,0(r2)
    e634:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    e638:	d0a72a17 	ldw	r2,-25432(gp)
    e63c:	10c00e17 	ldw	r3,56(r2)
    e640:	18c00044 	addi	r3,r3,1
    e644:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    e648:	d0a72517 	ldw	r2,-25452(gp)
    e64c:	10800044 	addi	r2,r2,1
    e650:	d0a72515 	stw	r2,-25452(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    e654:	0016b6c0 	call	16b6c <OSCtxSw>
    e658:	e0bffd17 	ldw	r2,-12(fp)
    e65c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e660:	e0bffe17 	ldw	r2,-8(fp)
    e664:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e668:	0001883a 	nop
    e66c:	e037883a 	mov	sp,fp
    e670:	dfc00117 	ldw	ra,4(sp)
    e674:	df000017 	ldw	fp,0(sp)
    e678:	dec00204 	addi	sp,sp,8
    e67c:	f800283a 	ret

0000e680 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    e680:	defffc04 	addi	sp,sp,-16
    e684:	df000315 	stw	fp,12(sp)
    e688:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e68c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    e690:	d0a72043 	ldbu	r2,-25471(gp)
    e694:	10803fcc 	andi	r2,r2,255
    e698:	10800058 	cmpnei	r2,r2,1
    e69c:	1000161e 	bne	r2,zero,e6f8 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6a0:	0005303a 	rdctl	r2,status
    e6a4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6a8:	e0ffff17 	ldw	r3,-4(fp)
    e6ac:	00bfff84 	movi	r2,-2
    e6b0:	1884703a 	and	r2,r3,r2
    e6b4:	1001703a 	wrctl	status,r2
  
  return context;
    e6b8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e6bc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    e6c0:	d0a72e03 	ldbu	r2,-25416(gp)
    e6c4:	10803fcc 	andi	r2,r2,255
    e6c8:	1000071e 	bne	r2,zero,e6e8 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    e6cc:	d0a72003 	ldbu	r2,-25472(gp)
    e6d0:	10803fcc 	andi	r2,r2,255
    e6d4:	10803fe0 	cmpeqi	r2,r2,255
    e6d8:	1000031e 	bne	r2,zero,e6e8 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    e6dc:	d0a72003 	ldbu	r2,-25472(gp)
    e6e0:	10800044 	addi	r2,r2,1
    e6e4:	d0a72005 	stb	r2,-25472(gp)
    e6e8:	e0bffd17 	ldw	r2,-12(fp)
    e6ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e6f0:	e0bffe17 	ldw	r2,-8(fp)
    e6f4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    e6f8:	0001883a 	nop
    e6fc:	e037883a 	mov	sp,fp
    e700:	df000017 	ldw	fp,0(sp)
    e704:	dec00104 	addi	sp,sp,4
    e708:	f800283a 	ret

0000e70c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    e70c:	defff804 	addi	sp,sp,-32
    e710:	dfc00715 	stw	ra,28(sp)
    e714:	df000615 	stw	fp,24(sp)
    e718:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    e71c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    e720:	d0a72043 	ldbu	r2,-25471(gp)
    e724:	10803fcc 	andi	r2,r2,255
    e728:	10800058 	cmpnei	r2,r2,1
    e72c:	1000281e 	bne	r2,zero,e7d0 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e730:	0005303a 	rdctl	r2,status
    e734:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e738:	e0ffff17 	ldw	r3,-4(fp)
    e73c:	00bfff84 	movi	r2,-2
    e740:	1884703a 	and	r2,r3,r2
    e744:	1001703a 	wrctl	status,r2
  
  return context;
    e748:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    e74c:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    e750:	d0a72003 	ldbu	r2,-25472(gp)
    e754:	10803fcc 	andi	r2,r2,255
    e758:	10001926 	beq	r2,zero,e7c0 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    e75c:	d0a72003 	ldbu	r2,-25472(gp)
    e760:	10bfffc4 	addi	r2,r2,-1
    e764:	d0a72005 	stb	r2,-25472(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    e768:	d0a72003 	ldbu	r2,-25472(gp)
    e76c:	10803fcc 	andi	r2,r2,255
    e770:	10000e1e 	bne	r2,zero,e7ac <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    e774:	d0a72e03 	ldbu	r2,-25416(gp)
    e778:	10803fcc 	andi	r2,r2,255
    e77c:	1000061e 	bne	r2,zero,e798 <OSSchedUnlock+0x8c>
    e780:	e0bffa17 	ldw	r2,-24(fp)
    e784:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e788:	e0bffb17 	ldw	r2,-20(fp)
    e78c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    e790:	000f5b40 	call	f5b4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    e794:	00000e06 	br	e7d0 <OSSchedUnlock+0xc4>
    e798:	e0bffa17 	ldw	r2,-24(fp)
    e79c:	e0bffc15 	stw	r2,-16(fp)
    e7a0:	e0bffc17 	ldw	r2,-16(fp)
    e7a4:	1001703a 	wrctl	status,r2
    e7a8:	00000906 	br	e7d0 <OSSchedUnlock+0xc4>
    e7ac:	e0bffa17 	ldw	r2,-24(fp)
    e7b0:	e0bffd15 	stw	r2,-12(fp)
    e7b4:	e0bffd17 	ldw	r2,-12(fp)
    e7b8:	1001703a 	wrctl	status,r2
    e7bc:	00000406 	br	e7d0 <OSSchedUnlock+0xc4>
    e7c0:	e0bffa17 	ldw	r2,-24(fp)
    e7c4:	e0bffe15 	stw	r2,-8(fp)
    e7c8:	e0bffe17 	ldw	r2,-8(fp)
    e7cc:	1001703a 	wrctl	status,r2
    e7d0:	0001883a 	nop
    e7d4:	e037883a 	mov	sp,fp
    e7d8:	dfc00117 	ldw	ra,4(sp)
    e7dc:	df000017 	ldw	fp,0(sp)
    e7e0:	dec00204 	addi	sp,sp,8
    e7e4:	f800283a 	ret

0000e7e8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    e7e8:	defffe04 	addi	sp,sp,-8
    e7ec:	dfc00115 	stw	ra,4(sp)
    e7f0:	df000015 	stw	fp,0(sp)
    e7f4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    e7f8:	d0a72043 	ldbu	r2,-25471(gp)
    e7fc:	10803fcc 	andi	r2,r2,255
    e800:	10000f1e 	bne	r2,zero,e840 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    e804:	000f6840 	call	f684 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    e808:	d0a72203 	ldbu	r2,-25464(gp)
    e80c:	d0a72245 	stb	r2,-25463(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    e810:	d0a72203 	ldbu	r2,-25464(gp)
    e814:	10c03fcc 	andi	r3,r2,255
    e818:	00800134 	movhi	r2,4
    e81c:	10b23704 	addi	r2,r2,-14116
    e820:	18c7883a 	add	r3,r3,r3
    e824:	18c7883a 	add	r3,r3,r3
    e828:	10c5883a 	add	r2,r2,r3
    e82c:	10800017 	ldw	r2,0(r2)
    e830:	d0a72a15 	stw	r2,-25432(gp)
        OSTCBCur      = OSTCBHighRdy;
    e834:	d0a72a17 	ldw	r2,-25432(gp)
    e838:	d0a72f15 	stw	r2,-25412(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    e83c:	0016bf80 	call	16bf8 <OSStartHighRdy>
    }
}
    e840:	0001883a 	nop
    e844:	e037883a 	mov	sp,fp
    e848:	dfc00117 	ldw	ra,4(sp)
    e84c:	df000017 	ldw	fp,0(sp)
    e850:	dec00204 	addi	sp,sp,8
    e854:	f800283a 	ret

0000e858 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    e858:	defff904 	addi	sp,sp,-28
    e85c:	dfc00615 	stw	ra,24(sp)
    e860:	df000515 	stw	fp,20(sp)
    e864:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e868:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    e86c:	01000084 	movi	r4,2
    e870:	0014f500 	call	14f50 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e874:	0005303a 	rdctl	r2,status
    e878:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e87c:	e0fffc17 	ldw	r3,-16(fp)
    e880:	00bfff84 	movi	r2,-2
    e884:	1884703a 	and	r2,r3,r2
    e888:	1001703a 	wrctl	status,r2
  
  return context;
    e88c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    e890:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    e894:	d0272115 	stw	zero,-25468(gp)
    e898:	e0bffb17 	ldw	r2,-20(fp)
    e89c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e8a0:	e0bffd17 	ldw	r2,-12(fp)
    e8a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    e8a8:	0112d004 	movi	r4,19264
    e8ac:	0014f500 	call	14f50 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e8b0:	0005303a 	rdctl	r2,status
    e8b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e8b8:	e0fffe17 	ldw	r3,-8(fp)
    e8bc:	00bfff84 	movi	r2,-2
    e8c0:	1884703a 	and	r2,r3,r2
    e8c4:	1001703a 	wrctl	status,r2
  
  return context;
    e8c8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    e8cc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    e8d0:	d0a72117 	ldw	r2,-25468(gp)
    e8d4:	d0a72615 	stw	r2,-25448(gp)
    OSStatRdy    = OS_TRUE;
    e8d8:	00800044 	movi	r2,1
    e8dc:	d0a73205 	stb	r2,-25400(gp)
    e8e0:	e0bffb17 	ldw	r2,-20(fp)
    e8e4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e8e8:	e0bfff17 	ldw	r2,-4(fp)
    e8ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    e8f0:	0001883a 	nop
    e8f4:	e037883a 	mov	sp,fp
    e8f8:	dfc00117 	ldw	ra,4(sp)
    e8fc:	df000017 	ldw	fp,0(sp)
    e900:	dec00204 	addi	sp,sp,8
    e904:	f800283a 	ret

0000e908 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    e908:	defff704 	addi	sp,sp,-36
    e90c:	dfc00815 	stw	ra,32(sp)
    e910:	df000715 	stw	fp,28(sp)
    e914:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    e918:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    e91c:	0016e200 	call	16e20 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e920:	0005303a 	rdctl	r2,status
    e924:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e928:	e0fffd17 	ldw	r3,-12(fp)
    e92c:	00bfff84 	movi	r2,-2
    e930:	1884703a 	and	r2,r3,r2
    e934:	1001703a 	wrctl	status,r2
  
  return context;
    e938:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    e93c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    e940:	d0a73017 	ldw	r2,-25408(gp)
    e944:	10800044 	addi	r2,r2,1
    e948:	d0a73015 	stw	r2,-25408(gp)
    e94c:	e0bffb17 	ldw	r2,-20(fp)
    e950:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e954:	e0bfff17 	ldw	r2,-4(fp)
    e958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    e95c:	d0a72043 	ldbu	r2,-25471(gp)
    e960:	10803fcc 	andi	r2,r2,255
    e964:	10800058 	cmpnei	r2,r2,1
    e968:	10006a1e 	bne	r2,zero,eb14 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    e96c:	d0a72403 	ldbu	r2,-25456(gp)
    e970:	10803fcc 	andi	r2,r2,255
    e974:	10c00060 	cmpeqi	r3,r2,1
    e978:	1800061e 	bne	r3,zero,e994 <OSTimeTick+0x8c>
    e97c:	10c000a0 	cmpeqi	r3,r2,2
    e980:	1800061e 	bne	r3,zero,e99c <OSTimeTick+0x94>
    e984:	10000a1e 	bne	r2,zero,e9b0 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    e988:	00800044 	movi	r2,1
    e98c:	e0bffa05 	stb	r2,-24(fp)
                 break;
    e990:	00000b06 	br	e9c0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    e994:	e03ffa05 	stb	zero,-24(fp)
                 break;
    e998:	00000906 	br	e9c0 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    e99c:	00800044 	movi	r2,1
    e9a0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    e9a4:	00800044 	movi	r2,1
    e9a8:	d0a72405 	stb	r2,-25456(gp)
                 break;
    e9ac:	00000406 	br	e9c0 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    e9b0:	00800044 	movi	r2,1
    e9b4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    e9b8:	d0272405 	stb	zero,-25456(gp)
                 break;
    e9bc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    e9c0:	e0bffa03 	ldbu	r2,-24(fp)
    e9c4:	10005226 	beq	r2,zero,eb10 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    e9c8:	d0a72317 	ldw	r2,-25460(gp)
    e9cc:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    e9d0:	00004906 	br	eaf8 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e9d4:	0005303a 	rdctl	r2,status
    e9d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e9dc:	e0fffc17 	ldw	r3,-16(fp)
    e9e0:	00bfff84 	movi	r2,-2
    e9e4:	1884703a 	and	r2,r3,r2
    e9e8:	1001703a 	wrctl	status,r2
  
  return context;
    e9ec:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    e9f0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    e9f4:	e0bff917 	ldw	r2,-28(fp)
    e9f8:	10800b8b 	ldhu	r2,46(r2)
    e9fc:	10bfffcc 	andi	r2,r2,65535
    ea00:	10003626 	beq	r2,zero,eadc <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    ea04:	e0bff917 	ldw	r2,-28(fp)
    ea08:	10800b8b 	ldhu	r2,46(r2)
    ea0c:	10bfffc4 	addi	r2,r2,-1
    ea10:	1007883a 	mov	r3,r2
    ea14:	e0bff917 	ldw	r2,-28(fp)
    ea18:	10c00b8d 	sth	r3,46(r2)
    ea1c:	e0bff917 	ldw	r2,-28(fp)
    ea20:	10800b8b 	ldhu	r2,46(r2)
    ea24:	10bfffcc 	andi	r2,r2,65535
    ea28:	10002c1e 	bne	r2,zero,eadc <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    ea2c:	e0bff917 	ldw	r2,-28(fp)
    ea30:	10800c03 	ldbu	r2,48(r2)
    ea34:	10803fcc 	andi	r2,r2,255
    ea38:	10800dcc 	andi	r2,r2,55
    ea3c:	10000b26 	beq	r2,zero,ea6c <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    ea40:	e0bff917 	ldw	r2,-28(fp)
    ea44:	10c00c03 	ldbu	r3,48(r2)
    ea48:	00bff204 	movi	r2,-56
    ea4c:	1884703a 	and	r2,r3,r2
    ea50:	1007883a 	mov	r3,r2
    ea54:	e0bff917 	ldw	r2,-28(fp)
    ea58:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    ea5c:	e0bff917 	ldw	r2,-28(fp)
    ea60:	00c00044 	movi	r3,1
    ea64:	10c00c45 	stb	r3,49(r2)
    ea68:	00000206 	br	ea74 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    ea6c:	e0bff917 	ldw	r2,-28(fp)
    ea70:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    ea74:	e0bff917 	ldw	r2,-28(fp)
    ea78:	10800c03 	ldbu	r2,48(r2)
    ea7c:	10803fcc 	andi	r2,r2,255
    ea80:	1080020c 	andi	r2,r2,8
    ea84:	1000151e 	bne	r2,zero,eadc <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    ea88:	e0bff917 	ldw	r2,-28(fp)
    ea8c:	10c00d83 	ldbu	r3,54(r2)
    ea90:	d0a72c03 	ldbu	r2,-25424(gp)
    ea94:	1884b03a 	or	r2,r3,r2
    ea98:	d0a72c05 	stb	r2,-25424(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    ea9c:	e0bff917 	ldw	r2,-28(fp)
    eaa0:	10800d03 	ldbu	r2,52(r2)
    eaa4:	10c03fcc 	andi	r3,r2,255
    eaa8:	e0bff917 	ldw	r2,-28(fp)
    eaac:	10800d03 	ldbu	r2,52(r2)
    eab0:	11003fcc 	andi	r4,r2,255
    eab4:	d0a72c44 	addi	r2,gp,-25423
    eab8:	2085883a 	add	r2,r4,r2
    eabc:	11000003 	ldbu	r4,0(r2)
    eac0:	e0bff917 	ldw	r2,-28(fp)
    eac4:	10800d43 	ldbu	r2,53(r2)
    eac8:	2084b03a 	or	r2,r4,r2
    eacc:	1009883a 	mov	r4,r2
    ead0:	d0a72c44 	addi	r2,gp,-25423
    ead4:	1885883a 	add	r2,r3,r2
    ead8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    eadc:	e0bff917 	ldw	r2,-28(fp)
    eae0:	10800517 	ldw	r2,20(r2)
    eae4:	e0bff915 	stw	r2,-28(fp)
    eae8:	e0bffb17 	ldw	r2,-20(fp)
    eaec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eaf0:	e0bffe17 	ldw	r2,-8(fp)
    eaf4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    eaf8:	e0bff917 	ldw	r2,-28(fp)
    eafc:	10800c83 	ldbu	r2,50(r2)
    eb00:	10803fcc 	andi	r2,r2,255
    eb04:	10800518 	cmpnei	r2,r2,20
    eb08:	103fb21e 	bne	r2,zero,e9d4 <_gp+0xfffd00cc>
    eb0c:	00000106 	br	eb14 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    eb10:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    eb14:	e037883a 	mov	sp,fp
    eb18:	dfc00117 	ldw	ra,4(sp)
    eb1c:	df000017 	ldw	fp,0(sp)
    eb20:	dec00204 	addi	sp,sp,8
    eb24:	f800283a 	ret

0000eb28 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    eb28:	deffff04 	addi	sp,sp,-4
    eb2c:	df000015 	stw	fp,0(sp)
    eb30:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    eb34:	00804784 	movi	r2,286
}
    eb38:	e037883a 	mov	sp,fp
    eb3c:	df000017 	ldw	fp,0(sp)
    eb40:	dec00104 	addi	sp,sp,4
    eb44:	f800283a 	ret

0000eb48 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    eb48:	deffff04 	addi	sp,sp,-4
    eb4c:	df000015 	stw	fp,0(sp)
    eb50:	d839883a 	mov	fp,sp
}
    eb54:	0001883a 	nop
    eb58:	e037883a 	mov	sp,fp
    eb5c:	df000017 	ldw	fp,0(sp)
    eb60:	dec00104 	addi	sp,sp,4
    eb64:	f800283a 	ret

0000eb68 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    eb68:	defff804 	addi	sp,sp,-32
    eb6c:	dfc00715 	stw	ra,28(sp)
    eb70:	df000615 	stw	fp,24(sp)
    eb74:	df000604 	addi	fp,sp,24
    eb78:	e13ffc15 	stw	r4,-16(fp)
    eb7c:	e17ffd15 	stw	r5,-12(fp)
    eb80:	3007883a 	mov	r3,r6
    eb84:	3805883a 	mov	r2,r7
    eb88:	e0fffe05 	stb	r3,-8(fp)
    eb8c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    eb90:	e0bffc17 	ldw	r2,-16(fp)
    eb94:	10800283 	ldbu	r2,10(r2)
    eb98:	10c03fcc 	andi	r3,r2,255
    eb9c:	008000f4 	movhi	r2,3
    eba0:	10934604 	addi	r2,r2,19736
    eba4:	10c5883a 	add	r2,r2,r3
    eba8:	10800003 	ldbu	r2,0(r2)
    ebac:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    ebb0:	e0bffa03 	ldbu	r2,-24(fp)
    ebb4:	e0fffc17 	ldw	r3,-16(fp)
    ebb8:	1885883a 	add	r2,r3,r2
    ebbc:	108002c4 	addi	r2,r2,11
    ebc0:	10800003 	ldbu	r2,0(r2)
    ebc4:	10c03fcc 	andi	r3,r2,255
    ebc8:	008000f4 	movhi	r2,3
    ebcc:	10934604 	addi	r2,r2,19736
    ebd0:	10c5883a 	add	r2,r2,r3
    ebd4:	10800003 	ldbu	r2,0(r2)
    ebd8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    ebdc:	e0bffa03 	ldbu	r2,-24(fp)
    ebe0:	100490fa 	slli	r2,r2,3
    ebe4:	1007883a 	mov	r3,r2
    ebe8:	e0bffa43 	ldbu	r2,-23(fp)
    ebec:	1885883a 	add	r2,r3,r2
    ebf0:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ebf4:	e0fffa83 	ldbu	r3,-22(fp)
    ebf8:	00800134 	movhi	r2,4
    ebfc:	10b23704 	addi	r2,r2,-14116
    ec00:	18c7883a 	add	r3,r3,r3
    ec04:	18c7883a 	add	r3,r3,r3
    ec08:	10c5883a 	add	r2,r2,r3
    ec0c:	10800017 	ldw	r2,0(r2)
    ec10:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    ec14:	e0bffb17 	ldw	r2,-20(fp)
    ec18:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    ec1c:	e0bffb17 	ldw	r2,-20(fp)
    ec20:	e0fffd17 	ldw	r3,-12(fp)
    ec24:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ec28:	e0bffb17 	ldw	r2,-20(fp)
    ec2c:	10800c03 	ldbu	r2,48(r2)
    ec30:	1007883a 	mov	r3,r2
    ec34:	e0bffe03 	ldbu	r2,-8(fp)
    ec38:	0084303a 	nor	r2,zero,r2
    ec3c:	1884703a 	and	r2,r3,r2
    ec40:	1007883a 	mov	r3,r2
    ec44:	e0bffb17 	ldw	r2,-20(fp)
    ec48:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    ec4c:	e0bffb17 	ldw	r2,-20(fp)
    ec50:	e0ffff03 	ldbu	r3,-4(fp)
    ec54:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    ec58:	e0bffb17 	ldw	r2,-20(fp)
    ec5c:	10800c03 	ldbu	r2,48(r2)
    ec60:	10803fcc 	andi	r2,r2,255
    ec64:	1080020c 	andi	r2,r2,8
    ec68:	1000111e 	bne	r2,zero,ecb0 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    ec6c:	e0bffb17 	ldw	r2,-20(fp)
    ec70:	10c00d83 	ldbu	r3,54(r2)
    ec74:	d0a72c03 	ldbu	r2,-25424(gp)
    ec78:	1884b03a 	or	r2,r3,r2
    ec7c:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    ec80:	e0fffa03 	ldbu	r3,-24(fp)
    ec84:	e13ffa03 	ldbu	r4,-24(fp)
    ec88:	d0a72c44 	addi	r2,gp,-25423
    ec8c:	2085883a 	add	r2,r4,r2
    ec90:	11000003 	ldbu	r4,0(r2)
    ec94:	e0bffb17 	ldw	r2,-20(fp)
    ec98:	10800d43 	ldbu	r2,53(r2)
    ec9c:	2084b03a 	or	r2,r4,r2
    eca0:	1009883a 	mov	r4,r2
    eca4:	d0a72c44 	addi	r2,gp,-25423
    eca8:	1885883a 	add	r2,r3,r2
    ecac:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    ecb0:	e17ffc17 	ldw	r5,-16(fp)
    ecb4:	e13ffb17 	ldw	r4,-20(fp)
    ecb8:	000ef600 	call	ef60 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    ecbc:	e0bffb17 	ldw	r2,-20(fp)
    ecc0:	10800817 	ldw	r2,32(r2)
    ecc4:	10000826 	beq	r2,zero,ece8 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    ecc8:	e0bffb17 	ldw	r2,-20(fp)
    eccc:	10800817 	ldw	r2,32(r2)
    ecd0:	100b883a 	mov	r5,r2
    ecd4:	e13ffb17 	ldw	r4,-20(fp)
    ecd8:	000f0180 	call	f018 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    ecdc:	e0bffb17 	ldw	r2,-20(fp)
    ece0:	e0fffc17 	ldw	r3,-16(fp)
    ece4:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    ece8:	e0bffa83 	ldbu	r2,-22(fp)
}
    ecec:	e037883a 	mov	sp,fp
    ecf0:	dfc00117 	ldw	ra,4(sp)
    ecf4:	df000017 	ldw	fp,0(sp)
    ecf8:	dec00204 	addi	sp,sp,8
    ecfc:	f800283a 	ret

0000ed00 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    ed00:	defffd04 	addi	sp,sp,-12
    ed04:	df000215 	stw	fp,8(sp)
    ed08:	df000204 	addi	fp,sp,8
    ed0c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    ed10:	d0a72f17 	ldw	r2,-25412(gp)
    ed14:	e0ffff17 	ldw	r3,-4(fp)
    ed18:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    ed1c:	d0a72f17 	ldw	r2,-25412(gp)
    ed20:	10800d03 	ldbu	r2,52(r2)
    ed24:	10803fcc 	andi	r2,r2,255
    ed28:	d0e72f17 	ldw	r3,-25412(gp)
    ed2c:	18c00d03 	ldbu	r3,52(r3)
    ed30:	18c03fcc 	andi	r3,r3,255
    ed34:	e13fff17 	ldw	r4,-4(fp)
    ed38:	20c7883a 	add	r3,r4,r3
    ed3c:	18c002c4 	addi	r3,r3,11
    ed40:	19000003 	ldbu	r4,0(r3)
    ed44:	d0e72f17 	ldw	r3,-25412(gp)
    ed48:	18c00d43 	ldbu	r3,53(r3)
    ed4c:	20c6b03a 	or	r3,r4,r3
    ed50:	1809883a 	mov	r4,r3
    ed54:	e0ffff17 	ldw	r3,-4(fp)
    ed58:	1885883a 	add	r2,r3,r2
    ed5c:	108002c4 	addi	r2,r2,11
    ed60:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ed64:	e0bfff17 	ldw	r2,-4(fp)
    ed68:	10c00283 	ldbu	r3,10(r2)
    ed6c:	d0a72f17 	ldw	r2,-25412(gp)
    ed70:	10800d83 	ldbu	r2,54(r2)
    ed74:	1884b03a 	or	r2,r3,r2
    ed78:	1007883a 	mov	r3,r2
    ed7c:	e0bfff17 	ldw	r2,-4(fp)
    ed80:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    ed84:	d0a72f17 	ldw	r2,-25412(gp)
    ed88:	10800d03 	ldbu	r2,52(r2)
    ed8c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    ed90:	e0fffe03 	ldbu	r3,-8(fp)
    ed94:	e13ffe03 	ldbu	r4,-8(fp)
    ed98:	d0a72c44 	addi	r2,gp,-25423
    ed9c:	2085883a 	add	r2,r4,r2
    eda0:	10800003 	ldbu	r2,0(r2)
    eda4:	1009883a 	mov	r4,r2
    eda8:	d0a72f17 	ldw	r2,-25412(gp)
    edac:	10800d43 	ldbu	r2,53(r2)
    edb0:	0084303a 	nor	r2,zero,r2
    edb4:	2084703a 	and	r2,r4,r2
    edb8:	1009883a 	mov	r4,r2
    edbc:	d0a72c44 	addi	r2,gp,-25423
    edc0:	1885883a 	add	r2,r3,r2
    edc4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    edc8:	e0fffe03 	ldbu	r3,-8(fp)
    edcc:	d0a72c44 	addi	r2,gp,-25423
    edd0:	1885883a 	add	r2,r3,r2
    edd4:	10800003 	ldbu	r2,0(r2)
    edd8:	10803fcc 	andi	r2,r2,255
    eddc:	1000071e 	bne	r2,zero,edfc <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ede0:	d0a72f17 	ldw	r2,-25412(gp)
    ede4:	10800d83 	ldbu	r2,54(r2)
    ede8:	0084303a 	nor	r2,zero,r2
    edec:	1007883a 	mov	r3,r2
    edf0:	d0a72c03 	ldbu	r2,-25424(gp)
    edf4:	1884703a 	and	r2,r3,r2
    edf8:	d0a72c05 	stb	r2,-25424(gp)
    }
}
    edfc:	0001883a 	nop
    ee00:	e037883a 	mov	sp,fp
    ee04:	df000017 	ldw	fp,0(sp)
    ee08:	dec00104 	addi	sp,sp,4
    ee0c:	f800283a 	ret

0000ee10 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    ee10:	defffb04 	addi	sp,sp,-20
    ee14:	df000415 	stw	fp,16(sp)
    ee18:	df000404 	addi	fp,sp,16
    ee1c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    ee20:	d0a72f17 	ldw	r2,-25412(gp)
    ee24:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    ee28:	d0a72f17 	ldw	r2,-25412(gp)
    ee2c:	e0ffff17 	ldw	r3,-4(fp)
    ee30:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    ee34:	e0bfff17 	ldw	r2,-4(fp)
    ee38:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    ee3c:	e0bffc17 	ldw	r2,-16(fp)
    ee40:	10800017 	ldw	r2,0(r2)
    ee44:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    ee48:	00002006 	br	eecc <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    ee4c:	d0a72f17 	ldw	r2,-25412(gp)
    ee50:	10800d03 	ldbu	r2,52(r2)
    ee54:	10803fcc 	andi	r2,r2,255
    ee58:	d0e72f17 	ldw	r3,-25412(gp)
    ee5c:	18c00d03 	ldbu	r3,52(r3)
    ee60:	18c03fcc 	andi	r3,r3,255
    ee64:	e13ffd17 	ldw	r4,-12(fp)
    ee68:	20c7883a 	add	r3,r4,r3
    ee6c:	18c002c4 	addi	r3,r3,11
    ee70:	19000003 	ldbu	r4,0(r3)
    ee74:	d0e72f17 	ldw	r3,-25412(gp)
    ee78:	18c00d43 	ldbu	r3,53(r3)
    ee7c:	20c6b03a 	or	r3,r4,r3
    ee80:	1809883a 	mov	r4,r3
    ee84:	e0fffd17 	ldw	r3,-12(fp)
    ee88:	1885883a 	add	r2,r3,r2
    ee8c:	108002c4 	addi	r2,r2,11
    ee90:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    ee94:	e0bffd17 	ldw	r2,-12(fp)
    ee98:	10c00283 	ldbu	r3,10(r2)
    ee9c:	d0a72f17 	ldw	r2,-25412(gp)
    eea0:	10800d83 	ldbu	r2,54(r2)
    eea4:	1884b03a 	or	r2,r3,r2
    eea8:	1007883a 	mov	r3,r2
    eeac:	e0bffd17 	ldw	r2,-12(fp)
    eeb0:	10c00285 	stb	r3,10(r2)
        pevents++;
    eeb4:	e0bffc17 	ldw	r2,-16(fp)
    eeb8:	10800104 	addi	r2,r2,4
    eebc:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    eec0:	e0bffc17 	ldw	r2,-16(fp)
    eec4:	10800017 	ldw	r2,0(r2)
    eec8:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    eecc:	e0bffd17 	ldw	r2,-12(fp)
    eed0:	103fde1e 	bne	r2,zero,ee4c <_gp+0xfffd0544>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    eed4:	d0a72f17 	ldw	r2,-25412(gp)
    eed8:	10800d03 	ldbu	r2,52(r2)
    eedc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    eee0:	e0fffe03 	ldbu	r3,-8(fp)
    eee4:	e13ffe03 	ldbu	r4,-8(fp)
    eee8:	d0a72c44 	addi	r2,gp,-25423
    eeec:	2085883a 	add	r2,r4,r2
    eef0:	10800003 	ldbu	r2,0(r2)
    eef4:	1009883a 	mov	r4,r2
    eef8:	d0a72f17 	ldw	r2,-25412(gp)
    eefc:	10800d43 	ldbu	r2,53(r2)
    ef00:	0084303a 	nor	r2,zero,r2
    ef04:	2084703a 	and	r2,r4,r2
    ef08:	1009883a 	mov	r4,r2
    ef0c:	d0a72c44 	addi	r2,gp,-25423
    ef10:	1885883a 	add	r2,r3,r2
    ef14:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    ef18:	e0fffe03 	ldbu	r3,-8(fp)
    ef1c:	d0a72c44 	addi	r2,gp,-25423
    ef20:	1885883a 	add	r2,r3,r2
    ef24:	10800003 	ldbu	r2,0(r2)
    ef28:	10803fcc 	andi	r2,r2,255
    ef2c:	1000071e 	bne	r2,zero,ef4c <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    ef30:	d0a72f17 	ldw	r2,-25412(gp)
    ef34:	10800d83 	ldbu	r2,54(r2)
    ef38:	0084303a 	nor	r2,zero,r2
    ef3c:	1007883a 	mov	r3,r2
    ef40:	d0a72c03 	ldbu	r2,-25424(gp)
    ef44:	1884703a 	and	r2,r3,r2
    ef48:	d0a72c05 	stb	r2,-25424(gp)
    }
}
    ef4c:	0001883a 	nop
    ef50:	e037883a 	mov	sp,fp
    ef54:	df000017 	ldw	fp,0(sp)
    ef58:	dec00104 	addi	sp,sp,4
    ef5c:	f800283a 	ret

0000ef60 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    ef60:	defffc04 	addi	sp,sp,-16
    ef64:	df000315 	stw	fp,12(sp)
    ef68:	df000304 	addi	fp,sp,12
    ef6c:	e13ffe15 	stw	r4,-8(fp)
    ef70:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    ef74:	e0bffe17 	ldw	r2,-8(fp)
    ef78:	10800d03 	ldbu	r2,52(r2)
    ef7c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    ef80:	e0bffd03 	ldbu	r2,-12(fp)
    ef84:	e0fffd03 	ldbu	r3,-12(fp)
    ef88:	e13fff17 	ldw	r4,-4(fp)
    ef8c:	20c7883a 	add	r3,r4,r3
    ef90:	18c002c4 	addi	r3,r3,11
    ef94:	18c00003 	ldbu	r3,0(r3)
    ef98:	1809883a 	mov	r4,r3
    ef9c:	e0fffe17 	ldw	r3,-8(fp)
    efa0:	18c00d43 	ldbu	r3,53(r3)
    efa4:	00c6303a 	nor	r3,zero,r3
    efa8:	20c6703a 	and	r3,r4,r3
    efac:	1809883a 	mov	r4,r3
    efb0:	e0ffff17 	ldw	r3,-4(fp)
    efb4:	1885883a 	add	r2,r3,r2
    efb8:	108002c4 	addi	r2,r2,11
    efbc:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    efc0:	e0bffd03 	ldbu	r2,-12(fp)
    efc4:	e0ffff17 	ldw	r3,-4(fp)
    efc8:	1885883a 	add	r2,r3,r2
    efcc:	108002c4 	addi	r2,r2,11
    efd0:	10800003 	ldbu	r2,0(r2)
    efd4:	10803fcc 	andi	r2,r2,255
    efd8:	10000a1e 	bne	r2,zero,f004 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    efdc:	e0bfff17 	ldw	r2,-4(fp)
    efe0:	10800283 	ldbu	r2,10(r2)
    efe4:	1007883a 	mov	r3,r2
    efe8:	e0bffe17 	ldw	r2,-8(fp)
    efec:	10800d83 	ldbu	r2,54(r2)
    eff0:	0084303a 	nor	r2,zero,r2
    eff4:	1884703a 	and	r2,r3,r2
    eff8:	1007883a 	mov	r3,r2
    effc:	e0bfff17 	ldw	r2,-4(fp)
    f000:	10c00285 	stb	r3,10(r2)
    }
}
    f004:	0001883a 	nop
    f008:	e037883a 	mov	sp,fp
    f00c:	df000017 	ldw	fp,0(sp)
    f010:	dec00104 	addi	sp,sp,4
    f014:	f800283a 	ret

0000f018 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    f018:	defffa04 	addi	sp,sp,-24
    f01c:	df000515 	stw	fp,20(sp)
    f020:	df000504 	addi	fp,sp,20
    f024:	e13ffe15 	stw	r4,-8(fp)
    f028:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    f02c:	e0bffe17 	ldw	r2,-8(fp)
    f030:	10800d03 	ldbu	r2,52(r2)
    f034:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    f038:	e0bffe17 	ldw	r2,-8(fp)
    f03c:	10800d83 	ldbu	r2,54(r2)
    f040:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    f044:	e0bffe17 	ldw	r2,-8(fp)
    f048:	10800d43 	ldbu	r2,53(r2)
    f04c:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    f050:	e0bfff17 	ldw	r2,-4(fp)
    f054:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    f058:	e0bffb17 	ldw	r2,-20(fp)
    f05c:	10800017 	ldw	r2,0(r2)
    f060:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f064:	00002506 	br	f0fc <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    f068:	e0bffd03 	ldbu	r2,-12(fp)
    f06c:	e0fffd03 	ldbu	r3,-12(fp)
    f070:	e13ffc17 	ldw	r4,-16(fp)
    f074:	20c7883a 	add	r3,r4,r3
    f078:	18c002c4 	addi	r3,r3,11
    f07c:	18c00003 	ldbu	r3,0(r3)
    f080:	1809883a 	mov	r4,r3
    f084:	e0fffd83 	ldbu	r3,-10(fp)
    f088:	00c6303a 	nor	r3,zero,r3
    f08c:	20c6703a 	and	r3,r4,r3
    f090:	1809883a 	mov	r4,r3
    f094:	e0fffc17 	ldw	r3,-16(fp)
    f098:	1885883a 	add	r2,r3,r2
    f09c:	108002c4 	addi	r2,r2,11
    f0a0:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    f0a4:	e0bffd03 	ldbu	r2,-12(fp)
    f0a8:	e0fffc17 	ldw	r3,-16(fp)
    f0ac:	1885883a 	add	r2,r3,r2
    f0b0:	108002c4 	addi	r2,r2,11
    f0b4:	10800003 	ldbu	r2,0(r2)
    f0b8:	10803fcc 	andi	r2,r2,255
    f0bc:	1000091e 	bne	r2,zero,f0e4 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    f0c0:	e0bffc17 	ldw	r2,-16(fp)
    f0c4:	10800283 	ldbu	r2,10(r2)
    f0c8:	1007883a 	mov	r3,r2
    f0cc:	e0bffd43 	ldbu	r2,-11(fp)
    f0d0:	0084303a 	nor	r2,zero,r2
    f0d4:	1884703a 	and	r2,r3,r2
    f0d8:	1007883a 	mov	r3,r2
    f0dc:	e0bffc17 	ldw	r2,-16(fp)
    f0e0:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    f0e4:	e0bffb17 	ldw	r2,-20(fp)
    f0e8:	10800104 	addi	r2,r2,4
    f0ec:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    f0f0:	e0bffb17 	ldw	r2,-20(fp)
    f0f4:	10800017 	ldw	r2,0(r2)
    f0f8:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    f0fc:	e0bffc17 	ldw	r2,-16(fp)
    f100:	103fd91e 	bne	r2,zero,f068 <_gp+0xfffd0760>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    f104:	0001883a 	nop
    f108:	e037883a 	mov	sp,fp
    f10c:	df000017 	ldw	fp,0(sp)
    f110:	dec00104 	addi	sp,sp,4
    f114:	f800283a 	ret

0000f118 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    f118:	defffc04 	addi	sp,sp,-16
    f11c:	df000315 	stw	fp,12(sp)
    f120:	df000304 	addi	fp,sp,12
    f124:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    f128:	e0bfff17 	ldw	r2,-4(fp)
    f12c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    f130:	e0bfff17 	ldw	r2,-4(fp)
    f134:	108002c4 	addi	r2,r2,11
    f138:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f13c:	e03ffe05 	stb	zero,-8(fp)
    f140:	00000706 	br	f160 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    f144:	e0bffd17 	ldw	r2,-12(fp)
    f148:	10c00044 	addi	r3,r2,1
    f14c:	e0fffd15 	stw	r3,-12(fp)
    f150:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    f154:	e0bffe03 	ldbu	r2,-8(fp)
    f158:	10800044 	addi	r2,r2,1
    f15c:	e0bffe05 	stb	r2,-8(fp)
    f160:	e0bffe03 	ldbu	r2,-8(fp)
    f164:	108000f0 	cmpltui	r2,r2,3
    f168:	103ff61e 	bne	r2,zero,f144 <_gp+0xfffd083c>
        *ptbl++ = 0;
    }
}
    f16c:	0001883a 	nop
    f170:	e037883a 	mov	sp,fp
    f174:	df000017 	ldw	fp,0(sp)
    f178:	dec00104 	addi	sp,sp,4
    f17c:	f800283a 	ret

0000f180 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    f180:	defffb04 	addi	sp,sp,-20
    f184:	dfc00415 	stw	ra,16(sp)
    f188:	df000315 	stw	fp,12(sp)
    f18c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    f190:	0142d004 	movi	r5,2880
    f194:	01000134 	movhi	r4,4
    f198:	212e2304 	addi	r4,r4,-18292
    f19c:	000f4f80 	call	f4f8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    f1a0:	00800134 	movhi	r2,4
    f1a4:	10ae2304 	addi	r2,r2,-18292
    f1a8:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    f1ac:	00800134 	movhi	r2,4
    f1b0:	10ae2f04 	addi	r2,r2,-18244
    f1b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f1b8:	e03ffd0d 	sth	zero,-12(fp)
    f1bc:	00001306 	br	f20c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    f1c0:	e0bffe17 	ldw	r2,-8(fp)
    f1c4:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    f1c8:	e0bffe17 	ldw	r2,-8(fp)
    f1cc:	e0ffff17 	ldw	r3,-4(fp)
    f1d0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    f1d4:	e0bffe17 	ldw	r2,-8(fp)
    f1d8:	00c00fc4 	movi	r3,63
    f1dc:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    f1e0:	e0bffe17 	ldw	r2,-8(fp)
    f1e4:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    f1e8:	e0bffe17 	ldw	r2,-8(fp)
    f1ec:	10800c04 	addi	r2,r2,48
    f1f0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    f1f4:	e0bfff17 	ldw	r2,-4(fp)
    f1f8:	10800c04 	addi	r2,r2,48
    f1fc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    f200:	e0bffd0b 	ldhu	r2,-12(fp)
    f204:	10800044 	addi	r2,r2,1
    f208:	e0bffd0d 	sth	r2,-12(fp)
    f20c:	e0bffd0b 	ldhu	r2,-12(fp)
    f210:	10800ef0 	cmpltui	r2,r2,59
    f214:	103fea1e 	bne	r2,zero,f1c0 <_gp+0xfffd08b8>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    f218:	e0bffe17 	ldw	r2,-8(fp)
    f21c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    f220:	e0bffe17 	ldw	r2,-8(fp)
    f224:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    f228:	e0bffe17 	ldw	r2,-8(fp)
    f22c:	00c00fc4 	movi	r3,63
    f230:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    f234:	e0bffe17 	ldw	r2,-8(fp)
    f238:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    f23c:	00800134 	movhi	r2,4
    f240:	10ae2304 	addi	r2,r2,-18292
    f244:	d0a72d15 	stw	r2,-25420(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    f248:	0001883a 	nop
    f24c:	e037883a 	mov	sp,fp
    f250:	dfc00117 	ldw	ra,4(sp)
    f254:	df000017 	ldw	fp,0(sp)
    f258:	dec00204 	addi	sp,sp,8
    f25c:	f800283a 	ret

0000f260 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    f260:	deffff04 	addi	sp,sp,-4
    f264:	df000015 	stw	fp,0(sp)
    f268:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    f26c:	d0273015 	stw	zero,-25408(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    f270:	d0272e05 	stb	zero,-25416(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    f274:	d0272005 	stb	zero,-25472(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    f278:	d0272845 	stb	zero,-25439(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    f27c:	d0272045 	stb	zero,-25471(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    f280:	d0272515 	stw	zero,-25452(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    f284:	d0272115 	stw	zero,-25468(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    f288:	d0273315 	stw	zero,-25396(gp)
    OSIdleCtrMax  = 0L;
    f28c:	d0272615 	stw	zero,-25448(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    f290:	d0273205 	stb	zero,-25400(gp)
#endif
}
    f294:	0001883a 	nop
    f298:	e037883a 	mov	sp,fp
    f29c:	df000017 	ldw	fp,0(sp)
    f2a0:	dec00104 	addi	sp,sp,4
    f2a4:	f800283a 	ret

0000f2a8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    f2a8:	defffd04 	addi	sp,sp,-12
    f2ac:	df000215 	stw	fp,8(sp)
    f2b0:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    f2b4:	d0272c05 	stb	zero,-25424(gp)
    prdytbl       = &OSRdyTbl[0];
    f2b8:	d0a72c44 	addi	r2,gp,-25423
    f2bc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f2c0:	e03ffe05 	stb	zero,-8(fp)
    f2c4:	00000706 	br	f2e4 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    f2c8:	e0bfff17 	ldw	r2,-4(fp)
    f2cc:	10c00044 	addi	r3,r2,1
    f2d0:	e0ffff15 	stw	r3,-4(fp)
    f2d4:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    f2d8:	e0bffe03 	ldbu	r2,-8(fp)
    f2dc:	10800044 	addi	r2,r2,1
    f2e0:	e0bffe05 	stb	r2,-8(fp)
    f2e4:	e0bffe03 	ldbu	r2,-8(fp)
    f2e8:	108000f0 	cmpltui	r2,r2,3
    f2ec:	103ff61e 	bne	r2,zero,f2c8 <_gp+0xfffd09c0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    f2f0:	d0272245 	stb	zero,-25463(gp)
    OSPrioHighRdy = 0;
    f2f4:	d0272205 	stb	zero,-25464(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    f2f8:	d0272a15 	stw	zero,-25432(gp)
    OSTCBCur      = (OS_TCB *)0;
    f2fc:	d0272f15 	stw	zero,-25412(gp)
}
    f300:	0001883a 	nop
    f304:	e037883a 	mov	sp,fp
    f308:	df000017 	ldw	fp,0(sp)
    f30c:	dec00104 	addi	sp,sp,4
    f310:	f800283a 	ret

0000f314 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    f314:	defff804 	addi	sp,sp,-32
    f318:	dfc00715 	stw	ra,28(sp)
    f31c:	df000615 	stw	fp,24(sp)
    f320:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    f324:	008000c4 	movi	r2,3
    f328:	d8800415 	stw	r2,16(sp)
    f32c:	d8000315 	stw	zero,12(sp)
    f330:	00808004 	movi	r2,512
    f334:	d8800215 	stw	r2,8(sp)
    f338:	00800134 	movhi	r2,4
    f33c:	10ac2304 	addi	r2,r2,-20340
    f340:	d8800115 	stw	r2,4(sp)
    f344:	00bfffd4 	movui	r2,65535
    f348:	d8800015 	stw	r2,0(sp)
    f34c:	01c00504 	movi	r7,20
    f350:	01800134 	movhi	r6,4
    f354:	31ae2204 	addi	r6,r6,-18296
    f358:	000b883a 	mov	r5,zero
    f35c:	01000074 	movhi	r4,1
    f360:	213df004 	addi	r4,r4,-2112
    f364:	0013e800 	call	13e80 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    f368:	e1bfff04 	addi	r6,fp,-4
    f36c:	014000f4 	movhi	r5,3
    f370:	29538604 	addi	r5,r5,19992
    f374:	01000504 	movi	r4,20
    f378:	00146900 	call	14690 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    f37c:	0001883a 	nop
    f380:	e037883a 	mov	sp,fp
    f384:	dfc00117 	ldw	ra,4(sp)
    f388:	df000017 	ldw	fp,0(sp)
    f38c:	dec00204 	addi	sp,sp,8
    f390:	f800283a 	ret

0000f394 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    f394:	defff804 	addi	sp,sp,-32
    f398:	dfc00715 	stw	ra,28(sp)
    f39c:	df000615 	stw	fp,24(sp)
    f3a0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    f3a4:	008000c4 	movi	r2,3
    f3a8:	d8800415 	stw	r2,16(sp)
    f3ac:	d8000315 	stw	zero,12(sp)
    f3b0:	00808004 	movi	r2,512
    f3b4:	d8800215 	stw	r2,8(sp)
    f3b8:	00800134 	movhi	r2,4
    f3bc:	10a9ab04 	addi	r2,r2,-22868
    f3c0:	d8800115 	stw	r2,4(sp)
    f3c4:	00bfff94 	movui	r2,65534
    f3c8:	d8800015 	stw	r2,0(sp)
    f3cc:	01c004c4 	movi	r7,19
    f3d0:	01800134 	movhi	r6,4
    f3d4:	31abaa04 	addi	r6,r6,-20824
    f3d8:	000b883a 	mov	r5,zero
    f3dc:	01000074 	movhi	r4,1
    f3e0:	213e0704 	addi	r4,r4,-2020
    f3e4:	0013e800 	call	13e80 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    f3e8:	e1bfff04 	addi	r6,fp,-4
    f3ec:	014000f4 	movhi	r5,3
    f3f0:	29538a04 	addi	r5,r5,20008
    f3f4:	010004c4 	movi	r4,19
    f3f8:	00146900 	call	14690 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    f3fc:	0001883a 	nop
    f400:	e037883a 	mov	sp,fp
    f404:	dfc00117 	ldw	ra,4(sp)
    f408:	df000017 	ldw	fp,0(sp)
    f40c:	dec00204 	addi	sp,sp,8
    f410:	f800283a 	ret

0000f414 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    f414:	defffb04 	addi	sp,sp,-20
    f418:	dfc00415 	stw	ra,16(sp)
    f41c:	df000315 	stw	fp,12(sp)
    f420:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    f424:	01414404 	movi	r5,1296
    f428:	01000134 	movhi	r4,4
    f42c:	2130f304 	addi	r4,r4,-15412
    f430:	000f4f80 	call	f4f8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    f434:	01401504 	movi	r5,84
    f438:	01000134 	movhi	r4,4
    f43c:	21323704 	addi	r4,r4,-14116
    f440:	000f4f80 	call	f4f8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    f444:	00800134 	movhi	r2,4
    f448:	10b0f304 	addi	r2,r2,-15412
    f44c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    f450:	00800134 	movhi	r2,4
    f454:	10b10e04 	addi	r2,r2,-15304
    f458:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f45c:	e03ffd05 	stb	zero,-12(fp)
    f460:	00001106 	br	f4a8 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    f464:	e0bffe17 	ldw	r2,-8(fp)
    f468:	e0ffff17 	ldw	r3,-4(fp)
    f46c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    f470:	e0bffe17 	ldw	r2,-8(fp)
    f474:	00c00fc4 	movi	r3,63
    f478:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f47c:	e0bffe17 	ldw	r2,-8(fp)
    f480:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    f484:	e0bffe17 	ldw	r2,-8(fp)
    f488:	10801b04 	addi	r2,r2,108
    f48c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    f490:	e0bfff17 	ldw	r2,-4(fp)
    f494:	10801b04 	addi	r2,r2,108
    f498:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    f49c:	e0bffd03 	ldbu	r2,-12(fp)
    f4a0:	10800044 	addi	r2,r2,1
    f4a4:	e0bffd05 	stb	r2,-12(fp)
    f4a8:	e0bffd03 	ldbu	r2,-12(fp)
    f4ac:	108002f0 	cmpltui	r2,r2,11
    f4b0:	103fec1e 	bne	r2,zero,f464 <_gp+0xfffd0b5c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    f4b4:	e0bffe17 	ldw	r2,-8(fp)
    f4b8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    f4bc:	e0bffe17 	ldw	r2,-8(fp)
    f4c0:	00c00fc4 	movi	r3,63
    f4c4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    f4c8:	e0bffe17 	ldw	r2,-8(fp)
    f4cc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    f4d0:	d0272315 	stw	zero,-25460(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    f4d4:	00800134 	movhi	r2,4
    f4d8:	10b0f304 	addi	r2,r2,-15412
    f4dc:	d0a72715 	stw	r2,-25444(gp)
}
    f4e0:	0001883a 	nop
    f4e4:	e037883a 	mov	sp,fp
    f4e8:	dfc00117 	ldw	ra,4(sp)
    f4ec:	df000017 	ldw	fp,0(sp)
    f4f0:	dec00204 	addi	sp,sp,8
    f4f4:	f800283a 	ret

0000f4f8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    f4f8:	defffd04 	addi	sp,sp,-12
    f4fc:	df000215 	stw	fp,8(sp)
    f500:	df000204 	addi	fp,sp,8
    f504:	e13ffe15 	stw	r4,-8(fp)
    f508:	2805883a 	mov	r2,r5
    f50c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f510:	00000706 	br	f530 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    f514:	e0bffe17 	ldw	r2,-8(fp)
    f518:	10c00044 	addi	r3,r2,1
    f51c:	e0fffe15 	stw	r3,-8(fp)
    f520:	10000005 	stb	zero,0(r2)
        size--;
    f524:	e0bfff0b 	ldhu	r2,-4(fp)
    f528:	10bfffc4 	addi	r2,r2,-1
    f52c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    f530:	e0bfff0b 	ldhu	r2,-4(fp)
    f534:	103ff71e 	bne	r2,zero,f514 <_gp+0xfffd0c0c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    f538:	0001883a 	nop
    f53c:	e037883a 	mov	sp,fp
    f540:	df000017 	ldw	fp,0(sp)
    f544:	dec00104 	addi	sp,sp,4
    f548:	f800283a 	ret

0000f54c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    f54c:	defffc04 	addi	sp,sp,-16
    f550:	df000315 	stw	fp,12(sp)
    f554:	df000304 	addi	fp,sp,12
    f558:	e13ffd15 	stw	r4,-12(fp)
    f55c:	e17ffe15 	stw	r5,-8(fp)
    f560:	3005883a 	mov	r2,r6
    f564:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    f568:	00000b06 	br	f598 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    f56c:	e0bffd17 	ldw	r2,-12(fp)
    f570:	10c00044 	addi	r3,r2,1
    f574:	e0fffd15 	stw	r3,-12(fp)
    f578:	e0fffe17 	ldw	r3,-8(fp)
    f57c:	19000044 	addi	r4,r3,1
    f580:	e13ffe15 	stw	r4,-8(fp)
    f584:	18c00003 	ldbu	r3,0(r3)
    f588:	10c00005 	stb	r3,0(r2)
        size--;
    f58c:	e0bfff0b 	ldhu	r2,-4(fp)
    f590:	10bfffc4 	addi	r2,r2,-1
    f594:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    f598:	e0bfff0b 	ldhu	r2,-4(fp)
    f59c:	103ff31e 	bne	r2,zero,f56c <_gp+0xfffd0c64>
        *pdest++ = *psrc++;
        size--;
    }
}
    f5a0:	0001883a 	nop
    f5a4:	e037883a 	mov	sp,fp
    f5a8:	df000017 	ldw	fp,0(sp)
    f5ac:	dec00104 	addi	sp,sp,4
    f5b0:	f800283a 	ret

0000f5b4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    f5b4:	defffb04 	addi	sp,sp,-20
    f5b8:	dfc00415 	stw	ra,16(sp)
    f5bc:	df000315 	stw	fp,12(sp)
    f5c0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f5c4:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5c8:	0005303a 	rdctl	r2,status
    f5cc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5d0:	e0ffff17 	ldw	r3,-4(fp)
    f5d4:	00bfff84 	movi	r2,-2
    f5d8:	1884703a 	and	r2,r3,r2
    f5dc:	1001703a 	wrctl	status,r2
  
  return context;
    f5e0:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    f5e4:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    f5e8:	d0a72e03 	ldbu	r2,-25416(gp)
    f5ec:	10803fcc 	andi	r2,r2,255
    f5f0:	10001a1e 	bne	r2,zero,f65c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    f5f4:	d0a72003 	ldbu	r2,-25472(gp)
    f5f8:	10803fcc 	andi	r2,r2,255
    f5fc:	1000171e 	bne	r2,zero,f65c <OS_Sched+0xa8>
            OS_SchedNew();
    f600:	000f6840 	call	f684 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    f604:	d0e72203 	ldbu	r3,-25464(gp)
    f608:	d0a72243 	ldbu	r2,-25463(gp)
    f60c:	18c03fcc 	andi	r3,r3,255
    f610:	10803fcc 	andi	r2,r2,255
    f614:	18801126 	beq	r3,r2,f65c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    f618:	d0a72203 	ldbu	r2,-25464(gp)
    f61c:	10c03fcc 	andi	r3,r2,255
    f620:	00800134 	movhi	r2,4
    f624:	10b23704 	addi	r2,r2,-14116
    f628:	18c7883a 	add	r3,r3,r3
    f62c:	18c7883a 	add	r3,r3,r3
    f630:	10c5883a 	add	r2,r2,r3
    f634:	10800017 	ldw	r2,0(r2)
    f638:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    f63c:	d0a72a17 	ldw	r2,-25432(gp)
    f640:	10c00e17 	ldw	r3,56(r2)
    f644:	18c00044 	addi	r3,r3,1
    f648:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    f64c:	d0a72517 	ldw	r2,-25452(gp)
    f650:	10800044 	addi	r2,r2,1
    f654:	d0a72515 	stw	r2,-25452(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    f658:	0016b6c0 	call	16b6c <OSCtxSw>
    f65c:	e0bffd17 	ldw	r2,-12(fp)
    f660:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f664:	e0bffe17 	ldw	r2,-8(fp)
    f668:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    f66c:	0001883a 	nop
    f670:	e037883a 	mov	sp,fp
    f674:	dfc00117 	ldw	ra,4(sp)
    f678:	df000017 	ldw	fp,0(sp)
    f67c:	dec00204 	addi	sp,sp,8
    f680:	f800283a 	ret

0000f684 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    f684:	defffe04 	addi	sp,sp,-8
    f688:	df000115 	stw	fp,4(sp)
    f68c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    f690:	d0a72c03 	ldbu	r2,-25424(gp)
    f694:	10c03fcc 	andi	r3,r2,255
    f698:	008000f4 	movhi	r2,3
    f69c:	10934604 	addi	r2,r2,19736
    f6a0:	10c5883a 	add	r2,r2,r3
    f6a4:	10800003 	ldbu	r2,0(r2)
    f6a8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    f6ac:	e0bfff03 	ldbu	r2,-4(fp)
    f6b0:	100490fa 	slli	r2,r2,3
    f6b4:	1009883a 	mov	r4,r2
    f6b8:	e0ffff03 	ldbu	r3,-4(fp)
    f6bc:	d0a72c44 	addi	r2,gp,-25423
    f6c0:	1885883a 	add	r2,r3,r2
    f6c4:	10800003 	ldbu	r2,0(r2)
    f6c8:	10c03fcc 	andi	r3,r2,255
    f6cc:	008000f4 	movhi	r2,3
    f6d0:	10934604 	addi	r2,r2,19736
    f6d4:	10c5883a 	add	r2,r2,r3
    f6d8:	10800003 	ldbu	r2,0(r2)
    f6dc:	2085883a 	add	r2,r4,r2
    f6e0:	d0a72205 	stb	r2,-25464(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    f6e4:	0001883a 	nop
    f6e8:	e037883a 	mov	sp,fp
    f6ec:	df000017 	ldw	fp,0(sp)
    f6f0:	dec00104 	addi	sp,sp,4
    f6f4:	f800283a 	ret

0000f6f8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    f6f8:	defffc04 	addi	sp,sp,-16
    f6fc:	df000315 	stw	fp,12(sp)
    f700:	df000304 	addi	fp,sp,12
    f704:	e13ffe15 	stw	r4,-8(fp)
    f708:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    f70c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    f710:	00000b06 	br	f740 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    f714:	e0bffe17 	ldw	r2,-8(fp)
    f718:	10c00044 	addi	r3,r2,1
    f71c:	e0fffe15 	stw	r3,-8(fp)
    f720:	e0ffff17 	ldw	r3,-4(fp)
    f724:	19000044 	addi	r4,r3,1
    f728:	e13fff15 	stw	r4,-4(fp)
    f72c:	18c00003 	ldbu	r3,0(r3)
    f730:	10c00005 	stb	r3,0(r2)
        len++;
    f734:	e0bffd03 	ldbu	r2,-12(fp)
    f738:	10800044 	addi	r2,r2,1
    f73c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f740:	e0bfff17 	ldw	r2,-4(fp)
    f744:	10800003 	ldbu	r2,0(r2)
    f748:	10803fcc 	andi	r2,r2,255
    f74c:	103ff11e 	bne	r2,zero,f714 <_gp+0xfffd0e0c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    f750:	e0bffe17 	ldw	r2,-8(fp)
    f754:	10000005 	stb	zero,0(r2)
    return (len);
    f758:	e0bffd03 	ldbu	r2,-12(fp)
}
    f75c:	e037883a 	mov	sp,fp
    f760:	df000017 	ldw	fp,0(sp)
    f764:	dec00104 	addi	sp,sp,4
    f768:	f800283a 	ret

0000f76c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    f76c:	defffd04 	addi	sp,sp,-12
    f770:	df000215 	stw	fp,8(sp)
    f774:	df000204 	addi	fp,sp,8
    f778:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    f77c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    f780:	00000606 	br	f79c <OS_StrLen+0x30>
        psrc++;
    f784:	e0bfff17 	ldw	r2,-4(fp)
    f788:	10800044 	addi	r2,r2,1
    f78c:	e0bfff15 	stw	r2,-4(fp)
        len++;
    f790:	e0bffe03 	ldbu	r2,-8(fp)
    f794:	10800044 	addi	r2,r2,1
    f798:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    f79c:	e0bfff17 	ldw	r2,-4(fp)
    f7a0:	10800003 	ldbu	r2,0(r2)
    f7a4:	10803fcc 	andi	r2,r2,255
    f7a8:	103ff61e 	bne	r2,zero,f784 <_gp+0xfffd0e7c>
        psrc++;
        len++;
    }
    return (len);
    f7ac:	e0bffe03 	ldbu	r2,-8(fp)
}
    f7b0:	e037883a 	mov	sp,fp
    f7b4:	df000017 	ldw	fp,0(sp)
    f7b8:	dec00104 	addi	sp,sp,4
    f7bc:	f800283a 	ret

0000f7c0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    f7c0:	defffa04 	addi	sp,sp,-24
    f7c4:	dfc00515 	stw	ra,20(sp)
    f7c8:	df000415 	stw	fp,16(sp)
    f7cc:	df000404 	addi	fp,sp,16
    f7d0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f7d4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7d8:	0005303a 	rdctl	r2,status
    f7dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7e0:	e0fffd17 	ldw	r3,-12(fp)
    f7e4:	00bfff84 	movi	r2,-2
    f7e8:	1884703a 	and	r2,r3,r2
    f7ec:	1001703a 	wrctl	status,r2
  
  return context;
    f7f0:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    f7f4:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    f7f8:	d0a72117 	ldw	r2,-25468(gp)
    f7fc:	10800044 	addi	r2,r2,1
    f800:	d0a72115 	stw	r2,-25468(gp)
    f804:	e0bffc17 	ldw	r2,-16(fp)
    f808:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f80c:	e0bffe17 	ldw	r2,-8(fp)
    f810:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    f814:	0016e800 	call	16e80 <OSTaskIdleHook>
    }
    f818:	003fef06 	br	f7d8 <_gp+0xfffd0ed0>

0000f81c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    f81c:	defffa04 	addi	sp,sp,-24
    f820:	dfc00515 	stw	ra,20(sp)
    f824:	df000415 	stw	fp,16(sp)
    f828:	df000404 	addi	fp,sp,16
    f82c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f830:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f834:	00000206 	br	f840 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    f838:	0125a014 	movui	r4,38528
    f83c:	0014f500 	call	14f50 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    f840:	d0a73203 	ldbu	r2,-25400(gp)
    f844:	10803fcc 	andi	r2,r2,255
    f848:	103ffb26 	beq	r2,zero,f838 <_gp+0xfffd0f30>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    f84c:	d0a72617 	ldw	r2,-25448(gp)
    f850:	01401904 	movi	r5,100
    f854:	1009883a 	mov	r4,r2
    f858:	00006340 	call	634 <__udivsi3>
    f85c:	d0a72615 	stw	r2,-25448(gp)
    if (OSIdleCtrMax == 0L) {
    f860:	d0a72617 	ldw	r2,-25448(gp)
    f864:	1000031e 	bne	r2,zero,f874 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    f868:	d0272805 	stb	zero,-25440(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    f86c:	01003fc4 	movi	r4,255
    f870:	0014bd80 	call	14bd8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f874:	0005303a 	rdctl	r2,status
    f878:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f87c:	e0fffd17 	ldw	r3,-12(fp)
    f880:	00bfff84 	movi	r2,-2
    f884:	1884703a 	and	r2,r3,r2
    f888:	1001703a 	wrctl	status,r2
  
  return context;
    f88c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    f890:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    f894:	d0a72117 	ldw	r2,-25468(gp)
    f898:	d0a73315 	stw	r2,-25396(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    f89c:	d0272115 	stw	zero,-25468(gp)
    f8a0:	e0bffc17 	ldw	r2,-16(fp)
    f8a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f8a8:	e0bffe17 	ldw	r2,-8(fp)
    f8ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    f8b0:	d0a73317 	ldw	r2,-25396(gp)
    f8b4:	d0e72617 	ldw	r3,-25448(gp)
    f8b8:	180b883a 	mov	r5,r3
    f8bc:	1009883a 	mov	r4,r2
    f8c0:	00006340 	call	634 <__udivsi3>
    f8c4:	1007883a 	mov	r3,r2
    f8c8:	00801904 	movi	r2,100
    f8cc:	10c5c83a 	sub	r2,r2,r3
    f8d0:	d0a72805 	stb	r2,-25440(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    f8d4:	0016e000 	call	16e00 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    f8d8:	000f8e80 	call	f8e8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    f8dc:	0112d004 	movi	r4,19264
    f8e0:	0014f500 	call	14f50 <OSTimeDly>
    }
    f8e4:	003fe306 	br	f874 <_gp+0xfffd0f6c>

0000f8e8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    f8e8:	defffa04 	addi	sp,sp,-24
    f8ec:	dfc00515 	stw	ra,20(sp)
    f8f0:	df000415 	stw	fp,16(sp)
    f8f4:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f8f8:	e03ffc05 	stb	zero,-16(fp)
    f8fc:	00002406 	br	f990 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    f900:	e0bffc03 	ldbu	r2,-16(fp)
    f904:	e0fffe04 	addi	r3,fp,-8
    f908:	180b883a 	mov	r5,r3
    f90c:	1009883a 	mov	r4,r2
    f910:	0014a180 	call	14a18 <OSTaskStkChk>
    f914:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    f918:	e0bffc43 	ldbu	r2,-15(fp)
    f91c:	1000191e 	bne	r2,zero,f984 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    f920:	e0fffc03 	ldbu	r3,-16(fp)
    f924:	00800134 	movhi	r2,4
    f928:	10b23704 	addi	r2,r2,-14116
    f92c:	18c7883a 	add	r3,r3,r3
    f930:	18c7883a 	add	r3,r3,r3
    f934:	10c5883a 	add	r2,r2,r3
    f938:	10800017 	ldw	r2,0(r2)
    f93c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    f940:	e0bffd17 	ldw	r2,-12(fp)
    f944:	10000f26 	beq	r2,zero,f984 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    f948:	e0bffd17 	ldw	r2,-12(fp)
    f94c:	10800060 	cmpeqi	r2,r2,1
    f950:	10000c1e 	bne	r2,zero,f984 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    f954:	e0bffd17 	ldw	r2,-12(fp)
    f958:	10c00217 	ldw	r3,8(r2)
    f95c:	e0bffd17 	ldw	r2,-12(fp)
    f960:	10800317 	ldw	r2,12(r2)
    f964:	1085883a 	add	r2,r2,r2
    f968:	1085883a 	add	r2,r2,r2
    f96c:	1887883a 	add	r3,r3,r2
    f970:	e0bffd17 	ldw	r2,-12(fp)
    f974:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    f978:	e0ffff17 	ldw	r3,-4(fp)
    f97c:	e0bffd17 	ldw	r2,-12(fp)
    f980:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    f984:	e0bffc03 	ldbu	r2,-16(fp)
    f988:	10800044 	addi	r2,r2,1
    f98c:	e0bffc05 	stb	r2,-16(fp)
    f990:	e0bffc03 	ldbu	r2,-16(fp)
    f994:	10800570 	cmpltui	r2,r2,21
    f998:	103fd91e 	bne	r2,zero,f900 <_gp+0xfffd0ff8>
#endif
                }
            }
        }
    }
}
    f99c:	0001883a 	nop
    f9a0:	e037883a 	mov	sp,fp
    f9a4:	dfc00117 	ldw	ra,4(sp)
    f9a8:	df000017 	ldw	fp,0(sp)
    f9ac:	dec00204 	addi	sp,sp,8
    f9b0:	f800283a 	ret

0000f9b4 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    f9b4:	defff204 	addi	sp,sp,-56
    f9b8:	dfc00d15 	stw	ra,52(sp)
    f9bc:	df000c15 	stw	fp,48(sp)
    f9c0:	df000c04 	addi	fp,sp,48
    f9c4:	e17ffc15 	stw	r5,-16(fp)
    f9c8:	e1bffd15 	stw	r6,-12(fp)
    f9cc:	3807883a 	mov	r3,r7
    f9d0:	e0800417 	ldw	r2,16(fp)
    f9d4:	e13ffb05 	stb	r4,-20(fp)
    f9d8:	e0fffe0d 	sth	r3,-8(fp)
    f9dc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f9e0:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9e4:	0005303a 	rdctl	r2,status
    f9e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9ec:	e0fffa17 	ldw	r3,-24(fp)
    f9f0:	00bfff84 	movi	r2,-2
    f9f4:	1884703a 	and	r2,r3,r2
    f9f8:	1001703a 	wrctl	status,r2
  
  return context;
    f9fc:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    fa00:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    fa04:	d0a72717 	ldw	r2,-25444(gp)
    fa08:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    fa0c:	e0bff617 	ldw	r2,-40(fp)
    fa10:	10009326 	beq	r2,zero,fc60 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    fa14:	e0bff617 	ldw	r2,-40(fp)
    fa18:	10800517 	ldw	r2,20(r2)
    fa1c:	d0a72715 	stw	r2,-25444(gp)
    fa20:	e0bff417 	ldw	r2,-48(fp)
    fa24:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa28:	e0bff817 	ldw	r2,-32(fp)
    fa2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    fa30:	e0bff617 	ldw	r2,-40(fp)
    fa34:	e0fffc17 	ldw	r3,-16(fp)
    fa38:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    fa3c:	e0bff617 	ldw	r2,-40(fp)
    fa40:	e0fffb03 	ldbu	r3,-20(fp)
    fa44:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    fa48:	e0bff617 	ldw	r2,-40(fp)
    fa4c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    fa50:	e0bff617 	ldw	r2,-40(fp)
    fa54:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    fa58:	e0bff617 	ldw	r2,-40(fp)
    fa5c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    fa60:	e0bff617 	ldw	r2,-40(fp)
    fa64:	e0c00317 	ldw	r3,12(fp)
    fa68:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    fa6c:	e0bff617 	ldw	r2,-40(fp)
    fa70:	e0c00217 	ldw	r3,8(fp)
    fa74:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    fa78:	e0bff617 	ldw	r2,-40(fp)
    fa7c:	e0fffd17 	ldw	r3,-12(fp)
    fa80:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    fa84:	e0bff617 	ldw	r2,-40(fp)
    fa88:	e0ffff0b 	ldhu	r3,-4(fp)
    fa8c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    fa90:	e0bff617 	ldw	r2,-40(fp)
    fa94:	e0fffe0b 	ldhu	r3,-8(fp)
    fa98:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    fa9c:	e0bff617 	ldw	r2,-40(fp)
    faa0:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    faa4:	e0bffb03 	ldbu	r2,-20(fp)
    faa8:	1004d0fa 	srli	r2,r2,3
    faac:	1007883a 	mov	r3,r2
    fab0:	e0bff617 	ldw	r2,-40(fp)
    fab4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    fab8:	e0bffb03 	ldbu	r2,-20(fp)
    fabc:	108001cc 	andi	r2,r2,7
    fac0:	1007883a 	mov	r3,r2
    fac4:	e0bff617 	ldw	r2,-40(fp)
    fac8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    facc:	e0bff617 	ldw	r2,-40(fp)
    fad0:	10800d03 	ldbu	r2,52(r2)
    fad4:	10803fcc 	andi	r2,r2,255
    fad8:	00c00044 	movi	r3,1
    fadc:	1884983a 	sll	r2,r3,r2
    fae0:	1007883a 	mov	r3,r2
    fae4:	e0bff617 	ldw	r2,-40(fp)
    fae8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    faec:	e0bff617 	ldw	r2,-40(fp)
    faf0:	10800cc3 	ldbu	r2,51(r2)
    faf4:	10803fcc 	andi	r2,r2,255
    faf8:	00c00044 	movi	r3,1
    fafc:	1884983a 	sll	r2,r3,r2
    fb00:	1007883a 	mov	r3,r2
    fb04:	e0bff617 	ldw	r2,-40(fp)
    fb08:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    fb0c:	e0bff617 	ldw	r2,-40(fp)
    fb10:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    fb14:	e0bff617 	ldw	r2,-40(fp)
    fb18:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    fb1c:	e0bff617 	ldw	r2,-40(fp)
    fb20:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    fb24:	e0bff617 	ldw	r2,-40(fp)
    fb28:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    fb2c:	e0bff617 	ldw	r2,-40(fp)
    fb30:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    fb34:	e0bff617 	ldw	r2,-40(fp)
    fb38:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    fb3c:	e0bff617 	ldw	r2,-40(fp)
    fb40:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    fb44:	e0bff617 	ldw	r2,-40(fp)
    fb48:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    fb4c:	e0bff617 	ldw	r2,-40(fp)
    fb50:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    fb54:	e0bff617 	ldw	r2,-40(fp)
    fb58:	00c00fc4 	movi	r3,63
    fb5c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    fb60:	e0bff617 	ldw	r2,-40(fp)
    fb64:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    fb68:	e13ff617 	ldw	r4,-40(fp)
    fb6c:	0016ea00 	call	16ea0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    fb70:	e13ff617 	ldw	r4,-40(fp)
    fb74:	0016d980 	call	16d98 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb78:	0005303a 	rdctl	r2,status
    fb7c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb80:	e0fff517 	ldw	r3,-44(fp)
    fb84:	00bfff84 	movi	r2,-2
    fb88:	1884703a 	and	r2,r3,r2
    fb8c:	1001703a 	wrctl	status,r2
  
  return context;
    fb90:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    fb94:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    fb98:	e0fffb03 	ldbu	r3,-20(fp)
    fb9c:	00800134 	movhi	r2,4
    fba0:	10b23704 	addi	r2,r2,-14116
    fba4:	18c7883a 	add	r3,r3,r3
    fba8:	18c7883a 	add	r3,r3,r3
    fbac:	10c5883a 	add	r2,r2,r3
    fbb0:	e0fff617 	ldw	r3,-40(fp)
    fbb4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    fbb8:	d0e72317 	ldw	r3,-25460(gp)
    fbbc:	e0bff617 	ldw	r2,-40(fp)
    fbc0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    fbc4:	e0bff617 	ldw	r2,-40(fp)
    fbc8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    fbcc:	d0a72317 	ldw	r2,-25460(gp)
    fbd0:	10000326 	beq	r2,zero,fbe0 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    fbd4:	d0a72317 	ldw	r2,-25460(gp)
    fbd8:	e0fff617 	ldw	r3,-40(fp)
    fbdc:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    fbe0:	e0bff617 	ldw	r2,-40(fp)
    fbe4:	d0a72315 	stw	r2,-25460(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    fbe8:	e0bff617 	ldw	r2,-40(fp)
    fbec:	10c00d83 	ldbu	r3,54(r2)
    fbf0:	d0a72c03 	ldbu	r2,-25424(gp)
    fbf4:	1884b03a 	or	r2,r3,r2
    fbf8:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    fbfc:	e0bff617 	ldw	r2,-40(fp)
    fc00:	10800d03 	ldbu	r2,52(r2)
    fc04:	10c03fcc 	andi	r3,r2,255
    fc08:	e0bff617 	ldw	r2,-40(fp)
    fc0c:	10800d03 	ldbu	r2,52(r2)
    fc10:	11003fcc 	andi	r4,r2,255
    fc14:	d0a72c44 	addi	r2,gp,-25423
    fc18:	2085883a 	add	r2,r4,r2
    fc1c:	11000003 	ldbu	r4,0(r2)
    fc20:	e0bff617 	ldw	r2,-40(fp)
    fc24:	10800d43 	ldbu	r2,53(r2)
    fc28:	2084b03a 	or	r2,r4,r2
    fc2c:	1009883a 	mov	r4,r2
    fc30:	d0a72c44 	addi	r2,gp,-25423
    fc34:	1885883a 	add	r2,r3,r2
    fc38:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    fc3c:	d0a72843 	ldbu	r2,-25439(gp)
    fc40:	10800044 	addi	r2,r2,1
    fc44:	d0a72845 	stb	r2,-25439(gp)
    fc48:	e0bff417 	ldw	r2,-48(fp)
    fc4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc50:	e0bff717 	ldw	r2,-36(fp)
    fc54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    fc58:	0005883a 	mov	r2,zero
    fc5c:	00000506 	br	fc74 <OS_TCBInit+0x2c0>
    fc60:	e0bff417 	ldw	r2,-48(fp)
    fc64:	e0bff915 	stw	r2,-28(fp)
    fc68:	e0bff917 	ldw	r2,-28(fp)
    fc6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    fc70:	00801084 	movi	r2,66
}
    fc74:	e037883a 	mov	sp,fp
    fc78:	dfc00117 	ldw	ra,4(sp)
    fc7c:	df000017 	ldw	fp,0(sp)
    fc80:	dec00204 	addi	sp,sp,8
    fc84:	f800283a 	ret

0000fc88 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    fc88:	defffe04 	addi	sp,sp,-8
    fc8c:	df000115 	stw	fp,4(sp)
    fc90:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    fc94:	d0a01104 	addi	r2,gp,-32700
    fc98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    fc9c:	d0a01204 	addi	r2,gp,-32696
    fca0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    fca4:	d0a01384 	addi	r2,gp,-32690
    fca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    fcac:	d0a01404 	addi	r2,gp,-32688
    fcb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    fcb4:	d0a01304 	addi	r2,gp,-32692
    fcb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    fcbc:	d0a01484 	addi	r2,gp,-32686
    fcc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    fcc4:	d0a01504 	addi	r2,gp,-32684
    fcc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    fccc:	d0a01584 	addi	r2,gp,-32682
    fcd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    fcd4:	d0a01604 	addi	r2,gp,-32680
    fcd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    fcdc:	d0a01684 	addi	r2,gp,-32678
    fce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    fce4:	d0a01704 	addi	r2,gp,-32676
    fce8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    fcec:	d0a01784 	addi	r2,gp,-32674
    fcf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    fcf4:	d0a01804 	addi	r2,gp,-32672
    fcf8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    fcfc:	d0a01884 	addi	r2,gp,-32670
    fd00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    fd04:	d0a01904 	addi	r2,gp,-32668
    fd08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    fd0c:	d0a01984 	addi	r2,gp,-32666
    fd10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    fd14:	d0a01a04 	addi	r2,gp,-32664
    fd18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    fd1c:	d0a01a84 	addi	r2,gp,-32662
    fd20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    fd24:	d0a01b04 	addi	r2,gp,-32660
    fd28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    fd2c:	d0a01b84 	addi	r2,gp,-32658
    fd30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    fd34:	d0a01c04 	addi	r2,gp,-32656
    fd38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    fd3c:	d0a01c84 	addi	r2,gp,-32654
    fd40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    fd44:	d0a01d04 	addi	r2,gp,-32652
    fd48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    fd4c:	d0a01d84 	addi	r2,gp,-32650
    fd50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    fd54:	d0a01e04 	addi	r2,gp,-32648
    fd58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    fd5c:	d0a01e84 	addi	r2,gp,-32646
    fd60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    fd64:	d0a01f04 	addi	r2,gp,-32644
    fd68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    fd6c:	d0a01f84 	addi	r2,gp,-32642
    fd70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    fd74:	d0a02004 	addi	r2,gp,-32640
    fd78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    fd7c:	d0a02084 	addi	r2,gp,-32638
    fd80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    fd84:	d0a02104 	addi	r2,gp,-32636
    fd88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    fd8c:	d0a02184 	addi	r2,gp,-32634
    fd90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    fd94:	d0a02204 	addi	r2,gp,-32632
    fd98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    fd9c:	d0a02284 	addi	r2,gp,-32630
    fda0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    fda4:	d0a02304 	addi	r2,gp,-32628
    fda8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    fdac:	d0a02384 	addi	r2,gp,-32626
    fdb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    fdb4:	d0a02404 	addi	r2,gp,-32624
    fdb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    fdbc:	d0a02484 	addi	r2,gp,-32622
    fdc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    fdc4:	d0a02504 	addi	r2,gp,-32620
    fdc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    fdcc:	d0a02584 	addi	r2,gp,-32618
    fdd0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    fdd4:	d0a02604 	addi	r2,gp,-32616
    fdd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    fddc:	d0a02684 	addi	r2,gp,-32614
    fde0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    fde4:	d0a02704 	addi	r2,gp,-32612
    fde8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    fdec:	d0a02784 	addi	r2,gp,-32610
    fdf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    fdf4:	d0a02804 	addi	r2,gp,-32608
    fdf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    fdfc:	d0a02d04 	addi	r2,gp,-32588
    fe00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    fe04:	0001883a 	nop
    fe08:	e037883a 	mov	sp,fp
    fe0c:	df000017 	ldw	fp,0(sp)
    fe10:	dec00104 	addi	sp,sp,4
    fe14:	f800283a 	ret

0000fe18 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    fe18:	defff204 	addi	sp,sp,-56
    fe1c:	df000d15 	stw	fp,52(sp)
    fe20:	df000d04 	addi	fp,sp,52
    fe24:	e13ffc15 	stw	r4,-16(fp)
    fe28:	2807883a 	mov	r3,r5
    fe2c:	3005883a 	mov	r2,r6
    fe30:	e1ffff15 	stw	r7,-4(fp)
    fe34:	e0fffd0d 	sth	r3,-12(fp)
    fe38:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    fe3c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    fe40:	e0bfff17 	ldw	r2,-4(fp)
    fe44:	1000021e 	bne	r2,zero,fe50 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    fe48:	0005883a 	mov	r2,zero
    fe4c:	0000b006 	br	10110 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    fe50:	e0bffc17 	ldw	r2,-16(fp)
    fe54:	1000051e 	bne	r2,zero,fe6c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    fe58:	e0bfff17 	ldw	r2,-4(fp)
    fe5c:	00c01b84 	movi	r3,110
    fe60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe64:	0005883a 	mov	r2,zero
    fe68:	0000a906 	br	10110 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    fe6c:	e0bffc17 	ldw	r2,-16(fp)
    fe70:	10800003 	ldbu	r2,0(r2)
    fe74:	10803fcc 	andi	r2,r2,255
    fe78:	10800160 	cmpeqi	r2,r2,5
    fe7c:	1000051e 	bne	r2,zero,fe94 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    fe80:	e0bfff17 	ldw	r2,-4(fp)
    fe84:	00c00044 	movi	r3,1
    fe88:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    fe8c:	0005883a 	mov	r2,zero
    fe90:	00009f06 	br	10110 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    fe94:	e0fffe03 	ldbu	r3,-8(fp)
    fe98:	00bfe004 	movi	r2,-128
    fe9c:	1884703a 	and	r2,r3,r2
    fea0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    fea4:	e0bff503 	ldbu	r2,-44(fp)
    fea8:	10000626 	beq	r2,zero,fec4 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    feac:	e0bffe03 	ldbu	r2,-8(fp)
    feb0:	10801fcc 	andi	r2,r2,127
    feb4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    feb8:	00800044 	movi	r2,1
    febc:	e0bff385 	stb	r2,-50(fp)
    fec0:	00000106 	br	fec8 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    fec4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    fec8:	e0bfff17 	ldw	r2,-4(fp)
    fecc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fed0:	0005303a 	rdctl	r2,status
    fed4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fed8:	e0fffb17 	ldw	r3,-20(fp)
    fedc:	00bfff84 	movi	r2,-2
    fee0:	1884703a 	and	r2,r3,r2
    fee4:	1001703a 	wrctl	status,r2
  
  return context;
    fee8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    feec:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    fef0:	e0bffe03 	ldbu	r2,-8(fp)
    fef4:	10c00060 	cmpeqi	r3,r2,1
    fef8:	18005f1e 	bne	r3,zero,10078 <OSFlagAccept+0x260>
    fefc:	10c00088 	cmpgei	r3,r2,2
    ff00:	1800021e 	bne	r3,zero,ff0c <OSFlagAccept+0xf4>
    ff04:	10003f26 	beq	r2,zero,10004 <OSFlagAccept+0x1ec>
    ff08:	00007706 	br	100e8 <OSFlagAccept+0x2d0>
    ff0c:	10c000a0 	cmpeqi	r3,r2,2
    ff10:	1800031e 	bne	r3,zero,ff20 <OSFlagAccept+0x108>
    ff14:	108000e0 	cmpeqi	r2,r2,3
    ff18:	10001e1e 	bne	r2,zero,ff94 <OSFlagAccept+0x17c>
    ff1c:	00007206 	br	100e8 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    ff20:	e0bffc17 	ldw	r2,-16(fp)
    ff24:	10c0020b 	ldhu	r3,8(r2)
    ff28:	e0bffd0b 	ldhu	r2,-12(fp)
    ff2c:	1884703a 	and	r2,r3,r2
    ff30:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    ff34:	e0fff30b 	ldhu	r3,-52(fp)
    ff38:	e0bffd0b 	ldhu	r2,-12(fp)
    ff3c:	18800d1e 	bne	r3,r2,ff74 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ff40:	e0bff383 	ldbu	r2,-50(fp)
    ff44:	10800058 	cmpnei	r2,r2,1
    ff48:	10000d1e 	bne	r2,zero,ff80 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    ff4c:	e0bffc17 	ldw	r2,-16(fp)
    ff50:	1080020b 	ldhu	r2,8(r2)
    ff54:	1007883a 	mov	r3,r2
    ff58:	e0bff30b 	ldhu	r2,-52(fp)
    ff5c:	0084303a 	nor	r2,zero,r2
    ff60:	1884703a 	and	r2,r3,r2
    ff64:	1007883a 	mov	r3,r2
    ff68:	e0bffc17 	ldw	r2,-16(fp)
    ff6c:	10c0020d 	sth	r3,8(r2)
    ff70:	00000306 	br	ff80 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    ff74:	e0bfff17 	ldw	r2,-4(fp)
    ff78:	00c01c04 	movi	r3,112
    ff7c:	10c00005 	stb	r3,0(r2)
    ff80:	e0bff417 	ldw	r2,-48(fp)
    ff84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff88:	e0bff617 	ldw	r2,-40(fp)
    ff8c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    ff90:	00005e06 	br	1010c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    ff94:	e0bffc17 	ldw	r2,-16(fp)
    ff98:	10c0020b 	ldhu	r3,8(r2)
    ff9c:	e0bffd0b 	ldhu	r2,-12(fp)
    ffa0:	1884703a 	and	r2,r3,r2
    ffa4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    ffa8:	e0bff30b 	ldhu	r2,-52(fp)
    ffac:	10000d26 	beq	r2,zero,ffe4 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    ffb0:	e0bff383 	ldbu	r2,-50(fp)
    ffb4:	10800058 	cmpnei	r2,r2,1
    ffb8:	10000d1e 	bne	r2,zero,fff0 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    ffbc:	e0bffc17 	ldw	r2,-16(fp)
    ffc0:	1080020b 	ldhu	r2,8(r2)
    ffc4:	1007883a 	mov	r3,r2
    ffc8:	e0bff30b 	ldhu	r2,-52(fp)
    ffcc:	0084303a 	nor	r2,zero,r2
    ffd0:	1884703a 	and	r2,r3,r2
    ffd4:	1007883a 	mov	r3,r2
    ffd8:	e0bffc17 	ldw	r2,-16(fp)
    ffdc:	10c0020d 	sth	r3,8(r2)
    ffe0:	00000306 	br	fff0 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    ffe4:	e0bfff17 	ldw	r2,-4(fp)
    ffe8:	00c01c04 	movi	r3,112
    ffec:	10c00005 	stb	r3,0(r2)
    fff0:	e0bff417 	ldw	r2,-48(fp)
    fff4:	e0bff715 	stw	r2,-36(fp)
    fff8:	e0bff717 	ldw	r2,-36(fp)
    fffc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10000:	00004206 	br	1010c <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10004:	e0bffc17 	ldw	r2,-16(fp)
   10008:	1080020b 	ldhu	r2,8(r2)
   1000c:	0084303a 	nor	r2,zero,r2
   10010:	1007883a 	mov	r3,r2
   10014:	e0bffd0b 	ldhu	r2,-12(fp)
   10018:	1884703a 	and	r2,r3,r2
   1001c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10020:	e0fff30b 	ldhu	r3,-52(fp)
   10024:	e0bffd0b 	ldhu	r2,-12(fp)
   10028:	18800b1e 	bne	r3,r2,10058 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1002c:	e0bff383 	ldbu	r2,-50(fp)
   10030:	10800058 	cmpnei	r2,r2,1
   10034:	10000b1e 	bne	r2,zero,10064 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10038:	e0bffc17 	ldw	r2,-16(fp)
   1003c:	10c0020b 	ldhu	r3,8(r2)
   10040:	e0bff30b 	ldhu	r2,-52(fp)
   10044:	1884b03a 	or	r2,r3,r2
   10048:	1007883a 	mov	r3,r2
   1004c:	e0bffc17 	ldw	r2,-16(fp)
   10050:	10c0020d 	sth	r3,8(r2)
   10054:	00000306 	br	10064 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10058:	e0bfff17 	ldw	r2,-4(fp)
   1005c:	00c01c04 	movi	r3,112
   10060:	10c00005 	stb	r3,0(r2)
   10064:	e0bff417 	ldw	r2,-48(fp)
   10068:	e0bff815 	stw	r2,-32(fp)
   1006c:	e0bff817 	ldw	r2,-32(fp)
   10070:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10074:	00002506 	br	1010c <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10078:	e0bffc17 	ldw	r2,-16(fp)
   1007c:	1080020b 	ldhu	r2,8(r2)
   10080:	0084303a 	nor	r2,zero,r2
   10084:	1007883a 	mov	r3,r2
   10088:	e0bffd0b 	ldhu	r2,-12(fp)
   1008c:	1884703a 	and	r2,r3,r2
   10090:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10094:	e0bff30b 	ldhu	r2,-52(fp)
   10098:	10000b26 	beq	r2,zero,100c8 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1009c:	e0bff383 	ldbu	r2,-50(fp)
   100a0:	10800058 	cmpnei	r2,r2,1
   100a4:	10000b1e 	bne	r2,zero,100d4 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   100a8:	e0bffc17 	ldw	r2,-16(fp)
   100ac:	10c0020b 	ldhu	r3,8(r2)
   100b0:	e0bff30b 	ldhu	r2,-52(fp)
   100b4:	1884b03a 	or	r2,r3,r2
   100b8:	1007883a 	mov	r3,r2
   100bc:	e0bffc17 	ldw	r2,-16(fp)
   100c0:	10c0020d 	sth	r3,8(r2)
   100c4:	00000306 	br	100d4 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   100c8:	e0bfff17 	ldw	r2,-4(fp)
   100cc:	00c01c04 	movi	r3,112
   100d0:	10c00005 	stb	r3,0(r2)
   100d4:	e0bff417 	ldw	r2,-48(fp)
   100d8:	e0bff915 	stw	r2,-28(fp)
   100dc:	e0bff917 	ldw	r2,-28(fp)
   100e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   100e4:	00000906 	br	1010c <OSFlagAccept+0x2f4>
   100e8:	e0bff417 	ldw	r2,-48(fp)
   100ec:	e0bffa15 	stw	r2,-24(fp)
   100f0:	e0bffa17 	ldw	r2,-24(fp)
   100f4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   100f8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   100fc:	e0bfff17 	ldw	r2,-4(fp)
   10100:	00c01bc4 	movi	r3,111
   10104:	10c00005 	stb	r3,0(r2)
             break;
   10108:	0001883a 	nop
    }
    return (flags_rdy);
   1010c:	e0bff30b 	ldhu	r2,-52(fp)
}
   10110:	e037883a 	mov	sp,fp
   10114:	df000017 	ldw	fp,0(sp)
   10118:	dec00104 	addi	sp,sp,4
   1011c:	f800283a 	ret

00010120 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   10120:	defff804 	addi	sp,sp,-32
   10124:	df000715 	stw	fp,28(sp)
   10128:	df000704 	addi	fp,sp,28
   1012c:	2005883a 	mov	r2,r4
   10130:	e17fff15 	stw	r5,-4(fp)
   10134:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   10138:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1013c:	e0bfff17 	ldw	r2,-4(fp)
   10140:	1000021e 	bne	r2,zero,1014c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   10144:	0005883a 	mov	r2,zero
   10148:	00003306 	br	10218 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1014c:	d0a72e03 	ldbu	r2,-25416(gp)
   10150:	10803fcc 	andi	r2,r2,255
   10154:	10000526 	beq	r2,zero,1016c <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   10158:	e0bfff17 	ldw	r2,-4(fp)
   1015c:	00c00404 	movi	r3,16
   10160:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   10164:	0005883a 	mov	r2,zero
   10168:	00002b06 	br	10218 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1016c:	0005303a 	rdctl	r2,status
   10170:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10174:	e0fffd17 	ldw	r3,-12(fp)
   10178:	00bfff84 	movi	r2,-2
   1017c:	1884703a 	and	r2,r3,r2
   10180:	1001703a 	wrctl	status,r2
  
  return context;
   10184:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   10188:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1018c:	d0a73117 	ldw	r2,-25404(gp)
   10190:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   10194:	e0bffb17 	ldw	r2,-20(fp)
   10198:	10001726 	beq	r2,zero,101f8 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1019c:	d0a73117 	ldw	r2,-25404(gp)
   101a0:	10800117 	ldw	r2,4(r2)
   101a4:	d0a73115 	stw	r2,-25404(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   101a8:	e0bffb17 	ldw	r2,-20(fp)
   101ac:	00c00144 	movi	r3,5
   101b0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   101b4:	e0bffb17 	ldw	r2,-20(fp)
   101b8:	e0fffe0b 	ldhu	r3,-8(fp)
   101bc:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   101c0:	e0bffb17 	ldw	r2,-20(fp)
   101c4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   101c8:	e0bffb17 	ldw	r2,-20(fp)
   101cc:	00c00fc4 	movi	r3,63
   101d0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   101d4:	e0bffb17 	ldw	r2,-20(fp)
   101d8:	100002c5 	stb	zero,11(r2)
   101dc:	e0bff917 	ldw	r2,-28(fp)
   101e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101e4:	e0bffa17 	ldw	r2,-24(fp)
   101e8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   101ec:	e0bfff17 	ldw	r2,-4(fp)
   101f0:	10000005 	stb	zero,0(r2)
   101f4:	00000706 	br	10214 <OSFlagCreate+0xf4>
   101f8:	e0bff917 	ldw	r2,-28(fp)
   101fc:	e0bffc15 	stw	r2,-16(fp)
   10200:	e0bffc17 	ldw	r2,-16(fp)
   10204:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   10208:	e0bfff17 	ldw	r2,-4(fp)
   1020c:	00c01c84 	movi	r3,114
   10210:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10214:	e0bffb17 	ldw	r2,-20(fp)
}
   10218:	e037883a 	mov	sp,fp
   1021c:	df000017 	ldw	fp,0(sp)
   10220:	dec00104 	addi	sp,sp,4
   10224:	f800283a 	ret

00010228 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   10228:	defff204 	addi	sp,sp,-56
   1022c:	dfc00d15 	stw	ra,52(sp)
   10230:	df000c15 	stw	fp,48(sp)
   10234:	df000c04 	addi	fp,sp,48
   10238:	e13ffd15 	stw	r4,-12(fp)
   1023c:	2805883a 	mov	r2,r5
   10240:	e1bfff15 	stw	r6,-4(fp)
   10244:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10248:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1024c:	e0bfff17 	ldw	r2,-4(fp)
   10250:	1000021e 	bne	r2,zero,1025c <OSFlagDel+0x34>
        return (pgrp);
   10254:	e0bffd17 	ldw	r2,-12(fp)
   10258:	00008006 	br	1045c <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1025c:	e0bffd17 	ldw	r2,-12(fp)
   10260:	1000051e 	bne	r2,zero,10278 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10264:	e0bfff17 	ldw	r2,-4(fp)
   10268:	00c01b84 	movi	r3,110
   1026c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10270:	e0bffd17 	ldw	r2,-12(fp)
   10274:	00007906 	br	1045c <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10278:	d0a72e03 	ldbu	r2,-25416(gp)
   1027c:	10803fcc 	andi	r2,r2,255
   10280:	10000526 	beq	r2,zero,10298 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10284:	e0bfff17 	ldw	r2,-4(fp)
   10288:	00c003c4 	movi	r3,15
   1028c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10290:	e0bffd17 	ldw	r2,-12(fp)
   10294:	00007106 	br	1045c <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   10298:	e0bffd17 	ldw	r2,-12(fp)
   1029c:	10800003 	ldbu	r2,0(r2)
   102a0:	10803fcc 	andi	r2,r2,255
   102a4:	10800160 	cmpeqi	r2,r2,5
   102a8:	1000051e 	bne	r2,zero,102c0 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   102ac:	e0bfff17 	ldw	r2,-4(fp)
   102b0:	00c00044 	movi	r3,1
   102b4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   102b8:	e0bffd17 	ldw	r2,-12(fp)
   102bc:	00006706 	br	1045c <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   102c0:	0005303a 	rdctl	r2,status
   102c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   102c8:	e0fffc17 	ldw	r3,-16(fp)
   102cc:	00bfff84 	movi	r2,-2
   102d0:	1884703a 	and	r2,r3,r2
   102d4:	1001703a 	wrctl	status,r2
  
  return context;
   102d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   102dc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   102e0:	e0bffd17 	ldw	r2,-12(fp)
   102e4:	10800117 	ldw	r2,4(r2)
   102e8:	10000326 	beq	r2,zero,102f8 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   102ec:	00800044 	movi	r2,1
   102f0:	e0bff405 	stb	r2,-48(fp)
   102f4:	00000106 	br	102fc <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   102f8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   102fc:	e0bffe03 	ldbu	r2,-8(fp)
   10300:	10000326 	beq	r2,zero,10310 <OSFlagDel+0xe8>
   10304:	10800060 	cmpeqi	r2,r2,1
   10308:	1000231e 	bne	r2,zero,10398 <OSFlagDel+0x170>
   1030c:	00004806 	br	10430 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   10310:	e0bff403 	ldbu	r2,-48(fp)
   10314:	1000161e 	bne	r2,zero,10370 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10318:	e0bffd17 	ldw	r2,-12(fp)
   1031c:	00c00fc4 	movi	r3,63
   10320:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10324:	e0bffd17 	ldw	r2,-12(fp)
   10328:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1032c:	e0bffd17 	ldw	r2,-12(fp)
   10330:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10334:	d0e73117 	ldw	r3,-25404(gp)
   10338:	e0bffd17 	ldw	r2,-12(fp)
   1033c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10340:	e0bffd17 	ldw	r2,-12(fp)
   10344:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   10348:	e0bffd17 	ldw	r2,-12(fp)
   1034c:	d0a73115 	stw	r2,-25404(gp)
   10350:	e0bff717 	ldw	r2,-36(fp)
   10354:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10358:	e0bff817 	ldw	r2,-32(fp)
   1035c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   10360:	e0bfff17 	ldw	r2,-4(fp)
   10364:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   10368:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1036c:	00003a06 	br	10458 <OSFlagDel+0x230>
   10370:	e0bff717 	ldw	r2,-36(fp)
   10374:	e0bff915 	stw	r2,-28(fp)
   10378:	e0bff917 	ldw	r2,-28(fp)
   1037c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10380:	e0bfff17 	ldw	r2,-4(fp)
   10384:	00c01244 	movi	r3,73
   10388:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1038c:	e0bffd17 	ldw	r2,-12(fp)
   10390:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10394:	00003006 	br	10458 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10398:	e0bffd17 	ldw	r2,-12(fp)
   1039c:	10800117 	ldw	r2,4(r2)
   103a0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   103a4:	00000606 	br	103c0 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   103a8:	000b883a 	mov	r5,zero
   103ac:	e13ff517 	ldw	r4,-44(fp)
   103b0:	00113940 	call	11394 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   103b4:	e0bff517 	ldw	r2,-44(fp)
   103b8:	10800017 	ldw	r2,0(r2)
   103bc:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   103c0:	e0bff517 	ldw	r2,-44(fp)
   103c4:	103ff81e 	bne	r2,zero,103a8 <_gp+0xfffd1aa0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   103c8:	e0bffd17 	ldw	r2,-12(fp)
   103cc:	00c00fc4 	movi	r3,63
   103d0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   103d4:	e0bffd17 	ldw	r2,-12(fp)
   103d8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   103dc:	e0bffd17 	ldw	r2,-12(fp)
   103e0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   103e4:	d0e73117 	ldw	r3,-25404(gp)
   103e8:	e0bffd17 	ldw	r2,-12(fp)
   103ec:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   103f0:	e0bffd17 	ldw	r2,-12(fp)
   103f4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   103f8:	e0bffd17 	ldw	r2,-12(fp)
   103fc:	d0a73115 	stw	r2,-25404(gp)
   10400:	e0bff717 	ldw	r2,-36(fp)
   10404:	e0bffa15 	stw	r2,-24(fp)
   10408:	e0bffa17 	ldw	r2,-24(fp)
   1040c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10410:	e0bff403 	ldbu	r2,-48(fp)
   10414:	10800058 	cmpnei	r2,r2,1
   10418:	1000011e 	bne	r2,zero,10420 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1041c:	000f5b40 	call	f5b4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   10420:	e0bfff17 	ldw	r2,-4(fp)
   10424:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10428:	e03ff615 	stw	zero,-40(fp)
             break;
   1042c:	00000a06 	br	10458 <OSFlagDel+0x230>
   10430:	e0bff717 	ldw	r2,-36(fp)
   10434:	e0bffb15 	stw	r2,-20(fp)
   10438:	e0bffb17 	ldw	r2,-20(fp)
   1043c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   10440:	e0bfff17 	ldw	r2,-4(fp)
   10444:	00c001c4 	movi	r3,7
   10448:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   1044c:	e0bffd17 	ldw	r2,-12(fp)
   10450:	e0bff615 	stw	r2,-40(fp)
             break;
   10454:	0001883a 	nop
    }
    return (pgrp_return);
   10458:	e0bff617 	ldw	r2,-40(fp)
}
   1045c:	e037883a 	mov	sp,fp
   10460:	dfc00117 	ldw	ra,4(sp)
   10464:	df000017 	ldw	fp,0(sp)
   10468:	dec00204 	addi	sp,sp,8
   1046c:	f800283a 	ret

00010470 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10470:	defff604 	addi	sp,sp,-40
   10474:	dfc00915 	stw	ra,36(sp)
   10478:	df000815 	stw	fp,32(sp)
   1047c:	df000804 	addi	fp,sp,32
   10480:	e13ffd15 	stw	r4,-12(fp)
   10484:	e17ffe15 	stw	r5,-8(fp)
   10488:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1048c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10490:	e0bfff17 	ldw	r2,-4(fp)
   10494:	1000021e 	bne	r2,zero,104a0 <OSFlagNameGet+0x30>
        return (0);
   10498:	0005883a 	mov	r2,zero
   1049c:	00003906 	br	10584 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   104a0:	e0bffd17 	ldw	r2,-12(fp)
   104a4:	1000051e 	bne	r2,zero,104bc <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   104a8:	e0bfff17 	ldw	r2,-4(fp)
   104ac:	00c01b84 	movi	r3,110
   104b0:	10c00005 	stb	r3,0(r2)
        return (0);
   104b4:	0005883a 	mov	r2,zero
   104b8:	00003206 	br	10584 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   104bc:	e0bffe17 	ldw	r2,-8(fp)
   104c0:	1000051e 	bne	r2,zero,104d8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   104c4:	e0bfff17 	ldw	r2,-4(fp)
   104c8:	00c00304 	movi	r3,12
   104cc:	10c00005 	stb	r3,0(r2)
        return (0);
   104d0:	0005883a 	mov	r2,zero
   104d4:	00002b06 	br	10584 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   104d8:	d0a72e03 	ldbu	r2,-25416(gp)
   104dc:	10803fcc 	andi	r2,r2,255
   104e0:	10000526 	beq	r2,zero,104f8 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   104e4:	e0bfff17 	ldw	r2,-4(fp)
   104e8:	00c00444 	movi	r3,17
   104ec:	10c00005 	stb	r3,0(r2)
        return (0);
   104f0:	0005883a 	mov	r2,zero
   104f4:	00002306 	br	10584 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   104f8:	0005303a 	rdctl	r2,status
   104fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10500:	e0fffc17 	ldw	r3,-16(fp)
   10504:	00bfff84 	movi	r2,-2
   10508:	1884703a 	and	r2,r3,r2
   1050c:	1001703a 	wrctl	status,r2
  
  return context;
   10510:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10514:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   10518:	e0bffd17 	ldw	r2,-12(fp)
   1051c:	10800003 	ldbu	r2,0(r2)
   10520:	10803fcc 	andi	r2,r2,255
   10524:	10800160 	cmpeqi	r2,r2,5
   10528:	1000091e 	bne	r2,zero,10550 <OSFlagNameGet+0xe0>
   1052c:	e0bff817 	ldw	r2,-32(fp)
   10530:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10534:	e0bff917 	ldw	r2,-28(fp)
   10538:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1053c:	e0bfff17 	ldw	r2,-4(fp)
   10540:	00c00044 	movi	r3,1
   10544:	10c00005 	stb	r3,0(r2)
        return (0);
   10548:	0005883a 	mov	r2,zero
   1054c:	00000d06 	br	10584 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   10550:	e0bffd17 	ldw	r2,-12(fp)
   10554:	10800284 	addi	r2,r2,10
   10558:	100b883a 	mov	r5,r2
   1055c:	e13ffe17 	ldw	r4,-8(fp)
   10560:	000f6f80 	call	f6f8 <OS_StrCopy>
   10564:	e0bffb05 	stb	r2,-20(fp)
   10568:	e0bff817 	ldw	r2,-32(fp)
   1056c:	e0bffa15 	stw	r2,-24(fp)
   10570:	e0bffa17 	ldw	r2,-24(fp)
   10574:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10578:	e0bfff17 	ldw	r2,-4(fp)
   1057c:	10000005 	stb	zero,0(r2)
    return (len);
   10580:	e0bffb03 	ldbu	r2,-20(fp)
}
   10584:	e037883a 	mov	sp,fp
   10588:	dfc00117 	ldw	ra,4(sp)
   1058c:	df000017 	ldw	fp,0(sp)
   10590:	dec00204 	addi	sp,sp,8
   10594:	f800283a 	ret

00010598 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10598:	defff504 	addi	sp,sp,-44
   1059c:	dfc00a15 	stw	ra,40(sp)
   105a0:	df000915 	stw	fp,36(sp)
   105a4:	df000904 	addi	fp,sp,36
   105a8:	e13ffd15 	stw	r4,-12(fp)
   105ac:	e17ffe15 	stw	r5,-8(fp)
   105b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   105b4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   105b8:	e0bfff17 	ldw	r2,-4(fp)
   105bc:	10004326 	beq	r2,zero,106cc <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   105c0:	e0bffd17 	ldw	r2,-12(fp)
   105c4:	1000041e 	bne	r2,zero,105d8 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   105c8:	e0bfff17 	ldw	r2,-4(fp)
   105cc:	00c01b84 	movi	r3,110
   105d0:	10c00005 	stb	r3,0(r2)
        return;
   105d4:	00003e06 	br	106d0 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   105d8:	e0bffe17 	ldw	r2,-8(fp)
   105dc:	1000041e 	bne	r2,zero,105f0 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   105e0:	e0bfff17 	ldw	r2,-4(fp)
   105e4:	00c00304 	movi	r3,12
   105e8:	10c00005 	stb	r3,0(r2)
        return;
   105ec:	00003806 	br	106d0 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   105f0:	d0a72e03 	ldbu	r2,-25416(gp)
   105f4:	10803fcc 	andi	r2,r2,255
   105f8:	10000426 	beq	r2,zero,1060c <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   105fc:	e0bfff17 	ldw	r2,-4(fp)
   10600:	00c00484 	movi	r3,18
   10604:	10c00005 	stb	r3,0(r2)
        return;
   10608:	00003106 	br	106d0 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1060c:	0005303a 	rdctl	r2,status
   10610:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10614:	e0fffc17 	ldw	r3,-16(fp)
   10618:	00bfff84 	movi	r2,-2
   1061c:	1884703a 	and	r2,r3,r2
   10620:	1001703a 	wrctl	status,r2
  
  return context;
   10624:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10628:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1062c:	e0bffd17 	ldw	r2,-12(fp)
   10630:	10800003 	ldbu	r2,0(r2)
   10634:	10803fcc 	andi	r2,r2,255
   10638:	10800160 	cmpeqi	r2,r2,5
   1063c:	1000081e 	bne	r2,zero,10660 <OSFlagNameSet+0xc8>
   10640:	e0bff717 	ldw	r2,-36(fp)
   10644:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10648:	e0bff817 	ldw	r2,-32(fp)
   1064c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   10650:	e0bfff17 	ldw	r2,-4(fp)
   10654:	00c00044 	movi	r3,1
   10658:	10c00005 	stb	r3,0(r2)
        return;
   1065c:	00001c06 	br	106d0 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   10660:	e13ffe17 	ldw	r4,-8(fp)
   10664:	000f76c0 	call	f76c <OS_StrLen>
   10668:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1066c:	e0bffa03 	ldbu	r2,-24(fp)
   10670:	10800830 	cmpltui	r2,r2,32
   10674:	1000081e 	bne	r2,zero,10698 <OSFlagNameSet+0x100>
   10678:	e0bff717 	ldw	r2,-36(fp)
   1067c:	e0bff915 	stw	r2,-28(fp)
   10680:	e0bff917 	ldw	r2,-28(fp)
   10684:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   10688:	e0bfff17 	ldw	r2,-4(fp)
   1068c:	00c01cc4 	movi	r3,115
   10690:	10c00005 	stb	r3,0(r2)
        return;
   10694:	00000e06 	br	106d0 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   10698:	e0bffd17 	ldw	r2,-12(fp)
   1069c:	10800284 	addi	r2,r2,10
   106a0:	e17ffe17 	ldw	r5,-8(fp)
   106a4:	1009883a 	mov	r4,r2
   106a8:	000f6f80 	call	f6f8 <OS_StrCopy>
   106ac:	e0bff717 	ldw	r2,-36(fp)
   106b0:	e0bffb15 	stw	r2,-20(fp)
   106b4:	e0bffb17 	ldw	r2,-20(fp)
   106b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   106bc:	e0bfff17 	ldw	r2,-4(fp)
   106c0:	10000005 	stb	zero,0(r2)
    return;
   106c4:	0001883a 	nop
   106c8:	00000106 	br	106d0 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   106cc:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   106d0:	e037883a 	mov	sp,fp
   106d4:	dfc00117 	ldw	ra,4(sp)
   106d8:	df000017 	ldw	fp,0(sp)
   106dc:	dec00204 	addi	sp,sp,8
   106e0:	f800283a 	ret

000106e4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   106e4:	deffe104 	addi	sp,sp,-124
   106e8:	dfc01e15 	stw	ra,120(sp)
   106ec:	df001d15 	stw	fp,116(sp)
   106f0:	df001d04 	addi	fp,sp,116
   106f4:	e13ffc15 	stw	r4,-16(fp)
   106f8:	2809883a 	mov	r4,r5
   106fc:	3007883a 	mov	r3,r6
   10700:	3805883a 	mov	r2,r7
   10704:	e13ffd0d 	sth	r4,-12(fp)
   10708:	e0fffe05 	stb	r3,-8(fp)
   1070c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10710:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10714:	e0800217 	ldw	r2,8(fp)
   10718:	1000021e 	bne	r2,zero,10724 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   1071c:	0005883a 	mov	r2,zero
   10720:	00015906 	br	10c88 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10724:	e0bffc17 	ldw	r2,-16(fp)
   10728:	1000051e 	bne	r2,zero,10740 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1072c:	e0800217 	ldw	r2,8(fp)
   10730:	00c01b84 	movi	r3,110
   10734:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10738:	0005883a 	mov	r2,zero
   1073c:	00015206 	br	10c88 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10740:	d0a72e03 	ldbu	r2,-25416(gp)
   10744:	10803fcc 	andi	r2,r2,255
   10748:	10000526 	beq	r2,zero,10760 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1074c:	e0800217 	ldw	r2,8(fp)
   10750:	00c00084 	movi	r3,2
   10754:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10758:	0005883a 	mov	r2,zero
   1075c:	00014a06 	br	10c88 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   10760:	d0a72003 	ldbu	r2,-25472(gp)
   10764:	10803fcc 	andi	r2,r2,255
   10768:	10000526 	beq	r2,zero,10780 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   1076c:	e0800217 	ldw	r2,8(fp)
   10770:	00c00344 	movi	r3,13
   10774:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10778:	0005883a 	mov	r2,zero
   1077c:	00014206 	br	10c88 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   10780:	e0bffc17 	ldw	r2,-16(fp)
   10784:	10800003 	ldbu	r2,0(r2)
   10788:	10803fcc 	andi	r2,r2,255
   1078c:	10800160 	cmpeqi	r2,r2,5
   10790:	1000051e 	bne	r2,zero,107a8 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   10794:	e0800217 	ldw	r2,8(fp)
   10798:	00c00044 	movi	r3,1
   1079c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   107a0:	0005883a 	mov	r2,zero
   107a4:	00013806 	br	10c88 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   107a8:	e0fffe03 	ldbu	r3,-8(fp)
   107ac:	00bfe004 	movi	r2,-128
   107b0:	1884703a 	and	r2,r3,r2
   107b4:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   107b8:	e0bfe603 	ldbu	r2,-104(fp)
   107bc:	10000626 	beq	r2,zero,107d8 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   107c0:	e0bffe03 	ldbu	r2,-8(fp)
   107c4:	10801fcc 	andi	r2,r2,127
   107c8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   107cc:	00800044 	movi	r2,1
   107d0:	e0bfe405 	stb	r2,-112(fp)
   107d4:	00000106 	br	107dc <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   107d8:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107dc:	0005303a 	rdctl	r2,status
   107e0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107e4:	e0fff617 	ldw	r3,-40(fp)
   107e8:	00bfff84 	movi	r2,-2
   107ec:	1884703a 	and	r2,r3,r2
   107f0:	1001703a 	wrctl	status,r2
  
  return context;
   107f4:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   107f8:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   107fc:	e0bffe03 	ldbu	r2,-8(fp)
   10800:	10c00060 	cmpeqi	r3,r2,1
   10804:	1800921e 	bne	r3,zero,10a50 <OSFlagPend+0x36c>
   10808:	10c00088 	cmpgei	r3,r2,2
   1080c:	1800021e 	bne	r3,zero,10818 <OSFlagPend+0x134>
   10810:	10006126 	beq	r2,zero,10998 <OSFlagPend+0x2b4>
   10814:	0000bb06 	br	10b04 <OSFlagPend+0x420>
   10818:	10c000a0 	cmpeqi	r3,r2,2
   1081c:	1800031e 	bne	r3,zero,1082c <OSFlagPend+0x148>
   10820:	108000e0 	cmpeqi	r2,r2,3
   10824:	10002f1e 	bne	r2,zero,108e4 <OSFlagPend+0x200>
   10828:	0000b606 	br	10b04 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   1082c:	e0bffc17 	ldw	r2,-16(fp)
   10830:	10c0020b 	ldhu	r3,8(r2)
   10834:	e0bffd0b 	ldhu	r2,-12(fp)
   10838:	1884703a 	and	r2,r3,r2
   1083c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10840:	e0ffe80b 	ldhu	r3,-96(fp)
   10844:	e0bffd0b 	ldhu	r2,-12(fp)
   10848:	1880171e 	bne	r3,r2,108a8 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1084c:	e0bfe403 	ldbu	r2,-112(fp)
   10850:	10800058 	cmpnei	r2,r2,1
   10854:	1000091e 	bne	r2,zero,1087c <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10858:	e0bffc17 	ldw	r2,-16(fp)
   1085c:	1080020b 	ldhu	r2,8(r2)
   10860:	1007883a 	mov	r3,r2
   10864:	e0bfe80b 	ldhu	r2,-96(fp)
   10868:	0084303a 	nor	r2,zero,r2
   1086c:	1884703a 	and	r2,r3,r2
   10870:	1007883a 	mov	r3,r2
   10874:	e0bffc17 	ldw	r2,-16(fp)
   10878:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1087c:	d0a72f17 	ldw	r2,-25412(gp)
   10880:	e0ffe80b 	ldhu	r3,-96(fp)
   10884:	10c00b0d 	sth	r3,44(r2)
   10888:	e0bfe517 	ldw	r2,-108(fp)
   1088c:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10890:	e0bfe717 	ldw	r2,-100(fp)
   10894:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10898:	e0800217 	ldw	r2,8(fp)
   1089c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   108a0:	e0bfe80b 	ldhu	r2,-96(fp)
   108a4:	0000f806 	br	10c88 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   108a8:	e13ffd0b 	ldhu	r4,-12(fp)
   108ac:	e17ffe03 	ldbu	r5,-8(fp)
   108b0:	e0bfff0b 	ldhu	r2,-4(fp)
   108b4:	e0fff704 	addi	r3,fp,-36
   108b8:	d8800015 	stw	r2,0(sp)
   108bc:	280f883a 	mov	r7,r5
   108c0:	200d883a 	mov	r6,r4
   108c4:	180b883a 	mov	r5,r3
   108c8:	e13ffc17 	ldw	r4,-16(fp)
   108cc:	00111540 	call	11154 <OS_FlagBlock>
   108d0:	e0bfe517 	ldw	r2,-108(fp)
   108d4:	e0bfe915 	stw	r2,-92(fp)
   108d8:	e0bfe917 	ldw	r2,-92(fp)
   108dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   108e0:	00009206 	br	10b2c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   108e4:	e0bffc17 	ldw	r2,-16(fp)
   108e8:	10c0020b 	ldhu	r3,8(r2)
   108ec:	e0bffd0b 	ldhu	r2,-12(fp)
   108f0:	1884703a 	and	r2,r3,r2
   108f4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   108f8:	e0bfe80b 	ldhu	r2,-96(fp)
   108fc:	10001726 	beq	r2,zero,1095c <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10900:	e0bfe403 	ldbu	r2,-112(fp)
   10904:	10800058 	cmpnei	r2,r2,1
   10908:	1000091e 	bne	r2,zero,10930 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1090c:	e0bffc17 	ldw	r2,-16(fp)
   10910:	1080020b 	ldhu	r2,8(r2)
   10914:	1007883a 	mov	r3,r2
   10918:	e0bfe80b 	ldhu	r2,-96(fp)
   1091c:	0084303a 	nor	r2,zero,r2
   10920:	1884703a 	and	r2,r3,r2
   10924:	1007883a 	mov	r3,r2
   10928:	e0bffc17 	ldw	r2,-16(fp)
   1092c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10930:	d0a72f17 	ldw	r2,-25412(gp)
   10934:	e0ffe80b 	ldhu	r3,-96(fp)
   10938:	10c00b0d 	sth	r3,44(r2)
   1093c:	e0bfe517 	ldw	r2,-108(fp)
   10940:	e0bfea15 	stw	r2,-88(fp)
   10944:	e0bfea17 	ldw	r2,-88(fp)
   10948:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1094c:	e0800217 	ldw	r2,8(fp)
   10950:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10954:	e0bfe80b 	ldhu	r2,-96(fp)
   10958:	0000cb06 	br	10c88 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1095c:	e13ffd0b 	ldhu	r4,-12(fp)
   10960:	e17ffe03 	ldbu	r5,-8(fp)
   10964:	e0bfff0b 	ldhu	r2,-4(fp)
   10968:	e0fff704 	addi	r3,fp,-36
   1096c:	d8800015 	stw	r2,0(sp)
   10970:	280f883a 	mov	r7,r5
   10974:	200d883a 	mov	r6,r4
   10978:	180b883a 	mov	r5,r3
   1097c:	e13ffc17 	ldw	r4,-16(fp)
   10980:	00111540 	call	11154 <OS_FlagBlock>
   10984:	e0bfe517 	ldw	r2,-108(fp)
   10988:	e0bfeb15 	stw	r2,-84(fp)
   1098c:	e0bfeb17 	ldw	r2,-84(fp)
   10990:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10994:	00006506 	br	10b2c <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10998:	e0bffc17 	ldw	r2,-16(fp)
   1099c:	1080020b 	ldhu	r2,8(r2)
   109a0:	0084303a 	nor	r2,zero,r2
   109a4:	1007883a 	mov	r3,r2
   109a8:	e0bffd0b 	ldhu	r2,-12(fp)
   109ac:	1884703a 	and	r2,r3,r2
   109b0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   109b4:	e0ffe80b 	ldhu	r3,-96(fp)
   109b8:	e0bffd0b 	ldhu	r2,-12(fp)
   109bc:	1880151e 	bne	r3,r2,10a14 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   109c0:	e0bfe403 	ldbu	r2,-112(fp)
   109c4:	10800058 	cmpnei	r2,r2,1
   109c8:	1000071e 	bne	r2,zero,109e8 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   109cc:	e0bffc17 	ldw	r2,-16(fp)
   109d0:	10c0020b 	ldhu	r3,8(r2)
   109d4:	e0bfe80b 	ldhu	r2,-96(fp)
   109d8:	1884b03a 	or	r2,r3,r2
   109dc:	1007883a 	mov	r3,r2
   109e0:	e0bffc17 	ldw	r2,-16(fp)
   109e4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   109e8:	d0a72f17 	ldw	r2,-25412(gp)
   109ec:	e0ffe80b 	ldhu	r3,-96(fp)
   109f0:	10c00b0d 	sth	r3,44(r2)
   109f4:	e0bfe517 	ldw	r2,-108(fp)
   109f8:	e0bfec15 	stw	r2,-80(fp)
   109fc:	e0bfec17 	ldw	r2,-80(fp)
   10a00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10a04:	e0800217 	ldw	r2,8(fp)
   10a08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10a0c:	e0bfe80b 	ldhu	r2,-96(fp)
   10a10:	00009d06 	br	10c88 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10a14:	e13ffd0b 	ldhu	r4,-12(fp)
   10a18:	e17ffe03 	ldbu	r5,-8(fp)
   10a1c:	e0bfff0b 	ldhu	r2,-4(fp)
   10a20:	e0fff704 	addi	r3,fp,-36
   10a24:	d8800015 	stw	r2,0(sp)
   10a28:	280f883a 	mov	r7,r5
   10a2c:	200d883a 	mov	r6,r4
   10a30:	180b883a 	mov	r5,r3
   10a34:	e13ffc17 	ldw	r4,-16(fp)
   10a38:	00111540 	call	11154 <OS_FlagBlock>
   10a3c:	e0bfe517 	ldw	r2,-108(fp)
   10a40:	e0bfed15 	stw	r2,-76(fp)
   10a44:	e0bfed17 	ldw	r2,-76(fp)
   10a48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10a4c:	00003706 	br	10b2c <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10a50:	e0bffc17 	ldw	r2,-16(fp)
   10a54:	1080020b 	ldhu	r2,8(r2)
   10a58:	0084303a 	nor	r2,zero,r2
   10a5c:	1007883a 	mov	r3,r2
   10a60:	e0bffd0b 	ldhu	r2,-12(fp)
   10a64:	1884703a 	and	r2,r3,r2
   10a68:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10a6c:	e0bfe80b 	ldhu	r2,-96(fp)
   10a70:	10001526 	beq	r2,zero,10ac8 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10a74:	e0bfe403 	ldbu	r2,-112(fp)
   10a78:	10800058 	cmpnei	r2,r2,1
   10a7c:	1000071e 	bne	r2,zero,10a9c <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10a80:	e0bffc17 	ldw	r2,-16(fp)
   10a84:	10c0020b 	ldhu	r3,8(r2)
   10a88:	e0bfe80b 	ldhu	r2,-96(fp)
   10a8c:	1884b03a 	or	r2,r3,r2
   10a90:	1007883a 	mov	r3,r2
   10a94:	e0bffc17 	ldw	r2,-16(fp)
   10a98:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   10a9c:	d0a72f17 	ldw	r2,-25412(gp)
   10aa0:	e0ffe80b 	ldhu	r3,-96(fp)
   10aa4:	10c00b0d 	sth	r3,44(r2)
   10aa8:	e0bfe517 	ldw	r2,-108(fp)
   10aac:	e0bfee15 	stw	r2,-72(fp)
   10ab0:	e0bfee17 	ldw	r2,-72(fp)
   10ab4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   10ab8:	e0800217 	ldw	r2,8(fp)
   10abc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   10ac0:	e0bfe80b 	ldhu	r2,-96(fp)
   10ac4:	00007006 	br	10c88 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   10ac8:	e13ffd0b 	ldhu	r4,-12(fp)
   10acc:	e17ffe03 	ldbu	r5,-8(fp)
   10ad0:	e0bfff0b 	ldhu	r2,-4(fp)
   10ad4:	e0fff704 	addi	r3,fp,-36
   10ad8:	d8800015 	stw	r2,0(sp)
   10adc:	280f883a 	mov	r7,r5
   10ae0:	200d883a 	mov	r6,r4
   10ae4:	180b883a 	mov	r5,r3
   10ae8:	e13ffc17 	ldw	r4,-16(fp)
   10aec:	00111540 	call	11154 <OS_FlagBlock>
   10af0:	e0bfe517 	ldw	r2,-108(fp)
   10af4:	e0bfef15 	stw	r2,-68(fp)
   10af8:	e0bfef17 	ldw	r2,-68(fp)
   10afc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   10b00:	00000a06 	br	10b2c <OSFlagPend+0x448>
   10b04:	e0bfe517 	ldw	r2,-108(fp)
   10b08:	e0bff015 	stw	r2,-64(fp)
   10b0c:	e0bff017 	ldw	r2,-64(fp)
   10b10:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10b14:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   10b18:	e0800217 	ldw	r2,8(fp)
   10b1c:	00c01bc4 	movi	r3,111
   10b20:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   10b24:	e0bfe80b 	ldhu	r2,-96(fp)
   10b28:	00005706 	br	10c88 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   10b2c:	000f5b40 	call	f5b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b30:	0005303a 	rdctl	r2,status
   10b34:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b38:	e0fff117 	ldw	r3,-60(fp)
   10b3c:	00bfff84 	movi	r2,-2
   10b40:	1884703a 	and	r2,r3,r2
   10b44:	1001703a 	wrctl	status,r2
  
  return context;
   10b48:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   10b4c:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   10b50:	d0a72f17 	ldw	r2,-25412(gp)
   10b54:	10800c43 	ldbu	r2,49(r2)
   10b58:	10803fcc 	andi	r2,r2,255
   10b5c:	10001c26 	beq	r2,zero,10bd0 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   10b60:	d0a72f17 	ldw	r2,-25412(gp)
   10b64:	10800c43 	ldbu	r2,49(r2)
   10b68:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   10b6c:	d0a72f17 	ldw	r2,-25412(gp)
   10b70:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   10b74:	e0bff704 	addi	r2,fp,-36
   10b78:	1009883a 	mov	r4,r2
   10b7c:	00114880 	call	11488 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   10b80:	d0a72f17 	ldw	r2,-25412(gp)
   10b84:	10000c05 	stb	zero,48(r2)
   10b88:	e0bfe517 	ldw	r2,-108(fp)
   10b8c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b90:	e0bff217 	ldw	r2,-56(fp)
   10b94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   10b98:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   10b9c:	e0bff303 	ldbu	r2,-52(fp)
   10ba0:	108000a0 	cmpeqi	r2,r2,2
   10ba4:	10000426 	beq	r2,zero,10bb8 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   10ba8:	e0800217 	ldw	r2,8(fp)
   10bac:	00c00384 	movi	r3,14
   10bb0:	10c00005 	stb	r3,0(r2)
                 break;
   10bb4:	00000406 	br	10bc8 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   10bb8:	e0800217 	ldw	r2,8(fp)
   10bbc:	00c00284 	movi	r3,10
   10bc0:	10c00005 	stb	r3,0(r2)
                 break;
   10bc4:	0001883a 	nop
        }
        return (flags_rdy);
   10bc8:	e0bfe80b 	ldhu	r2,-96(fp)
   10bcc:	00002e06 	br	10c88 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   10bd0:	d0a72f17 	ldw	r2,-25412(gp)
   10bd4:	10800b0b 	ldhu	r2,44(r2)
   10bd8:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   10bdc:	e0bfe403 	ldbu	r2,-112(fp)
   10be0:	10800058 	cmpnei	r2,r2,1
   10be4:	1000211e 	bne	r2,zero,10c6c <OSFlagPend+0x588>
        switch (wait_type) {
   10be8:	e0bffe03 	ldbu	r2,-8(fp)
   10bec:	10001616 	blt	r2,zero,10c48 <OSFlagPend+0x564>
   10bf0:	10c00090 	cmplti	r3,r2,2
   10bf4:	18000c1e 	bne	r3,zero,10c28 <OSFlagPend+0x544>
   10bf8:	10800108 	cmpgei	r2,r2,4
   10bfc:	1000121e 	bne	r2,zero,10c48 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   10c00:	e0bffc17 	ldw	r2,-16(fp)
   10c04:	1080020b 	ldhu	r2,8(r2)
   10c08:	1007883a 	mov	r3,r2
   10c0c:	e0bfe80b 	ldhu	r2,-96(fp)
   10c10:	0084303a 	nor	r2,zero,r2
   10c14:	1884703a 	and	r2,r3,r2
   10c18:	1007883a 	mov	r3,r2
   10c1c:	e0bffc17 	ldw	r2,-16(fp)
   10c20:	10c0020d 	sth	r3,8(r2)
                 break;
   10c24:	00001106 	br	10c6c <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   10c28:	e0bffc17 	ldw	r2,-16(fp)
   10c2c:	10c0020b 	ldhu	r3,8(r2)
   10c30:	e0bfe80b 	ldhu	r2,-96(fp)
   10c34:	1884b03a 	or	r2,r3,r2
   10c38:	1007883a 	mov	r3,r2
   10c3c:	e0bffc17 	ldw	r2,-16(fp)
   10c40:	10c0020d 	sth	r3,8(r2)
                 break;
   10c44:	00000906 	br	10c6c <OSFlagPend+0x588>
   10c48:	e0bfe517 	ldw	r2,-108(fp)
   10c4c:	e0bff415 	stw	r2,-48(fp)
   10c50:	e0bff417 	ldw	r2,-48(fp)
   10c54:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10c58:	e0800217 	ldw	r2,8(fp)
   10c5c:	00c01bc4 	movi	r3,111
   10c60:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10c64:	0005883a 	mov	r2,zero
   10c68:	00000706 	br	10c88 <OSFlagPend+0x5a4>
   10c6c:	e0bfe517 	ldw	r2,-108(fp)
   10c70:	e0bff515 	stw	r2,-44(fp)
   10c74:	e0bff517 	ldw	r2,-44(fp)
   10c78:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   10c7c:	e0800217 	ldw	r2,8(fp)
   10c80:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   10c84:	e0bfe80b 	ldhu	r2,-96(fp)
}
   10c88:	e037883a 	mov	sp,fp
   10c8c:	dfc00117 	ldw	ra,4(sp)
   10c90:	df000017 	ldw	fp,0(sp)
   10c94:	dec00204 	addi	sp,sp,8
   10c98:	f800283a 	ret

00010c9c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   10c9c:	defffb04 	addi	sp,sp,-20
   10ca0:	df000415 	stw	fp,16(sp)
   10ca4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10ca8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cac:	0005303a 	rdctl	r2,status
   10cb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cb4:	e0fffe17 	ldw	r3,-8(fp)
   10cb8:	00bfff84 	movi	r2,-2
   10cbc:	1884703a 	and	r2,r3,r2
   10cc0:	1001703a 	wrctl	status,r2
  
  return context;
   10cc4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   10cc8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   10ccc:	d0a72f17 	ldw	r2,-25412(gp)
   10cd0:	10800b0b 	ldhu	r2,44(r2)
   10cd4:	e0bffd0d 	sth	r2,-12(fp)
   10cd8:	e0bffc17 	ldw	r2,-16(fp)
   10cdc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ce0:	e0bfff17 	ldw	r2,-4(fp)
   10ce4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   10ce8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   10cec:	e037883a 	mov	sp,fp
   10cf0:	df000017 	ldw	fp,0(sp)
   10cf4:	dec00104 	addi	sp,sp,4
   10cf8:	f800283a 	ret

00010cfc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   10cfc:	deffef04 	addi	sp,sp,-68
   10d00:	dfc01015 	stw	ra,64(sp)
   10d04:	df000f15 	stw	fp,60(sp)
   10d08:	df000f04 	addi	fp,sp,60
   10d0c:	e13ffc15 	stw	r4,-16(fp)
   10d10:	2807883a 	mov	r3,r5
   10d14:	3005883a 	mov	r2,r6
   10d18:	e1ffff15 	stw	r7,-4(fp)
   10d1c:	e0fffd0d 	sth	r3,-12(fp)
   10d20:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   10d24:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   10d28:	e0bfff17 	ldw	r2,-4(fp)
   10d2c:	1000021e 	bne	r2,zero,10d38 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   10d30:	0005883a 	mov	r2,zero
   10d34:	0000d106 	br	1107c <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   10d38:	e0bffc17 	ldw	r2,-16(fp)
   10d3c:	1000051e 	bne	r2,zero,10d54 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10d40:	e0bfff17 	ldw	r2,-4(fp)
   10d44:	00c01b84 	movi	r3,110
   10d48:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10d4c:	0005883a 	mov	r2,zero
   10d50:	0000ca06 	br	1107c <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   10d54:	e0bffc17 	ldw	r2,-16(fp)
   10d58:	10800003 	ldbu	r2,0(r2)
   10d5c:	10803fcc 	andi	r2,r2,255
   10d60:	10800160 	cmpeqi	r2,r2,5
   10d64:	1000051e 	bne	r2,zero,10d7c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   10d68:	e0bfff17 	ldw	r2,-4(fp)
   10d6c:	00c00044 	movi	r3,1
   10d70:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   10d74:	0005883a 	mov	r2,zero
   10d78:	0000c006 	br	1107c <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d7c:	0005303a 	rdctl	r2,status
   10d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d84:	e0fffb17 	ldw	r3,-20(fp)
   10d88:	00bfff84 	movi	r2,-2
   10d8c:	1884703a 	and	r2,r3,r2
   10d90:	1001703a 	wrctl	status,r2
  
  return context;
   10d94:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   10d98:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   10d9c:	e0bffe03 	ldbu	r2,-8(fp)
   10da0:	10000326 	beq	r2,zero,10db0 <OSFlagPost+0xb4>
   10da4:	10800060 	cmpeqi	r2,r2,1
   10da8:	10000b1e 	bne	r2,zero,10dd8 <OSFlagPost+0xdc>
   10dac:	00001206 	br	10df8 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   10db0:	e0bffc17 	ldw	r2,-16(fp)
   10db4:	1080020b 	ldhu	r2,8(r2)
   10db8:	1007883a 	mov	r3,r2
   10dbc:	e0bffd0b 	ldhu	r2,-12(fp)
   10dc0:	0084303a 	nor	r2,zero,r2
   10dc4:	1884703a 	and	r2,r3,r2
   10dc8:	1007883a 	mov	r3,r2
   10dcc:	e0bffc17 	ldw	r2,-16(fp)
   10dd0:	10c0020d 	sth	r3,8(r2)
             break;
   10dd4:	00001106 	br	10e1c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   10dd8:	e0bffc17 	ldw	r2,-16(fp)
   10ddc:	10c0020b 	ldhu	r3,8(r2)
   10de0:	e0bffd0b 	ldhu	r2,-12(fp)
   10de4:	1884b03a 	or	r2,r3,r2
   10de8:	1007883a 	mov	r3,r2
   10dec:	e0bffc17 	ldw	r2,-16(fp)
   10df0:	10c0020d 	sth	r3,8(r2)
             break;
   10df4:	00000906 	br	10e1c <OSFlagPost+0x120>
   10df8:	e0bff317 	ldw	r2,-52(fp)
   10dfc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e00:	e0bff417 	ldw	r2,-48(fp)
   10e04:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   10e08:	e0bfff17 	ldw	r2,-4(fp)
   10e0c:	00c01c44 	movi	r3,113
   10e10:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   10e14:	0005883a 	mov	r2,zero
   10e18:	00009806 	br	1107c <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   10e1c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10e20:	e0bffc17 	ldw	r2,-16(fp)
   10e24:	10800117 	ldw	r2,4(r2)
   10e28:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   10e2c:	00007706 	br	1100c <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   10e30:	e0bff117 	ldw	r2,-60(fp)
   10e34:	10800483 	ldbu	r2,18(r2)
   10e38:	10803fcc 	andi	r2,r2,255
   10e3c:	10c00060 	cmpeqi	r3,r2,1
   10e40:	18004a1e 	bne	r3,zero,10f6c <OSFlagPost+0x270>
   10e44:	10c00088 	cmpgei	r3,r2,2
   10e48:	1800021e 	bne	r3,zero,10e54 <OSFlagPost+0x158>
   10e4c:	10002f26 	beq	r2,zero,10f0c <OSFlagPost+0x210>
   10e50:	00005b06 	br	10fc0 <OSFlagPost+0x2c4>
   10e54:	10c000a0 	cmpeqi	r3,r2,2
   10e58:	1800031e 	bne	r3,zero,10e68 <OSFlagPost+0x16c>
   10e5c:	108000e0 	cmpeqi	r2,r2,3
   10e60:	1000171e 	bne	r2,zero,10ec0 <OSFlagPost+0x1c4>
   10e64:	00005606 	br	10fc0 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10e68:	e0bffc17 	ldw	r2,-16(fp)
   10e6c:	10c0020b 	ldhu	r3,8(r2)
   10e70:	e0bff117 	ldw	r2,-60(fp)
   10e74:	1080040b 	ldhu	r2,16(r2)
   10e78:	1884703a 	and	r2,r3,r2
   10e7c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10e80:	e0bff117 	ldw	r2,-60(fp)
   10e84:	1080040b 	ldhu	r2,16(r2)
   10e88:	10ffffcc 	andi	r3,r2,65535
   10e8c:	e0bff60b 	ldhu	r2,-40(fp)
   10e90:	1880541e 	bne	r3,r2,10fe4 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10e94:	e0bff60b 	ldhu	r2,-40(fp)
   10e98:	100b883a 	mov	r5,r2
   10e9c:	e13ff117 	ldw	r4,-60(fp)
   10ea0:	00113940 	call	11394 <OS_FlagTaskRdy>
   10ea4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10ea8:	e0bff683 	ldbu	r2,-38(fp)
   10eac:	10800058 	cmpnei	r2,r2,1
   10eb0:	10004c1e 	bne	r2,zero,10fe4 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10eb4:	00800044 	movi	r2,1
   10eb8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10ebc:	00004906 	br	10fe4 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10ec0:	e0bffc17 	ldw	r2,-16(fp)
   10ec4:	10c0020b 	ldhu	r3,8(r2)
   10ec8:	e0bff117 	ldw	r2,-60(fp)
   10ecc:	1080040b 	ldhu	r2,16(r2)
   10ed0:	1884703a 	and	r2,r3,r2
   10ed4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10ed8:	e0bff60b 	ldhu	r2,-40(fp)
   10edc:	10004326 	beq	r2,zero,10fec <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10ee0:	e0bff60b 	ldhu	r2,-40(fp)
   10ee4:	100b883a 	mov	r5,r2
   10ee8:	e13ff117 	ldw	r4,-60(fp)
   10eec:	00113940 	call	11394 <OS_FlagTaskRdy>
   10ef0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10ef4:	e0bff683 	ldbu	r2,-38(fp)
   10ef8:	10800058 	cmpnei	r2,r2,1
   10efc:	10003b1e 	bne	r2,zero,10fec <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10f00:	00800044 	movi	r2,1
   10f04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10f08:	00003806 	br	10fec <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10f0c:	e0bffc17 	ldw	r2,-16(fp)
   10f10:	1080020b 	ldhu	r2,8(r2)
   10f14:	0084303a 	nor	r2,zero,r2
   10f18:	1007883a 	mov	r3,r2
   10f1c:	e0bff117 	ldw	r2,-60(fp)
   10f20:	1080040b 	ldhu	r2,16(r2)
   10f24:	1884703a 	and	r2,r3,r2
   10f28:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   10f2c:	e0bff117 	ldw	r2,-60(fp)
   10f30:	1080040b 	ldhu	r2,16(r2)
   10f34:	10ffffcc 	andi	r3,r2,65535
   10f38:	e0bff60b 	ldhu	r2,-40(fp)
   10f3c:	18802d1e 	bne	r3,r2,10ff4 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10f40:	e0bff60b 	ldhu	r2,-40(fp)
   10f44:	100b883a 	mov	r5,r2
   10f48:	e13ff117 	ldw	r4,-60(fp)
   10f4c:	00113940 	call	11394 <OS_FlagTaskRdy>
   10f50:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10f54:	e0bff683 	ldbu	r2,-38(fp)
   10f58:	10800058 	cmpnei	r2,r2,1
   10f5c:	1000251e 	bne	r2,zero,10ff4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10f60:	00800044 	movi	r2,1
   10f64:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10f68:	00002206 	br	10ff4 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   10f6c:	e0bffc17 	ldw	r2,-16(fp)
   10f70:	1080020b 	ldhu	r2,8(r2)
   10f74:	0084303a 	nor	r2,zero,r2
   10f78:	1007883a 	mov	r3,r2
   10f7c:	e0bff117 	ldw	r2,-60(fp)
   10f80:	1080040b 	ldhu	r2,16(r2)
   10f84:	1884703a 	and	r2,r3,r2
   10f88:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   10f8c:	e0bff60b 	ldhu	r2,-40(fp)
   10f90:	10001a26 	beq	r2,zero,10ffc <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   10f94:	e0bff60b 	ldhu	r2,-40(fp)
   10f98:	100b883a 	mov	r5,r2
   10f9c:	e13ff117 	ldw	r4,-60(fp)
   10fa0:	00113940 	call	11394 <OS_FlagTaskRdy>
   10fa4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   10fa8:	e0bff683 	ldbu	r2,-38(fp)
   10fac:	10800058 	cmpnei	r2,r2,1
   10fb0:	1000121e 	bne	r2,zero,10ffc <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   10fb4:	00800044 	movi	r2,1
   10fb8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   10fbc:	00000f06 	br	10ffc <OSFlagPost+0x300>
   10fc0:	e0bff317 	ldw	r2,-52(fp)
   10fc4:	e0bff515 	stw	r2,-44(fp)
   10fc8:	e0bff517 	ldw	r2,-44(fp)
   10fcc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   10fd0:	e0bfff17 	ldw	r2,-4(fp)
   10fd4:	00c01bc4 	movi	r3,111
   10fd8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   10fdc:	0005883a 	mov	r2,zero
   10fe0:	00002606 	br	1107c <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10fe4:	0001883a 	nop
   10fe8:	00000506 	br	11000 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10fec:	0001883a 	nop
   10ff0:	00000306 	br	11000 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10ff4:	0001883a 	nop
   10ff8:	00000106 	br	11000 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   10ffc:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   11000:	e0bff117 	ldw	r2,-60(fp)
   11004:	10800017 	ldw	r2,0(r2)
   11008:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1100c:	e0bff117 	ldw	r2,-60(fp)
   11010:	103f871e 	bne	r2,zero,10e30 <_gp+0xfffd2528>
   11014:	e0bff317 	ldw	r2,-52(fp)
   11018:	e0bff715 	stw	r2,-36(fp)
   1101c:	e0bff717 	ldw	r2,-36(fp)
   11020:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   11024:	e0bff203 	ldbu	r2,-56(fp)
   11028:	10800058 	cmpnei	r2,r2,1
   1102c:	1000011e 	bne	r2,zero,11034 <OSFlagPost+0x338>
        OS_Sched();
   11030:	000f5b40 	call	f5b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11034:	0005303a 	rdctl	r2,status
   11038:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1103c:	e0fffa17 	ldw	r3,-24(fp)
   11040:	00bfff84 	movi	r2,-2
   11044:	1884703a 	and	r2,r3,r2
   11048:	1001703a 	wrctl	status,r2
  
  return context;
   1104c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11050:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   11054:	e0bffc17 	ldw	r2,-16(fp)
   11058:	1080020b 	ldhu	r2,8(r2)
   1105c:	e0bff90d 	sth	r2,-28(fp)
   11060:	e0bff317 	ldw	r2,-52(fp)
   11064:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11068:	e0bff817 	ldw	r2,-32(fp)
   1106c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   11070:	e0bfff17 	ldw	r2,-4(fp)
   11074:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   11078:	e0bff90b 	ldhu	r2,-28(fp)
}
   1107c:	e037883a 	mov	sp,fp
   11080:	dfc00117 	ldw	ra,4(sp)
   11084:	df000017 	ldw	fp,0(sp)
   11088:	dec00204 	addi	sp,sp,8
   1108c:	f800283a 	ret

00011090 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   11090:	defff904 	addi	sp,sp,-28
   11094:	df000615 	stw	fp,24(sp)
   11098:	df000604 	addi	fp,sp,24
   1109c:	e13ffe15 	stw	r4,-8(fp)
   110a0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   110a4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   110a8:	e0bfff17 	ldw	r2,-4(fp)
   110ac:	1000021e 	bne	r2,zero,110b8 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   110b0:	0005883a 	mov	r2,zero
   110b4:	00002306 	br	11144 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   110b8:	e0bffe17 	ldw	r2,-8(fp)
   110bc:	1000051e 	bne	r2,zero,110d4 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   110c0:	e0bfff17 	ldw	r2,-4(fp)
   110c4:	00c01b84 	movi	r3,110
   110c8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   110cc:	0005883a 	mov	r2,zero
   110d0:	00001c06 	br	11144 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   110d4:	e0bffe17 	ldw	r2,-8(fp)
   110d8:	10800003 	ldbu	r2,0(r2)
   110dc:	10803fcc 	andi	r2,r2,255
   110e0:	10800160 	cmpeqi	r2,r2,5
   110e4:	1000051e 	bne	r2,zero,110fc <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   110e8:	e0bfff17 	ldw	r2,-4(fp)
   110ec:	00c00044 	movi	r3,1
   110f0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   110f4:	0005883a 	mov	r2,zero
   110f8:	00001206 	br	11144 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110fc:	0005303a 	rdctl	r2,status
   11100:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11104:	e0fffc17 	ldw	r3,-16(fp)
   11108:	00bfff84 	movi	r2,-2
   1110c:	1884703a 	and	r2,r3,r2
   11110:	1001703a 	wrctl	status,r2
  
  return context;
   11114:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11118:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1111c:	e0bffe17 	ldw	r2,-8(fp)
   11120:	1080020b 	ldhu	r2,8(r2)
   11124:	e0bffb0d 	sth	r2,-20(fp)
   11128:	e0bffa17 	ldw	r2,-24(fp)
   1112c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11130:	e0bffd17 	ldw	r2,-12(fp)
   11134:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11138:	e0bfff17 	ldw	r2,-4(fp)
   1113c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   11140:	e0bffb0b 	ldhu	r2,-20(fp)
}
   11144:	e037883a 	mov	sp,fp
   11148:	df000017 	ldw	fp,0(sp)
   1114c:	dec00104 	addi	sp,sp,4
   11150:	f800283a 	ret

00011154 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   11154:	defff804 	addi	sp,sp,-32
   11158:	df000715 	stw	fp,28(sp)
   1115c:	df000704 	addi	fp,sp,28
   11160:	e13ffb15 	stw	r4,-20(fp)
   11164:	e17ffc15 	stw	r5,-16(fp)
   11168:	3009883a 	mov	r4,r6
   1116c:	3807883a 	mov	r3,r7
   11170:	e0800117 	ldw	r2,4(fp)
   11174:	e13ffd0d 	sth	r4,-12(fp)
   11178:	e0fffe05 	stb	r3,-8(fp)
   1117c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   11180:	d0a72f17 	ldw	r2,-25412(gp)
   11184:	d0e72f17 	ldw	r3,-25412(gp)
   11188:	18c00c03 	ldbu	r3,48(r3)
   1118c:	18c00814 	ori	r3,r3,32
   11190:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11194:	d0a72f17 	ldw	r2,-25412(gp)
   11198:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1119c:	d0a72f17 	ldw	r2,-25412(gp)
   111a0:	e0ffff0b 	ldhu	r3,-4(fp)
   111a4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   111a8:	d0a72f17 	ldw	r2,-25412(gp)
   111ac:	e0fffc17 	ldw	r3,-16(fp)
   111b0:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   111b4:	e0bffc17 	ldw	r2,-16(fp)
   111b8:	e0fffd0b 	ldhu	r3,-12(fp)
   111bc:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   111c0:	e0bffc17 	ldw	r2,-16(fp)
   111c4:	e0fffe03 	ldbu	r3,-8(fp)
   111c8:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   111cc:	d0e72f17 	ldw	r3,-25412(gp)
   111d0:	e0bffc17 	ldw	r2,-16(fp)
   111d4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   111d8:	e0bffb17 	ldw	r2,-20(fp)
   111dc:	10c00117 	ldw	r3,4(r2)
   111e0:	e0bffc17 	ldw	r2,-16(fp)
   111e4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   111e8:	e0bffc17 	ldw	r2,-16(fp)
   111ec:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   111f0:	e0bffc17 	ldw	r2,-16(fp)
   111f4:	e0fffb17 	ldw	r3,-20(fp)
   111f8:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   111fc:	e0bffb17 	ldw	r2,-20(fp)
   11200:	10800117 	ldw	r2,4(r2)
   11204:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   11208:	e0bff917 	ldw	r2,-28(fp)
   1120c:	10000326 	beq	r2,zero,1121c <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   11210:	e0bff917 	ldw	r2,-28(fp)
   11214:	e0fffc17 	ldw	r3,-16(fp)
   11218:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   1121c:	e0bffb17 	ldw	r2,-20(fp)
   11220:	e0fffc17 	ldw	r3,-16(fp)
   11224:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   11228:	d0a72f17 	ldw	r2,-25412(gp)
   1122c:	10800d03 	ldbu	r2,52(r2)
   11230:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   11234:	e0fffa03 	ldbu	r3,-24(fp)
   11238:	e13ffa03 	ldbu	r4,-24(fp)
   1123c:	d0a72c44 	addi	r2,gp,-25423
   11240:	2085883a 	add	r2,r4,r2
   11244:	10800003 	ldbu	r2,0(r2)
   11248:	1009883a 	mov	r4,r2
   1124c:	d0a72f17 	ldw	r2,-25412(gp)
   11250:	10800d43 	ldbu	r2,53(r2)
   11254:	0084303a 	nor	r2,zero,r2
   11258:	2084703a 	and	r2,r4,r2
   1125c:	1009883a 	mov	r4,r2
   11260:	d0a72c44 	addi	r2,gp,-25423
   11264:	1885883a 	add	r2,r3,r2
   11268:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1126c:	e0fffa03 	ldbu	r3,-24(fp)
   11270:	d0a72c44 	addi	r2,gp,-25423
   11274:	1885883a 	add	r2,r3,r2
   11278:	10800003 	ldbu	r2,0(r2)
   1127c:	10803fcc 	andi	r2,r2,255
   11280:	1000071e 	bne	r2,zero,112a0 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11284:	d0a72f17 	ldw	r2,-25412(gp)
   11288:	10800d83 	ldbu	r2,54(r2)
   1128c:	0084303a 	nor	r2,zero,r2
   11290:	1007883a 	mov	r3,r2
   11294:	d0a72c03 	ldbu	r2,-25424(gp)
   11298:	1884703a 	and	r2,r3,r2
   1129c:	d0a72c05 	stb	r2,-25424(gp)
    }
}
   112a0:	0001883a 	nop
   112a4:	e037883a 	mov	sp,fp
   112a8:	df000017 	ldw	fp,0(sp)
   112ac:	dec00104 	addi	sp,sp,4
   112b0:	f800283a 	ret

000112b4 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   112b4:	defffb04 	addi	sp,sp,-20
   112b8:	dfc00415 	stw	ra,16(sp)
   112bc:	df000315 	stw	fp,12(sp)
   112c0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   112c4:	0140dc04 	movi	r5,880
   112c8:	01000134 	movhi	r4,4
   112cc:	2125c304 	addi	r4,r4,-26868
   112d0:	000f4f80 	call	f4f8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   112d4:	00800134 	movhi	r2,4
   112d8:	10a5c304 	addi	r2,r2,-26868
   112dc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   112e0:	00800134 	movhi	r2,4
   112e4:	10a5ce04 	addi	r2,r2,-26824
   112e8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   112ec:	e03ffd0d 	sth	zero,-12(fp)
   112f0:	00001306 	br	11340 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   112f4:	e0bffe17 	ldw	r2,-8(fp)
   112f8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   112fc:	e0bffe17 	ldw	r2,-8(fp)
   11300:	e0ffff17 	ldw	r3,-4(fp)
   11304:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   11308:	e0bffe17 	ldw	r2,-8(fp)
   1130c:	00c00fc4 	movi	r3,63
   11310:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11314:	e0bffe17 	ldw	r2,-8(fp)
   11318:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1131c:	e0bffe17 	ldw	r2,-8(fp)
   11320:	10800b04 	addi	r2,r2,44
   11324:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11328:	e0bfff17 	ldw	r2,-4(fp)
   1132c:	10800b04 	addi	r2,r2,44
   11330:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11334:	e0bffd0b 	ldhu	r2,-12(fp)
   11338:	10800044 	addi	r2,r2,1
   1133c:	e0bffd0d 	sth	r2,-12(fp)
   11340:	e0bffd0b 	ldhu	r2,-12(fp)
   11344:	108004f0 	cmpltui	r2,r2,19
   11348:	103fea1e 	bne	r2,zero,112f4 <_gp+0xfffd29ec>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1134c:	e0bffe17 	ldw	r2,-8(fp)
   11350:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   11354:	e0bffe17 	ldw	r2,-8(fp)
   11358:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1135c:	e0bffe17 	ldw	r2,-8(fp)
   11360:	00c00fc4 	movi	r3,63
   11364:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11368:	e0bffe17 	ldw	r2,-8(fp)
   1136c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11370:	00800134 	movhi	r2,4
   11374:	10a5c304 	addi	r2,r2,-26868
   11378:	d0a73115 	stw	r2,-25404(gp)
#endif
}
   1137c:	0001883a 	nop
   11380:	e037883a 	mov	sp,fp
   11384:	dfc00117 	ldw	ra,4(sp)
   11388:	df000017 	ldw	fp,0(sp)
   1138c:	dec00204 	addi	sp,sp,8
   11390:	f800283a 	ret

00011394 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11394:	defffa04 	addi	sp,sp,-24
   11398:	dfc00515 	stw	ra,20(sp)
   1139c:	df000415 	stw	fp,16(sp)
   113a0:	df000404 	addi	fp,sp,16
   113a4:	e13ffe15 	stw	r4,-8(fp)
   113a8:	2805883a 	mov	r2,r5
   113ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   113b0:	e0bffe17 	ldw	r2,-8(fp)
   113b4:	10800217 	ldw	r2,8(r2)
   113b8:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   113bc:	e0bffd17 	ldw	r2,-12(fp)
   113c0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   113c4:	e0bffd17 	ldw	r2,-12(fp)
   113c8:	e0ffff0b 	ldhu	r3,-4(fp)
   113cc:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   113d0:	e0bffd17 	ldw	r2,-12(fp)
   113d4:	10c00c03 	ldbu	r3,48(r2)
   113d8:	00bff7c4 	movi	r2,-33
   113dc:	1884703a 	and	r2,r3,r2
   113e0:	1007883a 	mov	r3,r2
   113e4:	e0bffd17 	ldw	r2,-12(fp)
   113e8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   113ec:	e0bffd17 	ldw	r2,-12(fp)
   113f0:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   113f4:	e0bffd17 	ldw	r2,-12(fp)
   113f8:	10800c03 	ldbu	r2,48(r2)
   113fc:	10803fcc 	andi	r2,r2,255
   11400:	1000181e 	bne	r2,zero,11464 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   11404:	e0bffd17 	ldw	r2,-12(fp)
   11408:	10c00d83 	ldbu	r3,54(r2)
   1140c:	d0a72c03 	ldbu	r2,-25424(gp)
   11410:	1884b03a 	or	r2,r3,r2
   11414:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11418:	e0bffd17 	ldw	r2,-12(fp)
   1141c:	10800d03 	ldbu	r2,52(r2)
   11420:	10c03fcc 	andi	r3,r2,255
   11424:	e0bffd17 	ldw	r2,-12(fp)
   11428:	10800d03 	ldbu	r2,52(r2)
   1142c:	11003fcc 	andi	r4,r2,255
   11430:	d0a72c44 	addi	r2,gp,-25423
   11434:	2085883a 	add	r2,r4,r2
   11438:	11000003 	ldbu	r4,0(r2)
   1143c:	e0bffd17 	ldw	r2,-12(fp)
   11440:	10800d43 	ldbu	r2,53(r2)
   11444:	2084b03a 	or	r2,r4,r2
   11448:	1009883a 	mov	r4,r2
   1144c:	d0a72c44 	addi	r2,gp,-25423
   11450:	1885883a 	add	r2,r3,r2
   11454:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11458:	00800044 	movi	r2,1
   1145c:	e0bffc05 	stb	r2,-16(fp)
   11460:	00000106 	br	11468 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   11464:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11468:	e13ffe17 	ldw	r4,-8(fp)
   1146c:	00114880 	call	11488 <OS_FlagUnlink>
    return (sched);
   11470:	e0bffc03 	ldbu	r2,-16(fp)
}
   11474:	e037883a 	mov	sp,fp
   11478:	dfc00117 	ldw	ra,4(sp)
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00204 	addi	sp,sp,8
   11484:	f800283a 	ret

00011488 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11488:	defffa04 	addi	sp,sp,-24
   1148c:	df000515 	stw	fp,20(sp)
   11490:	df000504 	addi	fp,sp,20
   11494:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   11498:	e0bfff17 	ldw	r2,-4(fp)
   1149c:	10800117 	ldw	r2,4(r2)
   114a0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   114a4:	e0bfff17 	ldw	r2,-4(fp)
   114a8:	10800017 	ldw	r2,0(r2)
   114ac:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   114b0:	e0bffb17 	ldw	r2,-20(fp)
   114b4:	10000b1e 	bne	r2,zero,114e4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   114b8:	e0bfff17 	ldw	r2,-4(fp)
   114bc:	10800317 	ldw	r2,12(r2)
   114c0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   114c4:	e0bffd17 	ldw	r2,-12(fp)
   114c8:	e0fffc17 	ldw	r3,-16(fp)
   114cc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   114d0:	e0bffc17 	ldw	r2,-16(fp)
   114d4:	10000b26 	beq	r2,zero,11504 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   114d8:	e0bffc17 	ldw	r2,-16(fp)
   114dc:	10000115 	stw	zero,4(r2)
   114e0:	00000806 	br	11504 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   114e4:	e0bffb17 	ldw	r2,-20(fp)
   114e8:	e0fffc17 	ldw	r3,-16(fp)
   114ec:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   114f0:	e0bffc17 	ldw	r2,-16(fp)
   114f4:	10000326 	beq	r2,zero,11504 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   114f8:	e0bffc17 	ldw	r2,-16(fp)
   114fc:	e0fffb17 	ldw	r3,-20(fp)
   11500:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   11504:	e0bfff17 	ldw	r2,-4(fp)
   11508:	10800217 	ldw	r2,8(r2)
   1150c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   11510:	e0bffe17 	ldw	r2,-8(fp)
   11514:	10000a15 	stw	zero,40(r2)
#endif
}
   11518:	0001883a 	nop
   1151c:	e037883a 	mov	sp,fp
   11520:	df000017 	ldw	fp,0(sp)
   11524:	dec00104 	addi	sp,sp,4
   11528:	f800283a 	ret

0001152c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   1152c:	defff404 	addi	sp,sp,-48
   11530:	df000b15 	stw	fp,44(sp)
   11534:	df000b04 	addi	fp,sp,44
   11538:	e13ffc15 	stw	r4,-16(fp)
   1153c:	e17ffd15 	stw	r5,-12(fp)
   11540:	e1bffe15 	stw	r6,-8(fp)
   11544:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11548:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1154c:	e0bfff17 	ldw	r2,-4(fp)
   11550:	1000021e 	bne	r2,zero,1155c <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   11554:	0005883a 	mov	r2,zero
   11558:	00006506 	br	116f0 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1155c:	e0bffc17 	ldw	r2,-16(fp)
   11560:	1000051e 	bne	r2,zero,11578 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11564:	e0bfff17 	ldw	r2,-4(fp)
   11568:	00c01884 	movi	r3,98
   1156c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11570:	0005883a 	mov	r2,zero
   11574:	00005e06 	br	116f0 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   11578:	e0bffc17 	ldw	r2,-16(fp)
   1157c:	108000cc 	andi	r2,r2,3
   11580:	10000526 	beq	r2,zero,11598 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   11584:	e0bfff17 	ldw	r2,-4(fp)
   11588:	00c01884 	movi	r3,98
   1158c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11590:	0005883a 	mov	r2,zero
   11594:	00005606 	br	116f0 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   11598:	e0bffd17 	ldw	r2,-12(fp)
   1159c:	108000a8 	cmpgeui	r2,r2,2
   115a0:	1000051e 	bne	r2,zero,115b8 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   115a4:	e0bfff17 	ldw	r2,-4(fp)
   115a8:	00c016c4 	movi	r3,91
   115ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   115b0:	0005883a 	mov	r2,zero
   115b4:	00004e06 	br	116f0 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   115b8:	e0bffe17 	ldw	r2,-8(fp)
   115bc:	10800128 	cmpgeui	r2,r2,4
   115c0:	1000051e 	bne	r2,zero,115d8 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   115c4:	e0bfff17 	ldw	r2,-4(fp)
   115c8:	00c01704 	movi	r3,92
   115cc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   115d0:	0005883a 	mov	r2,zero
   115d4:	00004606 	br	116f0 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115d8:	0005303a 	rdctl	r2,status
   115dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115e0:	e0fffb17 	ldw	r3,-20(fp)
   115e4:	00bfff84 	movi	r2,-2
   115e8:	1884703a 	and	r2,r3,r2
   115ec:	1001703a 	wrctl	status,r2
  
  return context;
   115f0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   115f4:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   115f8:	d0a72917 	ldw	r2,-25436(gp)
   115fc:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   11600:	d0a72917 	ldw	r2,-25436(gp)
   11604:	10000326 	beq	r2,zero,11614 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   11608:	d0a72917 	ldw	r2,-25436(gp)
   1160c:	10800117 	ldw	r2,4(r2)
   11610:	d0a72915 	stw	r2,-25436(gp)
   11614:	e0bff817 	ldw	r2,-32(fp)
   11618:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1161c:	e0bff917 	ldw	r2,-28(fp)
   11620:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   11624:	e0bffa17 	ldw	r2,-24(fp)
   11628:	1000051e 	bne	r2,zero,11640 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   1162c:	e0bfff17 	ldw	r2,-4(fp)
   11630:	00c01684 	movi	r3,90
   11634:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   11638:	0005883a 	mov	r2,zero
   1163c:	00002c06 	br	116f0 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   11640:	e0bffc17 	ldw	r2,-16(fp)
   11644:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   11648:	e0fffc17 	ldw	r3,-16(fp)
   1164c:	e0bffe17 	ldw	r2,-8(fp)
   11650:	1885883a 	add	r2,r3,r2
   11654:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   11658:	e03ff715 	stw	zero,-36(fp)
   1165c:	00000c06 	br	11690 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   11660:	e0bff617 	ldw	r2,-40(fp)
   11664:	e0fff517 	ldw	r3,-44(fp)
   11668:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1166c:	e0bff517 	ldw	r2,-44(fp)
   11670:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   11674:	e0fff517 	ldw	r3,-44(fp)
   11678:	e0bffe17 	ldw	r2,-8(fp)
   1167c:	1885883a 	add	r2,r3,r2
   11680:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   11684:	e0bff717 	ldw	r2,-36(fp)
   11688:	10800044 	addi	r2,r2,1
   1168c:	e0bff715 	stw	r2,-36(fp)
   11690:	e0bffd17 	ldw	r2,-12(fp)
   11694:	10bfffc4 	addi	r2,r2,-1
   11698:	e0fff717 	ldw	r3,-36(fp)
   1169c:	18bff036 	bltu	r3,r2,11660 <_gp+0xfffd2d58>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   116a0:	e0bff617 	ldw	r2,-40(fp)
   116a4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   116a8:	e0bffa17 	ldw	r2,-24(fp)
   116ac:	e0fffc17 	ldw	r3,-16(fp)
   116b0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   116b4:	e0bffa17 	ldw	r2,-24(fp)
   116b8:	e0fffc17 	ldw	r3,-16(fp)
   116bc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   116c0:	e0bffa17 	ldw	r2,-24(fp)
   116c4:	e0fffd17 	ldw	r3,-12(fp)
   116c8:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   116cc:	e0bffa17 	ldw	r2,-24(fp)
   116d0:	e0fffd17 	ldw	r3,-12(fp)
   116d4:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   116d8:	e0bffa17 	ldw	r2,-24(fp)
   116dc:	e0fffe17 	ldw	r3,-8(fp)
   116e0:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   116e4:	e0bfff17 	ldw	r2,-4(fp)
   116e8:	10000005 	stb	zero,0(r2)
    return (pmem);
   116ec:	e0bffa17 	ldw	r2,-24(fp)
}
   116f0:	e037883a 	mov	sp,fp
   116f4:	df000017 	ldw	fp,0(sp)
   116f8:	dec00104 	addi	sp,sp,4
   116fc:	f800283a 	ret

00011700 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   11700:	defff804 	addi	sp,sp,-32
   11704:	df000715 	stw	fp,28(sp)
   11708:	df000704 	addi	fp,sp,28
   1170c:	e13ffe15 	stw	r4,-8(fp)
   11710:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   11714:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   11718:	e0bfff17 	ldw	r2,-4(fp)
   1171c:	1000021e 	bne	r2,zero,11728 <OSMemGet+0x28>
        return ((void *)0);
   11720:	0005883a 	mov	r2,zero
   11724:	00002e06 	br	117e0 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   11728:	e0bffe17 	ldw	r2,-8(fp)
   1172c:	1000051e 	bne	r2,zero,11744 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11730:	e0bfff17 	ldw	r2,-4(fp)
   11734:	00c01804 	movi	r3,96
   11738:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1173c:	0005883a 	mov	r2,zero
   11740:	00002706 	br	117e0 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11744:	0005303a 	rdctl	r2,status
   11748:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1174c:	e0fffd17 	ldw	r3,-12(fp)
   11750:	00bfff84 	movi	r2,-2
   11754:	1884703a 	and	r2,r3,r2
   11758:	1001703a 	wrctl	status,r2
  
  return context;
   1175c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11760:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   11764:	e0bffe17 	ldw	r2,-8(fp)
   11768:	10800417 	ldw	r2,16(r2)
   1176c:	10001426 	beq	r2,zero,117c0 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   11770:	e0bffe17 	ldw	r2,-8(fp)
   11774:	10800117 	ldw	r2,4(r2)
   11778:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1177c:	e0bffb17 	ldw	r2,-20(fp)
   11780:	10c00017 	ldw	r3,0(r2)
   11784:	e0bffe17 	ldw	r2,-8(fp)
   11788:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1178c:	e0bffe17 	ldw	r2,-8(fp)
   11790:	10800417 	ldw	r2,16(r2)
   11794:	10ffffc4 	addi	r3,r2,-1
   11798:	e0bffe17 	ldw	r2,-8(fp)
   1179c:	10c00415 	stw	r3,16(r2)
   117a0:	e0bff917 	ldw	r2,-28(fp)
   117a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117a8:	e0bffa17 	ldw	r2,-24(fp)
   117ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   117b0:	e0bfff17 	ldw	r2,-4(fp)
   117b4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   117b8:	e0bffb17 	ldw	r2,-20(fp)
   117bc:	00000806 	br	117e0 <OSMemGet+0xe0>
   117c0:	e0bff917 	ldw	r2,-28(fp)
   117c4:	e0bffc15 	stw	r2,-16(fp)
   117c8:	e0bffc17 	ldw	r2,-16(fp)
   117cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   117d0:	e0bfff17 	ldw	r2,-4(fp)
   117d4:	00c01744 	movi	r3,93
   117d8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   117dc:	0005883a 	mov	r2,zero
}
   117e0:	e037883a 	mov	sp,fp
   117e4:	df000017 	ldw	fp,0(sp)
   117e8:	dec00104 	addi	sp,sp,4
   117ec:	f800283a 	ret

000117f0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   117f0:	defff704 	addi	sp,sp,-36
   117f4:	dfc00815 	stw	ra,32(sp)
   117f8:	df000715 	stw	fp,28(sp)
   117fc:	df000704 	addi	fp,sp,28
   11800:	e13ffd15 	stw	r4,-12(fp)
   11804:	e17ffe15 	stw	r5,-8(fp)
   11808:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1180c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11810:	e0bfff17 	ldw	r2,-4(fp)
   11814:	1000021e 	bne	r2,zero,11820 <OSMemNameGet+0x30>
        return (0);
   11818:	0005883a 	mov	r2,zero
   1181c:	00002b06 	br	118cc <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11820:	e0bffd17 	ldw	r2,-12(fp)
   11824:	1000051e 	bne	r2,zero,1183c <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11828:	e0bfff17 	ldw	r2,-4(fp)
   1182c:	00c01804 	movi	r3,96
   11830:	10c00005 	stb	r3,0(r2)
        return (0);
   11834:	0005883a 	mov	r2,zero
   11838:	00002406 	br	118cc <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1183c:	e0bffe17 	ldw	r2,-8(fp)
   11840:	1000051e 	bne	r2,zero,11858 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11844:	e0bfff17 	ldw	r2,-4(fp)
   11848:	00c00304 	movi	r3,12
   1184c:	10c00005 	stb	r3,0(r2)
        return (0);
   11850:	0005883a 	mov	r2,zero
   11854:	00001d06 	br	118cc <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11858:	d0a72e03 	ldbu	r2,-25416(gp)
   1185c:	10803fcc 	andi	r2,r2,255
   11860:	10000526 	beq	r2,zero,11878 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   11864:	e0bfff17 	ldw	r2,-4(fp)
   11868:	00c00444 	movi	r3,17
   1186c:	10c00005 	stb	r3,0(r2)
        return (0);
   11870:	0005883a 	mov	r2,zero
   11874:	00001506 	br	118cc <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11878:	0005303a 	rdctl	r2,status
   1187c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11880:	e0fffb17 	ldw	r3,-20(fp)
   11884:	00bfff84 	movi	r2,-2
   11888:	1884703a 	and	r2,r3,r2
   1188c:	1001703a 	wrctl	status,r2
  
  return context;
   11890:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   11894:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   11898:	e0bffd17 	ldw	r2,-12(fp)
   1189c:	10800504 	addi	r2,r2,20
   118a0:	100b883a 	mov	r5,r2
   118a4:	e13ffe17 	ldw	r4,-8(fp)
   118a8:	000f6f80 	call	f6f8 <OS_StrCopy>
   118ac:	e0bffa05 	stb	r2,-24(fp)
   118b0:	e0bff917 	ldw	r2,-28(fp)
   118b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118b8:	e0bffc17 	ldw	r2,-16(fp)
   118bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   118c0:	e0bfff17 	ldw	r2,-4(fp)
   118c4:	10000005 	stb	zero,0(r2)
    return (len);
   118c8:	e0bffa03 	ldbu	r2,-24(fp)
}
   118cc:	e037883a 	mov	sp,fp
   118d0:	dfc00117 	ldw	ra,4(sp)
   118d4:	df000017 	ldw	fp,0(sp)
   118d8:	dec00204 	addi	sp,sp,8
   118dc:	f800283a 	ret

000118e0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   118e0:	defff604 	addi	sp,sp,-40
   118e4:	dfc00915 	stw	ra,36(sp)
   118e8:	df000815 	stw	fp,32(sp)
   118ec:	df000804 	addi	fp,sp,32
   118f0:	e13ffd15 	stw	r4,-12(fp)
   118f4:	e17ffe15 	stw	r5,-8(fp)
   118f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   118fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11900:	e0bfff17 	ldw	r2,-4(fp)
   11904:	10003526 	beq	r2,zero,119dc <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   11908:	e0bffd17 	ldw	r2,-12(fp)
   1190c:	1000041e 	bne	r2,zero,11920 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   11910:	e0bfff17 	ldw	r2,-4(fp)
   11914:	00c01804 	movi	r3,96
   11918:	10c00005 	stb	r3,0(r2)
        return;
   1191c:	00003006 	br	119e0 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11920:	e0bffe17 	ldw	r2,-8(fp)
   11924:	1000041e 	bne	r2,zero,11938 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   11928:	e0bfff17 	ldw	r2,-4(fp)
   1192c:	00c00304 	movi	r3,12
   11930:	10c00005 	stb	r3,0(r2)
        return;
   11934:	00002a06 	br	119e0 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11938:	d0a72e03 	ldbu	r2,-25416(gp)
   1193c:	10803fcc 	andi	r2,r2,255
   11940:	10000426 	beq	r2,zero,11954 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11944:	e0bfff17 	ldw	r2,-4(fp)
   11948:	00c00484 	movi	r3,18
   1194c:	10c00005 	stb	r3,0(r2)
        return;
   11950:	00002306 	br	119e0 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11954:	0005303a 	rdctl	r2,status
   11958:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1195c:	e0fffc17 	ldw	r3,-16(fp)
   11960:	00bfff84 	movi	r2,-2
   11964:	1884703a 	and	r2,r3,r2
   11968:	1001703a 	wrctl	status,r2
  
  return context;
   1196c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11970:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   11974:	e13ffe17 	ldw	r4,-8(fp)
   11978:	000f76c0 	call	f76c <OS_StrLen>
   1197c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   11980:	e0bffa03 	ldbu	r2,-24(fp)
   11984:	10800830 	cmpltui	r2,r2,32
   11988:	1000081e 	bne	r2,zero,119ac <OSMemNameSet+0xcc>
   1198c:	e0bff817 	ldw	r2,-32(fp)
   11990:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11994:	e0bff917 	ldw	r2,-28(fp)
   11998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   1199c:	e0bfff17 	ldw	r2,-4(fp)
   119a0:	00c018c4 	movi	r3,99
   119a4:	10c00005 	stb	r3,0(r2)
        return;
   119a8:	00000d06 	br	119e0 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   119ac:	e0bffd17 	ldw	r2,-12(fp)
   119b0:	10800504 	addi	r2,r2,20
   119b4:	e17ffe17 	ldw	r5,-8(fp)
   119b8:	1009883a 	mov	r4,r2
   119bc:	000f6f80 	call	f6f8 <OS_StrCopy>
   119c0:	e0bff817 	ldw	r2,-32(fp)
   119c4:	e0bffb15 	stw	r2,-20(fp)
   119c8:	e0bffb17 	ldw	r2,-20(fp)
   119cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   119d0:	e0bfff17 	ldw	r2,-4(fp)
   119d4:	10000005 	stb	zero,0(r2)
   119d8:	00000106 	br	119e0 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   119dc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   119e0:	e037883a 	mov	sp,fp
   119e4:	dfc00117 	ldw	ra,4(sp)
   119e8:	df000017 	ldw	fp,0(sp)
   119ec:	dec00204 	addi	sp,sp,8
   119f0:	f800283a 	ret

000119f4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   119f4:	defff904 	addi	sp,sp,-28
   119f8:	df000615 	stw	fp,24(sp)
   119fc:	df000604 	addi	fp,sp,24
   11a00:	e13ffe15 	stw	r4,-8(fp)
   11a04:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11a08:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11a0c:	e0bffe17 	ldw	r2,-8(fp)
   11a10:	1000021e 	bne	r2,zero,11a1c <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11a14:	00801804 	movi	r2,96
   11a18:	00002806 	br	11abc <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   11a1c:	e0bfff17 	ldw	r2,-4(fp)
   11a20:	1000021e 	bne	r2,zero,11a2c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   11a24:	008017c4 	movi	r2,95
   11a28:	00002406 	br	11abc <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11a2c:	0005303a 	rdctl	r2,status
   11a30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11a34:	e0fffd17 	ldw	r3,-12(fp)
   11a38:	00bfff84 	movi	r2,-2
   11a3c:	1884703a 	and	r2,r3,r2
   11a40:	1001703a 	wrctl	status,r2
  
  return context;
   11a44:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11a48:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   11a4c:	e0bffe17 	ldw	r2,-8(fp)
   11a50:	10c00417 	ldw	r3,16(r2)
   11a54:	e0bffe17 	ldw	r2,-8(fp)
   11a58:	10800317 	ldw	r2,12(r2)
   11a5c:	18800636 	bltu	r3,r2,11a78 <OSMemPut+0x84>
   11a60:	e0bffa17 	ldw	r2,-24(fp)
   11a64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a68:	e0bffb17 	ldw	r2,-20(fp)
   11a6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   11a70:	00801784 	movi	r2,94
   11a74:	00001106 	br	11abc <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   11a78:	e0bffe17 	ldw	r2,-8(fp)
   11a7c:	10c00117 	ldw	r3,4(r2)
   11a80:	e0bfff17 	ldw	r2,-4(fp)
   11a84:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   11a88:	e0bffe17 	ldw	r2,-8(fp)
   11a8c:	e0ffff17 	ldw	r3,-4(fp)
   11a90:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   11a94:	e0bffe17 	ldw	r2,-8(fp)
   11a98:	10800417 	ldw	r2,16(r2)
   11a9c:	10c00044 	addi	r3,r2,1
   11aa0:	e0bffe17 	ldw	r2,-8(fp)
   11aa4:	10c00415 	stw	r3,16(r2)
   11aa8:	e0bffa17 	ldw	r2,-24(fp)
   11aac:	e0bffc15 	stw	r2,-16(fp)
   11ab0:	e0bffc17 	ldw	r2,-16(fp)
   11ab4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   11ab8:	0005883a 	mov	r2,zero
}
   11abc:	e037883a 	mov	sp,fp
   11ac0:	df000017 	ldw	fp,0(sp)
   11ac4:	dec00104 	addi	sp,sp,4
   11ac8:	f800283a 	ret

00011acc <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   11acc:	defffa04 	addi	sp,sp,-24
   11ad0:	df000515 	stw	fp,20(sp)
   11ad4:	df000504 	addi	fp,sp,20
   11ad8:	e13ffe15 	stw	r4,-8(fp)
   11adc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ae0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   11ae4:	e0bffe17 	ldw	r2,-8(fp)
   11ae8:	1000021e 	bne	r2,zero,11af4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   11aec:	00801804 	movi	r2,96
   11af0:	00002c06 	br	11ba4 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   11af4:	e0bfff17 	ldw	r2,-4(fp)
   11af8:	1000021e 	bne	r2,zero,11b04 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   11afc:	00801844 	movi	r2,97
   11b00:	00002806 	br	11ba4 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b04:	0005303a 	rdctl	r2,status
   11b08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b0c:	e0fffc17 	ldw	r3,-16(fp)
   11b10:	00bfff84 	movi	r2,-2
   11b14:	1884703a 	and	r2,r3,r2
   11b18:	1001703a 	wrctl	status,r2
  
  return context;
   11b1c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   11b20:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   11b24:	e0bffe17 	ldw	r2,-8(fp)
   11b28:	10c00017 	ldw	r3,0(r2)
   11b2c:	e0bfff17 	ldw	r2,-4(fp)
   11b30:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   11b34:	e0bffe17 	ldw	r2,-8(fp)
   11b38:	10c00117 	ldw	r3,4(r2)
   11b3c:	e0bfff17 	ldw	r2,-4(fp)
   11b40:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   11b44:	e0bffe17 	ldw	r2,-8(fp)
   11b48:	10c00217 	ldw	r3,8(r2)
   11b4c:	e0bfff17 	ldw	r2,-4(fp)
   11b50:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   11b54:	e0bffe17 	ldw	r2,-8(fp)
   11b58:	10c00317 	ldw	r3,12(r2)
   11b5c:	e0bfff17 	ldw	r2,-4(fp)
   11b60:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   11b64:	e0bffe17 	ldw	r2,-8(fp)
   11b68:	10c00417 	ldw	r3,16(r2)
   11b6c:	e0bfff17 	ldw	r2,-4(fp)
   11b70:	10c00415 	stw	r3,16(r2)
   11b74:	e0bffb17 	ldw	r2,-20(fp)
   11b78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b7c:	e0bffd17 	ldw	r2,-12(fp)
   11b80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   11b84:	e0bfff17 	ldw	r2,-4(fp)
   11b88:	10c00317 	ldw	r3,12(r2)
   11b8c:	e0bfff17 	ldw	r2,-4(fp)
   11b90:	10800417 	ldw	r2,16(r2)
   11b94:	1887c83a 	sub	r3,r3,r2
   11b98:	e0bfff17 	ldw	r2,-4(fp)
   11b9c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   11ba0:	0005883a 	mov	r2,zero
}
   11ba4:	e037883a 	mov	sp,fp
   11ba8:	df000017 	ldw	fp,0(sp)
   11bac:	dec00104 	addi	sp,sp,4
   11bb0:	f800283a 	ret

00011bb4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   11bb4:	defffc04 	addi	sp,sp,-16
   11bb8:	dfc00315 	stw	ra,12(sp)
   11bbc:	df000215 	stw	fp,8(sp)
   11bc0:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   11bc4:	01430c04 	movi	r5,3120
   11bc8:	01000134 	movhi	r4,4
   11bcc:	21269f04 	addi	r4,r4,-25988
   11bd0:	000f4f80 	call	f4f8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   11bd4:	00800134 	movhi	r2,4
   11bd8:	10a69f04 	addi	r2,r2,-25988
   11bdc:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11be0:	e03fff0d 	sth	zero,-4(fp)
   11be4:	00001306 	br	11c34 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   11be8:	e0bfff0b 	ldhu	r2,-4(fp)
   11bec:	10800044 	addi	r2,r2,1
   11bf0:	10c00d24 	muli	r3,r2,52
   11bf4:	00800134 	movhi	r2,4
   11bf8:	10a69f04 	addi	r2,r2,-25988
   11bfc:	1887883a 	add	r3,r3,r2
   11c00:	e0bffe17 	ldw	r2,-8(fp)
   11c04:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   11c08:	e0bffe17 	ldw	r2,-8(fp)
   11c0c:	00c00fc4 	movi	r3,63
   11c10:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   11c14:	e0bffe17 	ldw	r2,-8(fp)
   11c18:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   11c1c:	e0bffe17 	ldw	r2,-8(fp)
   11c20:	10800d04 	addi	r2,r2,52
   11c24:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   11c28:	e0bfff0b 	ldhu	r2,-4(fp)
   11c2c:	10800044 	addi	r2,r2,1
   11c30:	e0bfff0d 	sth	r2,-4(fp)
   11c34:	e0bfff0b 	ldhu	r2,-4(fp)
   11c38:	10800ef0 	cmpltui	r2,r2,59
   11c3c:	103fea1e 	bne	r2,zero,11be8 <_gp+0xfffd32e0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   11c40:	e0bffe17 	ldw	r2,-8(fp)
   11c44:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   11c48:	e0bffe17 	ldw	r2,-8(fp)
   11c4c:	00c00fc4 	movi	r3,63
   11c50:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   11c54:	e0bffe17 	ldw	r2,-8(fp)
   11c58:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   11c5c:	00800134 	movhi	r2,4
   11c60:	10a69f04 	addi	r2,r2,-25988
   11c64:	d0a72915 	stw	r2,-25436(gp)
#endif
}
   11c68:	0001883a 	nop
   11c6c:	e037883a 	mov	sp,fp
   11c70:	dfc00117 	ldw	ra,4(sp)
   11c74:	df000017 	ldw	fp,0(sp)
   11c78:	dec00204 	addi	sp,sp,8
   11c7c:	f800283a 	ret

00011c80 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   11c80:	defff804 	addi	sp,sp,-32
   11c84:	df000715 	stw	fp,28(sp)
   11c88:	df000704 	addi	fp,sp,28
   11c8c:	e13ffe15 	stw	r4,-8(fp)
   11c90:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11c94:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11c98:	e0bfff17 	ldw	r2,-4(fp)
   11c9c:	1000021e 	bne	r2,zero,11ca8 <OSQAccept+0x28>
        return ((void *)0);
   11ca0:	0005883a 	mov	r2,zero
   11ca4:	00004206 	br	11db0 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   11ca8:	e0bffe17 	ldw	r2,-8(fp)
   11cac:	1000051e 	bne	r2,zero,11cc4 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   11cb0:	e0bfff17 	ldw	r2,-4(fp)
   11cb4:	00c00104 	movi	r3,4
   11cb8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11cbc:	0005883a 	mov	r2,zero
   11cc0:	00003b06 	br	11db0 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   11cc4:	e0bffe17 	ldw	r2,-8(fp)
   11cc8:	10800003 	ldbu	r2,0(r2)
   11ccc:	10803fcc 	andi	r2,r2,255
   11cd0:	108000a0 	cmpeqi	r2,r2,2
   11cd4:	1000051e 	bne	r2,zero,11cec <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11cd8:	e0bfff17 	ldw	r2,-4(fp)
   11cdc:	00c00044 	movi	r3,1
   11ce0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   11ce4:	0005883a 	mov	r2,zero
   11ce8:	00003106 	br	11db0 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11cec:	0005303a 	rdctl	r2,status
   11cf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11cf4:	e0fffd17 	ldw	r3,-12(fp)
   11cf8:	00bfff84 	movi	r2,-2
   11cfc:	1884703a 	and	r2,r3,r2
   11d00:	1001703a 	wrctl	status,r2
  
  return context;
   11d04:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   11d08:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   11d0c:	e0bffe17 	ldw	r2,-8(fp)
   11d10:	10800117 	ldw	r2,4(r2)
   11d14:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   11d18:	e0bffc17 	ldw	r2,-16(fp)
   11d1c:	1080058b 	ldhu	r2,22(r2)
   11d20:	10bfffcc 	andi	r2,r2,65535
   11d24:	10001926 	beq	r2,zero,11d8c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   11d28:	e0bffc17 	ldw	r2,-16(fp)
   11d2c:	10800417 	ldw	r2,16(r2)
   11d30:	11000104 	addi	r4,r2,4
   11d34:	e0fffc17 	ldw	r3,-16(fp)
   11d38:	19000415 	stw	r4,16(r3)
   11d3c:	10800017 	ldw	r2,0(r2)
   11d40:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   11d44:	e0bffc17 	ldw	r2,-16(fp)
   11d48:	1080058b 	ldhu	r2,22(r2)
   11d4c:	10bfffc4 	addi	r2,r2,-1
   11d50:	1007883a 	mov	r3,r2
   11d54:	e0bffc17 	ldw	r2,-16(fp)
   11d58:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   11d5c:	e0bffc17 	ldw	r2,-16(fp)
   11d60:	10c00417 	ldw	r3,16(r2)
   11d64:	e0bffc17 	ldw	r2,-16(fp)
   11d68:	10800217 	ldw	r2,8(r2)
   11d6c:	1880041e 	bne	r3,r2,11d80 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   11d70:	e0bffc17 	ldw	r2,-16(fp)
   11d74:	10c00117 	ldw	r3,4(r2)
   11d78:	e0bffc17 	ldw	r2,-16(fp)
   11d7c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   11d80:	e0bfff17 	ldw	r2,-4(fp)
   11d84:	10000005 	stb	zero,0(r2)
   11d88:	00000406 	br	11d9c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   11d8c:	e0bfff17 	ldw	r2,-4(fp)
   11d90:	00c007c4 	movi	r3,31
   11d94:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   11d98:	e03ff915 	stw	zero,-28(fp)
   11d9c:	e0bffa17 	ldw	r2,-24(fp)
   11da0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11da4:	e0bffb17 	ldw	r2,-20(fp)
   11da8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   11dac:	e0bff917 	ldw	r2,-28(fp)
}
   11db0:	e037883a 	mov	sp,fp
   11db4:	df000017 	ldw	fp,0(sp)
   11db8:	dec00104 	addi	sp,sp,4
   11dbc:	f800283a 	ret

00011dc0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   11dc0:	defff404 	addi	sp,sp,-48
   11dc4:	dfc00b15 	stw	ra,44(sp)
   11dc8:	df000a15 	stw	fp,40(sp)
   11dcc:	df000a04 	addi	fp,sp,40
   11dd0:	e13ffe15 	stw	r4,-8(fp)
   11dd4:	2805883a 	mov	r2,r5
   11dd8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11ddc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   11de0:	d0a72e03 	ldbu	r2,-25416(gp)
   11de4:	10803fcc 	andi	r2,r2,255
   11de8:	10000226 	beq	r2,zero,11df4 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   11dec:	0005883a 	mov	r2,zero
   11df0:	00005906 	br	11f58 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11df4:	0005303a 	rdctl	r2,status
   11df8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11dfc:	e0fffd17 	ldw	r3,-12(fp)
   11e00:	00bfff84 	movi	r2,-2
   11e04:	1884703a 	and	r2,r3,r2
   11e08:	1001703a 	wrctl	status,r2
  
  return context;
   11e0c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   11e10:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   11e14:	d0a72d17 	ldw	r2,-25420(gp)
   11e18:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   11e1c:	d0a72d17 	ldw	r2,-25420(gp)
   11e20:	10000326 	beq	r2,zero,11e30 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   11e24:	d0a72d17 	ldw	r2,-25420(gp)
   11e28:	10800117 	ldw	r2,4(r2)
   11e2c:	d0a72d15 	stw	r2,-25420(gp)
   11e30:	e0bff717 	ldw	r2,-36(fp)
   11e34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e38:	e0bff817 	ldw	r2,-32(fp)
   11e3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   11e40:	e0bff617 	ldw	r2,-40(fp)
   11e44:	10004326 	beq	r2,zero,11f54 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11e48:	0005303a 	rdctl	r2,status
   11e4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11e50:	e0fff917 	ldw	r3,-28(fp)
   11e54:	00bfff84 	movi	r2,-2
   11e58:	1884703a 	and	r2,r3,r2
   11e5c:	1001703a 	wrctl	status,r2
  
  return context;
   11e60:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   11e64:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   11e68:	d0a72b17 	ldw	r2,-25428(gp)
   11e6c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   11e70:	e0bffb17 	ldw	r2,-20(fp)
   11e74:	10002d26 	beq	r2,zero,11f2c <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   11e78:	d0a72b17 	ldw	r2,-25428(gp)
   11e7c:	10800017 	ldw	r2,0(r2)
   11e80:	d0a72b15 	stw	r2,-25428(gp)
   11e84:	e0bff717 	ldw	r2,-36(fp)
   11e88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11e8c:	e0bffa17 	ldw	r2,-24(fp)
   11e90:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   11e94:	e0bffb17 	ldw	r2,-20(fp)
   11e98:	e0fffe17 	ldw	r3,-8(fp)
   11e9c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   11ea0:	e0bfff0b 	ldhu	r2,-4(fp)
   11ea4:	1085883a 	add	r2,r2,r2
   11ea8:	1085883a 	add	r2,r2,r2
   11eac:	1007883a 	mov	r3,r2
   11eb0:	e0bffe17 	ldw	r2,-8(fp)
   11eb4:	10c7883a 	add	r3,r2,r3
   11eb8:	e0bffb17 	ldw	r2,-20(fp)
   11ebc:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   11ec0:	e0bffb17 	ldw	r2,-20(fp)
   11ec4:	e0fffe17 	ldw	r3,-8(fp)
   11ec8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   11ecc:	e0bffb17 	ldw	r2,-20(fp)
   11ed0:	e0fffe17 	ldw	r3,-8(fp)
   11ed4:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   11ed8:	e0bffb17 	ldw	r2,-20(fp)
   11edc:	e0ffff0b 	ldhu	r3,-4(fp)
   11ee0:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   11ee4:	e0bffb17 	ldw	r2,-20(fp)
   11ee8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   11eec:	e0bff617 	ldw	r2,-40(fp)
   11ef0:	00c00084 	movi	r3,2
   11ef4:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   11ef8:	e0bff617 	ldw	r2,-40(fp)
   11efc:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   11f00:	e0bff617 	ldw	r2,-40(fp)
   11f04:	e0fffb17 	ldw	r3,-20(fp)
   11f08:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   11f0c:	e0bff617 	ldw	r2,-40(fp)
   11f10:	00c00fc4 	movi	r3,63
   11f14:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   11f18:	e0bff617 	ldw	r2,-40(fp)
   11f1c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   11f20:	e13ff617 	ldw	r4,-40(fp)
   11f24:	000f1180 	call	f118 <OS_EventWaitListInit>
   11f28:	00000a06 	br	11f54 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   11f2c:	d0e72d17 	ldw	r3,-25420(gp)
   11f30:	e0bff617 	ldw	r2,-40(fp)
   11f34:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   11f38:	e0bff617 	ldw	r2,-40(fp)
   11f3c:	d0a72d15 	stw	r2,-25420(gp)
   11f40:	e0bff717 	ldw	r2,-36(fp)
   11f44:	e0bffc15 	stw	r2,-16(fp)
   11f48:	e0bffc17 	ldw	r2,-16(fp)
   11f4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   11f50:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   11f54:	e0bff617 	ldw	r2,-40(fp)
}
   11f58:	e037883a 	mov	sp,fp
   11f5c:	dfc00117 	ldw	ra,4(sp)
   11f60:	df000017 	ldw	fp,0(sp)
   11f64:	dec00204 	addi	sp,sp,8
   11f68:	f800283a 	ret

00011f6c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   11f6c:	defff204 	addi	sp,sp,-56
   11f70:	dfc00d15 	stw	ra,52(sp)
   11f74:	df000c15 	stw	fp,48(sp)
   11f78:	df000c04 	addi	fp,sp,48
   11f7c:	e13ffd15 	stw	r4,-12(fp)
   11f80:	2805883a 	mov	r2,r5
   11f84:	e1bfff15 	stw	r6,-4(fp)
   11f88:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11f8c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11f90:	e0bfff17 	ldw	r2,-4(fp)
   11f94:	1000021e 	bne	r2,zero,11fa0 <OSQDel+0x34>
        return (pevent);
   11f98:	e0bffd17 	ldw	r2,-12(fp)
   11f9c:	00008e06 	br	121d8 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   11fa0:	e0bffd17 	ldw	r2,-12(fp)
   11fa4:	1000051e 	bne	r2,zero,11fbc <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   11fa8:	e0bfff17 	ldw	r2,-4(fp)
   11fac:	00c00104 	movi	r3,4
   11fb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11fb4:	e0bffd17 	ldw	r2,-12(fp)
   11fb8:	00008706 	br	121d8 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   11fbc:	e0bffd17 	ldw	r2,-12(fp)
   11fc0:	10800003 	ldbu	r2,0(r2)
   11fc4:	10803fcc 	andi	r2,r2,255
   11fc8:	108000a0 	cmpeqi	r2,r2,2
   11fcc:	1000051e 	bne	r2,zero,11fe4 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   11fd0:	e0bfff17 	ldw	r2,-4(fp)
   11fd4:	00c00044 	movi	r3,1
   11fd8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11fdc:	e0bffd17 	ldw	r2,-12(fp)
   11fe0:	00007d06 	br	121d8 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   11fe4:	d0a72e03 	ldbu	r2,-25416(gp)
   11fe8:	10803fcc 	andi	r2,r2,255
   11fec:	10000526 	beq	r2,zero,12004 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   11ff0:	e0bfff17 	ldw	r2,-4(fp)
   11ff4:	00c003c4 	movi	r3,15
   11ff8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   11ffc:	e0bffd17 	ldw	r2,-12(fp)
   12000:	00007506 	br	121d8 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12004:	0005303a 	rdctl	r2,status
   12008:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1200c:	e0fffc17 	ldw	r3,-16(fp)
   12010:	00bfff84 	movi	r2,-2
   12014:	1884703a 	and	r2,r3,r2
   12018:	1001703a 	wrctl	status,r2
  
  return context;
   1201c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12020:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   12024:	e0bffd17 	ldw	r2,-12(fp)
   12028:	10800283 	ldbu	r2,10(r2)
   1202c:	10803fcc 	andi	r2,r2,255
   12030:	10000326 	beq	r2,zero,12040 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12034:	00800044 	movi	r2,1
   12038:	e0bff405 	stb	r2,-48(fp)
   1203c:	00000106 	br	12044 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12040:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12044:	e0bffe03 	ldbu	r2,-8(fp)
   12048:	10000326 	beq	r2,zero,12058 <OSQDel+0xec>
   1204c:	10800060 	cmpeqi	r2,r2,1
   12050:	1000301e 	bne	r2,zero,12114 <OSQDel+0x1a8>
   12054:	00005506 	br	121ac <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   12058:	e0bff403 	ldbu	r2,-48(fp)
   1205c:	10001e1e 	bne	r2,zero,120d8 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12060:	e0bffd17 	ldw	r2,-12(fp)
   12064:	00c00fc4 	movi	r3,63
   12068:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1206c:	e0bffd17 	ldw	r2,-12(fp)
   12070:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   12074:	e0bffd17 	ldw	r2,-12(fp)
   12078:	10800117 	ldw	r2,4(r2)
   1207c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   12080:	d0e72b17 	ldw	r3,-25428(gp)
   12084:	e0bff817 	ldw	r2,-32(fp)
   12088:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   1208c:	e0bff817 	ldw	r2,-32(fp)
   12090:	d0a72b15 	stw	r2,-25428(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12094:	e0bffd17 	ldw	r2,-12(fp)
   12098:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1209c:	d0e72d17 	ldw	r3,-25420(gp)
   120a0:	e0bffd17 	ldw	r2,-12(fp)
   120a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   120a8:	e0bffd17 	ldw	r2,-12(fp)
   120ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   120b0:	e0bffd17 	ldw	r2,-12(fp)
   120b4:	d0a72d15 	stw	r2,-25420(gp)
   120b8:	e0bff617 	ldw	r2,-40(fp)
   120bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   120c0:	e0bff717 	ldw	r2,-36(fp)
   120c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   120c8:	e0bfff17 	ldw	r2,-4(fp)
   120cc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   120d0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   120d4:	00003f06 	br	121d4 <OSQDel+0x268>
   120d8:	e0bff617 	ldw	r2,-40(fp)
   120dc:	e0bff915 	stw	r2,-28(fp)
   120e0:	e0bff917 	ldw	r2,-28(fp)
   120e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   120e8:	e0bfff17 	ldw	r2,-4(fp)
   120ec:	00c01244 	movi	r3,73
   120f0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   120f4:	e0bffd17 	ldw	r2,-12(fp)
   120f8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   120fc:	00003506 	br	121d4 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   12100:	000f883a 	mov	r7,zero
   12104:	01800104 	movi	r6,4
   12108:	000b883a 	mov	r5,zero
   1210c:	e13ffd17 	ldw	r4,-12(fp)
   12110:	000eb680 	call	eb68 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   12114:	e0bffd17 	ldw	r2,-12(fp)
   12118:	10800283 	ldbu	r2,10(r2)
   1211c:	10803fcc 	andi	r2,r2,255
   12120:	103ff71e 	bne	r2,zero,12100 <_gp+0xfffd37f8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12124:	e0bffd17 	ldw	r2,-12(fp)
   12128:	00c00fc4 	movi	r3,63
   1212c:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12130:	e0bffd17 	ldw	r2,-12(fp)
   12134:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   12138:	e0bffd17 	ldw	r2,-12(fp)
   1213c:	10800117 	ldw	r2,4(r2)
   12140:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   12144:	d0e72b17 	ldw	r3,-25428(gp)
   12148:	e0bff817 	ldw	r2,-32(fp)
   1214c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   12150:	e0bff817 	ldw	r2,-32(fp)
   12154:	d0a72b15 	stw	r2,-25428(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12158:	e0bffd17 	ldw	r2,-12(fp)
   1215c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12160:	d0e72d17 	ldw	r3,-25420(gp)
   12164:	e0bffd17 	ldw	r2,-12(fp)
   12168:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1216c:	e0bffd17 	ldw	r2,-12(fp)
   12170:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12174:	e0bffd17 	ldw	r2,-12(fp)
   12178:	d0a72d15 	stw	r2,-25420(gp)
   1217c:	e0bff617 	ldw	r2,-40(fp)
   12180:	e0bffa15 	stw	r2,-24(fp)
   12184:	e0bffa17 	ldw	r2,-24(fp)
   12188:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1218c:	e0bff403 	ldbu	r2,-48(fp)
   12190:	10800058 	cmpnei	r2,r2,1
   12194:	1000011e 	bne	r2,zero,1219c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12198:	000f5b40 	call	f5b4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1219c:	e0bfff17 	ldw	r2,-4(fp)
   121a0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   121a4:	e03ff515 	stw	zero,-44(fp)
             break;
   121a8:	00000a06 	br	121d4 <OSQDel+0x268>
   121ac:	e0bff617 	ldw	r2,-40(fp)
   121b0:	e0bffb15 	stw	r2,-20(fp)
   121b4:	e0bffb17 	ldw	r2,-20(fp)
   121b8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   121bc:	e0bfff17 	ldw	r2,-4(fp)
   121c0:	00c001c4 	movi	r3,7
   121c4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   121c8:	e0bffd17 	ldw	r2,-12(fp)
   121cc:	e0bff515 	stw	r2,-44(fp)
             break;
   121d0:	0001883a 	nop
    }
    return (pevent_return);
   121d4:	e0bff517 	ldw	r2,-44(fp)
}
   121d8:	e037883a 	mov	sp,fp
   121dc:	dfc00117 	ldw	ra,4(sp)
   121e0:	df000017 	ldw	fp,0(sp)
   121e4:	dec00204 	addi	sp,sp,8
   121e8:	f800283a 	ret

000121ec <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   121ec:	defffa04 	addi	sp,sp,-24
   121f0:	df000515 	stw	fp,20(sp)
   121f4:	df000504 	addi	fp,sp,20
   121f8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   121fc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12200:	e0bfff17 	ldw	r2,-4(fp)
   12204:	1000021e 	bne	r2,zero,12210 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   12208:	00800104 	movi	r2,4
   1220c:	00002106 	br	12294 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12210:	e0bfff17 	ldw	r2,-4(fp)
   12214:	10800003 	ldbu	r2,0(r2)
   12218:	10803fcc 	andi	r2,r2,255
   1221c:	108000a0 	cmpeqi	r2,r2,2
   12220:	1000021e 	bne	r2,zero,1222c <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   12224:	00800044 	movi	r2,1
   12228:	00001a06 	br	12294 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1222c:	0005303a 	rdctl	r2,status
   12230:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12234:	e0fffd17 	ldw	r3,-12(fp)
   12238:	00bfff84 	movi	r2,-2
   1223c:	1884703a 	and	r2,r3,r2
   12240:	1001703a 	wrctl	status,r2
  
  return context;
   12244:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12248:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   1224c:	e0bfff17 	ldw	r2,-4(fp)
   12250:	10800117 	ldw	r2,4(r2)
   12254:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   12258:	e0bffc17 	ldw	r2,-16(fp)
   1225c:	10c00117 	ldw	r3,4(r2)
   12260:	e0bffc17 	ldw	r2,-16(fp)
   12264:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   12268:	e0bffc17 	ldw	r2,-16(fp)
   1226c:	10c00117 	ldw	r3,4(r2)
   12270:	e0bffc17 	ldw	r2,-16(fp)
   12274:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   12278:	e0bffc17 	ldw	r2,-16(fp)
   1227c:	1000058d 	sth	zero,22(r2)
   12280:	e0bffb17 	ldw	r2,-20(fp)
   12284:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12288:	e0bffe17 	ldw	r2,-8(fp)
   1228c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12290:	0005883a 	mov	r2,zero
}
   12294:	e037883a 	mov	sp,fp
   12298:	df000017 	ldw	fp,0(sp)
   1229c:	dec00104 	addi	sp,sp,4
   122a0:	f800283a 	ret

000122a4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   122a4:	defff304 	addi	sp,sp,-52
   122a8:	dfc00c15 	stw	ra,48(sp)
   122ac:	df000b15 	stw	fp,44(sp)
   122b0:	df000b04 	addi	fp,sp,44
   122b4:	e13ffd15 	stw	r4,-12(fp)
   122b8:	2805883a 	mov	r2,r5
   122bc:	e1bfff15 	stw	r6,-4(fp)
   122c0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   122c4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   122c8:	e0bfff17 	ldw	r2,-4(fp)
   122cc:	1000021e 	bne	r2,zero,122d8 <OSQPend+0x34>
        return ((void *)0);
   122d0:	0005883a 	mov	r2,zero
   122d4:	00009106 	br	1251c <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   122d8:	e0bffd17 	ldw	r2,-12(fp)
   122dc:	1000051e 	bne	r2,zero,122f4 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   122e0:	e0bfff17 	ldw	r2,-4(fp)
   122e4:	00c00104 	movi	r3,4
   122e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   122ec:	0005883a 	mov	r2,zero
   122f0:	00008a06 	br	1251c <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   122f4:	e0bffd17 	ldw	r2,-12(fp)
   122f8:	10800003 	ldbu	r2,0(r2)
   122fc:	10803fcc 	andi	r2,r2,255
   12300:	108000a0 	cmpeqi	r2,r2,2
   12304:	1000051e 	bne	r2,zero,1231c <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12308:	e0bfff17 	ldw	r2,-4(fp)
   1230c:	00c00044 	movi	r3,1
   12310:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12314:	0005883a 	mov	r2,zero
   12318:	00008006 	br	1251c <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1231c:	d0a72e03 	ldbu	r2,-25416(gp)
   12320:	10803fcc 	andi	r2,r2,255
   12324:	10000526 	beq	r2,zero,1233c <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12328:	e0bfff17 	ldw	r2,-4(fp)
   1232c:	00c00084 	movi	r3,2
   12330:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12334:	0005883a 	mov	r2,zero
   12338:	00007806 	br	1251c <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   1233c:	d0a72003 	ldbu	r2,-25472(gp)
   12340:	10803fcc 	andi	r2,r2,255
   12344:	10000526 	beq	r2,zero,1235c <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   12348:	e0bfff17 	ldw	r2,-4(fp)
   1234c:	00c00344 	movi	r3,13
   12350:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12354:	0005883a 	mov	r2,zero
   12358:	00007006 	br	1251c <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1235c:	0005303a 	rdctl	r2,status
   12360:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12364:	e0fffc17 	ldw	r3,-16(fp)
   12368:	00bfff84 	movi	r2,-2
   1236c:	1884703a 	and	r2,r3,r2
   12370:	1001703a 	wrctl	status,r2
  
  return context;
   12374:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12378:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1237c:	e0bffd17 	ldw	r2,-12(fp)
   12380:	10800117 	ldw	r2,4(r2)
   12384:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12388:	e0bff817 	ldw	r2,-32(fp)
   1238c:	1080058b 	ldhu	r2,22(r2)
   12390:	10bfffcc 	andi	r2,r2,65535
   12394:	10001e26 	beq	r2,zero,12410 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12398:	e0bff817 	ldw	r2,-32(fp)
   1239c:	10800417 	ldw	r2,16(r2)
   123a0:	11000104 	addi	r4,r2,4
   123a4:	e0fff817 	ldw	r3,-32(fp)
   123a8:	19000415 	stw	r4,16(r3)
   123ac:	10800017 	ldw	r2,0(r2)
   123b0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   123b4:	e0bff817 	ldw	r2,-32(fp)
   123b8:	1080058b 	ldhu	r2,22(r2)
   123bc:	10bfffc4 	addi	r2,r2,-1
   123c0:	1007883a 	mov	r3,r2
   123c4:	e0bff817 	ldw	r2,-32(fp)
   123c8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   123cc:	e0bff817 	ldw	r2,-32(fp)
   123d0:	10c00417 	ldw	r3,16(r2)
   123d4:	e0bff817 	ldw	r2,-32(fp)
   123d8:	10800217 	ldw	r2,8(r2)
   123dc:	1880041e 	bne	r3,r2,123f0 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   123e0:	e0bff817 	ldw	r2,-32(fp)
   123e4:	10c00117 	ldw	r3,4(r2)
   123e8:	e0bff817 	ldw	r2,-32(fp)
   123ec:	10c00415 	stw	r3,16(r2)
   123f0:	e0bff617 	ldw	r2,-40(fp)
   123f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   123f8:	e0bff717 	ldw	r2,-36(fp)
   123fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12400:	e0bfff17 	ldw	r2,-4(fp)
   12404:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12408:	e0bff517 	ldw	r2,-44(fp)
   1240c:	00004306 	br	1251c <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   12410:	d0a72f17 	ldw	r2,-25412(gp)
   12414:	d0e72f17 	ldw	r3,-25412(gp)
   12418:	18c00c03 	ldbu	r3,48(r3)
   1241c:	18c00114 	ori	r3,r3,4
   12420:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12424:	d0a72f17 	ldw	r2,-25412(gp)
   12428:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   1242c:	d0a72f17 	ldw	r2,-25412(gp)
   12430:	e0fffe0b 	ldhu	r3,-8(fp)
   12434:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   12438:	e13ffd17 	ldw	r4,-12(fp)
   1243c:	000ed000 	call	ed00 <OS_EventTaskWait>
   12440:	e0bff617 	ldw	r2,-40(fp)
   12444:	e0bffb15 	stw	r2,-20(fp)
   12448:	e0bffb17 	ldw	r2,-20(fp)
   1244c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12450:	000f5b40 	call	f5b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12454:	0005303a 	rdctl	r2,status
   12458:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1245c:	e0fff917 	ldw	r3,-28(fp)
   12460:	00bfff84 	movi	r2,-2
   12464:	1884703a 	and	r2,r3,r2
   12468:	1001703a 	wrctl	status,r2
  
  return context;
   1246c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12470:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12474:	d0a72f17 	ldw	r2,-25412(gp)
   12478:	10800c43 	ldbu	r2,49(r2)
   1247c:	10803fcc 	andi	r2,r2,255
   12480:	10000326 	beq	r2,zero,12490 <OSQPend+0x1ec>
   12484:	108000a0 	cmpeqi	r2,r2,2
   12488:	1000071e 	bne	r2,zero,124a8 <OSQPend+0x204>
   1248c:	00000b06 	br	124bc <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12490:	d0a72f17 	ldw	r2,-25412(gp)
   12494:	10800917 	ldw	r2,36(r2)
   12498:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1249c:	e0bfff17 	ldw	r2,-4(fp)
   124a0:	10000005 	stb	zero,0(r2)
             break;
   124a4:	00000e06 	br	124e0 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   124a8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   124ac:	e0bfff17 	ldw	r2,-4(fp)
   124b0:	00c00384 	movi	r3,14
   124b4:	10c00005 	stb	r3,0(r2)
             break;
   124b8:	00000906 	br	124e0 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   124bc:	d0a72f17 	ldw	r2,-25412(gp)
   124c0:	e17ffd17 	ldw	r5,-12(fp)
   124c4:	1009883a 	mov	r4,r2
   124c8:	000ef600 	call	ef60 <OS_EventTaskRemove>
             pmsg = (void *)0;
   124cc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   124d0:	e0bfff17 	ldw	r2,-4(fp)
   124d4:	00c00284 	movi	r3,10
   124d8:	10c00005 	stb	r3,0(r2)
             break;
   124dc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   124e0:	d0a72f17 	ldw	r2,-25412(gp)
   124e4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   124e8:	d0a72f17 	ldw	r2,-25412(gp)
   124ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   124f0:	d0a72f17 	ldw	r2,-25412(gp)
   124f4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   124f8:	d0a72f17 	ldw	r2,-25412(gp)
   124fc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   12500:	d0a72f17 	ldw	r2,-25412(gp)
   12504:	10000915 	stw	zero,36(r2)
   12508:	e0bff617 	ldw	r2,-40(fp)
   1250c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12510:	e0bffa17 	ldw	r2,-24(fp)
   12514:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   12518:	e0bff517 	ldw	r2,-44(fp)
}
   1251c:	e037883a 	mov	sp,fp
   12520:	dfc00117 	ldw	ra,4(sp)
   12524:	df000017 	ldw	fp,0(sp)
   12528:	dec00204 	addi	sp,sp,8
   1252c:	f800283a 	ret

00012530 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12530:	defff604 	addi	sp,sp,-40
   12534:	dfc00915 	stw	ra,36(sp)
   12538:	df000815 	stw	fp,32(sp)
   1253c:	df000804 	addi	fp,sp,32
   12540:	e13ffd15 	stw	r4,-12(fp)
   12544:	2805883a 	mov	r2,r5
   12548:	e1bfff15 	stw	r6,-4(fp)
   1254c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12550:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12554:	e0bfff17 	ldw	r2,-4(fp)
   12558:	1000021e 	bne	r2,zero,12564 <OSQPendAbort+0x34>
        return (0);
   1255c:	0005883a 	mov	r2,zero
   12560:	00004906 	br	12688 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12564:	e0bffd17 	ldw	r2,-12(fp)
   12568:	1000051e 	bne	r2,zero,12580 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1256c:	e0bfff17 	ldw	r2,-4(fp)
   12570:	00c00104 	movi	r3,4
   12574:	10c00005 	stb	r3,0(r2)
        return (0);
   12578:	0005883a 	mov	r2,zero
   1257c:	00004206 	br	12688 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12580:	e0bffd17 	ldw	r2,-12(fp)
   12584:	10800003 	ldbu	r2,0(r2)
   12588:	10803fcc 	andi	r2,r2,255
   1258c:	108000a0 	cmpeqi	r2,r2,2
   12590:	1000051e 	bne	r2,zero,125a8 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12594:	e0bfff17 	ldw	r2,-4(fp)
   12598:	00c00044 	movi	r3,1
   1259c:	10c00005 	stb	r3,0(r2)
        return (0);
   125a0:	0005883a 	mov	r2,zero
   125a4:	00003806 	br	12688 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   125a8:	0005303a 	rdctl	r2,status
   125ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   125b0:	e0fffc17 	ldw	r3,-16(fp)
   125b4:	00bfff84 	movi	r2,-2
   125b8:	1884703a 	and	r2,r3,r2
   125bc:	1001703a 	wrctl	status,r2
  
  return context;
   125c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   125c4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   125c8:	e0bffd17 	ldw	r2,-12(fp)
   125cc:	10800283 	ldbu	r2,10(r2)
   125d0:	10803fcc 	andi	r2,r2,255
   125d4:	10002526 	beq	r2,zero,1266c <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   125d8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   125dc:	e0bffe03 	ldbu	r2,-8(fp)
   125e0:	10800060 	cmpeqi	r2,r2,1
   125e4:	10000e26 	beq	r2,zero,12620 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   125e8:	00000806 	br	1260c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   125ec:	01c00084 	movi	r7,2
   125f0:	01800104 	movi	r6,4
   125f4:	000b883a 	mov	r5,zero
   125f8:	e13ffd17 	ldw	r4,-12(fp)
   125fc:	000eb680 	call	eb68 <OS_EventTaskRdy>
                     nbr_tasks++;
   12600:	e0bff803 	ldbu	r2,-32(fp)
   12604:	10800044 	addi	r2,r2,1
   12608:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1260c:	e0bffd17 	ldw	r2,-12(fp)
   12610:	10800283 	ldbu	r2,10(r2)
   12614:	10803fcc 	andi	r2,r2,255
   12618:	103ff41e 	bne	r2,zero,125ec <_gp+0xfffd3ce4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1261c:	00000906 	br	12644 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   12620:	01c00084 	movi	r7,2
   12624:	01800104 	movi	r6,4
   12628:	000b883a 	mov	r5,zero
   1262c:	e13ffd17 	ldw	r4,-12(fp)
   12630:	000eb680 	call	eb68 <OS_EventTaskRdy>
                 nbr_tasks++;
   12634:	e0bff803 	ldbu	r2,-32(fp)
   12638:	10800044 	addi	r2,r2,1
   1263c:	e0bff805 	stb	r2,-32(fp)
                 break;
   12640:	0001883a 	nop
   12644:	e0bff917 	ldw	r2,-28(fp)
   12648:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1264c:	e0bffa17 	ldw	r2,-24(fp)
   12650:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   12654:	000f5b40 	call	f5b4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   12658:	e0bfff17 	ldw	r2,-4(fp)
   1265c:	00c00384 	movi	r3,14
   12660:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   12664:	e0bff803 	ldbu	r2,-32(fp)
   12668:	00000706 	br	12688 <OSQPendAbort+0x158>
   1266c:	e0bff917 	ldw	r2,-28(fp)
   12670:	e0bffb15 	stw	r2,-20(fp)
   12674:	e0bffb17 	ldw	r2,-20(fp)
   12678:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1267c:	e0bfff17 	ldw	r2,-4(fp)
   12680:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   12684:	0005883a 	mov	r2,zero
}
   12688:	e037883a 	mov	sp,fp
   1268c:	dfc00117 	ldw	ra,4(sp)
   12690:	df000017 	ldw	fp,0(sp)
   12694:	dec00204 	addi	sp,sp,8
   12698:	f800283a 	ret

0001269c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1269c:	defff604 	addi	sp,sp,-40
   126a0:	dfc00915 	stw	ra,36(sp)
   126a4:	df000815 	stw	fp,32(sp)
   126a8:	df000804 	addi	fp,sp,32
   126ac:	e13ffe15 	stw	r4,-8(fp)
   126b0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   126b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   126b8:	e0bffe17 	ldw	r2,-8(fp)
   126bc:	1000021e 	bne	r2,zero,126c8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   126c0:	00800104 	movi	r2,4
   126c4:	00004a06 	br	127f0 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   126c8:	e0bffe17 	ldw	r2,-8(fp)
   126cc:	10800003 	ldbu	r2,0(r2)
   126d0:	10803fcc 	andi	r2,r2,255
   126d4:	108000a0 	cmpeqi	r2,r2,2
   126d8:	1000021e 	bne	r2,zero,126e4 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   126dc:	00800044 	movi	r2,1
   126e0:	00004306 	br	127f0 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   126e4:	0005303a 	rdctl	r2,status
   126e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   126ec:	e0fffd17 	ldw	r3,-12(fp)
   126f0:	00bfff84 	movi	r2,-2
   126f4:	1884703a 	and	r2,r3,r2
   126f8:	1001703a 	wrctl	status,r2
  
  return context;
   126fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12700:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   12704:	e0bffe17 	ldw	r2,-8(fp)
   12708:	10800283 	ldbu	r2,10(r2)
   1270c:	10803fcc 	andi	r2,r2,255
   12710:	10000c26 	beq	r2,zero,12744 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12714:	000f883a 	mov	r7,zero
   12718:	01800104 	movi	r6,4
   1271c:	e17fff17 	ldw	r5,-4(fp)
   12720:	e13ffe17 	ldw	r4,-8(fp)
   12724:	000eb680 	call	eb68 <OS_EventTaskRdy>
   12728:	e0bff817 	ldw	r2,-32(fp)
   1272c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12730:	e0bff917 	ldw	r2,-28(fp)
   12734:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   12738:	000f5b40 	call	f5b4 <OS_Sched>
        return (OS_ERR_NONE);
   1273c:	0005883a 	mov	r2,zero
   12740:	00002b06 	br	127f0 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   12744:	e0bffe17 	ldw	r2,-8(fp)
   12748:	10800117 	ldw	r2,4(r2)
   1274c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   12750:	e0bffb17 	ldw	r2,-20(fp)
   12754:	10c0058b 	ldhu	r3,22(r2)
   12758:	e0bffb17 	ldw	r2,-20(fp)
   1275c:	1080050b 	ldhu	r2,20(r2)
   12760:	18ffffcc 	andi	r3,r3,65535
   12764:	10bfffcc 	andi	r2,r2,65535
   12768:	18800636 	bltu	r3,r2,12784 <OSQPost+0xe8>
   1276c:	e0bff817 	ldw	r2,-32(fp)
   12770:	e0bffa15 	stw	r2,-24(fp)
   12774:	e0bffa17 	ldw	r2,-24(fp)
   12778:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1277c:	00800784 	movi	r2,30
   12780:	00001b06 	br	127f0 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   12784:	e0bffb17 	ldw	r2,-20(fp)
   12788:	10800317 	ldw	r2,12(r2)
   1278c:	11000104 	addi	r4,r2,4
   12790:	e0fffb17 	ldw	r3,-20(fp)
   12794:	19000315 	stw	r4,12(r3)
   12798:	e0ffff17 	ldw	r3,-4(fp)
   1279c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   127a0:	e0bffb17 	ldw	r2,-20(fp)
   127a4:	1080058b 	ldhu	r2,22(r2)
   127a8:	10800044 	addi	r2,r2,1
   127ac:	1007883a 	mov	r3,r2
   127b0:	e0bffb17 	ldw	r2,-20(fp)
   127b4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   127b8:	e0bffb17 	ldw	r2,-20(fp)
   127bc:	10c00317 	ldw	r3,12(r2)
   127c0:	e0bffb17 	ldw	r2,-20(fp)
   127c4:	10800217 	ldw	r2,8(r2)
   127c8:	1880041e 	bne	r3,r2,127dc <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   127cc:	e0bffb17 	ldw	r2,-20(fp)
   127d0:	10c00117 	ldw	r3,4(r2)
   127d4:	e0bffb17 	ldw	r2,-20(fp)
   127d8:	10c00315 	stw	r3,12(r2)
   127dc:	e0bff817 	ldw	r2,-32(fp)
   127e0:	e0bffc15 	stw	r2,-16(fp)
   127e4:	e0bffc17 	ldw	r2,-16(fp)
   127e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   127ec:	0005883a 	mov	r2,zero
}
   127f0:	e037883a 	mov	sp,fp
   127f4:	dfc00117 	ldw	ra,4(sp)
   127f8:	df000017 	ldw	fp,0(sp)
   127fc:	dec00204 	addi	sp,sp,8
   12800:	f800283a 	ret

00012804 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   12804:	defff604 	addi	sp,sp,-40
   12808:	dfc00915 	stw	ra,36(sp)
   1280c:	df000815 	stw	fp,32(sp)
   12810:	df000804 	addi	fp,sp,32
   12814:	e13ffe15 	stw	r4,-8(fp)
   12818:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1281c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12820:	e0bffe17 	ldw	r2,-8(fp)
   12824:	1000021e 	bne	r2,zero,12830 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   12828:	00800104 	movi	r2,4
   1282c:	00004c06 	br	12960 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12830:	e0bffe17 	ldw	r2,-8(fp)
   12834:	10800003 	ldbu	r2,0(r2)
   12838:	10803fcc 	andi	r2,r2,255
   1283c:	108000a0 	cmpeqi	r2,r2,2
   12840:	1000021e 	bne	r2,zero,1284c <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   12844:	00800044 	movi	r2,1
   12848:	00004506 	br	12960 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1284c:	0005303a 	rdctl	r2,status
   12850:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12854:	e0fffd17 	ldw	r3,-12(fp)
   12858:	00bfff84 	movi	r2,-2
   1285c:	1884703a 	and	r2,r3,r2
   12860:	1001703a 	wrctl	status,r2
  
  return context;
   12864:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12868:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1286c:	e0bffe17 	ldw	r2,-8(fp)
   12870:	10800283 	ldbu	r2,10(r2)
   12874:	10803fcc 	andi	r2,r2,255
   12878:	10000c26 	beq	r2,zero,128ac <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1287c:	000f883a 	mov	r7,zero
   12880:	01800104 	movi	r6,4
   12884:	e17fff17 	ldw	r5,-4(fp)
   12888:	e13ffe17 	ldw	r4,-8(fp)
   1288c:	000eb680 	call	eb68 <OS_EventTaskRdy>
   12890:	e0bff817 	ldw	r2,-32(fp)
   12894:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12898:	e0bff917 	ldw	r2,-28(fp)
   1289c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   128a0:	000f5b40 	call	f5b4 <OS_Sched>
        return (OS_ERR_NONE);
   128a4:	0005883a 	mov	r2,zero
   128a8:	00002d06 	br	12960 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   128ac:	e0bffe17 	ldw	r2,-8(fp)
   128b0:	10800117 	ldw	r2,4(r2)
   128b4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   128b8:	e0bffb17 	ldw	r2,-20(fp)
   128bc:	10c0058b 	ldhu	r3,22(r2)
   128c0:	e0bffb17 	ldw	r2,-20(fp)
   128c4:	1080050b 	ldhu	r2,20(r2)
   128c8:	18ffffcc 	andi	r3,r3,65535
   128cc:	10bfffcc 	andi	r2,r2,65535
   128d0:	18800636 	bltu	r3,r2,128ec <OSQPostFront+0xe8>
   128d4:	e0bff817 	ldw	r2,-32(fp)
   128d8:	e0bffa15 	stw	r2,-24(fp)
   128dc:	e0bffa17 	ldw	r2,-24(fp)
   128e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   128e4:	00800784 	movi	r2,30
   128e8:	00001d06 	br	12960 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   128ec:	e0bffb17 	ldw	r2,-20(fp)
   128f0:	10c00417 	ldw	r3,16(r2)
   128f4:	e0bffb17 	ldw	r2,-20(fp)
   128f8:	10800117 	ldw	r2,4(r2)
   128fc:	1880041e 	bne	r3,r2,12910 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   12900:	e0bffb17 	ldw	r2,-20(fp)
   12904:	10c00217 	ldw	r3,8(r2)
   12908:	e0bffb17 	ldw	r2,-20(fp)
   1290c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   12910:	e0bffb17 	ldw	r2,-20(fp)
   12914:	10800417 	ldw	r2,16(r2)
   12918:	10ffff04 	addi	r3,r2,-4
   1291c:	e0bffb17 	ldw	r2,-20(fp)
   12920:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   12924:	e0bffb17 	ldw	r2,-20(fp)
   12928:	10800417 	ldw	r2,16(r2)
   1292c:	e0ffff17 	ldw	r3,-4(fp)
   12930:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12934:	e0bffb17 	ldw	r2,-20(fp)
   12938:	1080058b 	ldhu	r2,22(r2)
   1293c:	10800044 	addi	r2,r2,1
   12940:	1007883a 	mov	r3,r2
   12944:	e0bffb17 	ldw	r2,-20(fp)
   12948:	10c0058d 	sth	r3,22(r2)
   1294c:	e0bff817 	ldw	r2,-32(fp)
   12950:	e0bffc15 	stw	r2,-16(fp)
   12954:	e0bffc17 	ldw	r2,-16(fp)
   12958:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1295c:	0005883a 	mov	r2,zero
}
   12960:	e037883a 	mov	sp,fp
   12964:	dfc00117 	ldw	ra,4(sp)
   12968:	df000017 	ldw	fp,0(sp)
   1296c:	dec00204 	addi	sp,sp,8
   12970:	f800283a 	ret

00012974 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   12974:	defff504 	addi	sp,sp,-44
   12978:	dfc00a15 	stw	ra,40(sp)
   1297c:	df000915 	stw	fp,36(sp)
   12980:	df000904 	addi	fp,sp,36
   12984:	e13ffd15 	stw	r4,-12(fp)
   12988:	e17ffe15 	stw	r5,-8(fp)
   1298c:	3005883a 	mov	r2,r6
   12990:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12994:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12998:	e0bffd17 	ldw	r2,-12(fp)
   1299c:	1000021e 	bne	r2,zero,129a8 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   129a0:	00800104 	movi	r2,4
   129a4:	00007106 	br	12b6c <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   129a8:	e0bffd17 	ldw	r2,-12(fp)
   129ac:	10800003 	ldbu	r2,0(r2)
   129b0:	10803fcc 	andi	r2,r2,255
   129b4:	108000a0 	cmpeqi	r2,r2,2
   129b8:	1000021e 	bne	r2,zero,129c4 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   129bc:	00800044 	movi	r2,1
   129c0:	00006a06 	br	12b6c <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   129c4:	0005303a 	rdctl	r2,status
   129c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   129cc:	e0fffc17 	ldw	r3,-16(fp)
   129d0:	00bfff84 	movi	r2,-2
   129d4:	1884703a 	and	r2,r3,r2
   129d8:	1001703a 	wrctl	status,r2
  
  return context;
   129dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   129e0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   129e4:	e0bffd17 	ldw	r2,-12(fp)
   129e8:	10800283 	ldbu	r2,10(r2)
   129ec:	10803fcc 	andi	r2,r2,255
   129f0:	10001d26 	beq	r2,zero,12a68 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   129f4:	e0bfff03 	ldbu	r2,-4(fp)
   129f8:	1080004c 	andi	r2,r2,1
   129fc:	10000b26 	beq	r2,zero,12a2c <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12a00:	00000506 	br	12a18 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12a04:	000f883a 	mov	r7,zero
   12a08:	01800104 	movi	r6,4
   12a0c:	e17ffe17 	ldw	r5,-8(fp)
   12a10:	e13ffd17 	ldw	r4,-12(fp)
   12a14:	000eb680 	call	eb68 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   12a18:	e0bffd17 	ldw	r2,-12(fp)
   12a1c:	10800283 	ldbu	r2,10(r2)
   12a20:	10803fcc 	andi	r2,r2,255
   12a24:	103ff71e 	bne	r2,zero,12a04 <_gp+0xfffd40fc>
   12a28:	00000506 	br	12a40 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   12a2c:	000f883a 	mov	r7,zero
   12a30:	01800104 	movi	r6,4
   12a34:	e17ffe17 	ldw	r5,-8(fp)
   12a38:	e13ffd17 	ldw	r4,-12(fp)
   12a3c:	000eb680 	call	eb68 <OS_EventTaskRdy>
   12a40:	e0bff717 	ldw	r2,-36(fp)
   12a44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12a48:	e0bff817 	ldw	r2,-32(fp)
   12a4c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   12a50:	e0bfff03 	ldbu	r2,-4(fp)
   12a54:	1080010c 	andi	r2,r2,4
   12a58:	1000011e 	bne	r2,zero,12a60 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   12a5c:	000f5b40 	call	f5b4 <OS_Sched>
        }
        return (OS_ERR_NONE);
   12a60:	0005883a 	mov	r2,zero
   12a64:	00004106 	br	12b6c <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   12a68:	e0bffd17 	ldw	r2,-12(fp)
   12a6c:	10800117 	ldw	r2,4(r2)
   12a70:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   12a74:	e0bffa17 	ldw	r2,-24(fp)
   12a78:	10c0058b 	ldhu	r3,22(r2)
   12a7c:	e0bffa17 	ldw	r2,-24(fp)
   12a80:	1080050b 	ldhu	r2,20(r2)
   12a84:	18ffffcc 	andi	r3,r3,65535
   12a88:	10bfffcc 	andi	r2,r2,65535
   12a8c:	18800636 	bltu	r3,r2,12aa8 <OSQPostOpt+0x134>
   12a90:	e0bff717 	ldw	r2,-36(fp)
   12a94:	e0bff915 	stw	r2,-28(fp)
   12a98:	e0bff917 	ldw	r2,-28(fp)
   12a9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   12aa0:	00800784 	movi	r2,30
   12aa4:	00003106 	br	12b6c <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   12aa8:	e0bfff03 	ldbu	r2,-4(fp)
   12aac:	1080008c 	andi	r2,r2,2
   12ab0:	10001326 	beq	r2,zero,12b00 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   12ab4:	e0bffa17 	ldw	r2,-24(fp)
   12ab8:	10c00417 	ldw	r3,16(r2)
   12abc:	e0bffa17 	ldw	r2,-24(fp)
   12ac0:	10800117 	ldw	r2,4(r2)
   12ac4:	1880041e 	bne	r3,r2,12ad8 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   12ac8:	e0bffa17 	ldw	r2,-24(fp)
   12acc:	10c00217 	ldw	r3,8(r2)
   12ad0:	e0bffa17 	ldw	r2,-24(fp)
   12ad4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   12ad8:	e0bffa17 	ldw	r2,-24(fp)
   12adc:	10800417 	ldw	r2,16(r2)
   12ae0:	10ffff04 	addi	r3,r2,-4
   12ae4:	e0bffa17 	ldw	r2,-24(fp)
   12ae8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   12aec:	e0bffa17 	ldw	r2,-24(fp)
   12af0:	10800417 	ldw	r2,16(r2)
   12af4:	e0fffe17 	ldw	r3,-8(fp)
   12af8:	10c00015 	stw	r3,0(r2)
   12afc:	00001006 	br	12b40 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   12b00:	e0bffa17 	ldw	r2,-24(fp)
   12b04:	10800317 	ldw	r2,12(r2)
   12b08:	11000104 	addi	r4,r2,4
   12b0c:	e0fffa17 	ldw	r3,-24(fp)
   12b10:	19000315 	stw	r4,12(r3)
   12b14:	e0fffe17 	ldw	r3,-8(fp)
   12b18:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   12b1c:	e0bffa17 	ldw	r2,-24(fp)
   12b20:	10c00317 	ldw	r3,12(r2)
   12b24:	e0bffa17 	ldw	r2,-24(fp)
   12b28:	10800217 	ldw	r2,8(r2)
   12b2c:	1880041e 	bne	r3,r2,12b40 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   12b30:	e0bffa17 	ldw	r2,-24(fp)
   12b34:	10c00117 	ldw	r3,4(r2)
   12b38:	e0bffa17 	ldw	r2,-24(fp)
   12b3c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   12b40:	e0bffa17 	ldw	r2,-24(fp)
   12b44:	1080058b 	ldhu	r2,22(r2)
   12b48:	10800044 	addi	r2,r2,1
   12b4c:	1007883a 	mov	r3,r2
   12b50:	e0bffa17 	ldw	r2,-24(fp)
   12b54:	10c0058d 	sth	r3,22(r2)
   12b58:	e0bff717 	ldw	r2,-36(fp)
   12b5c:	e0bffb15 	stw	r2,-20(fp)
   12b60:	e0bffb17 	ldw	r2,-20(fp)
   12b64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12b68:	0005883a 	mov	r2,zero
}
   12b6c:	e037883a 	mov	sp,fp
   12b70:	dfc00117 	ldw	ra,4(sp)
   12b74:	df000017 	ldw	fp,0(sp)
   12b78:	dec00204 	addi	sp,sp,8
   12b7c:	f800283a 	ret

00012b80 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   12b80:	defff604 	addi	sp,sp,-40
   12b84:	df000915 	stw	fp,36(sp)
   12b88:	df000904 	addi	fp,sp,36
   12b8c:	e13ffe15 	stw	r4,-8(fp)
   12b90:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12b94:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   12b98:	e0bffe17 	ldw	r2,-8(fp)
   12b9c:	1000021e 	bne	r2,zero,12ba8 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   12ba0:	00800104 	movi	r2,4
   12ba4:	00004906 	br	12ccc <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   12ba8:	e0bfff17 	ldw	r2,-4(fp)
   12bac:	1000021e 	bne	r2,zero,12bb8 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   12bb0:	00800244 	movi	r2,9
   12bb4:	00004506 	br	12ccc <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   12bb8:	e0bffe17 	ldw	r2,-8(fp)
   12bbc:	10800003 	ldbu	r2,0(r2)
   12bc0:	10803fcc 	andi	r2,r2,255
   12bc4:	108000a0 	cmpeqi	r2,r2,2
   12bc8:	1000021e 	bne	r2,zero,12bd4 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   12bcc:	00800044 	movi	r2,1
   12bd0:	00003e06 	br	12ccc <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12bd4:	0005303a 	rdctl	r2,status
   12bd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bdc:	e0fffd17 	ldw	r3,-12(fp)
   12be0:	00bfff84 	movi	r2,-2
   12be4:	1884703a 	and	r2,r3,r2
   12be8:	1001703a 	wrctl	status,r2
  
  return context;
   12bec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12bf0:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   12bf4:	e0bffe17 	ldw	r2,-8(fp)
   12bf8:	10c00283 	ldbu	r3,10(r2)
   12bfc:	e0bfff17 	ldw	r2,-4(fp)
   12c00:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   12c04:	e0bffe17 	ldw	r2,-8(fp)
   12c08:	108002c4 	addi	r2,r2,11
   12c0c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   12c10:	e0bfff17 	ldw	r2,-4(fp)
   12c14:	10800204 	addi	r2,r2,8
   12c18:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12c1c:	e03ff705 	stb	zero,-36(fp)
   12c20:	00000b06 	br	12c50 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   12c24:	e0bff917 	ldw	r2,-28(fp)
   12c28:	10c00044 	addi	r3,r2,1
   12c2c:	e0fff915 	stw	r3,-28(fp)
   12c30:	e0fff817 	ldw	r3,-32(fp)
   12c34:	19000044 	addi	r4,r3,1
   12c38:	e13ff815 	stw	r4,-32(fp)
   12c3c:	18c00003 	ldbu	r3,0(r3)
   12c40:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12c44:	e0bff703 	ldbu	r2,-36(fp)
   12c48:	10800044 	addi	r2,r2,1
   12c4c:	e0bff705 	stb	r2,-36(fp)
   12c50:	e0bff703 	ldbu	r2,-36(fp)
   12c54:	108000f0 	cmpltui	r2,r2,3
   12c58:	103ff21e 	bne	r2,zero,12c24 <_gp+0xfffd431c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   12c5c:	e0bffe17 	ldw	r2,-8(fp)
   12c60:	10800117 	ldw	r2,4(r2)
   12c64:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   12c68:	e0bffc17 	ldw	r2,-16(fp)
   12c6c:	1080058b 	ldhu	r2,22(r2)
   12c70:	10bfffcc 	andi	r2,r2,65535
   12c74:	10000626 	beq	r2,zero,12c90 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   12c78:	e0bffc17 	ldw	r2,-16(fp)
   12c7c:	10800417 	ldw	r2,16(r2)
   12c80:	10c00017 	ldw	r3,0(r2)
   12c84:	e0bfff17 	ldw	r2,-4(fp)
   12c88:	10c00015 	stw	r3,0(r2)
   12c8c:	00000206 	br	12c98 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   12c90:	e0bfff17 	ldw	r2,-4(fp)
   12c94:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   12c98:	e0bffc17 	ldw	r2,-16(fp)
   12c9c:	10c0058b 	ldhu	r3,22(r2)
   12ca0:	e0bfff17 	ldw	r2,-4(fp)
   12ca4:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   12ca8:	e0bffc17 	ldw	r2,-16(fp)
   12cac:	10c0050b 	ldhu	r3,20(r2)
   12cb0:	e0bfff17 	ldw	r2,-4(fp)
   12cb4:	10c0018d 	sth	r3,6(r2)
   12cb8:	e0bffa17 	ldw	r2,-24(fp)
   12cbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12cc0:	e0bffb17 	ldw	r2,-20(fp)
   12cc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12cc8:	0005883a 	mov	r2,zero
}
   12ccc:	e037883a 	mov	sp,fp
   12cd0:	df000017 	ldw	fp,0(sp)
   12cd4:	dec00104 	addi	sp,sp,4
   12cd8:	f800283a 	ret

00012cdc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   12cdc:	defffb04 	addi	sp,sp,-20
   12ce0:	dfc00415 	stw	ra,16(sp)
   12ce4:	df000315 	stw	fp,12(sp)
   12ce8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   12cec:	01407804 	movi	r5,480
   12cf0:	01000134 	movhi	r4,4
   12cf4:	212bab04 	addi	r4,r4,-20820
   12cf8:	000f4f80 	call	f4f8 <OS_MemClr>
    pq1 = &OSQTbl[0];
   12cfc:	00800134 	movhi	r2,4
   12d00:	10abab04 	addi	r2,r2,-20820
   12d04:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   12d08:	00800134 	movhi	r2,4
   12d0c:	10abb104 	addi	r2,r2,-20796
   12d10:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12d14:	e03ffd0d 	sth	zero,-12(fp)
   12d18:	00000c06 	br	12d4c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   12d1c:	e0bffe17 	ldw	r2,-8(fp)
   12d20:	e0ffff17 	ldw	r3,-4(fp)
   12d24:	10c00015 	stw	r3,0(r2)
        pq1++;
   12d28:	e0bffe17 	ldw	r2,-8(fp)
   12d2c:	10800604 	addi	r2,r2,24
   12d30:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   12d34:	e0bfff17 	ldw	r2,-4(fp)
   12d38:	10800604 	addi	r2,r2,24
   12d3c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   12d40:	e0bffd0b 	ldhu	r2,-12(fp)
   12d44:	10800044 	addi	r2,r2,1
   12d48:	e0bffd0d 	sth	r2,-12(fp)
   12d4c:	e0bffd0b 	ldhu	r2,-12(fp)
   12d50:	108004f0 	cmpltui	r2,r2,19
   12d54:	103ff11e 	bne	r2,zero,12d1c <_gp+0xfffd4414>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   12d58:	e0bffe17 	ldw	r2,-8(fp)
   12d5c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   12d60:	00800134 	movhi	r2,4
   12d64:	10abab04 	addi	r2,r2,-20820
   12d68:	d0a72b15 	stw	r2,-25428(gp)
#endif
}
   12d6c:	0001883a 	nop
   12d70:	e037883a 	mov	sp,fp
   12d74:	dfc00117 	ldw	ra,4(sp)
   12d78:	df000017 	ldw	fp,0(sp)
   12d7c:	dec00204 	addi	sp,sp,8
   12d80:	f800283a 	ret

00012d84 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   12d84:	defffa04 	addi	sp,sp,-24
   12d88:	df000515 	stw	fp,20(sp)
   12d8c:	df000504 	addi	fp,sp,20
   12d90:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12d94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12d98:	e0bfff17 	ldw	r2,-4(fp)
   12d9c:	1000021e 	bne	r2,zero,12da8 <OSSemAccept+0x24>
        return (0);
   12da0:	0005883a 	mov	r2,zero
   12da4:	00001f06 	br	12e24 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   12da8:	e0bfff17 	ldw	r2,-4(fp)
   12dac:	10800003 	ldbu	r2,0(r2)
   12db0:	10803fcc 	andi	r2,r2,255
   12db4:	108000e0 	cmpeqi	r2,r2,3
   12db8:	1000021e 	bne	r2,zero,12dc4 <OSSemAccept+0x40>
        return (0);
   12dbc:	0005883a 	mov	r2,zero
   12dc0:	00001806 	br	12e24 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12dc4:	0005303a 	rdctl	r2,status
   12dc8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12dcc:	e0fffe17 	ldw	r3,-8(fp)
   12dd0:	00bfff84 	movi	r2,-2
   12dd4:	1884703a 	and	r2,r3,r2
   12dd8:	1001703a 	wrctl	status,r2
  
  return context;
   12ddc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   12de0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   12de4:	e0bfff17 	ldw	r2,-4(fp)
   12de8:	1080020b 	ldhu	r2,8(r2)
   12dec:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   12df0:	e0bffd0b 	ldhu	r2,-12(fp)
   12df4:	10000626 	beq	r2,zero,12e10 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   12df8:	e0bfff17 	ldw	r2,-4(fp)
   12dfc:	1080020b 	ldhu	r2,8(r2)
   12e00:	10bfffc4 	addi	r2,r2,-1
   12e04:	1007883a 	mov	r3,r2
   12e08:	e0bfff17 	ldw	r2,-4(fp)
   12e0c:	10c0020d 	sth	r3,8(r2)
   12e10:	e0bffb17 	ldw	r2,-20(fp)
   12e14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e18:	e0bffc17 	ldw	r2,-16(fp)
   12e1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   12e20:	e0bffd0b 	ldhu	r2,-12(fp)
}
   12e24:	e037883a 	mov	sp,fp
   12e28:	df000017 	ldw	fp,0(sp)
   12e2c:	dec00104 	addi	sp,sp,4
   12e30:	f800283a 	ret

00012e34 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   12e34:	defff904 	addi	sp,sp,-28
   12e38:	dfc00615 	stw	ra,24(sp)
   12e3c:	df000515 	stw	fp,20(sp)
   12e40:	df000504 	addi	fp,sp,20
   12e44:	2005883a 	mov	r2,r4
   12e48:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12e4c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12e50:	d0a72e03 	ldbu	r2,-25416(gp)
   12e54:	10803fcc 	andi	r2,r2,255
   12e58:	10000226 	beq	r2,zero,12e64 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   12e5c:	0005883a 	mov	r2,zero
   12e60:	00002506 	br	12ef8 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e64:	0005303a 	rdctl	r2,status
   12e68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e6c:	e0fffe17 	ldw	r3,-8(fp)
   12e70:	00bfff84 	movi	r2,-2
   12e74:	1884703a 	and	r2,r3,r2
   12e78:	1001703a 	wrctl	status,r2
  
  return context;
   12e7c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   12e80:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   12e84:	d0a72d17 	ldw	r2,-25420(gp)
   12e88:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   12e8c:	d0a72d17 	ldw	r2,-25420(gp)
   12e90:	10000326 	beq	r2,zero,12ea0 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   12e94:	d0a72d17 	ldw	r2,-25420(gp)
   12e98:	10800117 	ldw	r2,4(r2)
   12e9c:	d0a72d15 	stw	r2,-25420(gp)
   12ea0:	e0bffb17 	ldw	r2,-20(fp)
   12ea4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ea8:	e0bffc17 	ldw	r2,-16(fp)
   12eac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   12eb0:	e0bffd17 	ldw	r2,-12(fp)
   12eb4:	10000f26 	beq	r2,zero,12ef4 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   12eb8:	e0bffd17 	ldw	r2,-12(fp)
   12ebc:	00c000c4 	movi	r3,3
   12ec0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   12ec4:	e0bffd17 	ldw	r2,-12(fp)
   12ec8:	e0ffff0b 	ldhu	r3,-4(fp)
   12ecc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   12ed0:	e0bffd17 	ldw	r2,-12(fp)
   12ed4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   12ed8:	e0bffd17 	ldw	r2,-12(fp)
   12edc:	00c00fc4 	movi	r3,63
   12ee0:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   12ee4:	e0bffd17 	ldw	r2,-12(fp)
   12ee8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   12eec:	e13ffd17 	ldw	r4,-12(fp)
   12ef0:	000f1180 	call	f118 <OS_EventWaitListInit>
    }
    return (pevent);
   12ef4:	e0bffd17 	ldw	r2,-12(fp)
}
   12ef8:	e037883a 	mov	sp,fp
   12efc:	dfc00117 	ldw	ra,4(sp)
   12f00:	df000017 	ldw	fp,0(sp)
   12f04:	dec00204 	addi	sp,sp,8
   12f08:	f800283a 	ret

00012f0c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12f0c:	defff304 	addi	sp,sp,-52
   12f10:	dfc00c15 	stw	ra,48(sp)
   12f14:	df000b15 	stw	fp,44(sp)
   12f18:	df000b04 	addi	fp,sp,44
   12f1c:	e13ffd15 	stw	r4,-12(fp)
   12f20:	2805883a 	mov	r2,r5
   12f24:	e1bfff15 	stw	r6,-4(fp)
   12f28:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12f2c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12f30:	e0bfff17 	ldw	r2,-4(fp)
   12f34:	1000021e 	bne	r2,zero,12f40 <OSSemDel+0x34>
        return (pevent);
   12f38:	e0bffd17 	ldw	r2,-12(fp)
   12f3c:	00007e06 	br	13138 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12f40:	e0bffd17 	ldw	r2,-12(fp)
   12f44:	1000051e 	bne	r2,zero,12f5c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12f48:	e0bfff17 	ldw	r2,-4(fp)
   12f4c:	00c00104 	movi	r3,4
   12f50:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12f54:	e0bffd17 	ldw	r2,-12(fp)
   12f58:	00007706 	br	13138 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   12f5c:	e0bffd17 	ldw	r2,-12(fp)
   12f60:	10800003 	ldbu	r2,0(r2)
   12f64:	10803fcc 	andi	r2,r2,255
   12f68:	108000e0 	cmpeqi	r2,r2,3
   12f6c:	1000051e 	bne	r2,zero,12f84 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12f70:	e0bfff17 	ldw	r2,-4(fp)
   12f74:	00c00044 	movi	r3,1
   12f78:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12f7c:	e0bffd17 	ldw	r2,-12(fp)
   12f80:	00006d06 	br	13138 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12f84:	d0a72e03 	ldbu	r2,-25416(gp)
   12f88:	10803fcc 	andi	r2,r2,255
   12f8c:	10000526 	beq	r2,zero,12fa4 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   12f90:	e0bfff17 	ldw	r2,-4(fp)
   12f94:	00c003c4 	movi	r3,15
   12f98:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12f9c:	e0bffd17 	ldw	r2,-12(fp)
   12fa0:	00006506 	br	13138 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fa4:	0005303a 	rdctl	r2,status
   12fa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fac:	e0fffc17 	ldw	r3,-16(fp)
   12fb0:	00bfff84 	movi	r2,-2
   12fb4:	1884703a 	and	r2,r3,r2
   12fb8:	1001703a 	wrctl	status,r2
  
  return context;
   12fbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12fc0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   12fc4:	e0bffd17 	ldw	r2,-12(fp)
   12fc8:	10800283 	ldbu	r2,10(r2)
   12fcc:	10803fcc 	andi	r2,r2,255
   12fd0:	10000326 	beq	r2,zero,12fe0 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12fd4:	00800044 	movi	r2,1
   12fd8:	e0bff505 	stb	r2,-44(fp)
   12fdc:	00000106 	br	12fe4 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12fe0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   12fe4:	e0bffe03 	ldbu	r2,-8(fp)
   12fe8:	10000326 	beq	r2,zero,12ff8 <OSSemDel+0xec>
   12fec:	10800060 	cmpeqi	r2,r2,1
   12ff0:	1000281e 	bne	r2,zero,13094 <OSSemDel+0x188>
   12ff4:	00004506 	br	1310c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   12ff8:	e0bff503 	ldbu	r2,-44(fp)
   12ffc:	1000161e 	bne	r2,zero,13058 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13000:	e0bffd17 	ldw	r2,-12(fp)
   13004:	00c00fc4 	movi	r3,63
   13008:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1300c:	e0bffd17 	ldw	r2,-12(fp)
   13010:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13014:	e0bffd17 	ldw	r2,-12(fp)
   13018:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1301c:	d0e72d17 	ldw	r3,-25420(gp)
   13020:	e0bffd17 	ldw	r2,-12(fp)
   13024:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   13028:	e0bffd17 	ldw	r2,-12(fp)
   1302c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13030:	e0bffd17 	ldw	r2,-12(fp)
   13034:	d0a72d15 	stw	r2,-25420(gp)
   13038:	e0bff717 	ldw	r2,-36(fp)
   1303c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13040:	e0bff817 	ldw	r2,-32(fp)
   13044:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   13048:	e0bfff17 	ldw	r2,-4(fp)
   1304c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   13050:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   13054:	00003706 	br	13134 <OSSemDel+0x228>
   13058:	e0bff717 	ldw	r2,-36(fp)
   1305c:	e0bff915 	stw	r2,-28(fp)
   13060:	e0bff917 	ldw	r2,-28(fp)
   13064:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   13068:	e0bfff17 	ldw	r2,-4(fp)
   1306c:	00c01244 	movi	r3,73
   13070:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   13074:	e0bffd17 	ldw	r2,-12(fp)
   13078:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1307c:	00002d06 	br	13134 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13080:	000f883a 	mov	r7,zero
   13084:	01800044 	movi	r6,1
   13088:	000b883a 	mov	r5,zero
   1308c:	e13ffd17 	ldw	r4,-12(fp)
   13090:	000eb680 	call	eb68 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   13094:	e0bffd17 	ldw	r2,-12(fp)
   13098:	10800283 	ldbu	r2,10(r2)
   1309c:	10803fcc 	andi	r2,r2,255
   130a0:	103ff71e 	bne	r2,zero,13080 <_gp+0xfffd4778>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   130a4:	e0bffd17 	ldw	r2,-12(fp)
   130a8:	00c00fc4 	movi	r3,63
   130ac:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   130b0:	e0bffd17 	ldw	r2,-12(fp)
   130b4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   130b8:	e0bffd17 	ldw	r2,-12(fp)
   130bc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   130c0:	d0e72d17 	ldw	r3,-25420(gp)
   130c4:	e0bffd17 	ldw	r2,-12(fp)
   130c8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   130cc:	e0bffd17 	ldw	r2,-12(fp)
   130d0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   130d4:	e0bffd17 	ldw	r2,-12(fp)
   130d8:	d0a72d15 	stw	r2,-25420(gp)
   130dc:	e0bff717 	ldw	r2,-36(fp)
   130e0:	e0bffa15 	stw	r2,-24(fp)
   130e4:	e0bffa17 	ldw	r2,-24(fp)
   130e8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   130ec:	e0bff503 	ldbu	r2,-44(fp)
   130f0:	10800058 	cmpnei	r2,r2,1
   130f4:	1000011e 	bne	r2,zero,130fc <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   130f8:	000f5b40 	call	f5b4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   130fc:	e0bfff17 	ldw	r2,-4(fp)
   13100:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   13104:	e03ff615 	stw	zero,-40(fp)
             break;
   13108:	00000a06 	br	13134 <OSSemDel+0x228>
   1310c:	e0bff717 	ldw	r2,-36(fp)
   13110:	e0bffb15 	stw	r2,-20(fp)
   13114:	e0bffb17 	ldw	r2,-20(fp)
   13118:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1311c:	e0bfff17 	ldw	r2,-4(fp)
   13120:	00c001c4 	movi	r3,7
   13124:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   13128:	e0bffd17 	ldw	r2,-12(fp)
   1312c:	e0bff615 	stw	r2,-40(fp)
             break;
   13130:	0001883a 	nop
    }
    return (pevent_return);
   13134:	e0bff617 	ldw	r2,-40(fp)
}
   13138:	e037883a 	mov	sp,fp
   1313c:	dfc00117 	ldw	ra,4(sp)
   13140:	df000017 	ldw	fp,0(sp)
   13144:	dec00204 	addi	sp,sp,8
   13148:	f800283a 	ret

0001314c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1314c:	defff504 	addi	sp,sp,-44
   13150:	dfc00a15 	stw	ra,40(sp)
   13154:	df000915 	stw	fp,36(sp)
   13158:	df000904 	addi	fp,sp,36
   1315c:	e13ffd15 	stw	r4,-12(fp)
   13160:	2805883a 	mov	r2,r5
   13164:	e1bfff15 	stw	r6,-4(fp)
   13168:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1316c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13170:	e0bfff17 	ldw	r2,-4(fp)
   13174:	10007226 	beq	r2,zero,13340 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13178:	e0bffd17 	ldw	r2,-12(fp)
   1317c:	1000041e 	bne	r2,zero,13190 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13180:	e0bfff17 	ldw	r2,-4(fp)
   13184:	00c00104 	movi	r3,4
   13188:	10c00005 	stb	r3,0(r2)
        return;
   1318c:	00006d06 	br	13344 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13190:	e0bffd17 	ldw	r2,-12(fp)
   13194:	10800003 	ldbu	r2,0(r2)
   13198:	10803fcc 	andi	r2,r2,255
   1319c:	108000e0 	cmpeqi	r2,r2,3
   131a0:	1000041e 	bne	r2,zero,131b4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   131a4:	e0bfff17 	ldw	r2,-4(fp)
   131a8:	00c00044 	movi	r3,1
   131ac:	10c00005 	stb	r3,0(r2)
        return;
   131b0:	00006406 	br	13344 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   131b4:	d0a72e03 	ldbu	r2,-25416(gp)
   131b8:	10803fcc 	andi	r2,r2,255
   131bc:	10000426 	beq	r2,zero,131d0 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   131c0:	e0bfff17 	ldw	r2,-4(fp)
   131c4:	00c00084 	movi	r3,2
   131c8:	10c00005 	stb	r3,0(r2)
        return;
   131cc:	00005d06 	br	13344 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   131d0:	d0a72003 	ldbu	r2,-25472(gp)
   131d4:	10803fcc 	andi	r2,r2,255
   131d8:	10000426 	beq	r2,zero,131ec <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   131dc:	e0bfff17 	ldw	r2,-4(fp)
   131e0:	00c00344 	movi	r3,13
   131e4:	10c00005 	stb	r3,0(r2)
        return;
   131e8:	00005606 	br	13344 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   131ec:	0005303a 	rdctl	r2,status
   131f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   131f4:	e0fffc17 	ldw	r3,-16(fp)
   131f8:	00bfff84 	movi	r2,-2
   131fc:	1884703a 	and	r2,r3,r2
   13200:	1001703a 	wrctl	status,r2
  
  return context;
   13204:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13208:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1320c:	e0bffd17 	ldw	r2,-12(fp)
   13210:	1080020b 	ldhu	r2,8(r2)
   13214:	10bfffcc 	andi	r2,r2,65535
   13218:	10000d26 	beq	r2,zero,13250 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1321c:	e0bffd17 	ldw	r2,-12(fp)
   13220:	1080020b 	ldhu	r2,8(r2)
   13224:	10bfffc4 	addi	r2,r2,-1
   13228:	1007883a 	mov	r3,r2
   1322c:	e0bffd17 	ldw	r2,-12(fp)
   13230:	10c0020d 	sth	r3,8(r2)
   13234:	e0bff717 	ldw	r2,-36(fp)
   13238:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1323c:	e0bff817 	ldw	r2,-32(fp)
   13240:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13244:	e0bfff17 	ldw	r2,-4(fp)
   13248:	10000005 	stb	zero,0(r2)
        return;
   1324c:	00003d06 	br	13344 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   13250:	d0a72f17 	ldw	r2,-25412(gp)
   13254:	d0e72f17 	ldw	r3,-25412(gp)
   13258:	18c00c03 	ldbu	r3,48(r3)
   1325c:	18c00054 	ori	r3,r3,1
   13260:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13264:	d0a72f17 	ldw	r2,-25412(gp)
   13268:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1326c:	d0a72f17 	ldw	r2,-25412(gp)
   13270:	e0fffe0b 	ldhu	r3,-8(fp)
   13274:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13278:	e13ffd17 	ldw	r4,-12(fp)
   1327c:	000ed000 	call	ed00 <OS_EventTaskWait>
   13280:	e0bff717 	ldw	r2,-36(fp)
   13284:	e0bffb15 	stw	r2,-20(fp)
   13288:	e0bffb17 	ldw	r2,-20(fp)
   1328c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13290:	000f5b40 	call	f5b4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13294:	0005303a 	rdctl	r2,status
   13298:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1329c:	e0fff917 	ldw	r3,-28(fp)
   132a0:	00bfff84 	movi	r2,-2
   132a4:	1884703a 	and	r2,r3,r2
   132a8:	1001703a 	wrctl	status,r2
  
  return context;
   132ac:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   132b0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   132b4:	d0a72f17 	ldw	r2,-25412(gp)
   132b8:	10800c43 	ldbu	r2,49(r2)
   132bc:	10803fcc 	andi	r2,r2,255
   132c0:	10000326 	beq	r2,zero,132d0 <OSSemPend+0x184>
   132c4:	108000a0 	cmpeqi	r2,r2,2
   132c8:	1000041e 	bne	r2,zero,132dc <OSSemPend+0x190>
   132cc:	00000706 	br	132ec <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   132d0:	e0bfff17 	ldw	r2,-4(fp)
   132d4:	10000005 	stb	zero,0(r2)
             break;
   132d8:	00000c06 	br	1330c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   132dc:	e0bfff17 	ldw	r2,-4(fp)
   132e0:	00c00384 	movi	r3,14
   132e4:	10c00005 	stb	r3,0(r2)
             break;
   132e8:	00000806 	br	1330c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   132ec:	d0a72f17 	ldw	r2,-25412(gp)
   132f0:	e17ffd17 	ldw	r5,-12(fp)
   132f4:	1009883a 	mov	r4,r2
   132f8:	000ef600 	call	ef60 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   132fc:	e0bfff17 	ldw	r2,-4(fp)
   13300:	00c00284 	movi	r3,10
   13304:	10c00005 	stb	r3,0(r2)
             break;
   13308:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1330c:	d0a72f17 	ldw	r2,-25412(gp)
   13310:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13314:	d0a72f17 	ldw	r2,-25412(gp)
   13318:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1331c:	d0a72f17 	ldw	r2,-25412(gp)
   13320:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13324:	d0a72f17 	ldw	r2,-25412(gp)
   13328:	10000815 	stw	zero,32(r2)
   1332c:	e0bff717 	ldw	r2,-36(fp)
   13330:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13334:	e0bffa17 	ldw	r2,-24(fp)
   13338:	1001703a 	wrctl	status,r2
   1333c:	00000106 	br	13344 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13340:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   13344:	e037883a 	mov	sp,fp
   13348:	dfc00117 	ldw	ra,4(sp)
   1334c:	df000017 	ldw	fp,0(sp)
   13350:	dec00204 	addi	sp,sp,8
   13354:	f800283a 	ret

00013358 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13358:	defff604 	addi	sp,sp,-40
   1335c:	dfc00915 	stw	ra,36(sp)
   13360:	df000815 	stw	fp,32(sp)
   13364:	df000804 	addi	fp,sp,32
   13368:	e13ffd15 	stw	r4,-12(fp)
   1336c:	2805883a 	mov	r2,r5
   13370:	e1bfff15 	stw	r6,-4(fp)
   13374:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13378:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1337c:	e0bfff17 	ldw	r2,-4(fp)
   13380:	1000021e 	bne	r2,zero,1338c <OSSemPendAbort+0x34>
        return (0);
   13384:	0005883a 	mov	r2,zero
   13388:	00004906 	br	134b0 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1338c:	e0bffd17 	ldw	r2,-12(fp)
   13390:	1000051e 	bne	r2,zero,133a8 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13394:	e0bfff17 	ldw	r2,-4(fp)
   13398:	00c00104 	movi	r3,4
   1339c:	10c00005 	stb	r3,0(r2)
        return (0);
   133a0:	0005883a 	mov	r2,zero
   133a4:	00004206 	br	134b0 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   133a8:	e0bffd17 	ldw	r2,-12(fp)
   133ac:	10800003 	ldbu	r2,0(r2)
   133b0:	10803fcc 	andi	r2,r2,255
   133b4:	108000e0 	cmpeqi	r2,r2,3
   133b8:	1000051e 	bne	r2,zero,133d0 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   133bc:	e0bfff17 	ldw	r2,-4(fp)
   133c0:	00c00044 	movi	r3,1
   133c4:	10c00005 	stb	r3,0(r2)
        return (0);
   133c8:	0005883a 	mov	r2,zero
   133cc:	00003806 	br	134b0 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133d0:	0005303a 	rdctl	r2,status
   133d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133d8:	e0fffc17 	ldw	r3,-16(fp)
   133dc:	00bfff84 	movi	r2,-2
   133e0:	1884703a 	and	r2,r3,r2
   133e4:	1001703a 	wrctl	status,r2
  
  return context;
   133e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   133ec:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   133f0:	e0bffd17 	ldw	r2,-12(fp)
   133f4:	10800283 	ldbu	r2,10(r2)
   133f8:	10803fcc 	andi	r2,r2,255
   133fc:	10002526 	beq	r2,zero,13494 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13400:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13404:	e0bffe03 	ldbu	r2,-8(fp)
   13408:	10800060 	cmpeqi	r2,r2,1
   1340c:	10000e26 	beq	r2,zero,13448 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13410:	00000806 	br	13434 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13414:	01c00084 	movi	r7,2
   13418:	01800044 	movi	r6,1
   1341c:	000b883a 	mov	r5,zero
   13420:	e13ffd17 	ldw	r4,-12(fp)
   13424:	000eb680 	call	eb68 <OS_EventTaskRdy>
                     nbr_tasks++;
   13428:	e0bff803 	ldbu	r2,-32(fp)
   1342c:	10800044 	addi	r2,r2,1
   13430:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13434:	e0bffd17 	ldw	r2,-12(fp)
   13438:	10800283 	ldbu	r2,10(r2)
   1343c:	10803fcc 	andi	r2,r2,255
   13440:	103ff41e 	bne	r2,zero,13414 <_gp+0xfffd4b0c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13444:	00000906 	br	1346c <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13448:	01c00084 	movi	r7,2
   1344c:	01800044 	movi	r6,1
   13450:	000b883a 	mov	r5,zero
   13454:	e13ffd17 	ldw	r4,-12(fp)
   13458:	000eb680 	call	eb68 <OS_EventTaskRdy>
                 nbr_tasks++;
   1345c:	e0bff803 	ldbu	r2,-32(fp)
   13460:	10800044 	addi	r2,r2,1
   13464:	e0bff805 	stb	r2,-32(fp)
                 break;
   13468:	0001883a 	nop
   1346c:	e0bff917 	ldw	r2,-28(fp)
   13470:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13474:	e0bffa17 	ldw	r2,-24(fp)
   13478:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1347c:	000f5b40 	call	f5b4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13480:	e0bfff17 	ldw	r2,-4(fp)
   13484:	00c00384 	movi	r3,14
   13488:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1348c:	e0bff803 	ldbu	r2,-32(fp)
   13490:	00000706 	br	134b0 <OSSemPendAbort+0x158>
   13494:	e0bff917 	ldw	r2,-28(fp)
   13498:	e0bffb15 	stw	r2,-20(fp)
   1349c:	e0bffb17 	ldw	r2,-20(fp)
   134a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   134a4:	e0bfff17 	ldw	r2,-4(fp)
   134a8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   134ac:	0005883a 	mov	r2,zero
}
   134b0:	e037883a 	mov	sp,fp
   134b4:	dfc00117 	ldw	ra,4(sp)
   134b8:	df000017 	ldw	fp,0(sp)
   134bc:	dec00204 	addi	sp,sp,8
   134c0:	f800283a 	ret

000134c4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   134c4:	defff804 	addi	sp,sp,-32
   134c8:	dfc00715 	stw	ra,28(sp)
   134cc:	df000615 	stw	fp,24(sp)
   134d0:	df000604 	addi	fp,sp,24
   134d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   134d8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   134dc:	e0bfff17 	ldw	r2,-4(fp)
   134e0:	1000021e 	bne	r2,zero,134ec <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   134e4:	00800104 	movi	r2,4
   134e8:	00003506 	br	135c0 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   134ec:	e0bfff17 	ldw	r2,-4(fp)
   134f0:	10800003 	ldbu	r2,0(r2)
   134f4:	10803fcc 	andi	r2,r2,255
   134f8:	108000e0 	cmpeqi	r2,r2,3
   134fc:	1000021e 	bne	r2,zero,13508 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   13500:	00800044 	movi	r2,1
   13504:	00002e06 	br	135c0 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13508:	0005303a 	rdctl	r2,status
   1350c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13510:	e0fffe17 	ldw	r3,-8(fp)
   13514:	00bfff84 	movi	r2,-2
   13518:	1884703a 	and	r2,r3,r2
   1351c:	1001703a 	wrctl	status,r2
  
  return context;
   13520:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13524:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   13528:	e0bfff17 	ldw	r2,-4(fp)
   1352c:	10800283 	ldbu	r2,10(r2)
   13530:	10803fcc 	andi	r2,r2,255
   13534:	10000c26 	beq	r2,zero,13568 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13538:	000f883a 	mov	r7,zero
   1353c:	01800044 	movi	r6,1
   13540:	000b883a 	mov	r5,zero
   13544:	e13fff17 	ldw	r4,-4(fp)
   13548:	000eb680 	call	eb68 <OS_EventTaskRdy>
   1354c:	e0bffa17 	ldw	r2,-24(fp)
   13550:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13554:	e0bffb17 	ldw	r2,-20(fp)
   13558:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1355c:	000f5b40 	call	f5b4 <OS_Sched>
        return (OS_ERR_NONE);
   13560:	0005883a 	mov	r2,zero
   13564:	00001606 	br	135c0 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   13568:	e0bfff17 	ldw	r2,-4(fp)
   1356c:	1080020b 	ldhu	r2,8(r2)
   13570:	10ffffcc 	andi	r3,r2,65535
   13574:	00bfffd4 	movui	r2,65535
   13578:	18800c26 	beq	r3,r2,135ac <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1357c:	e0bfff17 	ldw	r2,-4(fp)
   13580:	1080020b 	ldhu	r2,8(r2)
   13584:	10800044 	addi	r2,r2,1
   13588:	1007883a 	mov	r3,r2
   1358c:	e0bfff17 	ldw	r2,-4(fp)
   13590:	10c0020d 	sth	r3,8(r2)
   13594:	e0bffa17 	ldw	r2,-24(fp)
   13598:	e0bffc15 	stw	r2,-16(fp)
   1359c:	e0bffc17 	ldw	r2,-16(fp)
   135a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   135a4:	0005883a 	mov	r2,zero
   135a8:	00000506 	br	135c0 <OSSemPost+0xfc>
   135ac:	e0bffa17 	ldw	r2,-24(fp)
   135b0:	e0bffd15 	stw	r2,-12(fp)
   135b4:	e0bffd17 	ldw	r2,-12(fp)
   135b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   135bc:	00800c84 	movi	r2,50
}
   135c0:	e037883a 	mov	sp,fp
   135c4:	dfc00117 	ldw	ra,4(sp)
   135c8:	df000017 	ldw	fp,0(sp)
   135cc:	dec00204 	addi	sp,sp,8
   135d0:	f800283a 	ret

000135d4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   135d4:	defff704 	addi	sp,sp,-36
   135d8:	df000815 	stw	fp,32(sp)
   135dc:	df000804 	addi	fp,sp,32
   135e0:	e13ffe15 	stw	r4,-8(fp)
   135e4:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   135e8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   135ec:	e0bffe17 	ldw	r2,-8(fp)
   135f0:	1000021e 	bne	r2,zero,135fc <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   135f4:	00800104 	movi	r2,4
   135f8:	00003606 	br	136d4 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   135fc:	e0bfff17 	ldw	r2,-4(fp)
   13600:	1000021e 	bne	r2,zero,1360c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13604:	00800244 	movi	r2,9
   13608:	00003206 	br	136d4 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1360c:	e0bffe17 	ldw	r2,-8(fp)
   13610:	10800003 	ldbu	r2,0(r2)
   13614:	10803fcc 	andi	r2,r2,255
   13618:	108000e0 	cmpeqi	r2,r2,3
   1361c:	1000021e 	bne	r2,zero,13628 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13620:	00800044 	movi	r2,1
   13624:	00002b06 	br	136d4 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13628:	0005303a 	rdctl	r2,status
   1362c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13630:	e0fffd17 	ldw	r3,-12(fp)
   13634:	00bfff84 	movi	r2,-2
   13638:	1884703a 	and	r2,r3,r2
   1363c:	1001703a 	wrctl	status,r2
  
  return context;
   13640:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13644:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   13648:	e0bffe17 	ldw	r2,-8(fp)
   1364c:	10c00283 	ldbu	r3,10(r2)
   13650:	e0bfff17 	ldw	r2,-4(fp)
   13654:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   13658:	e0bffe17 	ldw	r2,-8(fp)
   1365c:	108002c4 	addi	r2,r2,11
   13660:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   13664:	e0bfff17 	ldw	r2,-4(fp)
   13668:	10800084 	addi	r2,r2,2
   1366c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13670:	e03ffa05 	stb	zero,-24(fp)
   13674:	00000b06 	br	136a4 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   13678:	e0bff917 	ldw	r2,-28(fp)
   1367c:	10c00044 	addi	r3,r2,1
   13680:	e0fff915 	stw	r3,-28(fp)
   13684:	e0fff817 	ldw	r3,-32(fp)
   13688:	19000044 	addi	r4,r3,1
   1368c:	e13ff815 	stw	r4,-32(fp)
   13690:	18c00003 	ldbu	r3,0(r3)
   13694:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13698:	e0bffa03 	ldbu	r2,-24(fp)
   1369c:	10800044 	addi	r2,r2,1
   136a0:	e0bffa05 	stb	r2,-24(fp)
   136a4:	e0bffa03 	ldbu	r2,-24(fp)
   136a8:	108000f0 	cmpltui	r2,r2,3
   136ac:	103ff21e 	bne	r2,zero,13678 <_gp+0xfffd4d70>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   136b0:	e0bffe17 	ldw	r2,-8(fp)
   136b4:	10c0020b 	ldhu	r3,8(r2)
   136b8:	e0bfff17 	ldw	r2,-4(fp)
   136bc:	10c0000d 	sth	r3,0(r2)
   136c0:	e0bffb17 	ldw	r2,-20(fp)
   136c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   136c8:	e0bffc17 	ldw	r2,-16(fp)
   136cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   136d0:	0005883a 	mov	r2,zero
}
   136d4:	e037883a 	mov	sp,fp
   136d8:	df000017 	ldw	fp,0(sp)
   136dc:	dec00104 	addi	sp,sp,4
   136e0:	f800283a 	ret

000136e4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   136e4:	defff904 	addi	sp,sp,-28
   136e8:	df000615 	stw	fp,24(sp)
   136ec:	df000604 	addi	fp,sp,24
   136f0:	e13ffd15 	stw	r4,-12(fp)
   136f4:	2805883a 	mov	r2,r5
   136f8:	e1bfff15 	stw	r6,-4(fp)
   136fc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13700:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13704:	e0bfff17 	ldw	r2,-4(fp)
   13708:	10003126 	beq	r2,zero,137d0 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1370c:	e0bffd17 	ldw	r2,-12(fp)
   13710:	1000041e 	bne	r2,zero,13724 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13714:	e0bfff17 	ldw	r2,-4(fp)
   13718:	00c00104 	movi	r3,4
   1371c:	10c00005 	stb	r3,0(r2)
        return;
   13720:	00002c06 	br	137d4 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13724:	e0bffd17 	ldw	r2,-12(fp)
   13728:	10800003 	ldbu	r2,0(r2)
   1372c:	10803fcc 	andi	r2,r2,255
   13730:	108000e0 	cmpeqi	r2,r2,3
   13734:	1000041e 	bne	r2,zero,13748 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   13738:	e0bfff17 	ldw	r2,-4(fp)
   1373c:	00c00044 	movi	r3,1
   13740:	10c00005 	stb	r3,0(r2)
        return;
   13744:	00002306 	br	137d4 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13748:	0005303a 	rdctl	r2,status
   1374c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13750:	e0fffc17 	ldw	r3,-16(fp)
   13754:	00bfff84 	movi	r2,-2
   13758:	1884703a 	and	r2,r3,r2
   1375c:	1001703a 	wrctl	status,r2
  
  return context;
   13760:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13764:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   13768:	e0bfff17 	ldw	r2,-4(fp)
   1376c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   13770:	e0bffd17 	ldw	r2,-12(fp)
   13774:	1080020b 	ldhu	r2,8(r2)
   13778:	10bfffcc 	andi	r2,r2,65535
   1377c:	10000426 	beq	r2,zero,13790 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   13780:	e0bffd17 	ldw	r2,-12(fp)
   13784:	e0fffe0b 	ldhu	r3,-8(fp)
   13788:	10c0020d 	sth	r3,8(r2)
   1378c:	00000b06 	br	137bc <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   13790:	e0bffd17 	ldw	r2,-12(fp)
   13794:	10800283 	ldbu	r2,10(r2)
   13798:	10803fcc 	andi	r2,r2,255
   1379c:	1000041e 	bne	r2,zero,137b0 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   137a0:	e0bffd17 	ldw	r2,-12(fp)
   137a4:	e0fffe0b 	ldhu	r3,-8(fp)
   137a8:	10c0020d 	sth	r3,8(r2)
   137ac:	00000306 	br	137bc <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   137b0:	e0bfff17 	ldw	r2,-4(fp)
   137b4:	00c01244 	movi	r3,73
   137b8:	10c00005 	stb	r3,0(r2)
   137bc:	e0bffa17 	ldw	r2,-24(fp)
   137c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137c4:	e0bffb17 	ldw	r2,-20(fp)
   137c8:	1001703a 	wrctl	status,r2
   137cc:	00000106 	br	137d4 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   137d0:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   137d4:	e037883a 	mov	sp,fp
   137d8:	df000017 	ldw	fp,0(sp)
   137dc:	dec00104 	addi	sp,sp,4
   137e0:	f800283a 	ret

000137e4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   137e4:	defff104 	addi	sp,sp,-60
   137e8:	dfc00e15 	stw	ra,56(sp)
   137ec:	df000d15 	stw	fp,52(sp)
   137f0:	df000d04 	addi	fp,sp,52
   137f4:	2007883a 	mov	r3,r4
   137f8:	2805883a 	mov	r2,r5
   137fc:	e0fffe05 	stb	r3,-8(fp)
   13800:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   13804:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   13808:	e0bffe03 	ldbu	r2,-8(fp)
   1380c:	10800530 	cmpltui	r2,r2,20
   13810:	1000051e 	bne	r2,zero,13828 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   13814:	e0bffe03 	ldbu	r2,-8(fp)
   13818:	10803fe0 	cmpeqi	r2,r2,255
   1381c:	1000021e 	bne	r2,zero,13828 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   13820:	00800a84 	movi	r2,42
   13824:	00012606 	br	13cc0 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   13828:	e0bfff03 	ldbu	r2,-4(fp)
   1382c:	10800530 	cmpltui	r2,r2,20
   13830:	1000021e 	bne	r2,zero,1383c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   13834:	00800a84 	movi	r2,42
   13838:	00012106 	br	13cc0 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1383c:	0005303a 	rdctl	r2,status
   13840:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13844:	e0fffd17 	ldw	r3,-12(fp)
   13848:	00bfff84 	movi	r2,-2
   1384c:	1884703a 	and	r2,r3,r2
   13850:	1001703a 	wrctl	status,r2
  
  return context;
   13854:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13858:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1385c:	e0ffff03 	ldbu	r3,-4(fp)
   13860:	00800134 	movhi	r2,4
   13864:	10b23704 	addi	r2,r2,-14116
   13868:	18c7883a 	add	r3,r3,r3
   1386c:	18c7883a 	add	r3,r3,r3
   13870:	10c5883a 	add	r2,r2,r3
   13874:	10800017 	ldw	r2,0(r2)
   13878:	10000626 	beq	r2,zero,13894 <OSTaskChangePrio+0xb0>
   1387c:	e0bff517 	ldw	r2,-44(fp)
   13880:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13884:	e0bff617 	ldw	r2,-40(fp)
   13888:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1388c:	00800a04 	movi	r2,40
   13890:	00010b06 	br	13cc0 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   13894:	e0bffe03 	ldbu	r2,-8(fp)
   13898:	10803fd8 	cmpnei	r2,r2,255
   1389c:	1000031e 	bne	r2,zero,138ac <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   138a0:	d0a72f17 	ldw	r2,-25412(gp)
   138a4:	10800c83 	ldbu	r2,50(r2)
   138a8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   138ac:	e0fffe03 	ldbu	r3,-8(fp)
   138b0:	00800134 	movhi	r2,4
   138b4:	10b23704 	addi	r2,r2,-14116
   138b8:	18c7883a 	add	r3,r3,r3
   138bc:	18c7883a 	add	r3,r3,r3
   138c0:	10c5883a 	add	r2,r2,r3
   138c4:	10800017 	ldw	r2,0(r2)
   138c8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   138cc:	e0bff817 	ldw	r2,-32(fp)
   138d0:	1000061e 	bne	r2,zero,138ec <OSTaskChangePrio+0x108>
   138d4:	e0bff517 	ldw	r2,-44(fp)
   138d8:	e0bff715 	stw	r2,-36(fp)
   138dc:	e0bff717 	ldw	r2,-36(fp)
   138e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   138e4:	00800a44 	movi	r2,41
   138e8:	0000f506 	br	13cc0 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   138ec:	e0bff817 	ldw	r2,-32(fp)
   138f0:	10800058 	cmpnei	r2,r2,1
   138f4:	1000061e 	bne	r2,zero,13910 <OSTaskChangePrio+0x12c>
   138f8:	e0bff517 	ldw	r2,-44(fp)
   138fc:	e0bff915 	stw	r2,-28(fp)
   13900:	e0bff917 	ldw	r2,-28(fp)
   13904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   13908:	008010c4 	movi	r2,67
   1390c:	0000ec06 	br	13cc0 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   13910:	e0bfff03 	ldbu	r2,-4(fp)
   13914:	1004d0fa 	srli	r2,r2,3
   13918:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1391c:	e0bfff03 	ldbu	r2,-4(fp)
   13920:	108001cc 	andi	r2,r2,7
   13924:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   13928:	e0bffb03 	ldbu	r2,-20(fp)
   1392c:	00c00044 	movi	r3,1
   13930:	1884983a 	sll	r2,r3,r2
   13934:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   13938:	e0bffb43 	ldbu	r2,-19(fp)
   1393c:	00c00044 	movi	r3,1
   13940:	1884983a 	sll	r2,r3,r2
   13944:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   13948:	e0fffe03 	ldbu	r3,-8(fp)
   1394c:	00800134 	movhi	r2,4
   13950:	10b23704 	addi	r2,r2,-14116
   13954:	18c7883a 	add	r3,r3,r3
   13958:	18c7883a 	add	r3,r3,r3
   1395c:	10c5883a 	add	r2,r2,r3
   13960:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   13964:	e0ffff03 	ldbu	r3,-4(fp)
   13968:	00800134 	movhi	r2,4
   1396c:	10b23704 	addi	r2,r2,-14116
   13970:	18c7883a 	add	r3,r3,r3
   13974:	18c7883a 	add	r3,r3,r3
   13978:	10c5883a 	add	r2,r2,r3
   1397c:	e0fff817 	ldw	r3,-32(fp)
   13980:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   13984:	e0bff817 	ldw	r2,-32(fp)
   13988:	10800d03 	ldbu	r2,52(r2)
   1398c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   13990:	e0bff817 	ldw	r2,-32(fp)
   13994:	10800d83 	ldbu	r2,54(r2)
   13998:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1399c:	e0bff817 	ldw	r2,-32(fp)
   139a0:	10800d43 	ldbu	r2,53(r2)
   139a4:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   139a8:	e0fffc03 	ldbu	r3,-16(fp)
   139ac:	d0a72c44 	addi	r2,gp,-25423
   139b0:	1885883a 	add	r2,r3,r2
   139b4:	10c00003 	ldbu	r3,0(r2)
   139b8:	e0bffc83 	ldbu	r2,-14(fp)
   139bc:	1884703a 	and	r2,r3,r2
   139c0:	10803fcc 	andi	r2,r2,255
   139c4:	10002826 	beq	r2,zero,13a68 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   139c8:	e0fffc03 	ldbu	r3,-16(fp)
   139cc:	e13ffc03 	ldbu	r4,-16(fp)
   139d0:	d0a72c44 	addi	r2,gp,-25423
   139d4:	2085883a 	add	r2,r4,r2
   139d8:	10800003 	ldbu	r2,0(r2)
   139dc:	1009883a 	mov	r4,r2
   139e0:	e0bffc83 	ldbu	r2,-14(fp)
   139e4:	0084303a 	nor	r2,zero,r2
   139e8:	2084703a 	and	r2,r4,r2
   139ec:	1009883a 	mov	r4,r2
   139f0:	d0a72c44 	addi	r2,gp,-25423
   139f4:	1885883a 	add	r2,r3,r2
   139f8:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   139fc:	e0fffc03 	ldbu	r3,-16(fp)
   13a00:	d0a72c44 	addi	r2,gp,-25423
   13a04:	1885883a 	add	r2,r3,r2
   13a08:	10800003 	ldbu	r2,0(r2)
   13a0c:	10803fcc 	andi	r2,r2,255
   13a10:	1000061e 	bne	r2,zero,13a2c <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   13a14:	e0bffc43 	ldbu	r2,-15(fp)
   13a18:	0084303a 	nor	r2,zero,r2
   13a1c:	1007883a 	mov	r3,r2
   13a20:	d0a72c03 	ldbu	r2,-25424(gp)
   13a24:	1884703a 	and	r2,r3,r2
   13a28:	d0a72c05 	stb	r2,-25424(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   13a2c:	d0e72c03 	ldbu	r3,-25424(gp)
   13a30:	e0bffb83 	ldbu	r2,-18(fp)
   13a34:	1884b03a 	or	r2,r3,r2
   13a38:	d0a72c05 	stb	r2,-25424(gp)
         OSRdyTbl[y_new] |= bitx_new;
   13a3c:	e0fffb03 	ldbu	r3,-20(fp)
   13a40:	e13ffb03 	ldbu	r4,-20(fp)
   13a44:	d0a72c44 	addi	r2,gp,-25423
   13a48:	2085883a 	add	r2,r4,r2
   13a4c:	11000003 	ldbu	r4,0(r2)
   13a50:	e0bffbc3 	ldbu	r2,-17(fp)
   13a54:	2084b03a 	or	r2,r4,r2
   13a58:	1009883a 	mov	r4,r2
   13a5c:	d0a72c44 	addi	r2,gp,-25423
   13a60:	1885883a 	add	r2,r3,r2
   13a64:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   13a68:	e0bff817 	ldw	r2,-32(fp)
   13a6c:	10800717 	ldw	r2,28(r2)
   13a70:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   13a74:	e0bff317 	ldw	r2,-52(fp)
   13a78:	10003326 	beq	r2,zero,13b48 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   13a7c:	e0bffc03 	ldbu	r2,-16(fp)
   13a80:	e0fffc03 	ldbu	r3,-16(fp)
   13a84:	e13ff317 	ldw	r4,-52(fp)
   13a88:	20c7883a 	add	r3,r4,r3
   13a8c:	18c002c4 	addi	r3,r3,11
   13a90:	18c00003 	ldbu	r3,0(r3)
   13a94:	1809883a 	mov	r4,r3
   13a98:	e0fffc83 	ldbu	r3,-14(fp)
   13a9c:	00c6303a 	nor	r3,zero,r3
   13aa0:	20c6703a 	and	r3,r4,r3
   13aa4:	1809883a 	mov	r4,r3
   13aa8:	e0fff317 	ldw	r3,-52(fp)
   13aac:	1885883a 	add	r2,r3,r2
   13ab0:	108002c4 	addi	r2,r2,11
   13ab4:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   13ab8:	e0bffc03 	ldbu	r2,-16(fp)
   13abc:	e0fff317 	ldw	r3,-52(fp)
   13ac0:	1885883a 	add	r2,r3,r2
   13ac4:	108002c4 	addi	r2,r2,11
   13ac8:	10800003 	ldbu	r2,0(r2)
   13acc:	10803fcc 	andi	r2,r2,255
   13ad0:	1000091e 	bne	r2,zero,13af8 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   13ad4:	e0bff317 	ldw	r2,-52(fp)
   13ad8:	10800283 	ldbu	r2,10(r2)
   13adc:	1007883a 	mov	r3,r2
   13ae0:	e0bffc43 	ldbu	r2,-15(fp)
   13ae4:	0084303a 	nor	r2,zero,r2
   13ae8:	1884703a 	and	r2,r3,r2
   13aec:	1007883a 	mov	r3,r2
   13af0:	e0bff317 	ldw	r2,-52(fp)
   13af4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   13af8:	e0bff317 	ldw	r2,-52(fp)
   13afc:	10c00283 	ldbu	r3,10(r2)
   13b00:	e0bffb83 	ldbu	r2,-18(fp)
   13b04:	1884b03a 	or	r2,r3,r2
   13b08:	1007883a 	mov	r3,r2
   13b0c:	e0bff317 	ldw	r2,-52(fp)
   13b10:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   13b14:	e0bffb03 	ldbu	r2,-20(fp)
   13b18:	e0fffb03 	ldbu	r3,-20(fp)
   13b1c:	e13ff317 	ldw	r4,-52(fp)
   13b20:	20c7883a 	add	r3,r4,r3
   13b24:	18c002c4 	addi	r3,r3,11
   13b28:	19000003 	ldbu	r4,0(r3)
   13b2c:	e0fffbc3 	ldbu	r3,-17(fp)
   13b30:	20c6b03a 	or	r3,r4,r3
   13b34:	1809883a 	mov	r4,r3
   13b38:	e0fff317 	ldw	r3,-52(fp)
   13b3c:	1885883a 	add	r2,r3,r2
   13b40:	108002c4 	addi	r2,r2,11
   13b44:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   13b48:	e0bff817 	ldw	r2,-32(fp)
   13b4c:	10800817 	ldw	r2,32(r2)
   13b50:	10004226 	beq	r2,zero,13c5c <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   13b54:	e0bff817 	ldw	r2,-32(fp)
   13b58:	10800817 	ldw	r2,32(r2)
   13b5c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   13b60:	e0bff417 	ldw	r2,-48(fp)
   13b64:	10800017 	ldw	r2,0(r2)
   13b68:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   13b6c:	00003906 	br	13c54 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   13b70:	e0bffc03 	ldbu	r2,-16(fp)
   13b74:	e0fffc03 	ldbu	r3,-16(fp)
   13b78:	e13ff317 	ldw	r4,-52(fp)
   13b7c:	20c7883a 	add	r3,r4,r3
   13b80:	18c002c4 	addi	r3,r3,11
   13b84:	18c00003 	ldbu	r3,0(r3)
   13b88:	1809883a 	mov	r4,r3
   13b8c:	e0fffc83 	ldbu	r3,-14(fp)
   13b90:	00c6303a 	nor	r3,zero,r3
   13b94:	20c6703a 	and	r3,r4,r3
   13b98:	1809883a 	mov	r4,r3
   13b9c:	e0fff317 	ldw	r3,-52(fp)
   13ba0:	1885883a 	add	r2,r3,r2
   13ba4:	108002c4 	addi	r2,r2,11
   13ba8:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   13bac:	e0bffc03 	ldbu	r2,-16(fp)
   13bb0:	e0fff317 	ldw	r3,-52(fp)
   13bb4:	1885883a 	add	r2,r3,r2
   13bb8:	108002c4 	addi	r2,r2,11
   13bbc:	10800003 	ldbu	r2,0(r2)
   13bc0:	10803fcc 	andi	r2,r2,255
   13bc4:	1000091e 	bne	r2,zero,13bec <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   13bc8:	e0bff317 	ldw	r2,-52(fp)
   13bcc:	10800283 	ldbu	r2,10(r2)
   13bd0:	1007883a 	mov	r3,r2
   13bd4:	e0bffc43 	ldbu	r2,-15(fp)
   13bd8:	0084303a 	nor	r2,zero,r2
   13bdc:	1884703a 	and	r2,r3,r2
   13be0:	1007883a 	mov	r3,r2
   13be4:	e0bff317 	ldw	r2,-52(fp)
   13be8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   13bec:	e0bff317 	ldw	r2,-52(fp)
   13bf0:	10c00283 	ldbu	r3,10(r2)
   13bf4:	e0bffb83 	ldbu	r2,-18(fp)
   13bf8:	1884b03a 	or	r2,r3,r2
   13bfc:	1007883a 	mov	r3,r2
   13c00:	e0bff317 	ldw	r2,-52(fp)
   13c04:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   13c08:	e0bffb03 	ldbu	r2,-20(fp)
   13c0c:	e0fffb03 	ldbu	r3,-20(fp)
   13c10:	e13ff317 	ldw	r4,-52(fp)
   13c14:	20c7883a 	add	r3,r4,r3
   13c18:	18c002c4 	addi	r3,r3,11
   13c1c:	19000003 	ldbu	r4,0(r3)
   13c20:	e0fffbc3 	ldbu	r3,-17(fp)
   13c24:	20c6b03a 	or	r3,r4,r3
   13c28:	1809883a 	mov	r4,r3
   13c2c:	e0fff317 	ldw	r3,-52(fp)
   13c30:	1885883a 	add	r2,r3,r2
   13c34:	108002c4 	addi	r2,r2,11
   13c38:	11000005 	stb	r4,0(r2)
            pevents++;
   13c3c:	e0bff417 	ldw	r2,-48(fp)
   13c40:	10800104 	addi	r2,r2,4
   13c44:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   13c48:	e0bff417 	ldw	r2,-48(fp)
   13c4c:	10800017 	ldw	r2,0(r2)
   13c50:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   13c54:	e0bff317 	ldw	r2,-52(fp)
   13c58:	103fc51e 	bne	r2,zero,13b70 <_gp+0xfffd5268>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   13c5c:	e0bff817 	ldw	r2,-32(fp)
   13c60:	e0ffff03 	ldbu	r3,-4(fp)
   13c64:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   13c68:	e0bff817 	ldw	r2,-32(fp)
   13c6c:	e0fffb03 	ldbu	r3,-20(fp)
   13c70:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   13c74:	e0bff817 	ldw	r2,-32(fp)
   13c78:	e0fffb43 	ldbu	r3,-19(fp)
   13c7c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   13c80:	e0bff817 	ldw	r2,-32(fp)
   13c84:	e0fffb83 	ldbu	r3,-18(fp)
   13c88:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   13c8c:	e0bff817 	ldw	r2,-32(fp)
   13c90:	e0fffbc3 	ldbu	r3,-17(fp)
   13c94:	10c00d45 	stb	r3,53(r2)
   13c98:	e0bff517 	ldw	r2,-44(fp)
   13c9c:	e0bffa15 	stw	r2,-24(fp)
   13ca0:	e0bffa17 	ldw	r2,-24(fp)
   13ca4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   13ca8:	d0a72043 	ldbu	r2,-25471(gp)
   13cac:	10803fcc 	andi	r2,r2,255
   13cb0:	10800058 	cmpnei	r2,r2,1
   13cb4:	1000011e 	bne	r2,zero,13cbc <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   13cb8:	000f5b40 	call	f5b4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   13cbc:	0005883a 	mov	r2,zero
}
   13cc0:	e037883a 	mov	sp,fp
   13cc4:	dfc00117 	ldw	ra,4(sp)
   13cc8:	df000017 	ldw	fp,0(sp)
   13ccc:	dec00204 	addi	sp,sp,8
   13cd0:	f800283a 	ret

00013cd4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   13cd4:	deffee04 	addi	sp,sp,-72
   13cd8:	dfc01115 	stw	ra,68(sp)
   13cdc:	df001015 	stw	fp,64(sp)
   13ce0:	df001004 	addi	fp,sp,64
   13ce4:	e13ffc15 	stw	r4,-16(fp)
   13ce8:	e17ffd15 	stw	r5,-12(fp)
   13cec:	e1bffe15 	stw	r6,-8(fp)
   13cf0:	3805883a 	mov	r2,r7
   13cf4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13cf8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13cfc:	e0bfff03 	ldbu	r2,-4(fp)
   13d00:	10800570 	cmpltui	r2,r2,21
   13d04:	1000021e 	bne	r2,zero,13d10 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   13d08:	00800a84 	movi	r2,42
   13d0c:	00005706 	br	13e6c <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d10:	0005303a 	rdctl	r2,status
   13d14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d18:	e0fffb17 	ldw	r3,-20(fp)
   13d1c:	00bfff84 	movi	r2,-2
   13d20:	1884703a 	and	r2,r3,r2
   13d24:	1001703a 	wrctl	status,r2
  
  return context;
   13d28:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13d2c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13d30:	d0a72e03 	ldbu	r2,-25416(gp)
   13d34:	10803fcc 	andi	r2,r2,255
   13d38:	10000626 	beq	r2,zero,13d54 <OSTaskCreate+0x80>
   13d3c:	e0bff317 	ldw	r2,-52(fp)
   13d40:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d44:	e0bff417 	ldw	r2,-48(fp)
   13d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13d4c:	00800f04 	movi	r2,60
   13d50:	00004606 	br	13e6c <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13d54:	e0ffff03 	ldbu	r3,-4(fp)
   13d58:	00800134 	movhi	r2,4
   13d5c:	10b23704 	addi	r2,r2,-14116
   13d60:	18c7883a 	add	r3,r3,r3
   13d64:	18c7883a 	add	r3,r3,r3
   13d68:	10c5883a 	add	r2,r2,r3
   13d6c:	10800017 	ldw	r2,0(r2)
   13d70:	1000391e 	bne	r2,zero,13e58 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13d74:	e0ffff03 	ldbu	r3,-4(fp)
   13d78:	00800134 	movhi	r2,4
   13d7c:	10b23704 	addi	r2,r2,-14116
   13d80:	18c7883a 	add	r3,r3,r3
   13d84:	18c7883a 	add	r3,r3,r3
   13d88:	10c5883a 	add	r2,r2,r3
   13d8c:	00c00044 	movi	r3,1
   13d90:	10c00015 	stw	r3,0(r2)
   13d94:	e0bff317 	ldw	r2,-52(fp)
   13d98:	e0bff515 	stw	r2,-44(fp)
   13d9c:	e0bff517 	ldw	r2,-44(fp)
   13da0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   13da4:	000f883a 	mov	r7,zero
   13da8:	e1bffe17 	ldw	r6,-8(fp)
   13dac:	e17ffd17 	ldw	r5,-12(fp)
   13db0:	e13ffc17 	ldw	r4,-16(fp)
   13db4:	0016c3c0 	call	16c3c <OSTaskStkInit>
   13db8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   13dbc:	e0bfff03 	ldbu	r2,-4(fp)
   13dc0:	d8000215 	stw	zero,8(sp)
   13dc4:	d8000115 	stw	zero,4(sp)
   13dc8:	d8000015 	stw	zero,0(sp)
   13dcc:	000f883a 	mov	r7,zero
   13dd0:	000d883a 	mov	r6,zero
   13dd4:	e17ff717 	ldw	r5,-36(fp)
   13dd8:	1009883a 	mov	r4,r2
   13ddc:	000f9b40 	call	f9b4 <OS_TCBInit>
   13de0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   13de4:	e0bff803 	ldbu	r2,-32(fp)
   13de8:	1000061e 	bne	r2,zero,13e04 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   13dec:	d0a72043 	ldbu	r2,-25471(gp)
   13df0:	10803fcc 	andi	r2,r2,255
   13df4:	10800058 	cmpnei	r2,r2,1
   13df8:	1000151e 	bne	r2,zero,13e50 <OSTaskCreate+0x17c>
                OS_Sched();
   13dfc:	000f5b40 	call	f5b4 <OS_Sched>
   13e00:	00001306 	br	13e50 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e04:	0005303a 	rdctl	r2,status
   13e08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e0c:	e0fffa17 	ldw	r3,-24(fp)
   13e10:	00bfff84 	movi	r2,-2
   13e14:	1884703a 	and	r2,r3,r2
   13e18:	1001703a 	wrctl	status,r2
  
  return context;
   13e1c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   13e20:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   13e24:	e0ffff03 	ldbu	r3,-4(fp)
   13e28:	00800134 	movhi	r2,4
   13e2c:	10b23704 	addi	r2,r2,-14116
   13e30:	18c7883a 	add	r3,r3,r3
   13e34:	18c7883a 	add	r3,r3,r3
   13e38:	10c5883a 	add	r2,r2,r3
   13e3c:	10000015 	stw	zero,0(r2)
   13e40:	e0bff317 	ldw	r2,-52(fp)
   13e44:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e48:	e0bff617 	ldw	r2,-40(fp)
   13e4c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   13e50:	e0bff803 	ldbu	r2,-32(fp)
   13e54:	00000506 	br	13e6c <OSTaskCreate+0x198>
   13e58:	e0bff317 	ldw	r2,-52(fp)
   13e5c:	e0bff915 	stw	r2,-28(fp)
   13e60:	e0bff917 	ldw	r2,-28(fp)
   13e64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   13e68:	00800a04 	movi	r2,40
}
   13e6c:	e037883a 	mov	sp,fp
   13e70:	dfc00117 	ldw	ra,4(sp)
   13e74:	df000017 	ldw	fp,0(sp)
   13e78:	dec00204 	addi	sp,sp,8
   13e7c:	f800283a 	ret

00013e80 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   13e80:	deffec04 	addi	sp,sp,-80
   13e84:	dfc01315 	stw	ra,76(sp)
   13e88:	df001215 	stw	fp,72(sp)
   13e8c:	df001204 	addi	fp,sp,72
   13e90:	e13ffa15 	stw	r4,-24(fp)
   13e94:	e17ffb15 	stw	r5,-20(fp)
   13e98:	e1bffc15 	stw	r6,-16(fp)
   13e9c:	3809883a 	mov	r4,r7
   13ea0:	e0c00217 	ldw	r3,8(fp)
   13ea4:	e0800617 	ldw	r2,24(fp)
   13ea8:	e13ffd05 	stb	r4,-12(fp)
   13eac:	e0fffe0d 	sth	r3,-8(fp)
   13eb0:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   13eb4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   13eb8:	e0bffd03 	ldbu	r2,-12(fp)
   13ebc:	10800570 	cmpltui	r2,r2,21
   13ec0:	1000021e 	bne	r2,zero,13ecc <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   13ec4:	00800a84 	movi	r2,42
   13ec8:	00006106 	br	14050 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ecc:	0005303a 	rdctl	r2,status
   13ed0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ed4:	e0fff917 	ldw	r3,-28(fp)
   13ed8:	00bfff84 	movi	r2,-2
   13edc:	1884703a 	and	r2,r3,r2
   13ee0:	1001703a 	wrctl	status,r2
  
  return context;
   13ee4:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   13ee8:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   13eec:	d0a72e03 	ldbu	r2,-25416(gp)
   13ef0:	10803fcc 	andi	r2,r2,255
   13ef4:	10000626 	beq	r2,zero,13f10 <OSTaskCreateExt+0x90>
   13ef8:	e0bff117 	ldw	r2,-60(fp)
   13efc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13f00:	e0bff217 	ldw	r2,-56(fp)
   13f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   13f08:	00800f04 	movi	r2,60
   13f0c:	00005006 	br	14050 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   13f10:	e0fffd03 	ldbu	r3,-12(fp)
   13f14:	00800134 	movhi	r2,4
   13f18:	10b23704 	addi	r2,r2,-14116
   13f1c:	18c7883a 	add	r3,r3,r3
   13f20:	18c7883a 	add	r3,r3,r3
   13f24:	10c5883a 	add	r2,r2,r3
   13f28:	10800017 	ldw	r2,0(r2)
   13f2c:	1000431e 	bne	r2,zero,1403c <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   13f30:	e0fffd03 	ldbu	r3,-12(fp)
   13f34:	00800134 	movhi	r2,4
   13f38:	10b23704 	addi	r2,r2,-14116
   13f3c:	18c7883a 	add	r3,r3,r3
   13f40:	18c7883a 	add	r3,r3,r3
   13f44:	10c5883a 	add	r2,r2,r3
   13f48:	00c00044 	movi	r3,1
   13f4c:	10c00015 	stw	r3,0(r2)
   13f50:	e0bff117 	ldw	r2,-60(fp)
   13f54:	e0bff315 	stw	r2,-52(fp)
   13f58:	e0bff317 	ldw	r2,-52(fp)
   13f5c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   13f60:	e0bfff0b 	ldhu	r2,-4(fp)
   13f64:	100d883a 	mov	r6,r2
   13f68:	e1400417 	ldw	r5,16(fp)
   13f6c:	e1000317 	ldw	r4,12(fp)
   13f70:	0014ee00 	call	14ee0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   13f74:	e0bfff0b 	ldhu	r2,-4(fp)
   13f78:	100f883a 	mov	r7,r2
   13f7c:	e1bffc17 	ldw	r6,-16(fp)
   13f80:	e17ffb17 	ldw	r5,-20(fp)
   13f84:	e13ffa17 	ldw	r4,-24(fp)
   13f88:	0016c3c0 	call	16c3c <OSTaskStkInit>
   13f8c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   13f90:	e0fffd03 	ldbu	r3,-12(fp)
   13f94:	e13ffe0b 	ldhu	r4,-8(fp)
   13f98:	e0bfff0b 	ldhu	r2,-4(fp)
   13f9c:	d8800215 	stw	r2,8(sp)
   13fa0:	e0800517 	ldw	r2,20(fp)
   13fa4:	d8800115 	stw	r2,4(sp)
   13fa8:	e0800417 	ldw	r2,16(fp)
   13fac:	d8800015 	stw	r2,0(sp)
   13fb0:	200f883a 	mov	r7,r4
   13fb4:	e1800317 	ldw	r6,12(fp)
   13fb8:	e17ff517 	ldw	r5,-44(fp)
   13fbc:	1809883a 	mov	r4,r3
   13fc0:	000f9b40 	call	f9b4 <OS_TCBInit>
   13fc4:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   13fc8:	e0bff603 	ldbu	r2,-40(fp)
   13fcc:	1000061e 	bne	r2,zero,13fe8 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   13fd0:	d0a72043 	ldbu	r2,-25471(gp)
   13fd4:	10803fcc 	andi	r2,r2,255
   13fd8:	10800058 	cmpnei	r2,r2,1
   13fdc:	1000151e 	bne	r2,zero,14034 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   13fe0:	000f5b40 	call	f5b4 <OS_Sched>
   13fe4:	00001306 	br	14034 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13fe8:	0005303a 	rdctl	r2,status
   13fec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ff0:	e0fff817 	ldw	r3,-32(fp)
   13ff4:	00bfff84 	movi	r2,-2
   13ff8:	1884703a 	and	r2,r3,r2
   13ffc:	1001703a 	wrctl	status,r2
  
  return context;
   14000:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14004:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14008:	e0fffd03 	ldbu	r3,-12(fp)
   1400c:	00800134 	movhi	r2,4
   14010:	10b23704 	addi	r2,r2,-14116
   14014:	18c7883a 	add	r3,r3,r3
   14018:	18c7883a 	add	r3,r3,r3
   1401c:	10c5883a 	add	r2,r2,r3
   14020:	10000015 	stw	zero,0(r2)
   14024:	e0bff117 	ldw	r2,-60(fp)
   14028:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1402c:	e0bff417 	ldw	r2,-48(fp)
   14030:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14034:	e0bff603 	ldbu	r2,-40(fp)
   14038:	00000506 	br	14050 <OSTaskCreateExt+0x1d0>
   1403c:	e0bff117 	ldw	r2,-60(fp)
   14040:	e0bff715 	stw	r2,-36(fp)
   14044:	e0bff717 	ldw	r2,-36(fp)
   14048:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1404c:	00800a04 	movi	r2,40
}
   14050:	e037883a 	mov	sp,fp
   14054:	dfc00117 	ldw	ra,4(sp)
   14058:	df000017 	ldw	fp,0(sp)
   1405c:	dec00204 	addi	sp,sp,8
   14060:	f800283a 	ret

00014064 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   14064:	defff404 	addi	sp,sp,-48
   14068:	dfc00b15 	stw	ra,44(sp)
   1406c:	df000a15 	stw	fp,40(sp)
   14070:	df000a04 	addi	fp,sp,40
   14074:	2005883a 	mov	r2,r4
   14078:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1407c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   14080:	d0a72e03 	ldbu	r2,-25416(gp)
   14084:	10803fcc 	andi	r2,r2,255
   14088:	10000226 	beq	r2,zero,14094 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   1408c:	00801004 	movi	r2,64
   14090:	0000c006 	br	14394 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   14094:	e0bfff03 	ldbu	r2,-4(fp)
   14098:	10800518 	cmpnei	r2,r2,20
   1409c:	1000021e 	bne	r2,zero,140a8 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   140a0:	00800f84 	movi	r2,62
   140a4:	0000bb06 	br	14394 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   140a8:	e0bfff03 	ldbu	r2,-4(fp)
   140ac:	10800530 	cmpltui	r2,r2,20
   140b0:	1000051e 	bne	r2,zero,140c8 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   140b4:	e0bfff03 	ldbu	r2,-4(fp)
   140b8:	10803fe0 	cmpeqi	r2,r2,255
   140bc:	1000021e 	bne	r2,zero,140c8 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   140c0:	00800a84 	movi	r2,42
   140c4:	0000b306 	br	14394 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   140c8:	0005303a 	rdctl	r2,status
   140cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   140d0:	e0fffe17 	ldw	r3,-8(fp)
   140d4:	00bfff84 	movi	r2,-2
   140d8:	1884703a 	and	r2,r3,r2
   140dc:	1001703a 	wrctl	status,r2
  
  return context;
   140e0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   140e4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   140e8:	e0bfff03 	ldbu	r2,-4(fp)
   140ec:	10803fd8 	cmpnei	r2,r2,255
   140f0:	1000031e 	bne	r2,zero,14100 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   140f4:	d0a72f17 	ldw	r2,-25412(gp)
   140f8:	10800c83 	ldbu	r2,50(r2)
   140fc:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14100:	e0ffff03 	ldbu	r3,-4(fp)
   14104:	00800134 	movhi	r2,4
   14108:	10b23704 	addi	r2,r2,-14116
   1410c:	18c7883a 	add	r3,r3,r3
   14110:	18c7883a 	add	r3,r3,r3
   14114:	10c5883a 	add	r2,r2,r3
   14118:	10800017 	ldw	r2,0(r2)
   1411c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   14120:	e0bff817 	ldw	r2,-32(fp)
   14124:	1000061e 	bne	r2,zero,14140 <OSTaskDel+0xdc>
   14128:	e0bff617 	ldw	r2,-40(fp)
   1412c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14130:	e0bff717 	ldw	r2,-36(fp)
   14134:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14138:	008010c4 	movi	r2,67
   1413c:	00009506 	br	14394 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   14140:	e0bff817 	ldw	r2,-32(fp)
   14144:	10800058 	cmpnei	r2,r2,1
   14148:	1000061e 	bne	r2,zero,14164 <OSTaskDel+0x100>
   1414c:	e0bff617 	ldw	r2,-40(fp)
   14150:	e0bff915 	stw	r2,-28(fp)
   14154:	e0bff917 	ldw	r2,-28(fp)
   14158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1415c:	00800f44 	movi	r2,61
   14160:	00008c06 	br	14394 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   14164:	e0bff817 	ldw	r2,-32(fp)
   14168:	10800d03 	ldbu	r2,52(r2)
   1416c:	10c03fcc 	andi	r3,r2,255
   14170:	e0bff817 	ldw	r2,-32(fp)
   14174:	10800d03 	ldbu	r2,52(r2)
   14178:	11003fcc 	andi	r4,r2,255
   1417c:	d0a72c44 	addi	r2,gp,-25423
   14180:	2085883a 	add	r2,r4,r2
   14184:	10800003 	ldbu	r2,0(r2)
   14188:	1009883a 	mov	r4,r2
   1418c:	e0bff817 	ldw	r2,-32(fp)
   14190:	10800d43 	ldbu	r2,53(r2)
   14194:	0084303a 	nor	r2,zero,r2
   14198:	2084703a 	and	r2,r4,r2
   1419c:	1009883a 	mov	r4,r2
   141a0:	d0a72c44 	addi	r2,gp,-25423
   141a4:	1885883a 	add	r2,r3,r2
   141a8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   141ac:	e0bff817 	ldw	r2,-32(fp)
   141b0:	10800d03 	ldbu	r2,52(r2)
   141b4:	10c03fcc 	andi	r3,r2,255
   141b8:	d0a72c44 	addi	r2,gp,-25423
   141bc:	1885883a 	add	r2,r3,r2
   141c0:	10800003 	ldbu	r2,0(r2)
   141c4:	10803fcc 	andi	r2,r2,255
   141c8:	1000071e 	bne	r2,zero,141e8 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   141cc:	e0bff817 	ldw	r2,-32(fp)
   141d0:	10800d83 	ldbu	r2,54(r2)
   141d4:	0084303a 	nor	r2,zero,r2
   141d8:	1007883a 	mov	r3,r2
   141dc:	d0a72c03 	ldbu	r2,-25424(gp)
   141e0:	1884703a 	and	r2,r3,r2
   141e4:	d0a72c05 	stb	r2,-25424(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   141e8:	e0bff817 	ldw	r2,-32(fp)
   141ec:	10800717 	ldw	r2,28(r2)
   141f0:	10000526 	beq	r2,zero,14208 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   141f4:	e0bff817 	ldw	r2,-32(fp)
   141f8:	10800717 	ldw	r2,28(r2)
   141fc:	100b883a 	mov	r5,r2
   14200:	e13ff817 	ldw	r4,-32(fp)
   14204:	000ef600 	call	ef60 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14208:	e0bff817 	ldw	r2,-32(fp)
   1420c:	10800817 	ldw	r2,32(r2)
   14210:	10000526 	beq	r2,zero,14228 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14214:	e0bff817 	ldw	r2,-32(fp)
   14218:	10800817 	ldw	r2,32(r2)
   1421c:	100b883a 	mov	r5,r2
   14220:	e13ff817 	ldw	r4,-32(fp)
   14224:	000f0180 	call	f018 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   14228:	e0bff817 	ldw	r2,-32(fp)
   1422c:	10800a17 	ldw	r2,40(r2)
   14230:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   14234:	e0bffb17 	ldw	r2,-20(fp)
   14238:	10000226 	beq	r2,zero,14244 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1423c:	e13ffb17 	ldw	r4,-20(fp)
   14240:	00114880 	call	11488 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   14244:	e0bff817 	ldw	r2,-32(fp)
   14248:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1424c:	e0bff817 	ldw	r2,-32(fp)
   14250:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14254:	e0bff817 	ldw	r2,-32(fp)
   14258:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1425c:	d0a72003 	ldbu	r2,-25472(gp)
   14260:	10803fcc 	andi	r2,r2,255
   14264:	10803fe0 	cmpeqi	r2,r2,255
   14268:	1000031e 	bne	r2,zero,14278 <OSTaskDel+0x214>
        OSLockNesting++;
   1426c:	d0a72003 	ldbu	r2,-25472(gp)
   14270:	10800044 	addi	r2,r2,1
   14274:	d0a72005 	stb	r2,-25472(gp)
   14278:	e0bff617 	ldw	r2,-40(fp)
   1427c:	e0bffd15 	stw	r2,-12(fp)
   14280:	e0bffd17 	ldw	r2,-12(fp)
   14284:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   14288:	000eb480 	call	eb48 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1428c:	0005303a 	rdctl	r2,status
   14290:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14294:	e0fffa17 	ldw	r3,-24(fp)
   14298:	00bfff84 	movi	r2,-2
   1429c:	1884703a 	and	r2,r3,r2
   142a0:	1001703a 	wrctl	status,r2
  
  return context;
   142a4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   142a8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   142ac:	d0a72003 	ldbu	r2,-25472(gp)
   142b0:	10803fcc 	andi	r2,r2,255
   142b4:	10000326 	beq	r2,zero,142c4 <OSTaskDel+0x260>
        OSLockNesting--;
   142b8:	d0a72003 	ldbu	r2,-25472(gp)
   142bc:	10bfffc4 	addi	r2,r2,-1
   142c0:	d0a72005 	stb	r2,-25472(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   142c4:	e13ff817 	ldw	r4,-32(fp)
   142c8:	0016dbc0 	call	16dbc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   142cc:	d0a72843 	ldbu	r2,-25439(gp)
   142d0:	10bfffc4 	addi	r2,r2,-1
   142d4:	d0a72845 	stb	r2,-25439(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   142d8:	e0ffff03 	ldbu	r3,-4(fp)
   142dc:	00800134 	movhi	r2,4
   142e0:	10b23704 	addi	r2,r2,-14116
   142e4:	18c7883a 	add	r3,r3,r3
   142e8:	18c7883a 	add	r3,r3,r3
   142ec:	10c5883a 	add	r2,r2,r3
   142f0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   142f4:	e0bff817 	ldw	r2,-32(fp)
   142f8:	10800617 	ldw	r2,24(r2)
   142fc:	1000071e 	bne	r2,zero,1431c <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14300:	e0bff817 	ldw	r2,-32(fp)
   14304:	10800517 	ldw	r2,20(r2)
   14308:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1430c:	e0bff817 	ldw	r2,-32(fp)
   14310:	10800517 	ldw	r2,20(r2)
   14314:	d0a72315 	stw	r2,-25460(gp)
   14318:	00000a06 	br	14344 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1431c:	e0bff817 	ldw	r2,-32(fp)
   14320:	10800617 	ldw	r2,24(r2)
   14324:	e0fff817 	ldw	r3,-32(fp)
   14328:	18c00517 	ldw	r3,20(r3)
   1432c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   14330:	e0bff817 	ldw	r2,-32(fp)
   14334:	10800517 	ldw	r2,20(r2)
   14338:	e0fff817 	ldw	r3,-32(fp)
   1433c:	18c00617 	ldw	r3,24(r3)
   14340:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14344:	d0e72717 	ldw	r3,-25444(gp)
   14348:	e0bff817 	ldw	r2,-32(fp)
   1434c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14350:	e0bff817 	ldw	r2,-32(fp)
   14354:	d0a72715 	stw	r2,-25444(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14358:	e0bff817 	ldw	r2,-32(fp)
   1435c:	00c00fc4 	movi	r3,63
   14360:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14364:	e0bff817 	ldw	r2,-32(fp)
   14368:	10001345 	stb	zero,77(r2)
   1436c:	e0bff617 	ldw	r2,-40(fp)
   14370:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14374:	e0bffc17 	ldw	r2,-16(fp)
   14378:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1437c:	d0a72043 	ldbu	r2,-25471(gp)
   14380:	10803fcc 	andi	r2,r2,255
   14384:	10800058 	cmpnei	r2,r2,1
   14388:	1000011e 	bne	r2,zero,14390 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   1438c:	000f5b40 	call	f5b4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14390:	0005883a 	mov	r2,zero
}
   14394:	e037883a 	mov	sp,fp
   14398:	dfc00117 	ldw	ra,4(sp)
   1439c:	df000017 	ldw	fp,0(sp)
   143a0:	dec00204 	addi	sp,sp,8
   143a4:	f800283a 	ret

000143a8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   143a8:	defff504 	addi	sp,sp,-44
   143ac:	df000a15 	stw	fp,40(sp)
   143b0:	df000a04 	addi	fp,sp,40
   143b4:	2005883a 	mov	r2,r4
   143b8:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   143bc:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   143c0:	e0bfff03 	ldbu	r2,-4(fp)
   143c4:	10800518 	cmpnei	r2,r2,20
   143c8:	1000021e 	bne	r2,zero,143d4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   143cc:	00800f84 	movi	r2,62
   143d0:	00004506 	br	144e8 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   143d4:	e0bfff03 	ldbu	r2,-4(fp)
   143d8:	10800530 	cmpltui	r2,r2,20
   143dc:	1000051e 	bne	r2,zero,143f4 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   143e0:	e0bfff03 	ldbu	r2,-4(fp)
   143e4:	10803fe0 	cmpeqi	r2,r2,255
   143e8:	1000021e 	bne	r2,zero,143f4 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   143ec:	00800a84 	movi	r2,42
   143f0:	00003d06 	br	144e8 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   143f4:	e0bfff03 	ldbu	r2,-4(fp)
   143f8:	10803fd8 	cmpnei	r2,r2,255
   143fc:	1000111e 	bne	r2,zero,14444 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14400:	0005303a 	rdctl	r2,status
   14404:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14408:	e0fff917 	ldw	r3,-28(fp)
   1440c:	00bfff84 	movi	r2,-2
   14410:	1884703a 	and	r2,r3,r2
   14414:	1001703a 	wrctl	status,r2
  
  return context;
   14418:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1441c:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14420:	d0a72f17 	ldw	r2,-25412(gp)
   14424:	10800dc3 	ldbu	r2,55(r2)
   14428:	e0bff805 	stb	r2,-32(fp)
   1442c:	e0bff617 	ldw	r2,-40(fp)
   14430:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14434:	e0bffe17 	ldw	r2,-8(fp)
   14438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1443c:	e0bff803 	ldbu	r2,-32(fp)
   14440:	00002906 	br	144e8 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14444:	0005303a 	rdctl	r2,status
   14448:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1444c:	e0fff717 	ldw	r3,-36(fp)
   14450:	00bfff84 	movi	r2,-2
   14454:	1884703a 	and	r2,r3,r2
   14458:	1001703a 	wrctl	status,r2
  
  return context;
   1445c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   14460:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14464:	e0ffff03 	ldbu	r3,-4(fp)
   14468:	00800134 	movhi	r2,4
   1446c:	10b23704 	addi	r2,r2,-14116
   14470:	18c7883a 	add	r3,r3,r3
   14474:	18c7883a 	add	r3,r3,r3
   14478:	10c5883a 	add	r2,r2,r3
   1447c:	10800017 	ldw	r2,0(r2)
   14480:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14484:	e0bffb17 	ldw	r2,-20(fp)
   14488:	1000061e 	bne	r2,zero,144a4 <OSTaskDelReq+0xfc>
   1448c:	e0bff617 	ldw	r2,-40(fp)
   14490:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14494:	e0bffa17 	ldw	r2,-24(fp)
   14498:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1449c:	008010c4 	movi	r2,67
   144a0:	00001106 	br	144e8 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   144a4:	e0bffb17 	ldw	r2,-20(fp)
   144a8:	10800058 	cmpnei	r2,r2,1
   144ac:	1000061e 	bne	r2,zero,144c8 <OSTaskDelReq+0x120>
   144b0:	e0bff617 	ldw	r2,-40(fp)
   144b4:	e0bffc15 	stw	r2,-16(fp)
   144b8:	e0bffc17 	ldw	r2,-16(fp)
   144bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   144c0:	00800f44 	movi	r2,61
   144c4:	00000806 	br	144e8 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   144c8:	e0bffb17 	ldw	r2,-20(fp)
   144cc:	00c00fc4 	movi	r3,63
   144d0:	10c00dc5 	stb	r3,55(r2)
   144d4:	e0bff617 	ldw	r2,-40(fp)
   144d8:	e0bffd15 	stw	r2,-12(fp)
   144dc:	e0bffd17 	ldw	r2,-12(fp)
   144e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   144e4:	0005883a 	mov	r2,zero
}
   144e8:	e037883a 	mov	sp,fp
   144ec:	df000017 	ldw	fp,0(sp)
   144f0:	dec00104 	addi	sp,sp,4
   144f4:	f800283a 	ret

000144f8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   144f8:	defff404 	addi	sp,sp,-48
   144fc:	dfc00b15 	stw	ra,44(sp)
   14500:	df000a15 	stw	fp,40(sp)
   14504:	df000a04 	addi	fp,sp,40
   14508:	2005883a 	mov	r2,r4
   1450c:	e17ffe15 	stw	r5,-8(fp)
   14510:	e1bfff15 	stw	r6,-4(fp)
   14514:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   14518:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1451c:	e0bfff17 	ldw	r2,-4(fp)
   14520:	1000021e 	bne	r2,zero,1452c <OSTaskNameGet+0x34>
        return (0);
   14524:	0005883a 	mov	r2,zero
   14528:	00005406 	br	1467c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1452c:	e0bffd03 	ldbu	r2,-12(fp)
   14530:	10800570 	cmpltui	r2,r2,21
   14534:	1000081e 	bne	r2,zero,14558 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   14538:	e0bffd03 	ldbu	r2,-12(fp)
   1453c:	10803fe0 	cmpeqi	r2,r2,255
   14540:	1000051e 	bne	r2,zero,14558 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   14544:	e0bfff17 	ldw	r2,-4(fp)
   14548:	00c00a84 	movi	r3,42
   1454c:	10c00005 	stb	r3,0(r2)
            return (0);
   14550:	0005883a 	mov	r2,zero
   14554:	00004906 	br	1467c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   14558:	e0bffe17 	ldw	r2,-8(fp)
   1455c:	1000051e 	bne	r2,zero,14574 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   14560:	e0bfff17 	ldw	r2,-4(fp)
   14564:	00c00304 	movi	r3,12
   14568:	10c00005 	stb	r3,0(r2)
        return (0);
   1456c:	0005883a 	mov	r2,zero
   14570:	00004206 	br	1467c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   14574:	d0a72e03 	ldbu	r2,-25416(gp)
   14578:	10803fcc 	andi	r2,r2,255
   1457c:	10000526 	beq	r2,zero,14594 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   14580:	e0bfff17 	ldw	r2,-4(fp)
   14584:	00c00444 	movi	r3,17
   14588:	10c00005 	stb	r3,0(r2)
        return (0);
   1458c:	0005883a 	mov	r2,zero
   14590:	00003a06 	br	1467c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14594:	0005303a 	rdctl	r2,status
   14598:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1459c:	e0fffc17 	ldw	r3,-16(fp)
   145a0:	00bfff84 	movi	r2,-2
   145a4:	1884703a 	and	r2,r3,r2
   145a8:	1001703a 	wrctl	status,r2
  
  return context;
   145ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   145b0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   145b4:	e0bffd03 	ldbu	r2,-12(fp)
   145b8:	10803fd8 	cmpnei	r2,r2,255
   145bc:	1000031e 	bne	r2,zero,145cc <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   145c0:	d0a72f17 	ldw	r2,-25412(gp)
   145c4:	10800c83 	ldbu	r2,50(r2)
   145c8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   145cc:	e0fffd03 	ldbu	r3,-12(fp)
   145d0:	00800134 	movhi	r2,4
   145d4:	10b23704 	addi	r2,r2,-14116
   145d8:	18c7883a 	add	r3,r3,r3
   145dc:	18c7883a 	add	r3,r3,r3
   145e0:	10c5883a 	add	r2,r2,r3
   145e4:	10800017 	ldw	r2,0(r2)
   145e8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   145ec:	e0bff817 	ldw	r2,-32(fp)
   145f0:	1000091e 	bne	r2,zero,14618 <OSTaskNameGet+0x120>
   145f4:	e0bff617 	ldw	r2,-40(fp)
   145f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145fc:	e0bff717 	ldw	r2,-36(fp)
   14600:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14604:	e0bfff17 	ldw	r2,-4(fp)
   14608:	00c010c4 	movi	r3,67
   1460c:	10c00005 	stb	r3,0(r2)
        return (0);
   14610:	0005883a 	mov	r2,zero
   14614:	00001906 	br	1467c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   14618:	e0bff817 	ldw	r2,-32(fp)
   1461c:	10800058 	cmpnei	r2,r2,1
   14620:	1000091e 	bne	r2,zero,14648 <OSTaskNameGet+0x150>
   14624:	e0bff617 	ldw	r2,-40(fp)
   14628:	e0bff915 	stw	r2,-28(fp)
   1462c:	e0bff917 	ldw	r2,-28(fp)
   14630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14634:	e0bfff17 	ldw	r2,-4(fp)
   14638:	00c010c4 	movi	r3,67
   1463c:	10c00005 	stb	r3,0(r2)
        return (0);
   14640:	0005883a 	mov	r2,zero
   14644:	00000d06 	br	1467c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   14648:	e0bff817 	ldw	r2,-32(fp)
   1464c:	10801304 	addi	r2,r2,76
   14650:	100b883a 	mov	r5,r2
   14654:	e13ffe17 	ldw	r4,-8(fp)
   14658:	000f6f80 	call	f6f8 <OS_StrCopy>
   1465c:	e0bffb05 	stb	r2,-20(fp)
   14660:	e0bff617 	ldw	r2,-40(fp)
   14664:	e0bffa15 	stw	r2,-24(fp)
   14668:	e0bffa17 	ldw	r2,-24(fp)
   1466c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14670:	e0bfff17 	ldw	r2,-4(fp)
   14674:	10000005 	stb	zero,0(r2)
    return (len);
   14678:	e0bffb03 	ldbu	r2,-20(fp)
}
   1467c:	e037883a 	mov	sp,fp
   14680:	dfc00117 	ldw	ra,4(sp)
   14684:	df000017 	ldw	fp,0(sp)
   14688:	dec00204 	addi	sp,sp,8
   1468c:	f800283a 	ret

00014690 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   14690:	defff304 	addi	sp,sp,-52
   14694:	dfc00c15 	stw	ra,48(sp)
   14698:	df000b15 	stw	fp,44(sp)
   1469c:	df000b04 	addi	fp,sp,44
   146a0:	2005883a 	mov	r2,r4
   146a4:	e17ffe15 	stw	r5,-8(fp)
   146a8:	e1bfff15 	stw	r6,-4(fp)
   146ac:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   146b0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   146b4:	e0bfff17 	ldw	r2,-4(fp)
   146b8:	10005c26 	beq	r2,zero,1482c <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   146bc:	e0bffd03 	ldbu	r2,-12(fp)
   146c0:	10800570 	cmpltui	r2,r2,21
   146c4:	1000071e 	bne	r2,zero,146e4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   146c8:	e0bffd03 	ldbu	r2,-12(fp)
   146cc:	10803fe0 	cmpeqi	r2,r2,255
   146d0:	1000041e 	bne	r2,zero,146e4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   146d4:	e0bfff17 	ldw	r2,-4(fp)
   146d8:	00c00a84 	movi	r3,42
   146dc:	10c00005 	stb	r3,0(r2)
            return;
   146e0:	00005306 	br	14830 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   146e4:	e0bffe17 	ldw	r2,-8(fp)
   146e8:	1000041e 	bne	r2,zero,146fc <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   146ec:	e0bfff17 	ldw	r2,-4(fp)
   146f0:	00c00304 	movi	r3,12
   146f4:	10c00005 	stb	r3,0(r2)
        return;
   146f8:	00004d06 	br	14830 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   146fc:	d0a72e03 	ldbu	r2,-25416(gp)
   14700:	10803fcc 	andi	r2,r2,255
   14704:	10000426 	beq	r2,zero,14718 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   14708:	e0bfff17 	ldw	r2,-4(fp)
   1470c:	00c00484 	movi	r3,18
   14710:	10c00005 	stb	r3,0(r2)
        return;
   14714:	00004606 	br	14830 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14718:	0005303a 	rdctl	r2,status
   1471c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14720:	e0fffc17 	ldw	r3,-16(fp)
   14724:	00bfff84 	movi	r2,-2
   14728:	1884703a 	and	r2,r3,r2
   1472c:	1001703a 	wrctl	status,r2
  
  return context;
   14730:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14734:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   14738:	e0bffd03 	ldbu	r2,-12(fp)
   1473c:	10803fd8 	cmpnei	r2,r2,255
   14740:	1000031e 	bne	r2,zero,14750 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   14744:	d0a72f17 	ldw	r2,-25412(gp)
   14748:	10800c83 	ldbu	r2,50(r2)
   1474c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14750:	e0fffd03 	ldbu	r3,-12(fp)
   14754:	00800134 	movhi	r2,4
   14758:	10b23704 	addi	r2,r2,-14116
   1475c:	18c7883a 	add	r3,r3,r3
   14760:	18c7883a 	add	r3,r3,r3
   14764:	10c5883a 	add	r2,r2,r3
   14768:	10800017 	ldw	r2,0(r2)
   1476c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   14770:	e0bff717 	ldw	r2,-36(fp)
   14774:	1000081e 	bne	r2,zero,14798 <OSTaskNameSet+0x108>
   14778:	e0bff517 	ldw	r2,-44(fp)
   1477c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14780:	e0bff617 	ldw	r2,-40(fp)
   14784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   14788:	e0bfff17 	ldw	r2,-4(fp)
   1478c:	00c010c4 	movi	r3,67
   14790:	10c00005 	stb	r3,0(r2)
        return;
   14794:	00002606 	br	14830 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   14798:	e0bff717 	ldw	r2,-36(fp)
   1479c:	10800058 	cmpnei	r2,r2,1
   147a0:	1000081e 	bne	r2,zero,147c4 <OSTaskNameSet+0x134>
   147a4:	e0bff517 	ldw	r2,-44(fp)
   147a8:	e0bff815 	stw	r2,-32(fp)
   147ac:	e0bff817 	ldw	r2,-32(fp)
   147b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   147b4:	e0bfff17 	ldw	r2,-4(fp)
   147b8:	00c010c4 	movi	r3,67
   147bc:	10c00005 	stb	r3,0(r2)
        return;
   147c0:	00001b06 	br	14830 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   147c4:	e13ffe17 	ldw	r4,-8(fp)
   147c8:	000f76c0 	call	f76c <OS_StrLen>
   147cc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   147d0:	e0bffa03 	ldbu	r2,-24(fp)
   147d4:	10800830 	cmpltui	r2,r2,32
   147d8:	1000081e 	bne	r2,zero,147fc <OSTaskNameSet+0x16c>
   147dc:	e0bff517 	ldw	r2,-44(fp)
   147e0:	e0bff915 	stw	r2,-28(fp)
   147e4:	e0bff917 	ldw	r2,-28(fp)
   147e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   147ec:	e0bfff17 	ldw	r2,-4(fp)
   147f0:	00c01044 	movi	r3,65
   147f4:	10c00005 	stb	r3,0(r2)
        return;
   147f8:	00000d06 	br	14830 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   147fc:	e0bff717 	ldw	r2,-36(fp)
   14800:	10801304 	addi	r2,r2,76
   14804:	e17ffe17 	ldw	r5,-8(fp)
   14808:	1009883a 	mov	r4,r2
   1480c:	000f6f80 	call	f6f8 <OS_StrCopy>
   14810:	e0bff517 	ldw	r2,-44(fp)
   14814:	e0bffb15 	stw	r2,-20(fp)
   14818:	e0bffb17 	ldw	r2,-20(fp)
   1481c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14820:	e0bfff17 	ldw	r2,-4(fp)
   14824:	10000005 	stb	zero,0(r2)
   14828:	00000106 	br	14830 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   1482c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   14830:	e037883a 	mov	sp,fp
   14834:	dfc00117 	ldw	ra,4(sp)
   14838:	df000017 	ldw	fp,0(sp)
   1483c:	dec00204 	addi	sp,sp,8
   14840:	f800283a 	ret

00014844 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   14844:	defff404 	addi	sp,sp,-48
   14848:	dfc00b15 	stw	ra,44(sp)
   1484c:	df000a15 	stw	fp,40(sp)
   14850:	df000a04 	addi	fp,sp,40
   14854:	2005883a 	mov	r2,r4
   14858:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1485c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   14860:	e0bfff03 	ldbu	r2,-4(fp)
   14864:	10800530 	cmpltui	r2,r2,20
   14868:	1000021e 	bne	r2,zero,14874 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1486c:	00800a84 	movi	r2,42
   14870:	00006406 	br	14a04 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14874:	0005303a 	rdctl	r2,status
   14878:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1487c:	e0fffe17 	ldw	r3,-8(fp)
   14880:	00bfff84 	movi	r2,-2
   14884:	1884703a 	and	r2,r3,r2
   14888:	1001703a 	wrctl	status,r2
  
  return context;
   1488c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14890:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14894:	e0ffff03 	ldbu	r3,-4(fp)
   14898:	00800134 	movhi	r2,4
   1489c:	10b23704 	addi	r2,r2,-14116
   148a0:	18c7883a 	add	r3,r3,r3
   148a4:	18c7883a 	add	r3,r3,r3
   148a8:	10c5883a 	add	r2,r2,r3
   148ac:	10800017 	ldw	r2,0(r2)
   148b0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   148b4:	e0bff817 	ldw	r2,-32(fp)
   148b8:	1000061e 	bne	r2,zero,148d4 <OSTaskResume+0x90>
   148bc:	e0bff617 	ldw	r2,-40(fp)
   148c0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148c4:	e0bff717 	ldw	r2,-36(fp)
   148c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   148cc:	00801184 	movi	r2,70
   148d0:	00004c06 	br	14a04 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   148d4:	e0bff817 	ldw	r2,-32(fp)
   148d8:	10800058 	cmpnei	r2,r2,1
   148dc:	1000061e 	bne	r2,zero,148f8 <OSTaskResume+0xb4>
   148e0:	e0bff617 	ldw	r2,-40(fp)
   148e4:	e0bff915 	stw	r2,-28(fp)
   148e8:	e0bff917 	ldw	r2,-28(fp)
   148ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   148f0:	008010c4 	movi	r2,67
   148f4:	00004306 	br	14a04 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   148f8:	e0bff817 	ldw	r2,-32(fp)
   148fc:	10800c03 	ldbu	r2,48(r2)
   14900:	10803fcc 	andi	r2,r2,255
   14904:	1080020c 	andi	r2,r2,8
   14908:	10003926 	beq	r2,zero,149f0 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1490c:	e0bff817 	ldw	r2,-32(fp)
   14910:	10c00c03 	ldbu	r3,48(r2)
   14914:	00bffdc4 	movi	r2,-9
   14918:	1884703a 	and	r2,r3,r2
   1491c:	1007883a 	mov	r3,r2
   14920:	e0bff817 	ldw	r2,-32(fp)
   14924:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   14928:	e0bff817 	ldw	r2,-32(fp)
   1492c:	10800c03 	ldbu	r2,48(r2)
   14930:	10803fcc 	andi	r2,r2,255
   14934:	1000281e 	bne	r2,zero,149d8 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   14938:	e0bff817 	ldw	r2,-32(fp)
   1493c:	10800b8b 	ldhu	r2,46(r2)
   14940:	10bfffcc 	andi	r2,r2,65535
   14944:	10001f1e 	bne	r2,zero,149c4 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   14948:	e0bff817 	ldw	r2,-32(fp)
   1494c:	10c00d83 	ldbu	r3,54(r2)
   14950:	d0a72c03 	ldbu	r2,-25424(gp)
   14954:	1884b03a 	or	r2,r3,r2
   14958:	d0a72c05 	stb	r2,-25424(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1495c:	e0bff817 	ldw	r2,-32(fp)
   14960:	10800d03 	ldbu	r2,52(r2)
   14964:	10c03fcc 	andi	r3,r2,255
   14968:	e0bff817 	ldw	r2,-32(fp)
   1496c:	10800d03 	ldbu	r2,52(r2)
   14970:	11003fcc 	andi	r4,r2,255
   14974:	d0a72c44 	addi	r2,gp,-25423
   14978:	2085883a 	add	r2,r4,r2
   1497c:	11000003 	ldbu	r4,0(r2)
   14980:	e0bff817 	ldw	r2,-32(fp)
   14984:	10800d43 	ldbu	r2,53(r2)
   14988:	2084b03a 	or	r2,r4,r2
   1498c:	1009883a 	mov	r4,r2
   14990:	d0a72c44 	addi	r2,gp,-25423
   14994:	1885883a 	add	r2,r3,r2
   14998:	11000005 	stb	r4,0(r2)
   1499c:	e0bff617 	ldw	r2,-40(fp)
   149a0:	e0bffa15 	stw	r2,-24(fp)
   149a4:	e0bffa17 	ldw	r2,-24(fp)
   149a8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   149ac:	d0a72043 	ldbu	r2,-25471(gp)
   149b0:	10803fcc 	andi	r2,r2,255
   149b4:	10800058 	cmpnei	r2,r2,1
   149b8:	10000b1e 	bne	r2,zero,149e8 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   149bc:	000f5b40 	call	f5b4 <OS_Sched>
   149c0:	00000906 	br	149e8 <OSTaskResume+0x1a4>
   149c4:	e0bff617 	ldw	r2,-40(fp)
   149c8:	e0bffb15 	stw	r2,-20(fp)
   149cc:	e0bffb17 	ldw	r2,-20(fp)
   149d0:	1001703a 	wrctl	status,r2
   149d4:	00000406 	br	149e8 <OSTaskResume+0x1a4>
   149d8:	e0bff617 	ldw	r2,-40(fp)
   149dc:	e0bffc15 	stw	r2,-16(fp)
   149e0:	e0bffc17 	ldw	r2,-16(fp)
   149e4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   149e8:	0005883a 	mov	r2,zero
   149ec:	00000506 	br	14a04 <OSTaskResume+0x1c0>
   149f0:	e0bff617 	ldw	r2,-40(fp)
   149f4:	e0bffd15 	stw	r2,-12(fp)
   149f8:	e0bffd17 	ldw	r2,-12(fp)
   149fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   14a00:	00801104 	movi	r2,68
}
   14a04:	e037883a 	mov	sp,fp
   14a08:	dfc00117 	ldw	ra,4(sp)
   14a0c:	df000017 	ldw	fp,0(sp)
   14a10:	dec00204 	addi	sp,sp,8
   14a14:	f800283a 	ret

00014a18 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   14a18:	defff304 	addi	sp,sp,-52
   14a1c:	df000c15 	stw	fp,48(sp)
   14a20:	df000c04 	addi	fp,sp,48
   14a24:	2005883a 	mov	r2,r4
   14a28:	e17fff15 	stw	r5,-4(fp)
   14a2c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   14a30:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   14a34:	e0bffe03 	ldbu	r2,-8(fp)
   14a38:	10800570 	cmpltui	r2,r2,21
   14a3c:	1000051e 	bne	r2,zero,14a54 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   14a40:	e0bffe03 	ldbu	r2,-8(fp)
   14a44:	10803fe0 	cmpeqi	r2,r2,255
   14a48:	1000021e 	bne	r2,zero,14a54 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   14a4c:	00800a84 	movi	r2,42
   14a50:	00005d06 	br	14bc8 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   14a54:	e0bfff17 	ldw	r2,-4(fp)
   14a58:	1000021e 	bne	r2,zero,14a64 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   14a5c:	00800244 	movi	r2,9
   14a60:	00005906 	br	14bc8 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   14a64:	e0bfff17 	ldw	r2,-4(fp)
   14a68:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   14a6c:	e0bfff17 	ldw	r2,-4(fp)
   14a70:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a74:	0005303a 	rdctl	r2,status
   14a78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a7c:	e0fffd17 	ldw	r3,-12(fp)
   14a80:	00bfff84 	movi	r2,-2
   14a84:	1884703a 	and	r2,r3,r2
   14a88:	1001703a 	wrctl	status,r2
  
  return context;
   14a8c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   14a90:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   14a94:	e0bffe03 	ldbu	r2,-8(fp)
   14a98:	10803fd8 	cmpnei	r2,r2,255
   14a9c:	1000031e 	bne	r2,zero,14aac <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14aa0:	d0a72f17 	ldw	r2,-25412(gp)
   14aa4:	10800c83 	ldbu	r2,50(r2)
   14aa8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14aac:	e0fffe03 	ldbu	r3,-8(fp)
   14ab0:	00800134 	movhi	r2,4
   14ab4:	10b23704 	addi	r2,r2,-14116
   14ab8:	18c7883a 	add	r3,r3,r3
   14abc:	18c7883a 	add	r3,r3,r3
   14ac0:	10c5883a 	add	r2,r2,r3
   14ac4:	10800017 	ldw	r2,0(r2)
   14ac8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   14acc:	e0bff817 	ldw	r2,-32(fp)
   14ad0:	1000061e 	bne	r2,zero,14aec <OSTaskStkChk+0xd4>
   14ad4:	e0bff617 	ldw	r2,-40(fp)
   14ad8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14adc:	e0bff717 	ldw	r2,-36(fp)
   14ae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14ae4:	008010c4 	movi	r2,67
   14ae8:	00003706 	br	14bc8 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   14aec:	e0bff817 	ldw	r2,-32(fp)
   14af0:	10800058 	cmpnei	r2,r2,1
   14af4:	1000061e 	bne	r2,zero,14b10 <OSTaskStkChk+0xf8>
   14af8:	e0bff617 	ldw	r2,-40(fp)
   14afc:	e0bff915 	stw	r2,-28(fp)
   14b00:	e0bff917 	ldw	r2,-28(fp)
   14b04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14b08:	008010c4 	movi	r2,67
   14b0c:	00002e06 	br	14bc8 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   14b10:	e0bff817 	ldw	r2,-32(fp)
   14b14:	1080040b 	ldhu	r2,16(r2)
   14b18:	10bfffcc 	andi	r2,r2,65535
   14b1c:	1080004c 	andi	r2,r2,1
   14b20:	1000061e 	bne	r2,zero,14b3c <OSTaskStkChk+0x124>
   14b24:	e0bff617 	ldw	r2,-40(fp)
   14b28:	e0bffa15 	stw	r2,-24(fp)
   14b2c:	e0bffa17 	ldw	r2,-24(fp)
   14b30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   14b34:	00801144 	movi	r2,69
   14b38:	00002306 	br	14bc8 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   14b3c:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   14b40:	e0bff817 	ldw	r2,-32(fp)
   14b44:	10800317 	ldw	r2,12(r2)
   14b48:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   14b4c:	e0bff817 	ldw	r2,-32(fp)
   14b50:	10800217 	ldw	r2,8(r2)
   14b54:	e0bff415 	stw	r2,-48(fp)
   14b58:	e0bff617 	ldw	r2,-40(fp)
   14b5c:	e0bffb15 	stw	r2,-20(fp)
   14b60:	e0bffb17 	ldw	r2,-20(fp)
   14b64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14b68:	00000306 	br	14b78 <OSTaskStkChk+0x160>
        nfree++;
   14b6c:	e0bff517 	ldw	r2,-44(fp)
   14b70:	10800044 	addi	r2,r2,1
   14b74:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   14b78:	e0bff417 	ldw	r2,-48(fp)
   14b7c:	10c00104 	addi	r3,r2,4
   14b80:	e0fff415 	stw	r3,-48(fp)
   14b84:	10800017 	ldw	r2,0(r2)
   14b88:	103ff826 	beq	r2,zero,14b6c <_gp+0xfffd6264>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   14b8c:	e0bff517 	ldw	r2,-44(fp)
   14b90:	1085883a 	add	r2,r2,r2
   14b94:	1085883a 	add	r2,r2,r2
   14b98:	1007883a 	mov	r3,r2
   14b9c:	e0bfff17 	ldw	r2,-4(fp)
   14ba0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   14ba4:	e0fffc17 	ldw	r3,-16(fp)
   14ba8:	e0bff517 	ldw	r2,-44(fp)
   14bac:	1885c83a 	sub	r2,r3,r2
   14bb0:	1085883a 	add	r2,r2,r2
   14bb4:	1085883a 	add	r2,r2,r2
   14bb8:	1007883a 	mov	r3,r2
   14bbc:	e0bfff17 	ldw	r2,-4(fp)
   14bc0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   14bc4:	0005883a 	mov	r2,zero
}
   14bc8:	e037883a 	mov	sp,fp
   14bcc:	df000017 	ldw	fp,0(sp)
   14bd0:	dec00104 	addi	sp,sp,4
   14bd4:	f800283a 	ret

00014bd8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   14bd8:	defff504 	addi	sp,sp,-44
   14bdc:	dfc00a15 	stw	ra,40(sp)
   14be0:	df000915 	stw	fp,36(sp)
   14be4:	df000904 	addi	fp,sp,36
   14be8:	2005883a 	mov	r2,r4
   14bec:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14bf0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   14bf4:	e0bfff03 	ldbu	r2,-4(fp)
   14bf8:	10800518 	cmpnei	r2,r2,20
   14bfc:	1000021e 	bne	r2,zero,14c08 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   14c00:	008011c4 	movi	r2,71
   14c04:	00006806 	br	14da8 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14c08:	e0bfff03 	ldbu	r2,-4(fp)
   14c0c:	10800530 	cmpltui	r2,r2,20
   14c10:	1000051e 	bne	r2,zero,14c28 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   14c14:	e0bfff03 	ldbu	r2,-4(fp)
   14c18:	10803fe0 	cmpeqi	r2,r2,255
   14c1c:	1000021e 	bne	r2,zero,14c28 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   14c20:	00800a84 	movi	r2,42
   14c24:	00006006 	br	14da8 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c28:	0005303a 	rdctl	r2,status
   14c2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c30:	e0fffe17 	ldw	r3,-8(fp)
   14c34:	00bfff84 	movi	r2,-2
   14c38:	1884703a 	and	r2,r3,r2
   14c3c:	1001703a 	wrctl	status,r2
  
  return context;
   14c40:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   14c44:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   14c48:	e0bfff03 	ldbu	r2,-4(fp)
   14c4c:	10803fd8 	cmpnei	r2,r2,255
   14c50:	1000061e 	bne	r2,zero,14c6c <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   14c54:	d0a72f17 	ldw	r2,-25412(gp)
   14c58:	10800c83 	ldbu	r2,50(r2)
   14c5c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   14c60:	00800044 	movi	r2,1
   14c64:	e0bff705 	stb	r2,-36(fp)
   14c68:	00000906 	br	14c90 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   14c6c:	d0a72f17 	ldw	r2,-25412(gp)
   14c70:	10800c83 	ldbu	r2,50(r2)
   14c74:	10c03fcc 	andi	r3,r2,255
   14c78:	e0bfff03 	ldbu	r2,-4(fp)
   14c7c:	1880031e 	bne	r3,r2,14c8c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   14c80:	00800044 	movi	r2,1
   14c84:	e0bff705 	stb	r2,-36(fp)
   14c88:	00000106 	br	14c90 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   14c8c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14c90:	e0ffff03 	ldbu	r3,-4(fp)
   14c94:	00800134 	movhi	r2,4
   14c98:	10b23704 	addi	r2,r2,-14116
   14c9c:	18c7883a 	add	r3,r3,r3
   14ca0:	18c7883a 	add	r3,r3,r3
   14ca4:	10c5883a 	add	r2,r2,r3
   14ca8:	10800017 	ldw	r2,0(r2)
   14cac:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   14cb0:	e0bffa17 	ldw	r2,-24(fp)
   14cb4:	1000061e 	bne	r2,zero,14cd0 <OSTaskSuspend+0xf8>
   14cb8:	e0bff817 	ldw	r2,-32(fp)
   14cbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cc0:	e0bff917 	ldw	r2,-28(fp)
   14cc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   14cc8:	00801204 	movi	r2,72
   14ccc:	00003606 	br	14da8 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   14cd0:	e0bffa17 	ldw	r2,-24(fp)
   14cd4:	10800058 	cmpnei	r2,r2,1
   14cd8:	1000061e 	bne	r2,zero,14cf4 <OSTaskSuspend+0x11c>
   14cdc:	e0bff817 	ldw	r2,-32(fp)
   14ce0:	e0bffb15 	stw	r2,-20(fp)
   14ce4:	e0bffb17 	ldw	r2,-20(fp)
   14ce8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14cec:	008010c4 	movi	r2,67
   14cf0:	00002d06 	br	14da8 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   14cf4:	e0bffa17 	ldw	r2,-24(fp)
   14cf8:	10800d03 	ldbu	r2,52(r2)
   14cfc:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   14d00:	e0fffd03 	ldbu	r3,-12(fp)
   14d04:	e13ffd03 	ldbu	r4,-12(fp)
   14d08:	d0a72c44 	addi	r2,gp,-25423
   14d0c:	2085883a 	add	r2,r4,r2
   14d10:	10800003 	ldbu	r2,0(r2)
   14d14:	1009883a 	mov	r4,r2
   14d18:	e0bffa17 	ldw	r2,-24(fp)
   14d1c:	10800d43 	ldbu	r2,53(r2)
   14d20:	0084303a 	nor	r2,zero,r2
   14d24:	2084703a 	and	r2,r4,r2
   14d28:	1009883a 	mov	r4,r2
   14d2c:	d0a72c44 	addi	r2,gp,-25423
   14d30:	1885883a 	add	r2,r3,r2
   14d34:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14d38:	e0fffd03 	ldbu	r3,-12(fp)
   14d3c:	d0a72c44 	addi	r2,gp,-25423
   14d40:	1885883a 	add	r2,r3,r2
   14d44:	10800003 	ldbu	r2,0(r2)
   14d48:	10803fcc 	andi	r2,r2,255
   14d4c:	1000071e 	bne	r2,zero,14d6c <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   14d50:	e0bffa17 	ldw	r2,-24(fp)
   14d54:	10800d83 	ldbu	r2,54(r2)
   14d58:	0084303a 	nor	r2,zero,r2
   14d5c:	1007883a 	mov	r3,r2
   14d60:	d0a72c03 	ldbu	r2,-25424(gp)
   14d64:	1884703a 	and	r2,r3,r2
   14d68:	d0a72c05 	stb	r2,-25424(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   14d6c:	e0bffa17 	ldw	r2,-24(fp)
   14d70:	10800c03 	ldbu	r2,48(r2)
   14d74:	10800214 	ori	r2,r2,8
   14d78:	1007883a 	mov	r3,r2
   14d7c:	e0bffa17 	ldw	r2,-24(fp)
   14d80:	10c00c05 	stb	r3,48(r2)
   14d84:	e0bff817 	ldw	r2,-32(fp)
   14d88:	e0bffc15 	stw	r2,-16(fp)
   14d8c:	e0bffc17 	ldw	r2,-16(fp)
   14d90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   14d94:	e0bff703 	ldbu	r2,-36(fp)
   14d98:	10800058 	cmpnei	r2,r2,1
   14d9c:	1000011e 	bne	r2,zero,14da4 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   14da0:	000f5b40 	call	f5b4 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14da4:	0005883a 	mov	r2,zero
}
   14da8:	e037883a 	mov	sp,fp
   14dac:	dfc00117 	ldw	ra,4(sp)
   14db0:	df000017 	ldw	fp,0(sp)
   14db4:	dec00204 	addi	sp,sp,8
   14db8:	f800283a 	ret

00014dbc <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   14dbc:	defff604 	addi	sp,sp,-40
   14dc0:	dfc00915 	stw	ra,36(sp)
   14dc4:	df000815 	stw	fp,32(sp)
   14dc8:	df000804 	addi	fp,sp,32
   14dcc:	2005883a 	mov	r2,r4
   14dd0:	e17fff15 	stw	r5,-4(fp)
   14dd4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14dd8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   14ddc:	e0bffe03 	ldbu	r2,-8(fp)
   14de0:	10800570 	cmpltui	r2,r2,21
   14de4:	1000051e 	bne	r2,zero,14dfc <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   14de8:	e0bffe03 	ldbu	r2,-8(fp)
   14dec:	10803fe0 	cmpeqi	r2,r2,255
   14df0:	1000021e 	bne	r2,zero,14dfc <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   14df4:	00800a84 	movi	r2,42
   14df8:	00003406 	br	14ecc <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   14dfc:	e0bfff17 	ldw	r2,-4(fp)
   14e00:	1000021e 	bne	r2,zero,14e0c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   14e04:	00800244 	movi	r2,9
   14e08:	00003006 	br	14ecc <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14e0c:	0005303a 	rdctl	r2,status
   14e10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14e14:	e0fffd17 	ldw	r3,-12(fp)
   14e18:	00bfff84 	movi	r2,-2
   14e1c:	1884703a 	and	r2,r3,r2
   14e20:	1001703a 	wrctl	status,r2
  
  return context;
   14e24:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14e28:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   14e2c:	e0bffe03 	ldbu	r2,-8(fp)
   14e30:	10803fd8 	cmpnei	r2,r2,255
   14e34:	1000031e 	bne	r2,zero,14e44 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   14e38:	d0a72f17 	ldw	r2,-25412(gp)
   14e3c:	10800c83 	ldbu	r2,50(r2)
   14e40:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14e44:	e0fffe03 	ldbu	r3,-8(fp)
   14e48:	00800134 	movhi	r2,4
   14e4c:	10b23704 	addi	r2,r2,-14116
   14e50:	18c7883a 	add	r3,r3,r3
   14e54:	18c7883a 	add	r3,r3,r3
   14e58:	10c5883a 	add	r2,r2,r3
   14e5c:	10800017 	ldw	r2,0(r2)
   14e60:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   14e64:	e0bffa17 	ldw	r2,-24(fp)
   14e68:	1000061e 	bne	r2,zero,14e84 <OSTaskQuery+0xc8>
   14e6c:	e0bff817 	ldw	r2,-32(fp)
   14e70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14e74:	e0bff917 	ldw	r2,-28(fp)
   14e78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   14e7c:	00800a44 	movi	r2,41
   14e80:	00001206 	br	14ecc <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   14e84:	e0bffa17 	ldw	r2,-24(fp)
   14e88:	10800058 	cmpnei	r2,r2,1
   14e8c:	1000061e 	bne	r2,zero,14ea8 <OSTaskQuery+0xec>
   14e90:	e0bff817 	ldw	r2,-32(fp)
   14e94:	e0bffb15 	stw	r2,-20(fp)
   14e98:	e0bffb17 	ldw	r2,-20(fp)
   14e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14ea0:	008010c4 	movi	r2,67
   14ea4:	00000906 	br	14ecc <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   14ea8:	01801b04 	movi	r6,108
   14eac:	e17ffa17 	ldw	r5,-24(fp)
   14eb0:	e13fff17 	ldw	r4,-4(fp)
   14eb4:	000f54c0 	call	f54c <OS_MemCopy>
   14eb8:	e0bff817 	ldw	r2,-32(fp)
   14ebc:	e0bffc15 	stw	r2,-16(fp)
   14ec0:	e0bffc17 	ldw	r2,-16(fp)
   14ec4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14ec8:	0005883a 	mov	r2,zero
}
   14ecc:	e037883a 	mov	sp,fp
   14ed0:	dfc00117 	ldw	ra,4(sp)
   14ed4:	df000017 	ldw	fp,0(sp)
   14ed8:	dec00204 	addi	sp,sp,8
   14edc:	f800283a 	ret

00014ee0 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   14ee0:	defffc04 	addi	sp,sp,-16
   14ee4:	df000315 	stw	fp,12(sp)
   14ee8:	df000304 	addi	fp,sp,12
   14eec:	e13ffd15 	stw	r4,-12(fp)
   14ef0:	e17ffe15 	stw	r5,-8(fp)
   14ef4:	3005883a 	mov	r2,r6
   14ef8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   14efc:	e0bfff0b 	ldhu	r2,-4(fp)
   14f00:	1080004c 	andi	r2,r2,1
   14f04:	10000d26 	beq	r2,zero,14f3c <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   14f08:	e0bfff0b 	ldhu	r2,-4(fp)
   14f0c:	1080008c 	andi	r2,r2,2
   14f10:	10000a26 	beq	r2,zero,14f3c <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14f14:	00000706 	br	14f34 <OS_TaskStkClr+0x54>
                size--;
   14f18:	e0bffe17 	ldw	r2,-8(fp)
   14f1c:	10bfffc4 	addi	r2,r2,-1
   14f20:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   14f24:	e0bffd17 	ldw	r2,-12(fp)
   14f28:	10c00104 	addi	r3,r2,4
   14f2c:	e0fffd15 	stw	r3,-12(fp)
   14f30:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   14f34:	e0bffe17 	ldw	r2,-8(fp)
   14f38:	103ff71e 	bne	r2,zero,14f18 <_gp+0xfffd6610>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   14f3c:	0001883a 	nop
   14f40:	e037883a 	mov	sp,fp
   14f44:	df000017 	ldw	fp,0(sp)
   14f48:	dec00104 	addi	sp,sp,4
   14f4c:	f800283a 	ret

00014f50 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   14f50:	defff904 	addi	sp,sp,-28
   14f54:	dfc00615 	stw	ra,24(sp)
   14f58:	df000515 	stw	fp,20(sp)
   14f5c:	df000504 	addi	fp,sp,20
   14f60:	2005883a 	mov	r2,r4
   14f64:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14f68:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14f6c:	d0a72e03 	ldbu	r2,-25416(gp)
   14f70:	10803fcc 	andi	r2,r2,255
   14f74:	1000311e 	bne	r2,zero,1503c <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   14f78:	e0bfff0b 	ldhu	r2,-4(fp)
   14f7c:	10003026 	beq	r2,zero,15040 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f80:	0005303a 	rdctl	r2,status
   14f84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f88:	e0fffe17 	ldw	r3,-8(fp)
   14f8c:	00bfff84 	movi	r2,-2
   14f90:	1884703a 	and	r2,r3,r2
   14f94:	1001703a 	wrctl	status,r2
  
  return context;
   14f98:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   14f9c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   14fa0:	d0a72f17 	ldw	r2,-25412(gp)
   14fa4:	10800d03 	ldbu	r2,52(r2)
   14fa8:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   14fac:	e0fffd03 	ldbu	r3,-12(fp)
   14fb0:	e13ffd03 	ldbu	r4,-12(fp)
   14fb4:	d0a72c44 	addi	r2,gp,-25423
   14fb8:	2085883a 	add	r2,r4,r2
   14fbc:	10800003 	ldbu	r2,0(r2)
   14fc0:	1009883a 	mov	r4,r2
   14fc4:	d0a72f17 	ldw	r2,-25412(gp)
   14fc8:	10800d43 	ldbu	r2,53(r2)
   14fcc:	0084303a 	nor	r2,zero,r2
   14fd0:	2084703a 	and	r2,r4,r2
   14fd4:	1009883a 	mov	r4,r2
   14fd8:	d0a72c44 	addi	r2,gp,-25423
   14fdc:	1885883a 	add	r2,r3,r2
   14fe0:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   14fe4:	e0fffd03 	ldbu	r3,-12(fp)
   14fe8:	d0a72c44 	addi	r2,gp,-25423
   14fec:	1885883a 	add	r2,r3,r2
   14ff0:	10800003 	ldbu	r2,0(r2)
   14ff4:	10803fcc 	andi	r2,r2,255
   14ff8:	1000071e 	bne	r2,zero,15018 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   14ffc:	d0a72f17 	ldw	r2,-25412(gp)
   15000:	10800d83 	ldbu	r2,54(r2)
   15004:	0084303a 	nor	r2,zero,r2
   15008:	1007883a 	mov	r3,r2
   1500c:	d0a72c03 	ldbu	r2,-25424(gp)
   15010:	1884703a 	and	r2,r3,r2
   15014:	d0a72c05 	stb	r2,-25424(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   15018:	d0a72f17 	ldw	r2,-25412(gp)
   1501c:	e0ffff0b 	ldhu	r3,-4(fp)
   15020:	10c00b8d 	sth	r3,46(r2)
   15024:	e0bffb17 	ldw	r2,-20(fp)
   15028:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1502c:	e0bffc17 	ldw	r2,-16(fp)
   15030:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   15034:	000f5b40 	call	f5b4 <OS_Sched>
   15038:	00000106 	br	15040 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   1503c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   15040:	e037883a 	mov	sp,fp
   15044:	dfc00117 	ldw	ra,4(sp)
   15048:	df000017 	ldw	fp,0(sp)
   1504c:	dec00204 	addi	sp,sp,8
   15050:	f800283a 	ret

00015054 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   15054:	defff704 	addi	sp,sp,-36
   15058:	dfc00815 	stw	ra,32(sp)
   1505c:	df000715 	stw	fp,28(sp)
   15060:	dc000615 	stw	r16,24(sp)
   15064:	df000704 	addi	fp,sp,28
   15068:	2011883a 	mov	r8,r4
   1506c:	2809883a 	mov	r4,r5
   15070:	3007883a 	mov	r3,r6
   15074:	3805883a 	mov	r2,r7
   15078:	e23ffb05 	stb	r8,-20(fp)
   1507c:	e13ffc05 	stb	r4,-16(fp)
   15080:	e0fffd05 	stb	r3,-12(fp)
   15084:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15088:	d0a72e03 	ldbu	r2,-25416(gp)
   1508c:	10803fcc 	andi	r2,r2,255
   15090:	10000226 	beq	r2,zero,1509c <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   15094:	00801544 	movi	r2,85
   15098:	00004106 	br	151a0 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1509c:	e0bffb03 	ldbu	r2,-20(fp)
   150a0:	1000081e 	bne	r2,zero,150c4 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   150a4:	e0bffc03 	ldbu	r2,-16(fp)
   150a8:	1000061e 	bne	r2,zero,150c4 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   150ac:	e0bffd03 	ldbu	r2,-12(fp)
   150b0:	1000041e 	bne	r2,zero,150c4 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   150b4:	e0bffe0b 	ldhu	r2,-8(fp)
   150b8:	1000021e 	bne	r2,zero,150c4 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   150bc:	00801504 	movi	r2,84
   150c0:	00003706 	br	151a0 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   150c4:	e0bffc03 	ldbu	r2,-16(fp)
   150c8:	10800f30 	cmpltui	r2,r2,60
   150cc:	1000021e 	bne	r2,zero,150d8 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   150d0:	00801444 	movi	r2,81
   150d4:	00003206 	br	151a0 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   150d8:	e0bffd03 	ldbu	r2,-12(fp)
   150dc:	10800f30 	cmpltui	r2,r2,60
   150e0:	1000021e 	bne	r2,zero,150ec <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   150e4:	00801484 	movi	r2,82
   150e8:	00002d06 	br	151a0 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   150ec:	e0bffe0b 	ldhu	r2,-8(fp)
   150f0:	1080fa30 	cmpltui	r2,r2,1000
   150f4:	1000021e 	bne	r2,zero,15100 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   150f8:	008014c4 	movi	r2,83
   150fc:	00002806 	br	151a0 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15100:	e0bffb03 	ldbu	r2,-20(fp)
   15104:	10c38424 	muli	r3,r2,3600
   15108:	e0bffc03 	ldbu	r2,-16(fp)
   1510c:	10800f24 	muli	r2,r2,60
   15110:	1887883a 	add	r3,r3,r2
   15114:	e0bffd03 	ldbu	r2,-12(fp)
   15118:	1887883a 	add	r3,r3,r2
   1511c:	0080bef4 	movhi	r2,763
   15120:	10bc2004 	addi	r2,r2,-3968
   15124:	18a1383a 	mul	r16,r3,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   15128:	e0fffe0b 	ldhu	r3,-8(fp)
   1512c:	0080bef4 	movhi	r2,763
   15130:	10bc2004 	addi	r2,r2,-3968
   15134:	1885383a 	mul	r2,r3,r2
   15138:	0140fa04 	movi	r5,1000
   1513c:	1009883a 	mov	r4,r2
   15140:	00006340 	call	634 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15144:	8085883a 	add	r2,r16,r2
   15148:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1514c:	e0bffa17 	ldw	r2,-24(fp)
   15150:	1004d43a 	srli	r2,r2,16
   15154:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   15158:	e0bffa17 	ldw	r2,-24(fp)
   1515c:	10bfffcc 	andi	r2,r2,65535
   15160:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   15164:	e0bffa17 	ldw	r2,-24(fp)
   15168:	10bfffcc 	andi	r2,r2,65535
   1516c:	1009883a 	mov	r4,r2
   15170:	0014f500 	call	14f50 <OSTimeDly>
    while (loops > 0) {
   15174:	00000706 	br	15194 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   15178:	01200014 	movui	r4,32768
   1517c:	0014f500 	call	14f50 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15180:	01200014 	movui	r4,32768
   15184:	0014f500 	call	14f50 <OSTimeDly>
        loops--;
   15188:	e0bff90b 	ldhu	r2,-28(fp)
   1518c:	10bfffc4 	addi	r2,r2,-1
   15190:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15194:	e0bff90b 	ldhu	r2,-28(fp)
   15198:	103ff71e 	bne	r2,zero,15178 <_gp+0xfffd6870>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1519c:	0005883a 	mov	r2,zero
}
   151a0:	e6ffff04 	addi	sp,fp,-4
   151a4:	dfc00217 	ldw	ra,8(sp)
   151a8:	df000117 	ldw	fp,4(sp)
   151ac:	dc000017 	ldw	r16,0(sp)
   151b0:	dec00304 	addi	sp,sp,12
   151b4:	f800283a 	ret

000151b8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   151b8:	defff504 	addi	sp,sp,-44
   151bc:	dfc00a15 	stw	ra,40(sp)
   151c0:	df000915 	stw	fp,36(sp)
   151c4:	df000904 	addi	fp,sp,36
   151c8:	2005883a 	mov	r2,r4
   151cc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   151d0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   151d4:	e0bfff03 	ldbu	r2,-4(fp)
   151d8:	10800530 	cmpltui	r2,r2,20
   151dc:	1000021e 	bne	r2,zero,151e8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   151e0:	00800a84 	movi	r2,42
   151e4:	00006406 	br	15378 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   151e8:	0005303a 	rdctl	r2,status
   151ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   151f0:	e0fffe17 	ldw	r3,-8(fp)
   151f4:	00bfff84 	movi	r2,-2
   151f8:	1884703a 	and	r2,r3,r2
   151fc:	1001703a 	wrctl	status,r2
  
  return context;
   15200:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15204:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   15208:	e0ffff03 	ldbu	r3,-4(fp)
   1520c:	00800134 	movhi	r2,4
   15210:	10b23704 	addi	r2,r2,-14116
   15214:	18c7883a 	add	r3,r3,r3
   15218:	18c7883a 	add	r3,r3,r3
   1521c:	10c5883a 	add	r2,r2,r3
   15220:	10800017 	ldw	r2,0(r2)
   15224:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   15228:	e0bff917 	ldw	r2,-28(fp)
   1522c:	1000061e 	bne	r2,zero,15248 <OSTimeDlyResume+0x90>
   15230:	e0bff717 	ldw	r2,-36(fp)
   15234:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15238:	e0bff817 	ldw	r2,-32(fp)
   1523c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15240:	008010c4 	movi	r2,67
   15244:	00004c06 	br	15378 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15248:	e0bff917 	ldw	r2,-28(fp)
   1524c:	10800058 	cmpnei	r2,r2,1
   15250:	1000061e 	bne	r2,zero,1526c <OSTimeDlyResume+0xb4>
   15254:	e0bff717 	ldw	r2,-36(fp)
   15258:	e0bffa15 	stw	r2,-24(fp)
   1525c:	e0bffa17 	ldw	r2,-24(fp)
   15260:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15264:	008010c4 	movi	r2,67
   15268:	00004306 	br	15378 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1526c:	e0bff917 	ldw	r2,-28(fp)
   15270:	10800b8b 	ldhu	r2,46(r2)
   15274:	10bfffcc 	andi	r2,r2,65535
   15278:	1000061e 	bne	r2,zero,15294 <OSTimeDlyResume+0xdc>
   1527c:	e0bff717 	ldw	r2,-36(fp)
   15280:	e0bffb15 	stw	r2,-20(fp)
   15284:	e0bffb17 	ldw	r2,-20(fp)
   15288:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1528c:	00801404 	movi	r2,80
   15290:	00003906 	br	15378 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15294:	e0bff917 	ldw	r2,-28(fp)
   15298:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1529c:	e0bff917 	ldw	r2,-28(fp)
   152a0:	10800c03 	ldbu	r2,48(r2)
   152a4:	10803fcc 	andi	r2,r2,255
   152a8:	10800dcc 	andi	r2,r2,55
   152ac:	10000b26 	beq	r2,zero,152dc <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   152b0:	e0bff917 	ldw	r2,-28(fp)
   152b4:	10c00c03 	ldbu	r3,48(r2)
   152b8:	00bff204 	movi	r2,-56
   152bc:	1884703a 	and	r2,r3,r2
   152c0:	1007883a 	mov	r3,r2
   152c4:	e0bff917 	ldw	r2,-28(fp)
   152c8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   152cc:	e0bff917 	ldw	r2,-28(fp)
   152d0:	00c00044 	movi	r3,1
   152d4:	10c00c45 	stb	r3,49(r2)
   152d8:	00000206 	br	152e4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   152dc:	e0bff917 	ldw	r2,-28(fp)
   152e0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   152e4:	e0bff917 	ldw	r2,-28(fp)
   152e8:	10800c03 	ldbu	r2,48(r2)
   152ec:	10803fcc 	andi	r2,r2,255
   152f0:	1080020c 	andi	r2,r2,8
   152f4:	10001b1e 	bne	r2,zero,15364 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   152f8:	e0bff917 	ldw	r2,-28(fp)
   152fc:	10c00d83 	ldbu	r3,54(r2)
   15300:	d0a72c03 	ldbu	r2,-25424(gp)
   15304:	1884b03a 	or	r2,r3,r2
   15308:	d0a72c05 	stb	r2,-25424(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1530c:	e0bff917 	ldw	r2,-28(fp)
   15310:	10800d03 	ldbu	r2,52(r2)
   15314:	10c03fcc 	andi	r3,r2,255
   15318:	e0bff917 	ldw	r2,-28(fp)
   1531c:	10800d03 	ldbu	r2,52(r2)
   15320:	11003fcc 	andi	r4,r2,255
   15324:	d0a72c44 	addi	r2,gp,-25423
   15328:	2085883a 	add	r2,r4,r2
   1532c:	11000003 	ldbu	r4,0(r2)
   15330:	e0bff917 	ldw	r2,-28(fp)
   15334:	10800d43 	ldbu	r2,53(r2)
   15338:	2084b03a 	or	r2,r4,r2
   1533c:	1009883a 	mov	r4,r2
   15340:	d0a72c44 	addi	r2,gp,-25423
   15344:	1885883a 	add	r2,r3,r2
   15348:	11000005 	stb	r4,0(r2)
   1534c:	e0bff717 	ldw	r2,-36(fp)
   15350:	e0bffc15 	stw	r2,-16(fp)
   15354:	e0bffc17 	ldw	r2,-16(fp)
   15358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1535c:	000f5b40 	call	f5b4 <OS_Sched>
   15360:	00000406 	br	15374 <OSTimeDlyResume+0x1bc>
   15364:	e0bff717 	ldw	r2,-36(fp)
   15368:	e0bffd15 	stw	r2,-12(fp)
   1536c:	e0bffd17 	ldw	r2,-12(fp)
   15370:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   15374:	0005883a 	mov	r2,zero
}
   15378:	e037883a 	mov	sp,fp
   1537c:	dfc00117 	ldw	ra,4(sp)
   15380:	df000017 	ldw	fp,0(sp)
   15384:	dec00204 	addi	sp,sp,8
   15388:	f800283a 	ret

0001538c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1538c:	defffb04 	addi	sp,sp,-20
   15390:	df000415 	stw	fp,16(sp)
   15394:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15398:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1539c:	0005303a 	rdctl	r2,status
   153a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153a4:	e0fffe17 	ldw	r3,-8(fp)
   153a8:	00bfff84 	movi	r2,-2
   153ac:	1884703a 	and	r2,r3,r2
   153b0:	1001703a 	wrctl	status,r2
  
  return context;
   153b4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   153b8:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   153bc:	d0a73017 	ldw	r2,-25408(gp)
   153c0:	e0bffd15 	stw	r2,-12(fp)
   153c4:	e0bffc17 	ldw	r2,-16(fp)
   153c8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   153cc:	e0bfff17 	ldw	r2,-4(fp)
   153d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   153d4:	e0bffd17 	ldw	r2,-12(fp)
}
   153d8:	e037883a 	mov	sp,fp
   153dc:	df000017 	ldw	fp,0(sp)
   153e0:	dec00104 	addi	sp,sp,4
   153e4:	f800283a 	ret

000153e8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   153e8:	defffb04 	addi	sp,sp,-20
   153ec:	df000415 	stw	fp,16(sp)
   153f0:	df000404 	addi	fp,sp,16
   153f4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   153f8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153fc:	0005303a 	rdctl	r2,status
   15400:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15404:	e0fffd17 	ldw	r3,-12(fp)
   15408:	00bfff84 	movi	r2,-2
   1540c:	1884703a 	and	r2,r3,r2
   15410:	1001703a 	wrctl	status,r2
  
  return context;
   15414:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15418:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1541c:	e0bfff17 	ldw	r2,-4(fp)
   15420:	d0a73015 	stw	r2,-25408(gp)
   15424:	e0bffc17 	ldw	r2,-16(fp)
   15428:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1542c:	e0bffe17 	ldw	r2,-8(fp)
   15430:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15434:	0001883a 	nop
   15438:	e037883a 	mov	sp,fp
   1543c:	df000017 	ldw	fp,0(sp)
   15440:	dec00104 	addi	sp,sp,4
   15444:	f800283a 	ret

00015448 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15448:	defffd04 	addi	sp,sp,-12
   1544c:	dfc00215 	stw	ra,8(sp)
   15450:	df000115 	stw	fp,4(sp)
   15454:	df000104 	addi	fp,sp,4
   15458:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1545c:	d1600904 	addi	r5,gp,-32732
   15460:	e13fff17 	ldw	r4,-4(fp)
   15464:	00163dc0 	call	163dc <alt_dev_llist_insert>
}
   15468:	e037883a 	mov	sp,fp
   1546c:	dfc00117 	ldw	ra,4(sp)
   15470:	df000017 	ldw	fp,0(sp)
   15474:	dec00204 	addi	sp,sp,8
   15478:	f800283a 	ret

0001547c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1547c:	defffd04 	addi	sp,sp,-12
   15480:	dfc00215 	stw	ra,8(sp)
   15484:	df000115 	stw	fp,4(sp)
   15488:	df000104 	addi	fp,sp,4
   1548c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   15490:	0016b480 	call	16b48 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   15494:	00800044 	movi	r2,1
   15498:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1549c:	0001883a 	nop
   154a0:	e037883a 	mov	sp,fp
   154a4:	dfc00117 	ldw	ra,4(sp)
   154a8:	df000017 	ldw	fp,0(sp)
   154ac:	dec00204 	addi	sp,sp,8
   154b0:	f800283a 	ret

000154b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   154b4:	defffe04 	addi	sp,sp,-8
   154b8:	dfc00115 	stw	ra,4(sp)
   154bc:	df000015 	stw	fp,0(sp)
   154c0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   154c4:	01800144 	movi	r6,5
   154c8:	000b883a 	mov	r5,zero
   154cc:	010000f4 	movhi	r4,3
   154d0:	21163104 	addi	r4,r4,22724
   154d4:	00156640 	call	15664 <altera_avalon_jtag_uart_init>
   154d8:	010000f4 	movhi	r4,3
   154dc:	21162704 	addi	r4,r4,22684
   154e0:	00154480 	call	15448 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   154e4:	0001883a 	nop
}
   154e8:	0001883a 	nop
   154ec:	e037883a 	mov	sp,fp
   154f0:	dfc00117 	ldw	ra,4(sp)
   154f4:	df000017 	ldw	fp,0(sp)
   154f8:	dec00204 	addi	sp,sp,8
   154fc:	f800283a 	ret

00015500 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15500:	defffa04 	addi	sp,sp,-24
   15504:	dfc00515 	stw	ra,20(sp)
   15508:	df000415 	stw	fp,16(sp)
   1550c:	df000404 	addi	fp,sp,16
   15510:	e13ffd15 	stw	r4,-12(fp)
   15514:	e17ffe15 	stw	r5,-8(fp)
   15518:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1551c:	e0bffd17 	ldw	r2,-12(fp)
   15520:	10800017 	ldw	r2,0(r2)
   15524:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   15528:	e0bffc17 	ldw	r2,-16(fp)
   1552c:	10c00a04 	addi	r3,r2,40
   15530:	e0bffd17 	ldw	r2,-12(fp)
   15534:	10800217 	ldw	r2,8(r2)
   15538:	100f883a 	mov	r7,r2
   1553c:	e1bfff17 	ldw	r6,-4(fp)
   15540:	e17ffe17 	ldw	r5,-8(fp)
   15544:	1809883a 	mov	r4,r3
   15548:	0015cac0 	call	15cac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1554c:	e037883a 	mov	sp,fp
   15550:	dfc00117 	ldw	ra,4(sp)
   15554:	df000017 	ldw	fp,0(sp)
   15558:	dec00204 	addi	sp,sp,8
   1555c:	f800283a 	ret

00015560 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15560:	defffa04 	addi	sp,sp,-24
   15564:	dfc00515 	stw	ra,20(sp)
   15568:	df000415 	stw	fp,16(sp)
   1556c:	df000404 	addi	fp,sp,16
   15570:	e13ffd15 	stw	r4,-12(fp)
   15574:	e17ffe15 	stw	r5,-8(fp)
   15578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1557c:	e0bffd17 	ldw	r2,-12(fp)
   15580:	10800017 	ldw	r2,0(r2)
   15584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   15588:	e0bffc17 	ldw	r2,-16(fp)
   1558c:	10c00a04 	addi	r3,r2,40
   15590:	e0bffd17 	ldw	r2,-12(fp)
   15594:	10800217 	ldw	r2,8(r2)
   15598:	100f883a 	mov	r7,r2
   1559c:	e1bfff17 	ldw	r6,-4(fp)
   155a0:	e17ffe17 	ldw	r5,-8(fp)
   155a4:	1809883a 	mov	r4,r3
   155a8:	0015f680 	call	15f68 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   155ac:	e037883a 	mov	sp,fp
   155b0:	dfc00117 	ldw	ra,4(sp)
   155b4:	df000017 	ldw	fp,0(sp)
   155b8:	dec00204 	addi	sp,sp,8
   155bc:	f800283a 	ret

000155c0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   155c0:	defffc04 	addi	sp,sp,-16
   155c4:	dfc00315 	stw	ra,12(sp)
   155c8:	df000215 	stw	fp,8(sp)
   155cc:	df000204 	addi	fp,sp,8
   155d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   155d4:	e0bfff17 	ldw	r2,-4(fp)
   155d8:	10800017 	ldw	r2,0(r2)
   155dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   155e0:	e0bffe17 	ldw	r2,-8(fp)
   155e4:	10c00a04 	addi	r3,r2,40
   155e8:	e0bfff17 	ldw	r2,-4(fp)
   155ec:	10800217 	ldw	r2,8(r2)
   155f0:	100b883a 	mov	r5,r2
   155f4:	1809883a 	mov	r4,r3
   155f8:	0015b540 	call	15b54 <altera_avalon_jtag_uart_close>
}
   155fc:	e037883a 	mov	sp,fp
   15600:	dfc00117 	ldw	ra,4(sp)
   15604:	df000017 	ldw	fp,0(sp)
   15608:	dec00204 	addi	sp,sp,8
   1560c:	f800283a 	ret

00015610 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   15610:	defffa04 	addi	sp,sp,-24
   15614:	dfc00515 	stw	ra,20(sp)
   15618:	df000415 	stw	fp,16(sp)
   1561c:	df000404 	addi	fp,sp,16
   15620:	e13ffd15 	stw	r4,-12(fp)
   15624:	e17ffe15 	stw	r5,-8(fp)
   15628:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1562c:	e0bffd17 	ldw	r2,-12(fp)
   15630:	10800017 	ldw	r2,0(r2)
   15634:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   15638:	e0bffc17 	ldw	r2,-16(fp)
   1563c:	10800a04 	addi	r2,r2,40
   15640:	e1bfff17 	ldw	r6,-4(fp)
   15644:	e17ffe17 	ldw	r5,-8(fp)
   15648:	1009883a 	mov	r4,r2
   1564c:	0015bbc0 	call	15bbc <altera_avalon_jtag_uart_ioctl>
}
   15650:	e037883a 	mov	sp,fp
   15654:	dfc00117 	ldw	ra,4(sp)
   15658:	df000017 	ldw	fp,0(sp)
   1565c:	dec00204 	addi	sp,sp,8
   15660:	f800283a 	ret

00015664 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   15664:	defff104 	addi	sp,sp,-60
   15668:	dfc00e15 	stw	ra,56(sp)
   1566c:	df000d15 	stw	fp,52(sp)
   15670:	df000d04 	addi	fp,sp,52
   15674:	e13ff915 	stw	r4,-28(fp)
   15678:	e17ffa15 	stw	r5,-24(fp)
   1567c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   15680:	e0bff917 	ldw	r2,-28(fp)
   15684:	10800c04 	addi	r2,r2,48
   15688:	e0bff415 	stw	r2,-48(fp)
   1568c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   15690:	e0bff80b 	ldhu	r2,-32(fp)
   15694:	e0fff884 	addi	r3,fp,-30
   15698:	180b883a 	mov	r5,r3
   1569c:	1009883a 	mov	r4,r2
   156a0:	00101200 	call	10120 <OSFlagCreate>
   156a4:	1007883a 	mov	r3,r2
   156a8:	e0bff417 	ldw	r2,-48(fp)
   156ac:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   156b0:	e0bff917 	ldw	r2,-28(fp)
   156b4:	10800a04 	addi	r2,r2,40
   156b8:	e0bff515 	stw	r2,-44(fp)
   156bc:	00800044 	movi	r2,1
   156c0:	e0bff78d 	sth	r2,-34(fp)
   156c4:	e0bff78b 	ldhu	r2,-34(fp)
   156c8:	1009883a 	mov	r4,r2
   156cc:	0012e340 	call	12e34 <OSSemCreate>
   156d0:	1007883a 	mov	r3,r2
   156d4:	e0bff517 	ldw	r2,-44(fp)
   156d8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   156dc:	e0bff917 	ldw	r2,-28(fp)
   156e0:	10800b04 	addi	r2,r2,44
   156e4:	e0bff615 	stw	r2,-40(fp)
   156e8:	00800044 	movi	r2,1
   156ec:	e0bff70d 	sth	r2,-36(fp)
   156f0:	e0bff70b 	ldhu	r2,-36(fp)
   156f4:	1009883a 	mov	r4,r2
   156f8:	0012e340 	call	12e34 <OSSemCreate>
   156fc:	1007883a 	mov	r3,r2
   15700:	e0bff617 	ldw	r2,-40(fp)
   15704:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15708:	e0bff917 	ldw	r2,-28(fp)
   1570c:	00c00044 	movi	r3,1
   15710:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   15714:	e0bff917 	ldw	r2,-28(fp)
   15718:	10800017 	ldw	r2,0(r2)
   1571c:	10800104 	addi	r2,r2,4
   15720:	1007883a 	mov	r3,r2
   15724:	e0bff917 	ldw	r2,-28(fp)
   15728:	10800817 	ldw	r2,32(r2)
   1572c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   15730:	e0bffa17 	ldw	r2,-24(fp)
   15734:	e0fffb17 	ldw	r3,-20(fp)
   15738:	d8000015 	stw	zero,0(sp)
   1573c:	e1fff917 	ldw	r7,-28(fp)
   15740:	01800074 	movhi	r6,1
   15744:	3195eb04 	addi	r6,r6,22444
   15748:	180b883a 	mov	r5,r3
   1574c:	1009883a 	mov	r4,r2
   15750:	000cfac0 	call	cfac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   15754:	e0bff917 	ldw	r2,-28(fp)
   15758:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1575c:	e0bff917 	ldw	r2,-28(fp)
   15760:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   15764:	d0e73517 	ldw	r3,-25388(gp)
   15768:	e1fff917 	ldw	r7,-28(fp)
   1576c:	01800074 	movhi	r6,1
   15770:	31969404 	addi	r6,r6,23120
   15774:	180b883a 	mov	r5,r3
   15778:	1009883a 	mov	r4,r2
   1577c:	001622c0 	call	1622c <alt_alarm_start>
   15780:	1000040e 	bge	r2,zero,15794 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   15784:	e0fff917 	ldw	r3,-28(fp)
   15788:	00a00034 	movhi	r2,32768
   1578c:	10bfffc4 	addi	r2,r2,-1
   15790:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   15794:	0001883a 	nop
   15798:	e037883a 	mov	sp,fp
   1579c:	dfc00117 	ldw	ra,4(sp)
   157a0:	df000017 	ldw	fp,0(sp)
   157a4:	dec00204 	addi	sp,sp,8
   157a8:	f800283a 	ret

000157ac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   157ac:	defff204 	addi	sp,sp,-56
   157b0:	dfc00d15 	stw	ra,52(sp)
   157b4:	df000c15 	stw	fp,48(sp)
   157b8:	df000c04 	addi	fp,sp,48
   157bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   157c0:	e0bfff17 	ldw	r2,-4(fp)
   157c4:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   157c8:	e0bff617 	ldw	r2,-40(fp)
   157cc:	10800017 	ldw	r2,0(r2)
   157d0:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   157d4:	e0bff717 	ldw	r2,-36(fp)
   157d8:	10800104 	addi	r2,r2,4
   157dc:	10800037 	ldwio	r2,0(r2)
   157e0:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   157e4:	e0bff817 	ldw	r2,-32(fp)
   157e8:	1080c00c 	andi	r2,r2,768
   157ec:	10009126 	beq	r2,zero,15a34 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   157f0:	e0bff817 	ldw	r2,-32(fp)
   157f4:	1080400c 	andi	r2,r2,256
   157f8:	10004726 	beq	r2,zero,15918 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   157fc:	00800074 	movhi	r2,1
   15800:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15804:	e0bff617 	ldw	r2,-40(fp)
   15808:	10800d17 	ldw	r2,52(r2)
   1580c:	10800044 	addi	r2,r2,1
   15810:	1081ffcc 	andi	r2,r2,2047
   15814:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   15818:	e0bff617 	ldw	r2,-40(fp)
   1581c:	10c00e17 	ldw	r3,56(r2)
   15820:	e0bff917 	ldw	r2,-28(fp)
   15824:	18802726 	beq	r3,r2,158c4 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15828:	e0bff717 	ldw	r2,-36(fp)
   1582c:	10800037 	ldwio	r2,0(r2)
   15830:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   15834:	e0bff417 	ldw	r2,-48(fp)
   15838:	10a0000c 	andi	r2,r2,32768
   1583c:	10002326 	beq	r2,zero,158cc <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   15840:	e0bff617 	ldw	r2,-40(fp)
   15844:	10800d17 	ldw	r2,52(r2)
   15848:	e0fff417 	ldw	r3,-48(fp)
   1584c:	1809883a 	mov	r4,r3
   15850:	e0fff617 	ldw	r3,-40(fp)
   15854:	1885883a 	add	r2,r3,r2
   15858:	10801104 	addi	r2,r2,68
   1585c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15860:	e0bff617 	ldw	r2,-40(fp)
   15864:	10800d17 	ldw	r2,52(r2)
   15868:	10800044 	addi	r2,r2,1
   1586c:	10c1ffcc 	andi	r3,r2,2047
   15870:	e0bff617 	ldw	r2,-40(fp)
   15874:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   15878:	e0bff617 	ldw	r2,-40(fp)
   1587c:	10800c17 	ldw	r2,48(r2)
   15880:	e0bffb15 	stw	r2,-20(fp)
   15884:	00800044 	movi	r2,1
   15888:	e0bffc0d 	sth	r2,-16(fp)
   1588c:	00800044 	movi	r2,1
   15890:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15894:	d0a72043 	ldbu	r2,-25471(gp)
   15898:	10803fcc 	andi	r2,r2,255
   1589c:	103fd926 	beq	r2,zero,15804 <_gp+0xfffd6efc>
  {
    OSFlagPost (group, flags, opt, &err);
   158a0:	e0bffc0b 	ldhu	r2,-16(fp)
   158a4:	e0fffc83 	ldbu	r3,-14(fp)
   158a8:	e13ffdc4 	addi	r4,fp,-9
   158ac:	200f883a 	mov	r7,r4
   158b0:	180d883a 	mov	r6,r3
   158b4:	100b883a 	mov	r5,r2
   158b8:	e13ffb17 	ldw	r4,-20(fp)
   158bc:	0010cfc0 	call	10cfc <OSFlagPost>
      }
   158c0:	003fd006 	br	15804 <_gp+0xfffd6efc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   158c4:	0001883a 	nop
   158c8:	00000106 	br	158d0 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   158cc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   158d0:	e0bff417 	ldw	r2,-48(fp)
   158d4:	10bfffec 	andhi	r2,r2,65535
   158d8:	10000f26 	beq	r2,zero,15918 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   158dc:	e0bff617 	ldw	r2,-40(fp)
   158e0:	10c00817 	ldw	r3,32(r2)
   158e4:	00bfff84 	movi	r2,-2
   158e8:	1886703a 	and	r3,r3,r2
   158ec:	e0bff617 	ldw	r2,-40(fp)
   158f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   158f4:	e0bff717 	ldw	r2,-36(fp)
   158f8:	10800104 	addi	r2,r2,4
   158fc:	1007883a 	mov	r3,r2
   15900:	e0bff617 	ldw	r2,-40(fp)
   15904:	10800817 	ldw	r2,32(r2)
   15908:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1590c:	e0bff717 	ldw	r2,-36(fp)
   15910:	10800104 	addi	r2,r2,4
   15914:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   15918:	e0bff817 	ldw	r2,-32(fp)
   1591c:	1080800c 	andi	r2,r2,512
   15920:	103fac26 	beq	r2,zero,157d4 <_gp+0xfffd6ecc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   15924:	e0bff817 	ldw	r2,-32(fp)
   15928:	1004d43a 	srli	r2,r2,16
   1592c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   15930:	00002606 	br	159cc <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   15934:	e0bff717 	ldw	r2,-36(fp)
   15938:	e0fff617 	ldw	r3,-40(fp)
   1593c:	18c01017 	ldw	r3,64(r3)
   15940:	e13ff617 	ldw	r4,-40(fp)
   15944:	20c7883a 	add	r3,r4,r3
   15948:	18c21104 	addi	r3,r3,2116
   1594c:	18c00003 	ldbu	r3,0(r3)
   15950:	18c03fcc 	andi	r3,r3,255
   15954:	18c0201c 	xori	r3,r3,128
   15958:	18ffe004 	addi	r3,r3,-128
   1595c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15960:	e0bff617 	ldw	r2,-40(fp)
   15964:	10801017 	ldw	r2,64(r2)
   15968:	10800044 	addi	r2,r2,1
   1596c:	10c1ffcc 	andi	r3,r2,2047
   15970:	e0bff617 	ldw	r2,-40(fp)
   15974:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   15978:	e0bff617 	ldw	r2,-40(fp)
   1597c:	10800c17 	ldw	r2,48(r2)
   15980:	e0bffa15 	stw	r2,-24(fp)
   15984:	00800084 	movi	r2,2
   15988:	e0bffd0d 	sth	r2,-12(fp)
   1598c:	00800044 	movi	r2,1
   15990:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15994:	d0a72043 	ldbu	r2,-25471(gp)
   15998:	10803fcc 	andi	r2,r2,255
   1599c:	10000826 	beq	r2,zero,159c0 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   159a0:	e0bffd0b 	ldhu	r2,-12(fp)
   159a4:	e0fffd83 	ldbu	r3,-10(fp)
   159a8:	e13ffe04 	addi	r4,fp,-8
   159ac:	200f883a 	mov	r7,r4
   159b0:	180d883a 	mov	r6,r3
   159b4:	100b883a 	mov	r5,r2
   159b8:	e13ffa17 	ldw	r4,-24(fp)
   159bc:	0010cfc0 	call	10cfc <OSFlagPost>

        space--;
   159c0:	e0bff517 	ldw	r2,-44(fp)
   159c4:	10bfffc4 	addi	r2,r2,-1
   159c8:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   159cc:	e0bff517 	ldw	r2,-44(fp)
   159d0:	10000526 	beq	r2,zero,159e8 <altera_avalon_jtag_uart_irq+0x23c>
   159d4:	e0bff617 	ldw	r2,-40(fp)
   159d8:	10c01017 	ldw	r3,64(r2)
   159dc:	e0bff617 	ldw	r2,-40(fp)
   159e0:	10800f17 	ldw	r2,60(r2)
   159e4:	18bfd31e 	bne	r3,r2,15934 <_gp+0xfffd702c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   159e8:	e0bff517 	ldw	r2,-44(fp)
   159ec:	103f7926 	beq	r2,zero,157d4 <_gp+0xfffd6ecc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   159f0:	e0bff617 	ldw	r2,-40(fp)
   159f4:	10c00817 	ldw	r3,32(r2)
   159f8:	00bfff44 	movi	r2,-3
   159fc:	1886703a 	and	r3,r3,r2
   15a00:	e0bff617 	ldw	r2,-40(fp)
   15a04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15a08:	e0bff617 	ldw	r2,-40(fp)
   15a0c:	10800017 	ldw	r2,0(r2)
   15a10:	10800104 	addi	r2,r2,4
   15a14:	1007883a 	mov	r3,r2
   15a18:	e0bff617 	ldw	r2,-40(fp)
   15a1c:	10800817 	ldw	r2,32(r2)
   15a20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   15a24:	e0bff717 	ldw	r2,-36(fp)
   15a28:	10800104 	addi	r2,r2,4
   15a2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   15a30:	003f6806 	br	157d4 <_gp+0xfffd6ecc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   15a34:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   15a38:	0001883a 	nop
   15a3c:	e037883a 	mov	sp,fp
   15a40:	dfc00117 	ldw	ra,4(sp)
   15a44:	df000017 	ldw	fp,0(sp)
   15a48:	dec00204 	addi	sp,sp,8
   15a4c:	f800283a 	ret

00015a50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   15a50:	defff904 	addi	sp,sp,-28
   15a54:	dfc00615 	stw	ra,24(sp)
   15a58:	df000515 	stw	fp,20(sp)
   15a5c:	df000504 	addi	fp,sp,20
   15a60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   15a64:	e0bfff17 	ldw	r2,-4(fp)
   15a68:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   15a6c:	e0bffb17 	ldw	r2,-20(fp)
   15a70:	10800017 	ldw	r2,0(r2)
   15a74:	10800104 	addi	r2,r2,4
   15a78:	10800037 	ldwio	r2,0(r2)
   15a7c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   15a80:	e0bffc17 	ldw	r2,-16(fp)
   15a84:	1081000c 	andi	r2,r2,1024
   15a88:	10000b26 	beq	r2,zero,15ab8 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   15a8c:	e0bffb17 	ldw	r2,-20(fp)
   15a90:	10800017 	ldw	r2,0(r2)
   15a94:	10800104 	addi	r2,r2,4
   15a98:	1007883a 	mov	r3,r2
   15a9c:	e0bffb17 	ldw	r2,-20(fp)
   15aa0:	10800817 	ldw	r2,32(r2)
   15aa4:	10810014 	ori	r2,r2,1024
   15aa8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   15aac:	e0bffb17 	ldw	r2,-20(fp)
   15ab0:	10000915 	stw	zero,36(r2)
   15ab4:	00002106 	br	15b3c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   15ab8:	e0bffb17 	ldw	r2,-20(fp)
   15abc:	10c00917 	ldw	r3,36(r2)
   15ac0:	00a00034 	movhi	r2,32768
   15ac4:	10bfff04 	addi	r2,r2,-4
   15ac8:	10c01c36 	bltu	r2,r3,15b3c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   15acc:	e0bffb17 	ldw	r2,-20(fp)
   15ad0:	10800917 	ldw	r2,36(r2)
   15ad4:	10c00044 	addi	r3,r2,1
   15ad8:	e0bffb17 	ldw	r2,-20(fp)
   15adc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   15ae0:	e0bffb17 	ldw	r2,-20(fp)
   15ae4:	10c00917 	ldw	r3,36(r2)
   15ae8:	e0bffb17 	ldw	r2,-20(fp)
   15aec:	10800117 	ldw	r2,4(r2)
   15af0:	18801236 	bltu	r3,r2,15b3c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   15af4:	e0bffb17 	ldw	r2,-20(fp)
   15af8:	10800c17 	ldw	r2,48(r2)
   15afc:	e0bffd15 	stw	r2,-12(fp)
   15b00:	00800104 	movi	r2,4
   15b04:	e0bffe0d 	sth	r2,-8(fp)
   15b08:	00800044 	movi	r2,1
   15b0c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   15b10:	d0a72043 	ldbu	r2,-25471(gp)
   15b14:	10803fcc 	andi	r2,r2,255
   15b18:	10000826 	beq	r2,zero,15b3c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   15b1c:	e0bffe0b 	ldhu	r2,-8(fp)
   15b20:	e0fffe83 	ldbu	r3,-6(fp)
   15b24:	e13ffec4 	addi	r4,fp,-5
   15b28:	200f883a 	mov	r7,r4
   15b2c:	180d883a 	mov	r6,r3
   15b30:	100b883a 	mov	r5,r2
   15b34:	e13ffd17 	ldw	r4,-12(fp)
   15b38:	0010cfc0 	call	10cfc <OSFlagPost>
   15b3c:	d0a73517 	ldw	r2,-25388(gp)
    }
  }

  return alt_ticks_per_second();
}
   15b40:	e037883a 	mov	sp,fp
   15b44:	dfc00117 	ldw	ra,4(sp)
   15b48:	df000017 	ldw	fp,0(sp)
   15b4c:	dec00204 	addi	sp,sp,8
   15b50:	f800283a 	ret

00015b54 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   15b54:	defffd04 	addi	sp,sp,-12
   15b58:	df000215 	stw	fp,8(sp)
   15b5c:	df000204 	addi	fp,sp,8
   15b60:	e13ffe15 	stw	r4,-8(fp)
   15b64:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15b68:	00000506 	br	15b80 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   15b6c:	e0bfff17 	ldw	r2,-4(fp)
   15b70:	1090000c 	andi	r2,r2,16384
   15b74:	10000226 	beq	r2,zero,15b80 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   15b78:	00bffd44 	movi	r2,-11
   15b7c:	00000b06 	br	15bac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   15b80:	e0bffe17 	ldw	r2,-8(fp)
   15b84:	10c01017 	ldw	r3,64(r2)
   15b88:	e0bffe17 	ldw	r2,-8(fp)
   15b8c:	10800f17 	ldw	r2,60(r2)
   15b90:	18800526 	beq	r3,r2,15ba8 <altera_avalon_jtag_uart_close+0x54>
   15b94:	e0bffe17 	ldw	r2,-8(fp)
   15b98:	10c00917 	ldw	r3,36(r2)
   15b9c:	e0bffe17 	ldw	r2,-8(fp)
   15ba0:	10800117 	ldw	r2,4(r2)
   15ba4:	18bff136 	bltu	r3,r2,15b6c <_gp+0xfffd7264>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   15ba8:	0005883a 	mov	r2,zero
}
   15bac:	e037883a 	mov	sp,fp
   15bb0:	df000017 	ldw	fp,0(sp)
   15bb4:	dec00104 	addi	sp,sp,4
   15bb8:	f800283a 	ret

00015bbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   15bbc:	defffa04 	addi	sp,sp,-24
   15bc0:	df000515 	stw	fp,20(sp)
   15bc4:	df000504 	addi	fp,sp,20
   15bc8:	e13ffd15 	stw	r4,-12(fp)
   15bcc:	e17ffe15 	stw	r5,-8(fp)
   15bd0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   15bd4:	00bff9c4 	movi	r2,-25
   15bd8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   15bdc:	e0bffe17 	ldw	r2,-8(fp)
   15be0:	10da8060 	cmpeqi	r3,r2,27137
   15be4:	1800031e 	bne	r3,zero,15bf4 <altera_avalon_jtag_uart_ioctl+0x38>
   15be8:	109a80a0 	cmpeqi	r2,r2,27138
   15bec:	1000181e 	bne	r2,zero,15c50 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   15bf0:	00002906 	br	15c98 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   15bf4:	e0bffd17 	ldw	r2,-12(fp)
   15bf8:	10c00117 	ldw	r3,4(r2)
   15bfc:	00a00034 	movhi	r2,32768
   15c00:	10bfffc4 	addi	r2,r2,-1
   15c04:	18802126 	beq	r3,r2,15c8c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   15c08:	e0bfff17 	ldw	r2,-4(fp)
   15c0c:	10800017 	ldw	r2,0(r2)
   15c10:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   15c14:	e0bffc17 	ldw	r2,-16(fp)
   15c18:	10800090 	cmplti	r2,r2,2
   15c1c:	1000061e 	bne	r2,zero,15c38 <altera_avalon_jtag_uart_ioctl+0x7c>
   15c20:	e0fffc17 	ldw	r3,-16(fp)
   15c24:	00a00034 	movhi	r2,32768
   15c28:	10bfffc4 	addi	r2,r2,-1
   15c2c:	18800226 	beq	r3,r2,15c38 <altera_avalon_jtag_uart_ioctl+0x7c>
   15c30:	e0bffc17 	ldw	r2,-16(fp)
   15c34:	00000206 	br	15c40 <altera_avalon_jtag_uart_ioctl+0x84>
   15c38:	00a00034 	movhi	r2,32768
   15c3c:	10bfff84 	addi	r2,r2,-2
   15c40:	e0fffd17 	ldw	r3,-12(fp)
   15c44:	18800115 	stw	r2,4(r3)
      rc = 0;
   15c48:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15c4c:	00000f06 	br	15c8c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   15c50:	e0bffd17 	ldw	r2,-12(fp)
   15c54:	10c00117 	ldw	r3,4(r2)
   15c58:	00a00034 	movhi	r2,32768
   15c5c:	10bfffc4 	addi	r2,r2,-1
   15c60:	18800c26 	beq	r3,r2,15c94 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   15c64:	e0bffd17 	ldw	r2,-12(fp)
   15c68:	10c00917 	ldw	r3,36(r2)
   15c6c:	e0bffd17 	ldw	r2,-12(fp)
   15c70:	10800117 	ldw	r2,4(r2)
   15c74:	1885803a 	cmpltu	r2,r3,r2
   15c78:	10c03fcc 	andi	r3,r2,255
   15c7c:	e0bfff17 	ldw	r2,-4(fp)
   15c80:	10c00015 	stw	r3,0(r2)
      rc = 0;
   15c84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   15c88:	00000206 	br	15c94 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   15c8c:	0001883a 	nop
   15c90:	00000106 	br	15c98 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   15c94:	0001883a 	nop

  default:
    break;
  }

  return rc;
   15c98:	e0bffb17 	ldw	r2,-20(fp)
}
   15c9c:	e037883a 	mov	sp,fp
   15ca0:	df000017 	ldw	fp,0(sp)
   15ca4:	dec00104 	addi	sp,sp,4
   15ca8:	f800283a 	ret

00015cac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   15cac:	deffed04 	addi	sp,sp,-76
   15cb0:	dfc01215 	stw	ra,72(sp)
   15cb4:	df001115 	stw	fp,68(sp)
   15cb8:	df001104 	addi	fp,sp,68
   15cbc:	e13ffc15 	stw	r4,-16(fp)
   15cc0:	e17ffd15 	stw	r5,-12(fp)
   15cc4:	e1bffe15 	stw	r6,-8(fp)
   15cc8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   15ccc:	e0bffd17 	ldw	r2,-12(fp)
   15cd0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   15cd4:	e0bffc17 	ldw	r2,-16(fp)
   15cd8:	10800a17 	ldw	r2,40(r2)
   15cdc:	e0bff815 	stw	r2,-32(fp)
   15ce0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   15ce4:	e0bff90b 	ldhu	r2,-28(fp)
   15ce8:	e0fffb04 	addi	r3,fp,-20
   15cec:	180d883a 	mov	r6,r3
   15cf0:	100b883a 	mov	r5,r2
   15cf4:	e13ff817 	ldw	r4,-32(fp)
   15cf8:	001314c0 	call	1314c <OSSemPend>

  while (space > 0)
   15cfc:	00006106 	br	15e84 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   15d00:	e0bffc17 	ldw	r2,-16(fp)
   15d04:	10800d17 	ldw	r2,52(r2)
   15d08:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   15d0c:	e0bffc17 	ldw	r2,-16(fp)
   15d10:	10800e17 	ldw	r2,56(r2)
   15d14:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   15d18:	e0fff317 	ldw	r3,-52(fp)
   15d1c:	e0bff417 	ldw	r2,-48(fp)
   15d20:	18800536 	bltu	r3,r2,15d38 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   15d24:	e0fff317 	ldw	r3,-52(fp)
   15d28:	e0bff417 	ldw	r2,-48(fp)
   15d2c:	1885c83a 	sub	r2,r3,r2
   15d30:	e0bff115 	stw	r2,-60(fp)
   15d34:	00000406 	br	15d48 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   15d38:	00c20004 	movi	r3,2048
   15d3c:	e0bff417 	ldw	r2,-48(fp)
   15d40:	1885c83a 	sub	r2,r3,r2
   15d44:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   15d48:	e0bff117 	ldw	r2,-60(fp)
   15d4c:	10001e26 	beq	r2,zero,15dc8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   15d50:	e0fffe17 	ldw	r3,-8(fp)
   15d54:	e0bff117 	ldw	r2,-60(fp)
   15d58:	1880022e 	bgeu	r3,r2,15d64 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   15d5c:	e0bffe17 	ldw	r2,-8(fp)
   15d60:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   15d64:	e0bffc17 	ldw	r2,-16(fp)
   15d68:	10c01104 	addi	r3,r2,68
   15d6c:	e0bff417 	ldw	r2,-48(fp)
   15d70:	1885883a 	add	r2,r3,r2
   15d74:	e1bff117 	ldw	r6,-60(fp)
   15d78:	100b883a 	mov	r5,r2
   15d7c:	e13ff017 	ldw	r4,-64(fp)
   15d80:	0005b940 	call	5b94 <memcpy>
      ptr   += n;
   15d84:	e0fff017 	ldw	r3,-64(fp)
   15d88:	e0bff117 	ldw	r2,-60(fp)
   15d8c:	1885883a 	add	r2,r3,r2
   15d90:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   15d94:	e0fffe17 	ldw	r3,-8(fp)
   15d98:	e0bff117 	ldw	r2,-60(fp)
   15d9c:	1885c83a 	sub	r2,r3,r2
   15da0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   15da4:	e0fff417 	ldw	r3,-48(fp)
   15da8:	e0bff117 	ldw	r2,-60(fp)
   15dac:	1885883a 	add	r2,r3,r2
   15db0:	10c1ffcc 	andi	r3,r2,2047
   15db4:	e0bffc17 	ldw	r2,-16(fp)
   15db8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   15dbc:	e0bffe17 	ldw	r2,-8(fp)
   15dc0:	00bfcf16 	blt	zero,r2,15d00 <_gp+0xfffd73f8>
   15dc4:	00000106 	br	15dcc <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   15dc8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   15dcc:	e0fff017 	ldw	r3,-64(fp)
   15dd0:	e0bffd17 	ldw	r2,-12(fp)
   15dd4:	18802e1e 	bne	r3,r2,15e90 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   15dd8:	e0bfff17 	ldw	r2,-4(fp)
   15ddc:	1090000c 	andi	r2,r2,16384
   15de0:	10002d1e 	bne	r2,zero,15e98 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   15de4:	d0a72043 	ldbu	r2,-25471(gp)
   15de8:	10803fcc 	andi	r2,r2,255
   15dec:	10800058 	cmpnei	r2,r2,1
   15df0:	1000161e 	bne	r2,zero,15e4c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   15df4:	e0bffc17 	ldw	r2,-16(fp)
   15df8:	10800c17 	ldw	r2,48(r2)
   15dfc:	e0bff215 	stw	r2,-56(fp)
   15e00:	00800144 	movi	r2,5
   15e04:	e0bff98d 	sth	r2,-26(fp)
   15e08:	00bfe0c4 	movi	r2,-125
   15e0c:	e0bffa05 	stb	r2,-24(fp)
   15e10:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   15e14:	d0a72043 	ldbu	r2,-25471(gp)
   15e18:	10803fcc 	andi	r2,r2,255
   15e1c:	10001526 	beq	r2,zero,15e74 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   15e20:	e0fff98b 	ldhu	r3,-26(fp)
   15e24:	e13ffa03 	ldbu	r4,-24(fp)
   15e28:	e17ffa8b 	ldhu	r5,-22(fp)
   15e2c:	e0bffb44 	addi	r2,fp,-19
   15e30:	d8800015 	stw	r2,0(sp)
   15e34:	280f883a 	mov	r7,r5
   15e38:	200d883a 	mov	r6,r4
   15e3c:	180b883a 	mov	r5,r3
   15e40:	e13ff217 	ldw	r4,-56(fp)
   15e44:	00106e40 	call	106e4 <OSFlagPend>
   15e48:	00000a06 	br	15e74 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   15e4c:	0001883a 	nop
   15e50:	e0bffc17 	ldw	r2,-16(fp)
   15e54:	10c00d17 	ldw	r3,52(r2)
   15e58:	e0bff317 	ldw	r2,-52(fp)
   15e5c:	1880051e 	bne	r3,r2,15e74 <altera_avalon_jtag_uart_read+0x1c8>
   15e60:	e0bffc17 	ldw	r2,-16(fp)
   15e64:	10c00917 	ldw	r3,36(r2)
   15e68:	e0bffc17 	ldw	r2,-16(fp)
   15e6c:	10800117 	ldw	r2,4(r2)
   15e70:	18bff736 	bltu	r3,r2,15e50 <_gp+0xfffd7548>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   15e74:	e0bffc17 	ldw	r2,-16(fp)
   15e78:	10c00d17 	ldw	r3,52(r2)
   15e7c:	e0bff317 	ldw	r2,-52(fp)
   15e80:	18800726 	beq	r3,r2,15ea0 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   15e84:	e0bffe17 	ldw	r2,-8(fp)
   15e88:	00bf9d16 	blt	zero,r2,15d00 <_gp+0xfffd73f8>
   15e8c:	00000506 	br	15ea4 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   15e90:	0001883a 	nop
   15e94:	00000306 	br	15ea4 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   15e98:	0001883a 	nop
   15e9c:	00000106 	br	15ea4 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   15ea0:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   15ea4:	e0bffc17 	ldw	r2,-16(fp)
   15ea8:	10800a17 	ldw	r2,40(r2)
   15eac:	1009883a 	mov	r4,r2
   15eb0:	00134c40 	call	134c4 <OSSemPost>

  if (ptr != buffer)
   15eb4:	e0fff017 	ldw	r3,-64(fp)
   15eb8:	e0bffd17 	ldw	r2,-12(fp)
   15ebc:	18801826 	beq	r3,r2,15f20 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ec0:	0005303a 	rdctl	r2,status
   15ec4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ec8:	e0fff717 	ldw	r3,-36(fp)
   15ecc:	00bfff84 	movi	r2,-2
   15ed0:	1884703a 	and	r2,r3,r2
   15ed4:	1001703a 	wrctl	status,r2
  
  return context;
   15ed8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   15edc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   15ee0:	e0bffc17 	ldw	r2,-16(fp)
   15ee4:	10800817 	ldw	r2,32(r2)
   15ee8:	10c00054 	ori	r3,r2,1
   15eec:	e0bffc17 	ldw	r2,-16(fp)
   15ef0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   15ef4:	e0bffc17 	ldw	r2,-16(fp)
   15ef8:	10800017 	ldw	r2,0(r2)
   15efc:	10800104 	addi	r2,r2,4
   15f00:	1007883a 	mov	r3,r2
   15f04:	e0bffc17 	ldw	r2,-16(fp)
   15f08:	10800817 	ldw	r2,32(r2)
   15f0c:	18800035 	stwio	r2,0(r3)
   15f10:	e0bff617 	ldw	r2,-40(fp)
   15f14:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f18:	e0bff517 	ldw	r2,-44(fp)
   15f1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   15f20:	e0fff017 	ldw	r3,-64(fp)
   15f24:	e0bffd17 	ldw	r2,-12(fp)
   15f28:	18800426 	beq	r3,r2,15f3c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   15f2c:	e0fff017 	ldw	r3,-64(fp)
   15f30:	e0bffd17 	ldw	r2,-12(fp)
   15f34:	1885c83a 	sub	r2,r3,r2
   15f38:	00000606 	br	15f54 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   15f3c:	e0bfff17 	ldw	r2,-4(fp)
   15f40:	1090000c 	andi	r2,r2,16384
   15f44:	10000226 	beq	r2,zero,15f50 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   15f48:	00bffd44 	movi	r2,-11
   15f4c:	00000106 	br	15f54 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   15f50:	00bffec4 	movi	r2,-5
}
   15f54:	e037883a 	mov	sp,fp
   15f58:	dfc00117 	ldw	ra,4(sp)
   15f5c:	df000017 	ldw	fp,0(sp)
   15f60:	dec00204 	addi	sp,sp,8
   15f64:	f800283a 	ret

00015f68 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   15f68:	deffed04 	addi	sp,sp,-76
   15f6c:	dfc01215 	stw	ra,72(sp)
   15f70:	df001115 	stw	fp,68(sp)
   15f74:	df001104 	addi	fp,sp,68
   15f78:	e13ffc15 	stw	r4,-16(fp)
   15f7c:	e17ffd15 	stw	r5,-12(fp)
   15f80:	e1bffe15 	stw	r6,-8(fp)
   15f84:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   15f88:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   15f8c:	e0bffd17 	ldw	r2,-12(fp)
   15f90:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   15f94:	e0bffc17 	ldw	r2,-16(fp)
   15f98:	10800b17 	ldw	r2,44(r2)
   15f9c:	e0bff815 	stw	r2,-32(fp)
   15fa0:	e03ff90d 	sth	zero,-28(fp)
   15fa4:	e0bff90b 	ldhu	r2,-28(fp)
   15fa8:	e0fffb44 	addi	r3,fp,-19
   15fac:	180d883a 	mov	r6,r3
   15fb0:	100b883a 	mov	r5,r2
   15fb4:	e13ff817 	ldw	r4,-32(fp)
   15fb8:	001314c0 	call	1314c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   15fbc:	00003706 	br	1609c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   15fc0:	e0bffc17 	ldw	r2,-16(fp)
   15fc4:	10800f17 	ldw	r2,60(r2)
   15fc8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   15fcc:	e0bffc17 	ldw	r2,-16(fp)
   15fd0:	10801017 	ldw	r2,64(r2)
   15fd4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   15fd8:	e0fff417 	ldw	r3,-48(fp)
   15fdc:	e0bff017 	ldw	r2,-64(fp)
   15fe0:	1880062e 	bgeu	r3,r2,15ffc <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   15fe4:	e0fff017 	ldw	r3,-64(fp)
   15fe8:	e0bff417 	ldw	r2,-48(fp)
   15fec:	1885c83a 	sub	r2,r3,r2
   15ff0:	10bfffc4 	addi	r2,r2,-1
   15ff4:	e0bff115 	stw	r2,-60(fp)
   15ff8:	00000b06 	br	16028 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   15ffc:	e0bff017 	ldw	r2,-64(fp)
   16000:	10000526 	beq	r2,zero,16018 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16004:	00c20004 	movi	r3,2048
   16008:	e0bff417 	ldw	r2,-48(fp)
   1600c:	1885c83a 	sub	r2,r3,r2
   16010:	e0bff115 	stw	r2,-60(fp)
   16014:	00000406 	br	16028 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16018:	00c1ffc4 	movi	r3,2047
   1601c:	e0bff417 	ldw	r2,-48(fp)
   16020:	1885c83a 	sub	r2,r3,r2
   16024:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   16028:	e0bff117 	ldw	r2,-60(fp)
   1602c:	10001e26 	beq	r2,zero,160a8 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   16030:	e0fffe17 	ldw	r3,-8(fp)
   16034:	e0bff117 	ldw	r2,-60(fp)
   16038:	1880022e 	bgeu	r3,r2,16044 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   1603c:	e0bffe17 	ldw	r2,-8(fp)
   16040:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16044:	e0bffc17 	ldw	r2,-16(fp)
   16048:	10c21104 	addi	r3,r2,2116
   1604c:	e0bff417 	ldw	r2,-48(fp)
   16050:	1885883a 	add	r2,r3,r2
   16054:	e1bff117 	ldw	r6,-60(fp)
   16058:	e17ffd17 	ldw	r5,-12(fp)
   1605c:	1009883a 	mov	r4,r2
   16060:	0005b940 	call	5b94 <memcpy>
      ptr   += n;
   16064:	e0fffd17 	ldw	r3,-12(fp)
   16068:	e0bff117 	ldw	r2,-60(fp)
   1606c:	1885883a 	add	r2,r3,r2
   16070:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16074:	e0fffe17 	ldw	r3,-8(fp)
   16078:	e0bff117 	ldw	r2,-60(fp)
   1607c:	1885c83a 	sub	r2,r3,r2
   16080:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16084:	e0fff417 	ldw	r3,-48(fp)
   16088:	e0bff117 	ldw	r2,-60(fp)
   1608c:	1885883a 	add	r2,r3,r2
   16090:	10c1ffcc 	andi	r3,r2,2047
   16094:	e0bffc17 	ldw	r2,-16(fp)
   16098:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1609c:	e0bffe17 	ldw	r2,-8(fp)
   160a0:	00bfc716 	blt	zero,r2,15fc0 <_gp+0xfffd76b8>
   160a4:	00000106 	br	160ac <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   160a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160ac:	0005303a 	rdctl	r2,status
   160b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160b4:	e0fff717 	ldw	r3,-36(fp)
   160b8:	00bfff84 	movi	r2,-2
   160bc:	1884703a 	and	r2,r3,r2
   160c0:	1001703a 	wrctl	status,r2
  
  return context;
   160c4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   160c8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   160cc:	e0bffc17 	ldw	r2,-16(fp)
   160d0:	10800817 	ldw	r2,32(r2)
   160d4:	10c00094 	ori	r3,r2,2
   160d8:	e0bffc17 	ldw	r2,-16(fp)
   160dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   160e0:	e0bffc17 	ldw	r2,-16(fp)
   160e4:	10800017 	ldw	r2,0(r2)
   160e8:	10800104 	addi	r2,r2,4
   160ec:	1007883a 	mov	r3,r2
   160f0:	e0bffc17 	ldw	r2,-16(fp)
   160f4:	10800817 	ldw	r2,32(r2)
   160f8:	18800035 	stwio	r2,0(r3)
   160fc:	e0bff617 	ldw	r2,-40(fp)
   16100:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16104:	e0bff317 	ldw	r2,-52(fp)
   16108:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1610c:	e0bffe17 	ldw	r2,-8(fp)
   16110:	00802a0e 	bge	zero,r2,161bc <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   16114:	e0bfff17 	ldw	r2,-4(fp)
   16118:	1090000c 	andi	r2,r2,16384
   1611c:	10002a1e 	bne	r2,zero,161c8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16120:	d0a72043 	ldbu	r2,-25471(gp)
   16124:	10803fcc 	andi	r2,r2,255
   16128:	10800058 	cmpnei	r2,r2,1
   1612c:	1000161e 	bne	r2,zero,16188 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   16130:	e0bffc17 	ldw	r2,-16(fp)
   16134:	10800c17 	ldw	r2,48(r2)
   16138:	e0bff515 	stw	r2,-44(fp)
   1613c:	00800184 	movi	r2,6
   16140:	e0bff98d 	sth	r2,-26(fp)
   16144:	00bfe0c4 	movi	r2,-125
   16148:	e0bffa05 	stb	r2,-24(fp)
   1614c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16150:	d0a72043 	ldbu	r2,-25471(gp)
   16154:	10803fcc 	andi	r2,r2,255
   16158:	10001526 	beq	r2,zero,161b0 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1615c:	e0fff98b 	ldhu	r3,-26(fp)
   16160:	e13ffa03 	ldbu	r4,-24(fp)
   16164:	e17ffa8b 	ldhu	r5,-22(fp)
   16168:	e0bffb04 	addi	r2,fp,-20
   1616c:	d8800015 	stw	r2,0(sp)
   16170:	280f883a 	mov	r7,r5
   16174:	200d883a 	mov	r6,r4
   16178:	180b883a 	mov	r5,r3
   1617c:	e13ff517 	ldw	r4,-44(fp)
   16180:	00106e40 	call	106e4 <OSFlagPend>
   16184:	00000a06 	br	161b0 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16188:	0001883a 	nop
   1618c:	e0bffc17 	ldw	r2,-16(fp)
   16190:	10c01017 	ldw	r3,64(r2)
   16194:	e0bff017 	ldw	r2,-64(fp)
   16198:	1880051e 	bne	r3,r2,161b0 <altera_avalon_jtag_uart_write+0x248>
   1619c:	e0bffc17 	ldw	r2,-16(fp)
   161a0:	10c00917 	ldw	r3,36(r2)
   161a4:	e0bffc17 	ldw	r2,-16(fp)
   161a8:	10800117 	ldw	r2,4(r2)
   161ac:	18bff736 	bltu	r3,r2,1618c <_gp+0xfffd7884>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   161b0:	e0bffc17 	ldw	r2,-16(fp)
   161b4:	10800917 	ldw	r2,36(r2)
   161b8:	1000051e 	bne	r2,zero,161d0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   161bc:	e0bffe17 	ldw	r2,-8(fp)
   161c0:	00bfb616 	blt	zero,r2,1609c <_gp+0xfffd7794>
   161c4:	00000306 	br	161d4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   161c8:	0001883a 	nop
   161cc:	00000106 	br	161d4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   161d0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   161d4:	e0bffc17 	ldw	r2,-16(fp)
   161d8:	10800b17 	ldw	r2,44(r2)
   161dc:	1009883a 	mov	r4,r2
   161e0:	00134c40 	call	134c4 <OSSemPost>

  if (ptr != start)
   161e4:	e0fffd17 	ldw	r3,-12(fp)
   161e8:	e0bff217 	ldw	r2,-56(fp)
   161ec:	18800426 	beq	r3,r2,16200 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   161f0:	e0fffd17 	ldw	r3,-12(fp)
   161f4:	e0bff217 	ldw	r2,-56(fp)
   161f8:	1885c83a 	sub	r2,r3,r2
   161fc:	00000606 	br	16218 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   16200:	e0bfff17 	ldw	r2,-4(fp)
   16204:	1090000c 	andi	r2,r2,16384
   16208:	10000226 	beq	r2,zero,16214 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1620c:	00bffd44 	movi	r2,-11
   16210:	00000106 	br	16218 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16214:	00bffec4 	movi	r2,-5
}
   16218:	e037883a 	mov	sp,fp
   1621c:	dfc00117 	ldw	ra,4(sp)
   16220:	df000017 	ldw	fp,0(sp)
   16224:	dec00204 	addi	sp,sp,8
   16228:	f800283a 	ret

0001622c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1622c:	defff504 	addi	sp,sp,-44
   16230:	df000a15 	stw	fp,40(sp)
   16234:	df000a04 	addi	fp,sp,40
   16238:	e13ffc15 	stw	r4,-16(fp)
   1623c:	e17ffd15 	stw	r5,-12(fp)
   16240:	e1bffe15 	stw	r6,-8(fp)
   16244:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   16248:	e03ff615 	stw	zero,-40(fp)
   1624c:	d0a73517 	ldw	r2,-25388(gp)
  
  if (alt_ticks_per_second ())
   16250:	10003c26 	beq	r2,zero,16344 <alt_alarm_start+0x118>
  {
    if (alarm)
   16254:	e0bffc17 	ldw	r2,-16(fp)
   16258:	10003826 	beq	r2,zero,1633c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1625c:	e0bffc17 	ldw	r2,-16(fp)
   16260:	e0fffe17 	ldw	r3,-8(fp)
   16264:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   16268:	e0bffc17 	ldw	r2,-16(fp)
   1626c:	e0ffff17 	ldw	r3,-4(fp)
   16270:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16274:	0005303a 	rdctl	r2,status
   16278:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1627c:	e0fff917 	ldw	r3,-28(fp)
   16280:	00bfff84 	movi	r2,-2
   16284:	1884703a 	and	r2,r3,r2
   16288:	1001703a 	wrctl	status,r2
  
  return context;
   1628c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   16290:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16294:	d0a73617 	ldw	r2,-25384(gp)
      
      current_nticks = alt_nticks();
   16298:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1629c:	e0fffd17 	ldw	r3,-12(fp)
   162a0:	e0bff617 	ldw	r2,-40(fp)
   162a4:	1885883a 	add	r2,r3,r2
   162a8:	10c00044 	addi	r3,r2,1
   162ac:	e0bffc17 	ldw	r2,-16(fp)
   162b0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   162b4:	e0bffc17 	ldw	r2,-16(fp)
   162b8:	10c00217 	ldw	r3,8(r2)
   162bc:	e0bff617 	ldw	r2,-40(fp)
   162c0:	1880042e 	bgeu	r3,r2,162d4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   162c4:	e0bffc17 	ldw	r2,-16(fp)
   162c8:	00c00044 	movi	r3,1
   162cc:	10c00405 	stb	r3,16(r2)
   162d0:	00000206 	br	162dc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   162d4:	e0bffc17 	ldw	r2,-16(fp)
   162d8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   162dc:	e0bffc17 	ldw	r2,-16(fp)
   162e0:	d0e02e04 	addi	r3,gp,-32584
   162e4:	e0fffa15 	stw	r3,-24(fp)
   162e8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   162ec:	e0bffb17 	ldw	r2,-20(fp)
   162f0:	e0fffa17 	ldw	r3,-24(fp)
   162f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   162f8:	e0bffa17 	ldw	r2,-24(fp)
   162fc:	10c00017 	ldw	r3,0(r2)
   16300:	e0bffb17 	ldw	r2,-20(fp)
   16304:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16308:	e0bffa17 	ldw	r2,-24(fp)
   1630c:	10800017 	ldw	r2,0(r2)
   16310:	e0fffb17 	ldw	r3,-20(fp)
   16314:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16318:	e0bffa17 	ldw	r2,-24(fp)
   1631c:	e0fffb17 	ldw	r3,-20(fp)
   16320:	10c00015 	stw	r3,0(r2)
   16324:	e0bff817 	ldw	r2,-32(fp)
   16328:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1632c:	e0bff717 	ldw	r2,-36(fp)
   16330:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   16334:	0005883a 	mov	r2,zero
   16338:	00000306 	br	16348 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1633c:	00bffa84 	movi	r2,-22
   16340:	00000106 	br	16348 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   16344:	00bfde84 	movi	r2,-134
  }
}
   16348:	e037883a 	mov	sp,fp
   1634c:	df000017 	ldw	fp,0(sp)
   16350:	dec00104 	addi	sp,sp,4
   16354:	f800283a 	ret

00016358 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16358:	defffe04 	addi	sp,sp,-8
   1635c:	df000115 	stw	fp,4(sp)
   16360:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   16364:	e03fff15 	stw	zero,-4(fp)
   16368:	00000506 	br	16380 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   1636c:	e0bfff17 	ldw	r2,-4(fp)
   16370:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   16374:	e0bfff17 	ldw	r2,-4(fp)
   16378:	10800804 	addi	r2,r2,32
   1637c:	e0bfff15 	stw	r2,-4(fp)
   16380:	e0bfff17 	ldw	r2,-4(fp)
   16384:	10820030 	cmpltui	r2,r2,2048
   16388:	103ff81e 	bne	r2,zero,1636c <_gp+0xfffd7a64>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1638c:	0001883a 	nop
   16390:	e037883a 	mov	sp,fp
   16394:	df000017 	ldw	fp,0(sp)
   16398:	dec00104 	addi	sp,sp,4
   1639c:	f800283a 	ret

000163a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   163a0:	defffe04 	addi	sp,sp,-8
   163a4:	dfc00115 	stw	ra,4(sp)
   163a8:	df000015 	stw	fp,0(sp)
   163ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   163b0:	d0a00c17 	ldw	r2,-32720(gp)
   163b4:	10000326 	beq	r2,zero,163c4 <alt_get_errno+0x24>
   163b8:	d0a00c17 	ldw	r2,-32720(gp)
   163bc:	103ee83a 	callr	r2
   163c0:	00000106 	br	163c8 <alt_get_errno+0x28>
   163c4:	d0a71604 	addi	r2,gp,-25512
}
   163c8:	e037883a 	mov	sp,fp
   163cc:	dfc00117 	ldw	ra,4(sp)
   163d0:	df000017 	ldw	fp,0(sp)
   163d4:	dec00204 	addi	sp,sp,8
   163d8:	f800283a 	ret

000163dc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   163dc:	defffa04 	addi	sp,sp,-24
   163e0:	dfc00515 	stw	ra,20(sp)
   163e4:	df000415 	stw	fp,16(sp)
   163e8:	df000404 	addi	fp,sp,16
   163ec:	e13ffe15 	stw	r4,-8(fp)
   163f0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   163f4:	e0bffe17 	ldw	r2,-8(fp)
   163f8:	10000326 	beq	r2,zero,16408 <alt_dev_llist_insert+0x2c>
   163fc:	e0bffe17 	ldw	r2,-8(fp)
   16400:	10800217 	ldw	r2,8(r2)
   16404:	1000061e 	bne	r2,zero,16420 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   16408:	00163a00 	call	163a0 <alt_get_errno>
   1640c:	1007883a 	mov	r3,r2
   16410:	00800584 	movi	r2,22
   16414:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   16418:	00bffa84 	movi	r2,-22
   1641c:	00001306 	br	1646c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   16420:	e0bffe17 	ldw	r2,-8(fp)
   16424:	e0ffff17 	ldw	r3,-4(fp)
   16428:	e0fffc15 	stw	r3,-16(fp)
   1642c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16430:	e0bffd17 	ldw	r2,-12(fp)
   16434:	e0fffc17 	ldw	r3,-16(fp)
   16438:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1643c:	e0bffc17 	ldw	r2,-16(fp)
   16440:	10c00017 	ldw	r3,0(r2)
   16444:	e0bffd17 	ldw	r2,-12(fp)
   16448:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1644c:	e0bffc17 	ldw	r2,-16(fp)
   16450:	10800017 	ldw	r2,0(r2)
   16454:	e0fffd17 	ldw	r3,-12(fp)
   16458:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1645c:	e0bffc17 	ldw	r2,-16(fp)
   16460:	e0fffd17 	ldw	r3,-12(fp)
   16464:	10c00015 	stw	r3,0(r2)

  return 0;  
   16468:	0005883a 	mov	r2,zero
}
   1646c:	e037883a 	mov	sp,fp
   16470:	dfc00117 	ldw	ra,4(sp)
   16474:	df000017 	ldw	fp,0(sp)
   16478:	dec00204 	addi	sp,sp,8
   1647c:	f800283a 	ret

00016480 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   16480:	defffd04 	addi	sp,sp,-12
   16484:	dfc00215 	stw	ra,8(sp)
   16488:	df000115 	stw	fp,4(sp)
   1648c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   16490:	00800074 	movhi	r2,1
   16494:	109d5604 	addi	r2,r2,30040
   16498:	e0bfff15 	stw	r2,-4(fp)
   1649c:	00000606 	br	164b8 <_do_ctors+0x38>
        (*ctor) (); 
   164a0:	e0bfff17 	ldw	r2,-4(fp)
   164a4:	10800017 	ldw	r2,0(r2)
   164a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   164ac:	e0bfff17 	ldw	r2,-4(fp)
   164b0:	10bfff04 	addi	r2,r2,-4
   164b4:	e0bfff15 	stw	r2,-4(fp)
   164b8:	e0ffff17 	ldw	r3,-4(fp)
   164bc:	00800074 	movhi	r2,1
   164c0:	109d5704 	addi	r2,r2,30044
   164c4:	18bff62e 	bgeu	r3,r2,164a0 <_gp+0xfffd7b98>
        (*ctor) (); 
}
   164c8:	0001883a 	nop
   164cc:	e037883a 	mov	sp,fp
   164d0:	dfc00117 	ldw	ra,4(sp)
   164d4:	df000017 	ldw	fp,0(sp)
   164d8:	dec00204 	addi	sp,sp,8
   164dc:	f800283a 	ret

000164e0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   164e0:	defffd04 	addi	sp,sp,-12
   164e4:	dfc00215 	stw	ra,8(sp)
   164e8:	df000115 	stw	fp,4(sp)
   164ec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   164f0:	00800074 	movhi	r2,1
   164f4:	109d5604 	addi	r2,r2,30040
   164f8:	e0bfff15 	stw	r2,-4(fp)
   164fc:	00000606 	br	16518 <_do_dtors+0x38>
        (*dtor) (); 
   16500:	e0bfff17 	ldw	r2,-4(fp)
   16504:	10800017 	ldw	r2,0(r2)
   16508:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1650c:	e0bfff17 	ldw	r2,-4(fp)
   16510:	10bfff04 	addi	r2,r2,-4
   16514:	e0bfff15 	stw	r2,-4(fp)
   16518:	e0ffff17 	ldw	r3,-4(fp)
   1651c:	00800074 	movhi	r2,1
   16520:	109d5704 	addi	r2,r2,30044
   16524:	18bff62e 	bgeu	r3,r2,16500 <_gp+0xfffd7bf8>
        (*dtor) (); 
}
   16528:	0001883a 	nop
   1652c:	e037883a 	mov	sp,fp
   16530:	dfc00117 	ldw	ra,4(sp)
   16534:	df000017 	ldw	fp,0(sp)
   16538:	dec00204 	addi	sp,sp,8
   1653c:	f800283a 	ret

00016540 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   16540:	defffe04 	addi	sp,sp,-8
   16544:	dfc00115 	stw	ra,4(sp)
   16548:	df000015 	stw	fp,0(sp)
   1654c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   16550:	01440004 	movi	r5,4096
   16554:	0009883a 	mov	r4,zero
   16558:	00171380 	call	17138 <alt_icache_flush>
#endif
}
   1655c:	0001883a 	nop
   16560:	e037883a 	mov	sp,fp
   16564:	dfc00117 	ldw	ra,4(sp)
   16568:	df000017 	ldw	fp,0(sp)
   1656c:	dec00204 	addi	sp,sp,8
   16570:	f800283a 	ret

00016574 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   16574:	defffe04 	addi	sp,sp,-8
   16578:	df000115 	stw	fp,4(sp)
   1657c:	df000104 	addi	fp,sp,4
   16580:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   16584:	e0bfff17 	ldw	r2,-4(fp)
   16588:	10bffe84 	addi	r2,r2,-6
   1658c:	10c00428 	cmpgeui	r3,r2,16
   16590:	18001a1e 	bne	r3,zero,165fc <alt_exception_cause_generated_bad_addr+0x88>
   16594:	100690ba 	slli	r3,r2,2
   16598:	00800074 	movhi	r2,1
   1659c:	10996b04 	addi	r2,r2,26028
   165a0:	1885883a 	add	r2,r3,r2
   165a4:	10800017 	ldw	r2,0(r2)
   165a8:	1000683a 	jmp	r2
   165ac:	000165ec 	andhi	zero,zero,1431
   165b0:	000165ec 	andhi	zero,zero,1431
   165b4:	000165fc 	xorhi	zero,zero,1431
   165b8:	000165fc 	xorhi	zero,zero,1431
   165bc:	000165fc 	xorhi	zero,zero,1431
   165c0:	000165ec 	andhi	zero,zero,1431
   165c4:	000165f4 	movhi	zero,1431
   165c8:	000165fc 	xorhi	zero,zero,1431
   165cc:	000165ec 	andhi	zero,zero,1431
   165d0:	000165ec 	andhi	zero,zero,1431
   165d4:	000165fc 	xorhi	zero,zero,1431
   165d8:	000165ec 	andhi	zero,zero,1431
   165dc:	000165f4 	movhi	zero,1431
   165e0:	000165fc 	xorhi	zero,zero,1431
   165e4:	000165fc 	xorhi	zero,zero,1431
   165e8:	000165ec 	andhi	zero,zero,1431
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   165ec:	00800044 	movi	r2,1
   165f0:	00000306 	br	16600 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   165f4:	0005883a 	mov	r2,zero
   165f8:	00000106 	br	16600 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   165fc:	0005883a 	mov	r2,zero
  }
}
   16600:	e037883a 	mov	sp,fp
   16604:	df000017 	ldw	fp,0(sp)
   16608:	dec00104 	addi	sp,sp,4
   1660c:	f800283a 	ret

00016610 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16610:	defff904 	addi	sp,sp,-28
   16614:	dfc00615 	stw	ra,24(sp)
   16618:	df000515 	stw	fp,20(sp)
   1661c:	df000504 	addi	fp,sp,20
   16620:	e13ffc15 	stw	r4,-16(fp)
   16624:	e17ffd15 	stw	r5,-12(fp)
   16628:	e1bffe15 	stw	r6,-8(fp)
   1662c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   16630:	e1bfff17 	ldw	r6,-4(fp)
   16634:	e17ffe17 	ldw	r5,-8(fp)
   16638:	e13ffd17 	ldw	r4,-12(fp)
   1663c:	00168500 	call	16850 <open>
   16640:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   16644:	e0bffb17 	ldw	r2,-20(fp)
   16648:	10001c16 	blt	r2,zero,166bc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1664c:	008000f4 	movhi	r2,3
   16650:	1095c704 	addi	r2,r2,22300
   16654:	e0fffb17 	ldw	r3,-20(fp)
   16658:	18c00324 	muli	r3,r3,12
   1665c:	10c5883a 	add	r2,r2,r3
   16660:	10c00017 	ldw	r3,0(r2)
   16664:	e0bffc17 	ldw	r2,-16(fp)
   16668:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1666c:	008000f4 	movhi	r2,3
   16670:	1095c704 	addi	r2,r2,22300
   16674:	e0fffb17 	ldw	r3,-20(fp)
   16678:	18c00324 	muli	r3,r3,12
   1667c:	10c5883a 	add	r2,r2,r3
   16680:	10800104 	addi	r2,r2,4
   16684:	10c00017 	ldw	r3,0(r2)
   16688:	e0bffc17 	ldw	r2,-16(fp)
   1668c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16690:	008000f4 	movhi	r2,3
   16694:	1095c704 	addi	r2,r2,22300
   16698:	e0fffb17 	ldw	r3,-20(fp)
   1669c:	18c00324 	muli	r3,r3,12
   166a0:	10c5883a 	add	r2,r2,r3
   166a4:	10800204 	addi	r2,r2,8
   166a8:	10c00017 	ldw	r3,0(r2)
   166ac:	e0bffc17 	ldw	r2,-16(fp)
   166b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   166b4:	e13ffb17 	ldw	r4,-20(fp)
   166b8:	000d71c0 	call	d71c <alt_release_fd>
  }
} 
   166bc:	0001883a 	nop
   166c0:	e037883a 	mov	sp,fp
   166c4:	dfc00117 	ldw	ra,4(sp)
   166c8:	df000017 	ldw	fp,0(sp)
   166cc:	dec00204 	addi	sp,sp,8
   166d0:	f800283a 	ret

000166d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   166d4:	defffb04 	addi	sp,sp,-20
   166d8:	dfc00415 	stw	ra,16(sp)
   166dc:	df000315 	stw	fp,12(sp)
   166e0:	df000304 	addi	fp,sp,12
   166e4:	e13ffd15 	stw	r4,-12(fp)
   166e8:	e17ffe15 	stw	r5,-8(fp)
   166ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   166f0:	01c07fc4 	movi	r7,511
   166f4:	01800044 	movi	r6,1
   166f8:	e17ffd17 	ldw	r5,-12(fp)
   166fc:	010000f4 	movhi	r4,3
   16700:	2115ca04 	addi	r4,r4,22312
   16704:	00166100 	call	16610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   16708:	01c07fc4 	movi	r7,511
   1670c:	000d883a 	mov	r6,zero
   16710:	e17ffe17 	ldw	r5,-8(fp)
   16714:	010000f4 	movhi	r4,3
   16718:	2115c704 	addi	r4,r4,22300
   1671c:	00166100 	call	16610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   16720:	01c07fc4 	movi	r7,511
   16724:	01800044 	movi	r6,1
   16728:	e17fff17 	ldw	r5,-4(fp)
   1672c:	010000f4 	movhi	r4,3
   16730:	2115cd04 	addi	r4,r4,22324
   16734:	00166100 	call	16610 <alt_open_fd>
}  
   16738:	0001883a 	nop
   1673c:	e037883a 	mov	sp,fp
   16740:	dfc00117 	ldw	ra,4(sp)
   16744:	df000017 	ldw	fp,0(sp)
   16748:	dec00204 	addi	sp,sp,8
   1674c:	f800283a 	ret

00016750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16750:	defffe04 	addi	sp,sp,-8
   16754:	dfc00115 	stw	ra,4(sp)
   16758:	df000015 	stw	fp,0(sp)
   1675c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   16760:	d0a00c17 	ldw	r2,-32720(gp)
   16764:	10000326 	beq	r2,zero,16774 <alt_get_errno+0x24>
   16768:	d0a00c17 	ldw	r2,-32720(gp)
   1676c:	103ee83a 	callr	r2
   16770:	00000106 	br	16778 <alt_get_errno+0x28>
   16774:	d0a71604 	addi	r2,gp,-25512
}
   16778:	e037883a 	mov	sp,fp
   1677c:	dfc00117 	ldw	ra,4(sp)
   16780:	df000017 	ldw	fp,0(sp)
   16784:	dec00204 	addi	sp,sp,8
   16788:	f800283a 	ret

0001678c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1678c:	defffd04 	addi	sp,sp,-12
   16790:	df000215 	stw	fp,8(sp)
   16794:	df000204 	addi	fp,sp,8
   16798:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1679c:	e0bfff17 	ldw	r2,-4(fp)
   167a0:	10800217 	ldw	r2,8(r2)
   167a4:	10d00034 	orhi	r3,r2,16384
   167a8:	e0bfff17 	ldw	r2,-4(fp)
   167ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   167b0:	e03ffe15 	stw	zero,-8(fp)
   167b4:	00001d06 	br	1682c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   167b8:	008000f4 	movhi	r2,3
   167bc:	1095c704 	addi	r2,r2,22300
   167c0:	e0fffe17 	ldw	r3,-8(fp)
   167c4:	18c00324 	muli	r3,r3,12
   167c8:	10c5883a 	add	r2,r2,r3
   167cc:	10c00017 	ldw	r3,0(r2)
   167d0:	e0bfff17 	ldw	r2,-4(fp)
   167d4:	10800017 	ldw	r2,0(r2)
   167d8:	1880111e 	bne	r3,r2,16820 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   167dc:	008000f4 	movhi	r2,3
   167e0:	1095c704 	addi	r2,r2,22300
   167e4:	e0fffe17 	ldw	r3,-8(fp)
   167e8:	18c00324 	muli	r3,r3,12
   167ec:	10c5883a 	add	r2,r2,r3
   167f0:	10800204 	addi	r2,r2,8
   167f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   167f8:	1000090e 	bge	r2,zero,16820 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   167fc:	e0bffe17 	ldw	r2,-8(fp)
   16800:	10c00324 	muli	r3,r2,12
   16804:	008000f4 	movhi	r2,3
   16808:	1095c704 	addi	r2,r2,22300
   1680c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   16810:	e0bfff17 	ldw	r2,-4(fp)
   16814:	18800226 	beq	r3,r2,16820 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16818:	00bffcc4 	movi	r2,-13
   1681c:	00000806 	br	16840 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16820:	e0bffe17 	ldw	r2,-8(fp)
   16824:	10800044 	addi	r2,r2,1
   16828:	e0bffe15 	stw	r2,-8(fp)
   1682c:	d0a00b17 	ldw	r2,-32724(gp)
   16830:	1007883a 	mov	r3,r2
   16834:	e0bffe17 	ldw	r2,-8(fp)
   16838:	18bfdf2e 	bgeu	r3,r2,167b8 <_gp+0xfffd7eb0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1683c:	0005883a 	mov	r2,zero
}
   16840:	e037883a 	mov	sp,fp
   16844:	df000017 	ldw	fp,0(sp)
   16848:	dec00104 	addi	sp,sp,4
   1684c:	f800283a 	ret

00016850 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   16850:	defff604 	addi	sp,sp,-40
   16854:	dfc00915 	stw	ra,36(sp)
   16858:	df000815 	stw	fp,32(sp)
   1685c:	df000804 	addi	fp,sp,32
   16860:	e13ffd15 	stw	r4,-12(fp)
   16864:	e17ffe15 	stw	r5,-8(fp)
   16868:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1686c:	00bfffc4 	movi	r2,-1
   16870:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   16874:	00bffb44 	movi	r2,-19
   16878:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1687c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   16880:	d1600904 	addi	r5,gp,-32732
   16884:	e13ffd17 	ldw	r4,-12(fp)
   16888:	0016ec40 	call	16ec4 <alt_find_dev>
   1688c:	e0bff815 	stw	r2,-32(fp)
   16890:	e0bff817 	ldw	r2,-32(fp)
   16894:	1000051e 	bne	r2,zero,168ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16898:	e13ffd17 	ldw	r4,-12(fp)
   1689c:	0016f540 	call	16f54 <alt_find_file>
   168a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   168a4:	00800044 	movi	r2,1
   168a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   168ac:	e0bff817 	ldw	r2,-32(fp)
   168b0:	10002926 	beq	r2,zero,16958 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   168b4:	e13ff817 	ldw	r4,-32(fp)
   168b8:	001705c0 	call	1705c <alt_get_fd>
   168bc:	e0bff915 	stw	r2,-28(fp)
   168c0:	e0bff917 	ldw	r2,-28(fp)
   168c4:	1000030e 	bge	r2,zero,168d4 <open+0x84>
    {
      status = index;
   168c8:	e0bff917 	ldw	r2,-28(fp)
   168cc:	e0bffa15 	stw	r2,-24(fp)
   168d0:	00002306 	br	16960 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   168d4:	e0bff917 	ldw	r2,-28(fp)
   168d8:	10c00324 	muli	r3,r2,12
   168dc:	008000f4 	movhi	r2,3
   168e0:	1095c704 	addi	r2,r2,22300
   168e4:	1885883a 	add	r2,r3,r2
   168e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   168ec:	e0fffe17 	ldw	r3,-8(fp)
   168f0:	00900034 	movhi	r2,16384
   168f4:	10bfffc4 	addi	r2,r2,-1
   168f8:	1886703a 	and	r3,r3,r2
   168fc:	e0bffc17 	ldw	r2,-16(fp)
   16900:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   16904:	e0bffb17 	ldw	r2,-20(fp)
   16908:	1000051e 	bne	r2,zero,16920 <open+0xd0>
   1690c:	e13ffc17 	ldw	r4,-16(fp)
   16910:	001678c0 	call	1678c <alt_file_locked>
   16914:	e0bffa15 	stw	r2,-24(fp)
   16918:	e0bffa17 	ldw	r2,-24(fp)
   1691c:	10001016 	blt	r2,zero,16960 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   16920:	e0bff817 	ldw	r2,-32(fp)
   16924:	10800317 	ldw	r2,12(r2)
   16928:	10000826 	beq	r2,zero,1694c <open+0xfc>
   1692c:	e0bff817 	ldw	r2,-32(fp)
   16930:	10800317 	ldw	r2,12(r2)
   16934:	e1ffff17 	ldw	r7,-4(fp)
   16938:	e1bffe17 	ldw	r6,-8(fp)
   1693c:	e17ffd17 	ldw	r5,-12(fp)
   16940:	e13ffc17 	ldw	r4,-16(fp)
   16944:	103ee83a 	callr	r2
   16948:	00000106 	br	16950 <open+0x100>
   1694c:	0005883a 	mov	r2,zero
   16950:	e0bffa15 	stw	r2,-24(fp)
   16954:	00000206 	br	16960 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   16958:	00bffb44 	movi	r2,-19
   1695c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16960:	e0bffa17 	ldw	r2,-24(fp)
   16964:	1000090e 	bge	r2,zero,1698c <open+0x13c>
  {
    alt_release_fd (index);  
   16968:	e13ff917 	ldw	r4,-28(fp)
   1696c:	000d71c0 	call	d71c <alt_release_fd>
    ALT_ERRNO = -status;
   16970:	00167500 	call	16750 <alt_get_errno>
   16974:	1007883a 	mov	r3,r2
   16978:	e0bffa17 	ldw	r2,-24(fp)
   1697c:	0085c83a 	sub	r2,zero,r2
   16980:	18800015 	stw	r2,0(r3)
    return -1;
   16984:	00bfffc4 	movi	r2,-1
   16988:	00000106 	br	16990 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1698c:	e0bff917 	ldw	r2,-28(fp)
}
   16990:	e037883a 	mov	sp,fp
   16994:	dfc00117 	ldw	ra,4(sp)
   16998:	df000017 	ldw	fp,0(sp)
   1699c:	dec00204 	addi	sp,sp,8
   169a0:	f800283a 	ret

000169a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   169a4:	defffa04 	addi	sp,sp,-24
   169a8:	df000515 	stw	fp,20(sp)
   169ac:	df000504 	addi	fp,sp,20
   169b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169b4:	0005303a 	rdctl	r2,status
   169b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169bc:	e0fffc17 	ldw	r3,-16(fp)
   169c0:	00bfff84 	movi	r2,-2
   169c4:	1884703a 	and	r2,r3,r2
   169c8:	1001703a 	wrctl	status,r2
  
  return context;
   169cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   169d0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   169d4:	e0bfff17 	ldw	r2,-4(fp)
   169d8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   169dc:	e0bffd17 	ldw	r2,-12(fp)
   169e0:	10800017 	ldw	r2,0(r2)
   169e4:	e0fffd17 	ldw	r3,-12(fp)
   169e8:	18c00117 	ldw	r3,4(r3)
   169ec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   169f0:	e0bffd17 	ldw	r2,-12(fp)
   169f4:	10800117 	ldw	r2,4(r2)
   169f8:	e0fffd17 	ldw	r3,-12(fp)
   169fc:	18c00017 	ldw	r3,0(r3)
   16a00:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   16a04:	e0bffd17 	ldw	r2,-12(fp)
   16a08:	e0fffd17 	ldw	r3,-12(fp)
   16a0c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   16a10:	e0bffd17 	ldw	r2,-12(fp)
   16a14:	e0fffd17 	ldw	r3,-12(fp)
   16a18:	10c00015 	stw	r3,0(r2)
   16a1c:	e0bffb17 	ldw	r2,-20(fp)
   16a20:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a24:	e0bffe17 	ldw	r2,-8(fp)
   16a28:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   16a2c:	0001883a 	nop
   16a30:	e037883a 	mov	sp,fp
   16a34:	df000017 	ldw	fp,0(sp)
   16a38:	dec00104 	addi	sp,sp,4
   16a3c:	f800283a 	ret

00016a40 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   16a40:	defffb04 	addi	sp,sp,-20
   16a44:	dfc00415 	stw	ra,16(sp)
   16a48:	df000315 	stw	fp,12(sp)
   16a4c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   16a50:	d0a02e17 	ldw	r2,-32584(gp)
   16a54:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   16a58:	d0a73617 	ldw	r2,-25384(gp)
   16a5c:	10800044 	addi	r2,r2,1
   16a60:	d0a73615 	stw	r2,-25384(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16a64:	00002e06 	br	16b20 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   16a68:	e0bffd17 	ldw	r2,-12(fp)
   16a6c:	10800017 	ldw	r2,0(r2)
   16a70:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16a74:	e0bffd17 	ldw	r2,-12(fp)
   16a78:	10800403 	ldbu	r2,16(r2)
   16a7c:	10803fcc 	andi	r2,r2,255
   16a80:	10000426 	beq	r2,zero,16a94 <alt_tick+0x54>
   16a84:	d0a73617 	ldw	r2,-25384(gp)
   16a88:	1000021e 	bne	r2,zero,16a94 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   16a8c:	e0bffd17 	ldw	r2,-12(fp)
   16a90:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   16a94:	e0bffd17 	ldw	r2,-12(fp)
   16a98:	10800217 	ldw	r2,8(r2)
   16a9c:	d0e73617 	ldw	r3,-25384(gp)
   16aa0:	18801d36 	bltu	r3,r2,16b18 <alt_tick+0xd8>
   16aa4:	e0bffd17 	ldw	r2,-12(fp)
   16aa8:	10800403 	ldbu	r2,16(r2)
   16aac:	10803fcc 	andi	r2,r2,255
   16ab0:	1000191e 	bne	r2,zero,16b18 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   16ab4:	e0bffd17 	ldw	r2,-12(fp)
   16ab8:	10800317 	ldw	r2,12(r2)
   16abc:	e0fffd17 	ldw	r3,-12(fp)
   16ac0:	18c00517 	ldw	r3,20(r3)
   16ac4:	1809883a 	mov	r4,r3
   16ac8:	103ee83a 	callr	r2
   16acc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   16ad0:	e0bfff17 	ldw	r2,-4(fp)
   16ad4:	1000031e 	bne	r2,zero,16ae4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   16ad8:	e13ffd17 	ldw	r4,-12(fp)
   16adc:	00169a40 	call	169a4 <alt_alarm_stop>
   16ae0:	00000d06 	br	16b18 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   16ae4:	e0bffd17 	ldw	r2,-12(fp)
   16ae8:	10c00217 	ldw	r3,8(r2)
   16aec:	e0bfff17 	ldw	r2,-4(fp)
   16af0:	1887883a 	add	r3,r3,r2
   16af4:	e0bffd17 	ldw	r2,-12(fp)
   16af8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   16afc:	e0bffd17 	ldw	r2,-12(fp)
   16b00:	10c00217 	ldw	r3,8(r2)
   16b04:	d0a73617 	ldw	r2,-25384(gp)
   16b08:	1880032e 	bgeu	r3,r2,16b18 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   16b0c:	e0bffd17 	ldw	r2,-12(fp)
   16b10:	00c00044 	movi	r3,1
   16b14:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   16b18:	e0bffe17 	ldw	r2,-8(fp)
   16b1c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   16b20:	e0fffd17 	ldw	r3,-12(fp)
   16b24:	d0a02e04 	addi	r2,gp,-32584
   16b28:	18bfcf1e 	bne	r3,r2,16a68 <_gp+0xfffd8160>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   16b2c:	000e9080 	call	e908 <OSTimeTick>
}
   16b30:	0001883a 	nop
   16b34:	e037883a 	mov	sp,fp
   16b38:	dfc00117 	ldw	ra,4(sp)
   16b3c:	df000017 	ldw	fp,0(sp)
   16b40:	dec00204 	addi	sp,sp,8
   16b44:	f800283a 	ret

00016b48 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   16b48:	deffff04 	addi	sp,sp,-4
   16b4c:	df000015 	stw	fp,0(sp)
   16b50:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   16b54:	000170fa 	wrctl	ienable,zero
}
   16b58:	0001883a 	nop
   16b5c:	e037883a 	mov	sp,fp
   16b60:	df000017 	ldw	fp,0(sp)
   16b64:	dec00104 	addi	sp,sp,4
   16b68:	f800283a 	ret

00016b6c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   16b6c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   16b70:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   16b74:	d1272f17 	ldw	r4,-25412(gp)

      stw ra,  0(sp)
   16b78:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   16b7c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   16b80:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   16b84:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   16b88:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   16b8c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   16b90:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   16b94:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   16b98:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   16b9c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   16ba0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   16ba4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   16ba8:	0016de00 	call	16de0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   16bac:	d1272a17 	ldw	r4,-25432(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   16bb0:	d1672207 	ldb	r5,-25464(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   16bb4:	d1272f15 	stw	r4,-25412(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   16bb8:	d1672245 	stb	r5,-25463(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   16bbc:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   16bc0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   16bc4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   16bc8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   16bcc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   16bd0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   16bd4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   16bd8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   16bdc:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   16be0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   16be4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   16be8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   16bec:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   16bf0:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   16bf4:	f800283a 	ret

00016bf8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   16bf8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   16bfc:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   16c00:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   16c04:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   16c08:	0016de00 	call	16de0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   16c0c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   16c10:	d4a72045 	stb	r18,-25471(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   16c14:	003fe506 	br	16bac <_gp+0xfffd82a4>

00016c18 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   16c18:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   16c1c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   16c20:	10800054 	ori	r2,r2,1
      wrctl status, r2
   16c24:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   16c28:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   16c2c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   16c30:	dec00204 	addi	sp,sp,8

      callr r2
   16c34:	103ee83a 	callr	r2

      nop
   16c38:	0001883a 	nop

00016c3c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   16c3c:	defff704 	addi	sp,sp,-36
   16c40:	dfc00815 	stw	ra,32(sp)
   16c44:	df000715 	stw	fp,28(sp)
   16c48:	df000704 	addi	fp,sp,28
   16c4c:	e13ffc15 	stw	r4,-16(fp)
   16c50:	e17ffd15 	stw	r5,-12(fp)
   16c54:	e1bffe15 	stw	r6,-8(fp)
   16c58:	3805883a 	mov	r2,r7
   16c5c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   16c60:	e0fffe17 	ldw	r3,-8(fp)
   16c64:	00bfff04 	movi	r2,-4
   16c68:	1884703a 	and	r2,r3,r2
   16c6c:	10bef704 	addi	r2,r2,-1060
   16c70:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   16c74:	01810904 	movi	r6,1060
   16c78:	000b883a 	mov	r5,zero
   16c7c:	e13ff917 	ldw	r4,-28(fp)
   16c80:	0005cdc0 	call	5cdc <memset>
   16c84:	e0bff917 	ldw	r2,-28(fp)
   16c88:	10c0bb04 	addi	r3,r2,748
   16c8c:	e0bff917 	ldw	r2,-28(fp)
   16c90:	10c00115 	stw	r3,4(r2)
   16c94:	e0bff917 	ldw	r2,-28(fp)
   16c98:	10c0d504 	addi	r3,r2,852
   16c9c:	e0bff917 	ldw	r2,-28(fp)
   16ca0:	10c00215 	stw	r3,8(r2)
   16ca4:	e0bff917 	ldw	r2,-28(fp)
   16ca8:	10c0ef04 	addi	r3,r2,956
   16cac:	e0bff917 	ldw	r2,-28(fp)
   16cb0:	10c00315 	stw	r3,12(r2)
   16cb4:	e0fff917 	ldw	r3,-28(fp)
   16cb8:	008000f4 	movhi	r2,3
   16cbc:	10939304 	addi	r2,r2,20044
   16cc0:	18800d15 	stw	r2,52(r3)
   16cc4:	e0bff917 	ldw	r2,-28(fp)
   16cc8:	00c00044 	movi	r3,1
   16ccc:	10c02915 	stw	r3,164(r2)
   16cd0:	10002a15 	stw	zero,168(r2)
   16cd4:	e0bff917 	ldw	r2,-28(fp)
   16cd8:	00ccc384 	movi	r3,13070
   16cdc:	10c02b0d 	sth	r3,172(r2)
   16ce0:	e0bff917 	ldw	r2,-28(fp)
   16ce4:	00eaf344 	movi	r3,-21555
   16ce8:	10c02b8d 	sth	r3,174(r2)
   16cec:	e0bff917 	ldw	r2,-28(fp)
   16cf0:	00c48d04 	movi	r3,4660
   16cf4:	10c02c0d 	sth	r3,176(r2)
   16cf8:	e0bff917 	ldw	r2,-28(fp)
   16cfc:	00f99b44 	movi	r3,-6547
   16d00:	10c02c8d 	sth	r3,178(r2)
   16d04:	e0bff917 	ldw	r2,-28(fp)
   16d08:	00f7bb04 	movi	r3,-8468
   16d0c:	10c02d0d 	sth	r3,180(r2)
   16d10:	e0bff917 	ldw	r2,-28(fp)
   16d14:	00c00144 	movi	r3,5
   16d18:	10c02d8d 	sth	r3,182(r2)
   16d1c:	e0bff917 	ldw	r2,-28(fp)
   16d20:	00c002c4 	movi	r3,11
   16d24:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   16d28:	e0bff917 	ldw	r2,-28(fp)
   16d2c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   16d30:	e0bffa17 	ldw	r2,-24(fp)
   16d34:	10bff304 	addi	r2,r2,-52
   16d38:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   16d3c:	e0bffb17 	ldw	r2,-20(fp)
   16d40:	10800c04 	addi	r2,r2,48
   16d44:	e0fffc17 	ldw	r3,-16(fp)
   16d48:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   16d4c:	e0bffb17 	ldw	r2,-20(fp)
   16d50:	10800b04 	addi	r2,r2,44
   16d54:	e0fffd17 	ldw	r3,-12(fp)
   16d58:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   16d5c:	e0bffb17 	ldw	r2,-20(fp)
   16d60:	10800a04 	addi	r2,r2,40
   16d64:	e0fff917 	ldw	r3,-28(fp)
   16d68:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   16d6c:	00800074 	movhi	r2,1
   16d70:	109b0604 	addi	r2,r2,27672
   16d74:	10c00104 	addi	r3,r2,4
   16d78:	e0bffb17 	ldw	r2,-20(fp)
   16d7c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   16d80:	e0bffb17 	ldw	r2,-20(fp)
}
   16d84:	e037883a 	mov	sp,fp
   16d88:	dfc00117 	ldw	ra,4(sp)
   16d8c:	df000017 	ldw	fp,0(sp)
   16d90:	dec00204 	addi	sp,sp,8
   16d94:	f800283a 	ret

00016d98 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   16d98:	defffe04 	addi	sp,sp,-8
   16d9c:	df000115 	stw	fp,4(sp)
   16da0:	df000104 	addi	fp,sp,4
   16da4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   16da8:	0001883a 	nop
   16dac:	e037883a 	mov	sp,fp
   16db0:	df000017 	ldw	fp,0(sp)
   16db4:	dec00104 	addi	sp,sp,4
   16db8:	f800283a 	ret

00016dbc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   16dbc:	defffe04 	addi	sp,sp,-8
   16dc0:	df000115 	stw	fp,4(sp)
   16dc4:	df000104 	addi	fp,sp,4
   16dc8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   16dcc:	0001883a 	nop
   16dd0:	e037883a 	mov	sp,fp
   16dd4:	df000017 	ldw	fp,0(sp)
   16dd8:	dec00104 	addi	sp,sp,4
   16ddc:	f800283a 	ret

00016de0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   16de0:	deffff04 	addi	sp,sp,-4
   16de4:	df000015 	stw	fp,0(sp)
   16de8:	d839883a 	mov	fp,sp
}
   16dec:	0001883a 	nop
   16df0:	e037883a 	mov	sp,fp
   16df4:	df000017 	ldw	fp,0(sp)
   16df8:	dec00104 	addi	sp,sp,4
   16dfc:	f800283a 	ret

00016e00 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   16e00:	deffff04 	addi	sp,sp,-4
   16e04:	df000015 	stw	fp,0(sp)
   16e08:	d839883a 	mov	fp,sp
}
   16e0c:	0001883a 	nop
   16e10:	e037883a 	mov	sp,fp
   16e14:	df000017 	ldw	fp,0(sp)
   16e18:	dec00104 	addi	sp,sp,4
   16e1c:	f800283a 	ret

00016e20 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   16e20:	deffff04 	addi	sp,sp,-4
   16e24:	df000015 	stw	fp,0(sp)
   16e28:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   16e2c:	0001883a 	nop
   16e30:	e037883a 	mov	sp,fp
   16e34:	df000017 	ldw	fp,0(sp)
   16e38:	dec00104 	addi	sp,sp,4
   16e3c:	f800283a 	ret

00016e40 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   16e40:	deffff04 	addi	sp,sp,-4
   16e44:	df000015 	stw	fp,0(sp)
   16e48:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   16e4c:	0001883a 	nop
   16e50:	e037883a 	mov	sp,fp
   16e54:	df000017 	ldw	fp,0(sp)
   16e58:	dec00104 	addi	sp,sp,4
   16e5c:	f800283a 	ret

00016e60 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   16e60:	deffff04 	addi	sp,sp,-4
   16e64:	df000015 	stw	fp,0(sp)
   16e68:	d839883a 	mov	fp,sp
}
   16e6c:	0001883a 	nop
   16e70:	e037883a 	mov	sp,fp
   16e74:	df000017 	ldw	fp,0(sp)
   16e78:	dec00104 	addi	sp,sp,4
   16e7c:	f800283a 	ret

00016e80 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   16e80:	deffff04 	addi	sp,sp,-4
   16e84:	df000015 	stw	fp,0(sp)
   16e88:	d839883a 	mov	fp,sp
}
   16e8c:	0001883a 	nop
   16e90:	e037883a 	mov	sp,fp
   16e94:	df000017 	ldw	fp,0(sp)
   16e98:	dec00104 	addi	sp,sp,4
   16e9c:	f800283a 	ret

00016ea0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   16ea0:	defffe04 	addi	sp,sp,-8
   16ea4:	df000115 	stw	fp,4(sp)
   16ea8:	df000104 	addi	fp,sp,4
   16eac:	e13fff15 	stw	r4,-4(fp)
}
   16eb0:	0001883a 	nop
   16eb4:	e037883a 	mov	sp,fp
   16eb8:	df000017 	ldw	fp,0(sp)
   16ebc:	dec00104 	addi	sp,sp,4
   16ec0:	f800283a 	ret

00016ec4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16ec4:	defffa04 	addi	sp,sp,-24
   16ec8:	dfc00515 	stw	ra,20(sp)
   16ecc:	df000415 	stw	fp,16(sp)
   16ed0:	df000404 	addi	fp,sp,16
   16ed4:	e13ffe15 	stw	r4,-8(fp)
   16ed8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16edc:	e0bfff17 	ldw	r2,-4(fp)
   16ee0:	10800017 	ldw	r2,0(r2)
   16ee4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16ee8:	e13ffe17 	ldw	r4,-8(fp)
   16eec:	00070e00 	call	70e0 <strlen>
   16ef0:	10800044 	addi	r2,r2,1
   16ef4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16ef8:	00000d06 	br	16f30 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16efc:	e0bffc17 	ldw	r2,-16(fp)
   16f00:	10800217 	ldw	r2,8(r2)
   16f04:	e0fffd17 	ldw	r3,-12(fp)
   16f08:	180d883a 	mov	r6,r3
   16f0c:	e17ffe17 	ldw	r5,-8(fp)
   16f10:	1009883a 	mov	r4,r2
   16f14:	00172140 	call	17214 <memcmp>
   16f18:	1000021e 	bne	r2,zero,16f24 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16f1c:	e0bffc17 	ldw	r2,-16(fp)
   16f20:	00000706 	br	16f40 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16f24:	e0bffc17 	ldw	r2,-16(fp)
   16f28:	10800017 	ldw	r2,0(r2)
   16f2c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16f30:	e0fffc17 	ldw	r3,-16(fp)
   16f34:	e0bfff17 	ldw	r2,-4(fp)
   16f38:	18bff01e 	bne	r3,r2,16efc <_gp+0xfffd85f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   16f3c:	0005883a 	mov	r2,zero
}
   16f40:	e037883a 	mov	sp,fp
   16f44:	dfc00117 	ldw	ra,4(sp)
   16f48:	df000017 	ldw	fp,0(sp)
   16f4c:	dec00204 	addi	sp,sp,8
   16f50:	f800283a 	ret

00016f54 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16f54:	defffb04 	addi	sp,sp,-20
   16f58:	dfc00415 	stw	ra,16(sp)
   16f5c:	df000315 	stw	fp,12(sp)
   16f60:	df000304 	addi	fp,sp,12
   16f64:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   16f68:	d0a00717 	ldw	r2,-32740(gp)
   16f6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16f70:	00003106 	br	17038 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   16f74:	e0bffd17 	ldw	r2,-12(fp)
   16f78:	10800217 	ldw	r2,8(r2)
   16f7c:	1009883a 	mov	r4,r2
   16f80:	00070e00 	call	70e0 <strlen>
   16f84:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   16f88:	e0bffd17 	ldw	r2,-12(fp)
   16f8c:	10c00217 	ldw	r3,8(r2)
   16f90:	e0bffe17 	ldw	r2,-8(fp)
   16f94:	10bfffc4 	addi	r2,r2,-1
   16f98:	1885883a 	add	r2,r3,r2
   16f9c:	10800003 	ldbu	r2,0(r2)
   16fa0:	10803fcc 	andi	r2,r2,255
   16fa4:	1080201c 	xori	r2,r2,128
   16fa8:	10bfe004 	addi	r2,r2,-128
   16fac:	10800bd8 	cmpnei	r2,r2,47
   16fb0:	1000031e 	bne	r2,zero,16fc0 <alt_find_file+0x6c>
    {
      len -= 1;
   16fb4:	e0bffe17 	ldw	r2,-8(fp)
   16fb8:	10bfffc4 	addi	r2,r2,-1
   16fbc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16fc0:	e0bffe17 	ldw	r2,-8(fp)
   16fc4:	e0ffff17 	ldw	r3,-4(fp)
   16fc8:	1885883a 	add	r2,r3,r2
   16fcc:	10800003 	ldbu	r2,0(r2)
   16fd0:	10803fcc 	andi	r2,r2,255
   16fd4:	1080201c 	xori	r2,r2,128
   16fd8:	10bfe004 	addi	r2,r2,-128
   16fdc:	10800be0 	cmpeqi	r2,r2,47
   16fe0:	1000081e 	bne	r2,zero,17004 <alt_find_file+0xb0>
   16fe4:	e0bffe17 	ldw	r2,-8(fp)
   16fe8:	e0ffff17 	ldw	r3,-4(fp)
   16fec:	1885883a 	add	r2,r3,r2
   16ff0:	10800003 	ldbu	r2,0(r2)
   16ff4:	10803fcc 	andi	r2,r2,255
   16ff8:	1080201c 	xori	r2,r2,128
   16ffc:	10bfe004 	addi	r2,r2,-128
   17000:	10000a1e 	bne	r2,zero,1702c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17004:	e0bffd17 	ldw	r2,-12(fp)
   17008:	10800217 	ldw	r2,8(r2)
   1700c:	e0fffe17 	ldw	r3,-8(fp)
   17010:	180d883a 	mov	r6,r3
   17014:	e17fff17 	ldw	r5,-4(fp)
   17018:	1009883a 	mov	r4,r2
   1701c:	00172140 	call	17214 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17020:	1000021e 	bne	r2,zero,1702c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   17024:	e0bffd17 	ldw	r2,-12(fp)
   17028:	00000706 	br	17048 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1702c:	e0bffd17 	ldw	r2,-12(fp)
   17030:	10800017 	ldw	r2,0(r2)
   17034:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17038:	e0fffd17 	ldw	r3,-12(fp)
   1703c:	d0a00704 	addi	r2,gp,-32740
   17040:	18bfcc1e 	bne	r3,r2,16f74 <_gp+0xfffd866c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   17044:	0005883a 	mov	r2,zero
}
   17048:	e037883a 	mov	sp,fp
   1704c:	dfc00117 	ldw	ra,4(sp)
   17050:	df000017 	ldw	fp,0(sp)
   17054:	dec00204 	addi	sp,sp,8
   17058:	f800283a 	ret

0001705c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1705c:	defff904 	addi	sp,sp,-28
   17060:	dfc00615 	stw	ra,24(sp)
   17064:	df000515 	stw	fp,20(sp)
   17068:	df000504 	addi	fp,sp,20
   1706c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   17070:	00bffa04 	movi	r2,-24
   17074:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   17078:	d0a71717 	ldw	r2,-25508(gp)
   1707c:	e0bffd15 	stw	r2,-12(fp)
   17080:	e03ffe0d 	sth	zero,-8(fp)
   17084:	e0bffe0b 	ldhu	r2,-8(fp)
   17088:	e0fffe84 	addi	r3,fp,-6
   1708c:	180d883a 	mov	r6,r3
   17090:	100b883a 	mov	r5,r2
   17094:	e13ffd17 	ldw	r4,-12(fp)
   17098:	001314c0 	call	1314c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1709c:	e03ffb15 	stw	zero,-20(fp)
   170a0:	00001906 	br	17108 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   170a4:	008000f4 	movhi	r2,3
   170a8:	1095c704 	addi	r2,r2,22300
   170ac:	e0fffb17 	ldw	r3,-20(fp)
   170b0:	18c00324 	muli	r3,r3,12
   170b4:	10c5883a 	add	r2,r2,r3
   170b8:	10800017 	ldw	r2,0(r2)
   170bc:	10000f1e 	bne	r2,zero,170fc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   170c0:	008000f4 	movhi	r2,3
   170c4:	1095c704 	addi	r2,r2,22300
   170c8:	e0fffb17 	ldw	r3,-20(fp)
   170cc:	18c00324 	muli	r3,r3,12
   170d0:	10c5883a 	add	r2,r2,r3
   170d4:	e0ffff17 	ldw	r3,-4(fp)
   170d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   170dc:	d0e00b17 	ldw	r3,-32724(gp)
   170e0:	e0bffb17 	ldw	r2,-20(fp)
   170e4:	1880020e 	bge	r3,r2,170f0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   170e8:	e0bffb17 	ldw	r2,-20(fp)
   170ec:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   170f0:	e0bffb17 	ldw	r2,-20(fp)
   170f4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   170f8:	00000606 	br	17114 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   170fc:	e0bffb17 	ldw	r2,-20(fp)
   17100:	10800044 	addi	r2,r2,1
   17104:	e0bffb15 	stw	r2,-20(fp)
   17108:	e0bffb17 	ldw	r2,-20(fp)
   1710c:	10800810 	cmplti	r2,r2,32
   17110:	103fe41e 	bne	r2,zero,170a4 <_gp+0xfffd879c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   17114:	d0a71717 	ldw	r2,-25508(gp)
   17118:	1009883a 	mov	r4,r2
   1711c:	00134c40 	call	134c4 <OSSemPost>

  return rc;
   17120:	e0bffc17 	ldw	r2,-16(fp)
}
   17124:	e037883a 	mov	sp,fp
   17128:	dfc00117 	ldw	ra,4(sp)
   1712c:	df000017 	ldw	fp,0(sp)
   17130:	dec00204 	addi	sp,sp,8
   17134:	f800283a 	ret

00017138 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   17138:	defffb04 	addi	sp,sp,-20
   1713c:	df000415 	stw	fp,16(sp)
   17140:	df000404 	addi	fp,sp,16
   17144:	e13ffe15 	stw	r4,-8(fp)
   17148:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1714c:	e0bfff17 	ldw	r2,-4(fp)
   17150:	10840070 	cmpltui	r2,r2,4097
   17154:	1000021e 	bne	r2,zero,17160 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   17158:	00840004 	movi	r2,4096
   1715c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   17160:	e0fffe17 	ldw	r3,-8(fp)
   17164:	e0bfff17 	ldw	r2,-4(fp)
   17168:	1885883a 	add	r2,r3,r2
   1716c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   17170:	e0bffe17 	ldw	r2,-8(fp)
   17174:	e0bffc15 	stw	r2,-16(fp)
   17178:	00000506 	br	17190 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1717c:	e0bffc17 	ldw	r2,-16(fp)
   17180:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   17184:	e0bffc17 	ldw	r2,-16(fp)
   17188:	10800804 	addi	r2,r2,32
   1718c:	e0bffc15 	stw	r2,-16(fp)
   17190:	e0fffc17 	ldw	r3,-16(fp)
   17194:	e0bffd17 	ldw	r2,-12(fp)
   17198:	18bff836 	bltu	r3,r2,1717c <_gp+0xfffd8874>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1719c:	e0bffe17 	ldw	r2,-8(fp)
   171a0:	108007cc 	andi	r2,r2,31
   171a4:	10000226 	beq	r2,zero,171b0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   171a8:	e0bffc17 	ldw	r2,-16(fp)
   171ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   171b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   171b4:	0001883a 	nop
   171b8:	e037883a 	mov	sp,fp
   171bc:	df000017 	ldw	fp,0(sp)
   171c0:	dec00104 	addi	sp,sp,4
   171c4:	f800283a 	ret

000171c8 <atexit>:
   171c8:	200b883a 	mov	r5,r4
   171cc:	000f883a 	mov	r7,zero
   171d0:	000d883a 	mov	r6,zero
   171d4:	0009883a 	mov	r4,zero
   171d8:	00172901 	jmpi	17290 <__register_exitproc>

000171dc <exit>:
   171dc:	defffe04 	addi	sp,sp,-8
   171e0:	000b883a 	mov	r5,zero
   171e4:	dc000015 	stw	r16,0(sp)
   171e8:	dfc00115 	stw	ra,4(sp)
   171ec:	2021883a 	mov	r16,r4
   171f0:	00173a80 	call	173a8 <__call_exitprocs>
   171f4:	008000f4 	movhi	r2,3
   171f8:	109a4304 	addi	r2,r2,26892
   171fc:	11000017 	ldw	r4,0(r2)
   17200:	20800f17 	ldw	r2,60(r4)
   17204:	10000126 	beq	r2,zero,1720c <exit+0x30>
   17208:	103ee83a 	callr	r2
   1720c:	8009883a 	mov	r4,r16
   17210:	00175280 	call	17528 <_exit>

00017214 <memcmp>:
   17214:	01c000c4 	movi	r7,3
   17218:	3980192e 	bgeu	r7,r6,17280 <memcmp+0x6c>
   1721c:	2144b03a 	or	r2,r4,r5
   17220:	11c4703a 	and	r2,r2,r7
   17224:	10000f26 	beq	r2,zero,17264 <memcmp+0x50>
   17228:	20800003 	ldbu	r2,0(r4)
   1722c:	28c00003 	ldbu	r3,0(r5)
   17230:	10c0151e 	bne	r2,r3,17288 <memcmp+0x74>
   17234:	31bfff84 	addi	r6,r6,-2
   17238:	01ffffc4 	movi	r7,-1
   1723c:	00000406 	br	17250 <memcmp+0x3c>
   17240:	20800003 	ldbu	r2,0(r4)
   17244:	28c00003 	ldbu	r3,0(r5)
   17248:	31bfffc4 	addi	r6,r6,-1
   1724c:	10c00e1e 	bne	r2,r3,17288 <memcmp+0x74>
   17250:	21000044 	addi	r4,r4,1
   17254:	29400044 	addi	r5,r5,1
   17258:	31fff91e 	bne	r6,r7,17240 <_gp+0xfffd8938>
   1725c:	0005883a 	mov	r2,zero
   17260:	f800283a 	ret
   17264:	20c00017 	ldw	r3,0(r4)
   17268:	28800017 	ldw	r2,0(r5)
   1726c:	18bfee1e 	bne	r3,r2,17228 <_gp+0xfffd8920>
   17270:	31bfff04 	addi	r6,r6,-4
   17274:	21000104 	addi	r4,r4,4
   17278:	29400104 	addi	r5,r5,4
   1727c:	39bff936 	bltu	r7,r6,17264 <_gp+0xfffd895c>
   17280:	303fe91e 	bne	r6,zero,17228 <_gp+0xfffd8920>
   17284:	003ff506 	br	1725c <_gp+0xfffd8954>
   17288:	10c5c83a 	sub	r2,r2,r3
   1728c:	f800283a 	ret

00017290 <__register_exitproc>:
   17290:	defffa04 	addi	sp,sp,-24
   17294:	dc000315 	stw	r16,12(sp)
   17298:	040000f4 	movhi	r16,3
   1729c:	841a4304 	addi	r16,r16,26892
   172a0:	80c00017 	ldw	r3,0(r16)
   172a4:	dc400415 	stw	r17,16(sp)
   172a8:	dfc00515 	stw	ra,20(sp)
   172ac:	18805217 	ldw	r2,328(r3)
   172b0:	2023883a 	mov	r17,r4
   172b4:	10003726 	beq	r2,zero,17394 <__register_exitproc+0x104>
   172b8:	10c00117 	ldw	r3,4(r2)
   172bc:	010007c4 	movi	r4,31
   172c0:	20c00e16 	blt	r4,r3,172fc <__register_exitproc+0x6c>
   172c4:	1a000044 	addi	r8,r3,1
   172c8:	8800221e 	bne	r17,zero,17354 <__register_exitproc+0xc4>
   172cc:	18c00084 	addi	r3,r3,2
   172d0:	18c7883a 	add	r3,r3,r3
   172d4:	18c7883a 	add	r3,r3,r3
   172d8:	12000115 	stw	r8,4(r2)
   172dc:	10c7883a 	add	r3,r2,r3
   172e0:	19400015 	stw	r5,0(r3)
   172e4:	0005883a 	mov	r2,zero
   172e8:	dfc00517 	ldw	ra,20(sp)
   172ec:	dc400417 	ldw	r17,16(sp)
   172f0:	dc000317 	ldw	r16,12(sp)
   172f4:	dec00604 	addi	sp,sp,24
   172f8:	f800283a 	ret
   172fc:	00800034 	movhi	r2,0
   17300:	10800004 	addi	r2,r2,0
   17304:	10002626 	beq	r2,zero,173a0 <__register_exitproc+0x110>
   17308:	01006404 	movi	r4,400
   1730c:	d9400015 	stw	r5,0(sp)
   17310:	d9800115 	stw	r6,4(sp)
   17314:	d9c00215 	stw	r7,8(sp)
   17318:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   1731c:	d9400017 	ldw	r5,0(sp)
   17320:	d9800117 	ldw	r6,4(sp)
   17324:	d9c00217 	ldw	r7,8(sp)
   17328:	10001d26 	beq	r2,zero,173a0 <__register_exitproc+0x110>
   1732c:	81000017 	ldw	r4,0(r16)
   17330:	10000115 	stw	zero,4(r2)
   17334:	02000044 	movi	r8,1
   17338:	22405217 	ldw	r9,328(r4)
   1733c:	0007883a 	mov	r3,zero
   17340:	12400015 	stw	r9,0(r2)
   17344:	20805215 	stw	r2,328(r4)
   17348:	10006215 	stw	zero,392(r2)
   1734c:	10006315 	stw	zero,396(r2)
   17350:	883fde26 	beq	r17,zero,172cc <_gp+0xfffd89c4>
   17354:	18c9883a 	add	r4,r3,r3
   17358:	2109883a 	add	r4,r4,r4
   1735c:	1109883a 	add	r4,r2,r4
   17360:	21802215 	stw	r6,136(r4)
   17364:	01800044 	movi	r6,1
   17368:	12406217 	ldw	r9,392(r2)
   1736c:	30cc983a 	sll	r6,r6,r3
   17370:	4992b03a 	or	r9,r9,r6
   17374:	12406215 	stw	r9,392(r2)
   17378:	21c04215 	stw	r7,264(r4)
   1737c:	01000084 	movi	r4,2
   17380:	893fd21e 	bne	r17,r4,172cc <_gp+0xfffd89c4>
   17384:	11006317 	ldw	r4,396(r2)
   17388:	218cb03a 	or	r6,r4,r6
   1738c:	11806315 	stw	r6,396(r2)
   17390:	003fce06 	br	172cc <_gp+0xfffd89c4>
   17394:	18805304 	addi	r2,r3,332
   17398:	18805215 	stw	r2,328(r3)
   1739c:	003fc606 	br	172b8 <_gp+0xfffd89b0>
   173a0:	00bfffc4 	movi	r2,-1
   173a4:	003fd006 	br	172e8 <_gp+0xfffd89e0>

000173a8 <__call_exitprocs>:
   173a8:	defff504 	addi	sp,sp,-44
   173ac:	df000915 	stw	fp,36(sp)
   173b0:	dd400615 	stw	r21,24(sp)
   173b4:	dc800315 	stw	r18,12(sp)
   173b8:	dfc00a15 	stw	ra,40(sp)
   173bc:	ddc00815 	stw	r23,32(sp)
   173c0:	dd800715 	stw	r22,28(sp)
   173c4:	dd000515 	stw	r20,20(sp)
   173c8:	dcc00415 	stw	r19,16(sp)
   173cc:	dc400215 	stw	r17,8(sp)
   173d0:	dc000115 	stw	r16,4(sp)
   173d4:	d9000015 	stw	r4,0(sp)
   173d8:	2839883a 	mov	fp,r5
   173dc:	04800044 	movi	r18,1
   173e0:	057fffc4 	movi	r21,-1
   173e4:	008000f4 	movhi	r2,3
   173e8:	109a4304 	addi	r2,r2,26892
   173ec:	12000017 	ldw	r8,0(r2)
   173f0:	45005217 	ldw	r20,328(r8)
   173f4:	44c05204 	addi	r19,r8,328
   173f8:	a0001c26 	beq	r20,zero,1746c <__call_exitprocs+0xc4>
   173fc:	a0800117 	ldw	r2,4(r20)
   17400:	15ffffc4 	addi	r23,r2,-1
   17404:	b8000d16 	blt	r23,zero,1743c <__call_exitprocs+0x94>
   17408:	14000044 	addi	r16,r2,1
   1740c:	8421883a 	add	r16,r16,r16
   17410:	8421883a 	add	r16,r16,r16
   17414:	84402004 	addi	r17,r16,128
   17418:	a463883a 	add	r17,r20,r17
   1741c:	a421883a 	add	r16,r20,r16
   17420:	e0001e26 	beq	fp,zero,1749c <__call_exitprocs+0xf4>
   17424:	80804017 	ldw	r2,256(r16)
   17428:	e0801c26 	beq	fp,r2,1749c <__call_exitprocs+0xf4>
   1742c:	bdffffc4 	addi	r23,r23,-1
   17430:	843fff04 	addi	r16,r16,-4
   17434:	8c7fff04 	addi	r17,r17,-4
   17438:	bd7ff91e 	bne	r23,r21,17420 <_gp+0xfffd8b18>
   1743c:	00800034 	movhi	r2,0
   17440:	10800004 	addi	r2,r2,0
   17444:	10000926 	beq	r2,zero,1746c <__call_exitprocs+0xc4>
   17448:	a0800117 	ldw	r2,4(r20)
   1744c:	1000301e 	bne	r2,zero,17510 <__call_exitprocs+0x168>
   17450:	a0800017 	ldw	r2,0(r20)
   17454:	10003226 	beq	r2,zero,17520 <__call_exitprocs+0x178>
   17458:	a009883a 	mov	r4,r20
   1745c:	98800015 	stw	r2,0(r19)
   17460:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
   17464:	9d000017 	ldw	r20,0(r19)
   17468:	a03fe41e 	bne	r20,zero,173fc <_gp+0xfffd8af4>
   1746c:	dfc00a17 	ldw	ra,40(sp)
   17470:	df000917 	ldw	fp,36(sp)
   17474:	ddc00817 	ldw	r23,32(sp)
   17478:	dd800717 	ldw	r22,28(sp)
   1747c:	dd400617 	ldw	r21,24(sp)
   17480:	dd000517 	ldw	r20,20(sp)
   17484:	dcc00417 	ldw	r19,16(sp)
   17488:	dc800317 	ldw	r18,12(sp)
   1748c:	dc400217 	ldw	r17,8(sp)
   17490:	dc000117 	ldw	r16,4(sp)
   17494:	dec00b04 	addi	sp,sp,44
   17498:	f800283a 	ret
   1749c:	a0800117 	ldw	r2,4(r20)
   174a0:	80c00017 	ldw	r3,0(r16)
   174a4:	10bfffc4 	addi	r2,r2,-1
   174a8:	15c01426 	beq	r2,r23,174fc <__call_exitprocs+0x154>
   174ac:	80000015 	stw	zero,0(r16)
   174b0:	183fde26 	beq	r3,zero,1742c <_gp+0xfffd8b24>
   174b4:	95c8983a 	sll	r4,r18,r23
   174b8:	a0806217 	ldw	r2,392(r20)
   174bc:	a5800117 	ldw	r22,4(r20)
   174c0:	2084703a 	and	r2,r4,r2
   174c4:	10000b26 	beq	r2,zero,174f4 <__call_exitprocs+0x14c>
   174c8:	a0806317 	ldw	r2,396(r20)
   174cc:	2088703a 	and	r4,r4,r2
   174d0:	20000c1e 	bne	r4,zero,17504 <__call_exitprocs+0x15c>
   174d4:	89400017 	ldw	r5,0(r17)
   174d8:	d9000017 	ldw	r4,0(sp)
   174dc:	183ee83a 	callr	r3
   174e0:	a0800117 	ldw	r2,4(r20)
   174e4:	15bfbf1e 	bne	r2,r22,173e4 <_gp+0xfffd8adc>
   174e8:	98800017 	ldw	r2,0(r19)
   174ec:	153fcf26 	beq	r2,r20,1742c <_gp+0xfffd8b24>
   174f0:	003fbc06 	br	173e4 <_gp+0xfffd8adc>
   174f4:	183ee83a 	callr	r3
   174f8:	003ff906 	br	174e0 <_gp+0xfffd8bd8>
   174fc:	a5c00115 	stw	r23,4(r20)
   17500:	003feb06 	br	174b0 <_gp+0xfffd8ba8>
   17504:	89000017 	ldw	r4,0(r17)
   17508:	183ee83a 	callr	r3
   1750c:	003ff406 	br	174e0 <_gp+0xfffd8bd8>
   17510:	a0800017 	ldw	r2,0(r20)
   17514:	a027883a 	mov	r19,r20
   17518:	1029883a 	mov	r20,r2
   1751c:	003fb606 	br	173f8 <_gp+0xfffd8af0>
   17520:	0005883a 	mov	r2,zero
   17524:	003ffb06 	br	17514 <_gp+0xfffd8c0c>

00017528 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   17528:	defffd04 	addi	sp,sp,-12
   1752c:	df000215 	stw	fp,8(sp)
   17530:	df000204 	addi	fp,sp,8
   17534:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17538:	d0272045 	stb	zero,-25471(gp)
   1753c:	e0bfff17 	ldw	r2,-4(fp)
   17540:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   17544:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   17548:	10000226 	beq	r2,zero,17554 <_exit+0x2c>
    ALT_SIM_FAIL();
   1754c:	002af070 	cmpltui	zero,zero,43969
   17550:	00000106 	br	17558 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   17554:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   17558:	003fff06 	br	17558 <_gp+0xfffd8c50>
